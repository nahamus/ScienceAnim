{"version":3,"file":"index-DXpTYOsv.js","sources":["../../src/js/animations/base-animation.js","../../src/js/animations/particle-physics.js","../../src/js/animations/classical-mechanics.js","../../src/js/animations/wave-phenomena.js","../../src/js/animations/electro-magnetism.js","../../src/js/animations/quantum-physics.js","../../src/js/animations/nuclear-physics.js","../../src/js/animations/fluid-dynamics.js","../../src/js/animations/computer-science.js","../../src/js/animations/blockchain.js","../../src/js/animations.js","../../src/js/main.js"],"sourcesContent":["// Base Animation Class\r\n// Contains common functionality shared across all animation classes\r\n\r\nexport class BaseAnimation {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.animationType = 'default'; // Default animation type\r\n    }\r\n    \r\n    /**\r\n     * Draw labels on the canvas with consistent styling\r\n     * @param {string} title - The animation title to display\r\n     * @param {string} formulas - Mathematical formulas to display\r\n     * @param {number} titleY - Y position for title (default: 25)\r\n     * @param {number} formulasY - Y position for formulas (default: 45)\r\n     */\r\n    drawLabels(title, formulas, titleY = 25, formulasY = 45) {\r\n        this.ctx.save();\r\n        \r\n        // Scale text for device pixel ratio for crisper rendering\r\n        const dpr = (window && window.devicePixelRatio) ? window.devicePixelRatio : 1;\r\n        this.ctx.scale(1, 1); // keep geometry as-is; font sizes adjusted below\r\n        const titleFontSize = Math.round(16 * (dpr > 1 ? 1.0 : 1));\r\n        const formulaFontSize = Math.round(12 * (dpr > 1 ? 1.0 : 1));\r\n\r\n        // Set up text styling\r\n        this.ctx.font = `bold ${titleFontSize}px Inter`;\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Determine background type and set appropriate colors\r\n        // Most animations use dark backgrounds, so default to white text\r\n        let textColor = '#ffffff';\r\n        let shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        \r\n        // Check for animations with transparent/light backgrounds that need dark text\r\n        // Use animationType property instead of constructor.name for reliability\r\n        if (this.animationType === 'fluid-flow' || \r\n            this.animationType === 'bernoulli' ||\r\n            this.animationType === 'brownian-motion' || \r\n            this.animationType === 'diffusion' || \r\n            this.animationType === 'gas-laws' ||\r\n            this.animationType === 'pendulum' ||\r\n            this.animationType === 'orbital-motion' ||\r\n            this.animationType === 'wave-particle-duality' ||\r\n            this.animationType === 'wave-propagation') {\r\n            textColor = '#1a1a2e'; // Dark text for transparent/light backgrounds\r\n            shadowColor = 'rgba(255, 255, 255, 0.8)'; // White shadow\r\n        }\r\n        \r\n        // Add high-contrast outline for legibility on varied backgrounds\r\n        const outlineColor = (textColor === '#ffffff') ? 'rgba(0,0,0,0.9)' : 'rgba(255,255,255,0.9)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeStyle = outlineColor;\r\n        this.ctx.shadowColor = shadowColor;\r\n        this.ctx.shadowBlur = 2;\r\n\r\n        // Draw animation type label\r\n        this.ctx.fillStyle = textColor;\r\n        this.ctx.strokeText(title, this.ctx.canvas.width / 2, titleY);\r\n        this.ctx.fillText(title, this.ctx.canvas.width / 2, titleY);\r\n        \r\n        // Draw mathematical formulas in a more compact format\r\n        this.ctx.font = `${formulaFontSize}px Inter`;\r\n        this.ctx.fillStyle = textColor;\r\n        this.ctx.strokeStyle = outlineColor;\r\n        this.ctx.shadowColor = shadowColor;\r\n        this.ctx.strokeText(formulas, this.ctx.canvas.width / 2, formulasY);\r\n        this.ctx.fillText(formulas, this.ctx.canvas.width / 2, formulasY);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n    \r\n    /**\r\n     * Update stats display elements if they exist\r\n     * @param {Object} stats - The stats object\r\n     * @param {Object} elementMappings - Mapping of stat keys to element IDs\r\n     */\r\n    updateStatsWithElements(stats, elementMappings) {\r\n        Object.entries(elementMappings).forEach(([key, elementId]) => {\r\n            const element = document.getElementById(elementId);\r\n            if (element && stats[key] !== undefined) {\r\n                element.textContent = stats[key];\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Common reset functionality\r\n     */\r\n    reset() {\r\n        this.time = 0;\r\n    }\r\n    \r\n    /**\r\n     * Common update method stub\r\n     */\r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n    }\r\n    \r\n    /**\r\n     * Common render method stub\r\n     */\r\n    render() {\r\n        // Override in subclasses\r\n    }\r\n    \r\n    /**\r\n     * Common getStats method stub\r\n     */\r\n    getStats() {\r\n        return {\r\n            time: this.time || 0\r\n        };\r\n    }\r\n} ","// Particle Physics Animations\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\n// Brownian Motion Simulation\r\nexport class BrownianMotion extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'brownian-motion';\r\n        this.particles = [];\r\n        this.particleCount = 15;\r\n        this.speed = 1;\r\n        this.temperature = 1;\r\n        this.showTrails = false;\r\n        this.showVelocityVectors = false;\r\n        this.showTemperatureHeatmap = false;\r\n        this.showVelocityDistribution = false;\r\n        this.showMeanFreePath = false;\r\n        this.particleSize = 4;\r\n        this.collisionCount = 0;\r\n        this.meanFreePath = 0;\r\n        this.velocityData = [];\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            const vx = (Math.random() - 0.5) * 2;\r\n            const vy = (Math.random() - 0.5) * 2;\r\n            const velocity = Math.sqrt(vx * vx + vy * vy);\r\n            \r\n            this.particles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: vx,\r\n                vy: vy,\r\n                velocity: velocity,\r\n                trail: [],\r\n                lastCollisionTime: 0,\r\n                distanceTraveled: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        this.temperature = temp;\r\n    }\r\n    \r\n    setShowTrails(show) {\r\n        this.showTrails = show;\r\n        if (!show) {\r\n            this.particles.forEach(p => p.trail = []);\r\n        }\r\n    }\r\n    \r\n    setShowVelocityVectors(show) {\r\n        this.showVelocityVectors = show;\r\n    }\r\n    \r\n    setShowTemperatureHeatmap(show) {\r\n        this.showTemperatureHeatmap = show;\r\n    }\r\n    \r\n    setShowVelocityDistribution(show) {\r\n        this.showVelocityDistribution = show;\r\n    }\r\n    \r\n    setShowMeanFreePath(show) {\r\n        this.showMeanFreePath = show;\r\n    }\r\n    \r\n    setParticleSize(size) {\r\n        this.particleSize = size;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        \r\n        // Store old positions for collision detection\r\n        const oldPositions = this.particles.map(p => ({ x: p.x, y: p.y }));\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Add random motion based on temperature (Brownian motion)\r\n            particle.vx += (Math.random() - 0.5) * this.temperature * 0.1;\r\n            particle.vy += (Math.random() - 0.5) * this.temperature * 0.1;\r\n            \r\n            // Apply damping\r\n            particle.vx *= 0.99;\r\n            particle.vy *= 0.99;\r\n            \r\n            // Update position\r\n            const oldX = particle.x;\r\n            const oldY = particle.y;\r\n            particle.x += particle.vx * dt * 50;\r\n            particle.y += particle.vy * dt * 50;\r\n            \r\n            // Update velocity magnitude\r\n            particle.velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            \r\n            // Update distance traveled for mean free path\r\n            particle.distanceTraveled += Math.sqrt(\r\n                (particle.x - oldX) * (particle.x - oldX) + \r\n                (particle.y - oldY) * (particle.y - oldY)\r\n            );\r\n            \r\n            // Bounce off walls\r\n            if (particle.x < 0 || particle.x > this.ctx.canvas.width) {\r\n                particle.vx *= -0.8;\r\n                particle.x = Math.max(0, Math.min(this.ctx.canvas.width, particle.x));\r\n                this.collisionCount++;\r\n                particle.lastCollisionTime = this.time;\r\n            }\r\n            if (particle.y < 0 || particle.y > this.ctx.canvas.height) {\r\n                particle.vy *= -0.8;\r\n                particle.y = Math.max(0, Math.min(this.ctx.canvas.height, particle.y));\r\n                this.collisionCount++;\r\n                particle.lastCollisionTime = this.time;\r\n            }\r\n            \r\n            // Check particle-to-particle collisions\r\n            for (let j = index + 1; j < this.particles.length; j++) {\r\n                const other = this.particles[j];\r\n                const dx = particle.x - other.x;\r\n                const dy = particle.y - other.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance < this.particleSize * 2) {\r\n                    // Simple elastic collision\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const speed1 = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n                    const speed2 = Math.sqrt(other.vx * other.vx + other.vy * other.vy);\r\n                    \r\n                    // Swap velocities\r\n                    const tempVx = particle.vx;\r\n                    const tempVy = particle.vy;\r\n                    particle.vx = other.vx;\r\n                    particle.vy = other.vy;\r\n                    other.vx = tempVx;\r\n                    other.vy = tempVy;\r\n                    \r\n                    this.collisionCount++;\r\n                    particle.lastCollisionTime = this.time;\r\n                    other.lastCollisionTime = this.time;\r\n                    \r\n                    // Separate particles\r\n                    const overlap = this.particleSize * 2 - distance;\r\n                    const moveX = (overlap * dx) / distance / 2;\r\n                    const moveY = (overlap * dy) / distance / 2;\r\n                    particle.x += moveX;\r\n                    particle.y += moveY;\r\n                    other.x -= moveX;\r\n                    other.y -= moveY;\r\n                }\r\n            }\r\n            \r\n            // Update trail\r\n            if (this.showTrails) {\r\n                particle.trail.push({ x: particle.x, y: particle.y });\r\n                if (particle.trail.length > 25) particle.trail.shift();\r\n            } else {\r\n                particle.trail.length = 0;\r\n            }\r\n        });\r\n        \r\n        // Update velocity distribution data\r\n        if (this.showVelocityDistribution) {\r\n            this.velocityData.push(...this.particles.map(p => p.velocity));\r\n            if (this.velocityData.length > 1000) {\r\n                this.velocityData = this.velocityData.slice(-500);\r\n            }\r\n        }\r\n        \r\n        // Calculate mean free path\r\n        if (this.showMeanFreePath && this.collisionCount > 0) {\r\n            const totalDistance = this.particles.reduce((sum, p) => sum + p.distanceTraveled, 0);\r\n            this.meanFreePath = totalDistance / this.collisionCount;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw temperature heatmap\r\n        if (this.showTemperatureHeatmap) {\r\n            this.drawTemperatureHeatmap();\r\n        }\r\n        \r\n        // Draw velocity distribution\r\n        if (this.showVelocityDistribution) {\r\n            this.drawVelocityDistribution();\r\n        }\r\n        \r\n        // Draw mean free path info\r\n        if (this.showMeanFreePath) {\r\n            this.drawMeanFreePathInfo();\r\n        }\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Draw particle with velocity-based color\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = this.getVelocityColor(particle.velocity);\r\n            this.ctx.arc(particle.x, particle.y, this.particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add particle border\r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n        \r\n        // Draw canvas labels\r\n        this.drawBrownianLabels();\r\n    }\r\n    \r\n    getVelocityColor(velocity) {\r\n        // Color particles based on velocity (red = fast, blue = slow)\r\n        const maxVelocity = 3;\r\n        const normalizedVelocity = Math.min(velocity / maxVelocity, 1);\r\n        \r\n        if (normalizedVelocity < 0.5) {\r\n            // Blue to green\r\n            const t = normalizedVelocity * 2;\r\n            return `rgb(0, ${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))})`;\r\n        } else {\r\n            // Green to red\r\n            const t = (normalizedVelocity - 0.5) * 2;\r\n            return `rgb(${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))}, 0)`;\r\n        }\r\n    }\r\n    \r\n    drawTemperatureHeatmap() {\r\n        const gridSize = 20;\r\n        const cols = Math.ceil(this.ctx.canvas.width / gridSize);\r\n        const rows = Math.ceil(this.ctx.canvas.height / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                const centerX = j * gridSize + gridSize / 2;\r\n                const centerY = i * gridSize + gridSize / 2;\r\n                \r\n                // Calculate local temperature based on nearby particles\r\n                let localTemp = 0;\r\n                let particleCount = 0;\r\n                \r\n                this.particles.forEach(particle => {\r\n                    const dx = particle.x - centerX;\r\n                    const dy = particle.y - centerY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < gridSize) {\r\n                        localTemp += particle.velocity;\r\n                        particleCount++;\r\n                    }\r\n                });\r\n                \r\n                if (particleCount > 0) {\r\n                    localTemp /= particleCount;\r\n                    const alpha = Math.min(localTemp / 3, 0.3);\r\n                    this.ctx.fillStyle = `rgba(255, 100, 100, ${alpha})`;\r\n                    this.ctx.fillRect(j * gridSize, i * gridSize, gridSize, gridSize);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityDistribution() {\r\n        const graphWidth = 200;\r\n        const graphHeight = 100;\r\n        const graphX = this.ctx.canvas.width - graphWidth - 20;\r\n        const graphY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.velocityData.length > 0) {\r\n            // Create histogram\r\n            const bins = 20;\r\n            const histogram = new Array(bins).fill(0);\r\n            const maxVelocity = Math.max(...this.velocityData);\r\n            \r\n            this.velocityData.forEach(velocity => {\r\n                const binIndex = Math.floor((velocity / maxVelocity) * (bins - 1));\r\n                if (binIndex >= 0 && binIndex < bins) {\r\n                    histogram[binIndex]++;\r\n                }\r\n            });\r\n            \r\n            // Draw histogram\r\n            const maxCount = Math.max(...histogram);\r\n            const barWidth = graphWidth / bins;\r\n            \r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            for (let i = 0; i < bins; i++) {\r\n                const barHeight = (histogram[i] / maxCount) * (graphHeight - 20);\r\n                this.ctx.fillRect(\r\n                    graphX + i * barWidth + 2, \r\n                    graphY + graphHeight - 10 - barHeight, \r\n                    barWidth - 4, \r\n                    barHeight\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Velocity Distribution', graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    drawMeanFreePathInfo() {\r\n        const infoX = 20;\r\n        const infoY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(infoX, infoY, 200, 80);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(infoX, infoY, 200, 80);\r\n        \r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText(`Collisions: ${this.collisionCount}`, infoX + 10, infoY + 20);\r\n        this.ctx.fillText(`Mean Free Path: ${this.meanFreePath.toFixed(1)}`, infoX + 10, infoY + 40);\r\n        this.ctx.fillText(`Temperature: ${this.temperature.toFixed(1)}`, infoX + 10, infoY + 60);\r\n    }\r\n    \r\n    getStats() {\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            avgSpeed: avgSpeed,\r\n            time: this.time,\r\n            collisionCount: this.collisionCount,\r\n            meanFreePath: this.meanFreePath,\r\n            temperature: this.temperature\r\n        };\r\n    }\r\n    \r\n    drawBrownianLabels() {\r\n        this.drawLabels(\r\n            'Brownian Motion',\r\n            '⟨v²⟩ = 3kBT/m  |  λ = 1/(√2πd²n)  |  D = kBT/(6πηr)'\r\n        );\r\n    }\r\n}\r\n\r\n// Diffusion Simulation\r\nexport class Diffusion extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'diffusion';\r\n        this.particles = [];\r\n        this.particleCount = 200;\r\n        this.speed = 1;\r\n        this.diffusionRate = 1;\r\n        this.concentrationGradient = 1;\r\n        this.showConcentration = true; // Default to showing concentration\r\n        this.particleSize = 4;\r\n        this.concentrationMap = [];\r\n        this.diffusionStarted = false; // New: control when diffusion starts\r\n        this.showConcentrationProfile = true; // New: show concentration profile\r\n        this.showParticleTrails = false; // New: show particle trails\r\n        \r\n        this.initializeParticles();\r\n        this.initializeConcentrationMap();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const startRegion = this.ctx.canvas.width * 0.2; // Concentrated in left 20%\r\n        \r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: Math.random() * startRegion, // Start in concentrated region\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: 0,\r\n                vy: 0,\r\n                color: '#FF6B6B', // Consistent red color for better visibility\r\n                trail: [] // New: store trail positions\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeConcentrationMap() {\r\n        this.concentrationMap = [];\r\n        const gridSize = 15; // Smaller grid for better resolution\r\n        const cols = Math.ceil(this.ctx.canvas.width / gridSize);\r\n        const rows = Math.ceil(this.ctx.canvas.height / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            this.concentrationMap[i] = [];\r\n            for (let j = 0; j < cols; j++) {\r\n                // Gentler concentration gradient - high on left, low on right\r\n                const x = j / cols;\r\n                this.concentrationMap[i][j] = Math.max(0, 1 - x * 1.5); // Gentler gradient\r\n            }\r\n        }\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setDiffusionRate(rate) {\r\n        this.diffusionRate = rate;\r\n    }\r\n    \r\n    setConcentrationGradient(gradient) {\r\n        this.concentrationGradient = gradient;\r\n        this.initializeConcentrationMap();\r\n    }\r\n    \r\n    setParticleSize(size) {\r\n        this.particleSize = size;\r\n    }\r\n    \r\n    setShowConcentration(show) {\r\n        this.showConcentration = show;\r\n    }\r\n    \r\n    setShowConcentrationProfile(show) {\r\n        this.showConcentrationProfile = show;\r\n    }\r\n    \r\n    setShowParticleTrails(show) {\r\n        this.showParticleTrails = show;\r\n    }\r\n    \r\n    startDiffusion() {\r\n        this.diffusionStarted = true;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.diffusionStarted = false;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 10; // Reduced speed for better observation\r\n        \r\n        // Only update particles if diffusion has started\r\n        if (!this.diffusionStarted) return;\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Check if particle coordinates are valid before updating\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                // Reset invalid particle to a valid position\r\n                particle.x = Math.random() * this.ctx.canvas.width * 0.2;\r\n                particle.y = Math.random() * this.ctx.canvas.height;\r\n                particle.vx = 0;\r\n                particle.vy = 0;\r\n                return;\r\n            }\r\n            \r\n            // Add random diffusion motion\r\n            particle.vx += (Math.random() - 0.5) * this.diffusionRate * 0.5;\r\n            particle.vy += (Math.random() - 0.5) * this.diffusionRate * 0.5;\r\n            \r\n            // Apply concentration gradient force (particles move from high to low concentration)\r\n            const gridX = Math.floor(particle.x / 15);\r\n            const gridY = Math.floor(particle.y / 15);\r\n            if (gridX > 0 && gridX < this.concentrationMap[0].length - 1 && \r\n                gridY >= 0 && gridY < this.concentrationMap.length) {\r\n                const concentrationDiff = this.concentrationMap[gridY]?.[gridX] - this.concentrationMap[gridY]?.[gridX + 1];\r\n                // Reduce gradient force over time to allow for uniform distribution\r\n                const timeFactor = Math.max(0.1, 1 - (this.time / 10000)); // Gradually reduce force\r\n                particle.vx += concentrationDiff * 0.1 * timeFactor; // Weaker, time-dependent gradient force\r\n            }\r\n            \r\n            // Apply damping\r\n            particle.vx *= 0.98;\r\n            particle.vy *= 0.98;\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * dt * 30;\r\n            particle.y += particle.vy * dt * 30;\r\n            \r\n            // Update particle trail\r\n            if (this.showParticleTrails) {\r\n                particle.trail.push({ x: particle.x, y: particle.y });\r\n                if (particle.trail.length > 20) {\r\n                    particle.trail.shift();\r\n                }\r\n            }\r\n            \r\n            // Realistic boundary conditions - particles stay within canvas\r\n            if (particle.x < 0) {\r\n                particle.x = 0;\r\n                particle.vx *= -0.5; // Bounce with energy loss\r\n            }\r\n            if (particle.x > this.ctx.canvas.width) {\r\n                particle.x = this.ctx.canvas.width;\r\n                particle.vx *= -0.5; // Bounce with energy loss\r\n            }\r\n            if (particle.y < 0) {\r\n                particle.y = 0;\r\n                particle.vy *= -0.5; // Bounce with energy loss\r\n            }\r\n            if (particle.y > this.ctx.canvas.height) {\r\n                particle.y = this.ctx.canvas.height;\r\n                particle.vy *= -0.5; // Bounce with energy loss\r\n            }\r\n            \r\n            // Final validation check\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                // Reset if still invalid after update\r\n                particle.x = Math.random() * this.ctx.canvas.width * 0.2;\r\n                particle.y = Math.random() * this.ctx.canvas.height;\r\n                particle.vx = 0;\r\n                particle.vy = 0;\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Draw enhanced concentration heatmap with modern gradient\r\n        if (this.showConcentration) {\r\n            const gridSize = 15;\r\n            for (let i = 0; i < this.concentrationMap.length; i++) {\r\n                for (let j = 0; j < this.concentrationMap[i].length; j++) {\r\n                    const concentration = this.concentrationMap[i][j];\r\n                    const alpha = concentration * 0.8; // Enhanced visibility\r\n                    \r\n                    // Create gradient for each grid cell\r\n                    const gradient = this.ctx.createLinearGradient(\r\n                        j * gridSize, i * gridSize,\r\n                        (j + 1) * gridSize, (i + 1) * gridSize\r\n                    );\r\n                    gradient.addColorStop(0, `rgba(102, 126, 234, ${alpha * 0.8})`);\r\n                    gradient.addColorStop(0.5, `rgba(118, 75, 162, ${alpha})`);\r\n                    gradient.addColorStop(1, `rgba(102, 126, 234, ${alpha * 0.6})`);\r\n                    \r\n                    this.ctx.fillStyle = gradient;\r\n                    this.ctx.fillRect(j * gridSize, i * gridSize, gridSize, gridSize);\r\n                    \r\n                    // Add subtle border for grid definition\r\n                    this.ctx.strokeStyle = `rgba(255, 255, 255, ${alpha * 0.1})`;\r\n                    this.ctx.lineWidth = 0.5;\r\n                    this.ctx.strokeRect(j * gridSize, i * gridSize, gridSize, gridSize);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Draw enhanced particle trails with gradient\r\n        if (this.showParticleTrails) {\r\n            this.particles.forEach(particle => {\r\n                if (particle.trail.length > 1) {\r\n                    // Create gradient trail\r\n                    const gradient = this.ctx.createLinearGradient(\r\n                        particle.trail[0].x, particle.trail[0].y,\r\n                        particle.trail[particle.trail.length - 1].x, \r\n                        particle.trail[particle.trail.length - 1].y\r\n                    );\r\n                    gradient.addColorStop(0, 'rgba(255, 107, 107, 0.8)');\r\n                    gradient.addColorStop(0.5, 'rgba(255, 107, 107, 0.4)');\r\n                    gradient.addColorStop(1, 'rgba(255, 107, 107, 0.1)');\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = gradient;\r\n                    this.ctx.lineWidth = 2;\r\n                    this.ctx.lineCap = 'round';\r\n                    this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                    for (let i = 1; i < particle.trail.length; i++) {\r\n                        this.ctx.lineTo(particle.trail[i].x, particle.trail[i].y);\r\n                    }\r\n                    this.ctx.stroke();\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Draw particles with modern enhanced styling\r\n        this.particles.forEach(particle => {\r\n            // Check if particle coordinates are valid\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                return; // Skip invalid particles\r\n            }\r\n            \r\n            // Calculate particle velocity for dynamic effects\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const velocityFactor = Math.min(velocity / 5, 1); // Normalize velocity\r\n            \r\n            // Enhanced glow effect based on velocity\r\n            this.ctx.shadowColor = `rgba(255, 107, 107, ${0.4 + velocityFactor * 0.3})`;\r\n            this.ctx.shadowBlur = 12 + velocityFactor * 8;\r\n            \r\n            // Create dynamic gradient based on velocity\r\n            const gradient = this.ctx.createRadialGradient(\r\n                particle.x, particle.y, 0,\r\n                particle.x, particle.y, this.particleSize * (1 + velocityFactor * 0.3)\r\n            );\r\n            \r\n            // Dynamic colors based on velocity\r\n            const baseColor = velocityFactor > 0.5 ? 255 : 200;\r\n            const alpha = 0.9 + velocityFactor * 0.1;\r\n            \r\n            gradient.addColorStop(0, `rgba(${baseColor}, 107, 107, ${alpha})`);\r\n            gradient.addColorStop(0.6, `rgba(255, 107, 107, ${0.8 - velocityFactor * 0.2})`);\r\n            gradient.addColorStop(1, `rgba(255, 107, 107, 0.4)`);\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(particle.x, particle.y, this.particleSize * (1 + velocityFactor * 0.2), 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Enhanced border with velocity-based opacity\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.strokeStyle = `rgba(255, 255, 255, ${0.9 + velocityFactor * 0.1})`;\r\n            this.ctx.lineWidth = 1.5;\r\n            this.ctx.stroke();\r\n            \r\n            // Add inner highlight for depth\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + velocityFactor * 0.2})`;\r\n            this.ctx.arc(particle.x - this.particleSize * 0.3, particle.y - this.particleSize * 0.3, \r\n                         this.particleSize * 0.3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Draw concentration profile\r\n        if (this.showConcentrationProfile) {\r\n            this.drawConcentrationProfile();\r\n        }\r\n        \r\n        // Draw start barrier if diffusion hasn't started\r\n        if (!this.diffusionStarted) {\r\n            this.drawStartBarrier();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawDiffusionLabels();\r\n    }\r\n    \r\n    drawConcentrationProfile() {\r\n        const profileHeight = 100;\r\n        const profileY = this.ctx.canvas.height - profileHeight - 25;\r\n        const profileWidth = this.ctx.canvas.width - 50;\r\n        \r\n        // Enhanced background with glassmorphism effect\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';\r\n        this.ctx.fillRect(25, profileY, profileWidth, profileHeight);\r\n        \r\n        // Add subtle border and shadow\r\n        this.ctx.strokeStyle = 'rgba(102, 126, 234, 0.3)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(25, profileY, profileWidth, profileHeight);\r\n        \r\n        // Add inner shadow effect\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        this.ctx.fillRect(27, profileY + 2, profileWidth - 4, profileHeight - 4);\r\n        \r\n        // Calculate concentration profile\r\n        const bins = 50;\r\n        const binWidth = profileWidth / bins;\r\n        const concentrationProfile = new Array(bins).fill(0);\r\n        \r\n        this.particles.forEach(particle => {\r\n            const binIndex = Math.floor((particle.x / this.ctx.canvas.width) * bins);\r\n            if (binIndex >= 0 && binIndex < bins) {\r\n                concentrationProfile[binIndex]++;\r\n            }\r\n        });\r\n        \r\n        // Normalize to fit in profile height\r\n        const maxConcentration = Math.max(...concentrationProfile);\r\n        const scale = (profileHeight - 20) / Math.max(maxConcentration, 1);\r\n        \r\n        // Draw enhanced concentration profile with gradient\r\n        const gradient = this.ctx.createLinearGradient(25, profileY, 25 + profileWidth, profileY);\r\n        gradient.addColorStop(0, '#FF6B6B');\r\n        gradient.addColorStop(0.5, '#667eea');\r\n        gradient.addColorStop(1, '#764ba2');\r\n        \r\n        this.ctx.strokeStyle = gradient;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(25, profileY + profileHeight - 15);\r\n        \r\n        for (let i = 0; i < bins; i++) {\r\n            const x = 25 + i * binWidth;\r\n            const y = profileY + profileHeight - 15 - (concentrationProfile[i] * scale);\r\n            this.ctx.lineTo(x, y);\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Add area fill under the curve\r\n        this.ctx.fillStyle = 'rgba(255, 107, 107, 0.2)';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(25, profileY + profileHeight - 15);\r\n        for (let i = 0; i < bins; i++) {\r\n            const x = 25 + i * binWidth;\r\n            const y = profileY + profileHeight - 15 - (concentrationProfile[i] * scale);\r\n            this.ctx.lineTo(x, y);\r\n        }\r\n        this.ctx.lineTo(25 + profileWidth, profileY + profileHeight - 15);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced labels with better styling\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Concentration Profile', this.ctx.canvas.width / 2, profileY - 8);\r\n        \r\n        // Add gradient text effect for labels\r\n        const labelGradient = this.ctx.createLinearGradient(30, profileY + 15, this.ctx.canvas.width - 30, profileY + 15);\r\n        labelGradient.addColorStop(0, '#FF6B6B');\r\n        labelGradient.addColorStop(1, '#764ba2');\r\n        \r\n        this.ctx.fillStyle = labelGradient;\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.fillText('High Concentration', 35, profileY + 20);\r\n        this.ctx.fillText('Low Concentration', this.ctx.canvas.width - 35, profileY + 20);\r\n    }\r\n    \r\n    drawStartBarrier() {\r\n        // Draw enhanced barrier with gradient and glow\r\n        const barrierX = this.ctx.canvas.width * 0.2;\r\n        \r\n        // Create gradient for barrier\r\n        const barrierGradient = this.ctx.createLinearGradient(barrierX - 2, 0, barrierX + 2, 0);\r\n        barrierGradient.addColorStop(0, 'rgba(255, 0, 0, 0.8)');\r\n        barrierGradient.addColorStop(0.5, 'rgba(255, 107, 107, 1)');\r\n        barrierGradient.addColorStop(1, 'rgba(255, 0, 0, 0.8)');\r\n        \r\n        this.ctx.strokeStyle = barrierGradient;\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.setLineDash([15, 8]);\r\n        this.ctx.lineCap = 'round';\r\n        \r\n        // Add glow effect\r\n        this.ctx.shadowColor = 'rgba(255, 0, 0, 0.6)';\r\n        this.ctx.shadowBlur = 10;\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(barrierX, 0);\r\n        this.ctx.lineTo(barrierX, this.ctx.canvas.height);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.setLineDash([]);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced instruction text with modern styling\r\n        const text = 'Click or tap to start diffusion';\r\n        const textWidth = this.ctx.measureText(text).width;\r\n        \r\n        // Create glassmorphism background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';\r\n        this.ctx.fillRect(this.ctx.canvas.width / 2 - textWidth / 2 - 20, \r\n                         this.ctx.canvas.height - 60, textWidth + 40, 40);\r\n        \r\n        // Add border and shadow\r\n        this.ctx.strokeStyle = 'rgba(102, 126, 234, 0.3)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(this.ctx.canvas.width / 2 - textWidth / 2 - 20, \r\n                           this.ctx.canvas.height - 60, textWidth + 40, 40);\r\n        \r\n        // Add gradient text\r\n        const textGradient = this.ctx.createLinearGradient(\r\n            this.ctx.canvas.width / 2 - textWidth / 2, this.ctx.canvas.height - 50,\r\n            this.ctx.canvas.width / 2 + textWidth / 2, this.ctx.canvas.height - 50\r\n        );\r\n        textGradient.addColorStop(0, '#667eea');\r\n        textGradient.addColorStop(1, '#764ba2');\r\n        \r\n        this.ctx.fillStyle = textGradient;\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(text, this.ctx.canvas.width / 2, this.ctx.canvas.height - 35);\r\n    }\r\n    \r\n    getStats() {\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Calculate concentration spread\r\n        const leftParticles = this.particles.filter(p => p.x < this.ctx.canvas.width / 2).length;\r\n        const rightParticles = this.particles.length - leftParticles;\r\n        const concentrationSpread = Math.abs(leftParticles - rightParticles) / this.particles.length;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            avgSpeed: avgSpeed,\r\n            concentrationSpread: concentrationSpread,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawDiffusionLabels() {\r\n        this.drawLabels(\r\n            'Particle Diffusion',\r\n            '∂c/∂t = D∇²c  |  J = -D∇c  |  D = kBT/(6πηr)'\r\n        );\r\n    }\r\n}\r\n\r\n// Gas Laws Simulation\r\nexport class GasLaws extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'gas-laws';\r\n        this.particles = [];\r\n        this.particleCount = 50;\r\n        this.temperature = 300; // Kelvin\r\n        this.volume = 300; // Container height\r\n        this.pressure = 1.0; // External pressure\r\n        this.speed = 1.0;\r\n        this.showPressureGauge = true;\r\n        this.showParticleTrails = false;\r\n        this.showGasLaws = false;\r\n        this.showPressureHeatmap = false;\r\n        this.showVelocityDistribution = false;\r\n        this.showGasLawGraph = false;\r\n        this.showParticleCollisions = false;\r\n        this.lawType = 'boyle';\r\n        this.containerWidth = 200;\r\n        this.containerX = 300;\r\n        this.pistonY = 400 - this.volume;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.pressureHistory = [];\r\n        this.volumeHistory = [];\r\n        this.temperatureHistory = [];\r\n        this.initialConditions = {\r\n            pressure: 1.0,\r\n            volume: 300,\r\n            temperature: 300\r\n        };\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: this.containerX + Math.random() * this.containerWidth,\r\n                y: this.pistonY + this.volume + Math.random() * (this.volume * 0.8),\r\n                vx: (Math.random() - 0.5) * this.temperature * 0.1,\r\n                vy: (Math.random() - 0.5) * this.temperature * 0.1\r\n            });\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        const prev = this.temperature || 300;\r\n        this.temperature = temp;\r\n        // Scale velocities relative to previous temperature to avoid compounding\r\n        const factor = Math.sqrt((temp || 300) / (prev || 300));\r\n        this.particles.forEach(particle => {\r\n            particle.vx *= factor;\r\n            particle.vy *= factor;\r\n        });\r\n    }\r\n    \r\n    setVolume(vol) {\r\n        this.volume = vol;\r\n        this.pistonY = 400 - this.volume;\r\n        // Adjust particle positions to stay in container\r\n        this.particles.forEach(particle => {\r\n            if (particle.y > this.pistonY + this.volume) {\r\n                particle.y = this.pistonY + this.volume - 10;\r\n            }\r\n        });\r\n    }\r\n    \r\n    setPressure(pressure) {\r\n        this.pressure = pressure;\r\n    }\r\n    \r\n    setShowPressureGauge(show) {\r\n        this.showPressureGauge = show;\r\n    }\r\n    \r\n    setShowPressureHeatmap(show) {\r\n        this.showPressureHeatmap = show;\r\n    }\r\n    \r\n    setShowVelocityDistribution(show) {\r\n        this.showVelocityDistribution = show;\r\n    }\r\n    \r\n    setShowGasLawGraph(show) {\r\n        this.showGasLawGraph = show;\r\n    }\r\n    \r\n    setShowParticleCollisions(show) {\r\n        this.showParticleCollisions = show;\r\n    }\r\n    \r\n    setLawType(law) {\r\n        this.lawType = law;\r\n        // Reset to initial conditions when changing law\r\n        this.pressure = this.initialConditions.pressure;\r\n        this.volume = this.initialConditions.volume;\r\n        this.temperature = this.initialConditions.temperature;\r\n        this.pistonY = 400 - this.volume;\r\n        this.reset();\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.pressureHistory = [];\r\n        this.volumeHistory = [];\r\n        this.temperatureHistory = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 1; // Reduced speed for better observation\r\n        \r\n        // Update particles with collision detection\r\n        this.particles.forEach((particle, index) => {\r\n            // Update position\r\n            particle.x += particle.vx * dt * 30;\r\n            particle.y += particle.vy * dt * 30;\r\n            \r\n            // Bounce off container walls\r\n            if (particle.x < this.containerX || particle.x > this.containerX + this.containerWidth) {\r\n                particle.vx *= -0.8;\r\n                particle.x = Math.max(this.containerX, Math.min(this.containerX + this.containerWidth, particle.x));\r\n                this.collisionCount++;\r\n            }\r\n            \r\n            // Bounce off piston and bottom\r\n            if (particle.y < this.pistonY || particle.y > this.pistonY + this.volume) {\r\n                particle.vy *= -0.8;\r\n                particle.y = Math.max(this.pistonY, Math.min(this.pistonY + this.volume, particle.y));\r\n                this.collisionCount++;\r\n            }\r\n            \r\n            // Particle-to-particle collisions\r\n            if (this.showParticleCollisions) {\r\n                for (let j = index + 1; j < this.particles.length; j++) {\r\n                    const other = this.particles[j];\r\n                    const dx = particle.x - other.x;\r\n                    const dy = particle.y - other.y;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < 6) { // Collision radius\r\n                        // Simple elastic collision\r\n                        const tempVx = particle.vx;\r\n                        const tempVy = particle.vy;\r\n                        particle.vx = other.vx;\r\n                        particle.vy = other.vy;\r\n                        other.vx = tempVx;\r\n                        other.vy = tempVy;\r\n                        \r\n                        this.collisionCount++;\r\n                        \r\n                        // Separate particles\r\n                        const overlap = 6 - distance;\r\n                        const moveX = (overlap * dx) / distance / 2;\r\n                        const moveY = (overlap * dy) / distance / 2;\r\n                        particle.x += moveX;\r\n                        particle.y += moveY;\r\n                        other.x -= moveX;\r\n                        other.y -= moveY;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n        });\r\n        \r\n        // Draw trails after updating positions so lines point forward\r\n        if (this.showTrails) {\r\n            this.particles.forEach(p => {\r\n                if (p.trail.length > 1) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = 'rgba(255,255,255,0.35)';\r\n                    this.ctx.lineWidth = 1;\r\n                    this.ctx.moveTo(p.trail[0].x, p.trail[0].y);\r\n                    for (let i = 1; i < p.trail.length; i++) {\r\n                        this.ctx.lineTo(p.trail[i].x, p.trail[i].y);\r\n                    }\r\n                    this.ctx.stroke();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Update velocity distribution data\r\n        if (this.showVelocityDistribution) {\r\n            this.velocityData.push(...this.particles.map(p => Math.sqrt(p.vx * p.vx + p.vy * p.vy)));\r\n            if (this.velocityData.length > 1000) {\r\n                this.velocityData = this.velocityData.slice(-500);\r\n            }\r\n        }\r\n        \r\n        // Update history data for graphs (always collect data)\r\n        const currentPressure = this.calculatePressure();\r\n        this.pressureHistory.push(currentPressure);\r\n        this.volumeHistory.push(this.volume);\r\n        this.temperatureHistory.push(this.temperature);\r\n        \r\n        if (this.pressureHistory.length > 100) {\r\n            this.pressureHistory.shift();\r\n            this.volumeHistory.shift();\r\n            this.temperatureHistory.shift();\r\n        }\r\n        \r\n        // Calculate and apply pressure effects (already computed above)\r\n    }\r\n    \r\n    calculatePressure() {\r\n        // Calculate pressure based on particle collisions and container volume\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Pressure is proportional to particle density and average kinetic energy\r\n        const calculatedPressure = particleDensity * avgSpeed * avgSpeed * 0.01;\r\n        \r\n        // Apply gas law relationships based on current law type\r\n        this.applyGasLaw();\r\n        \r\n        // Adjust piston position based on pressure difference\r\n        const pressureDiff = calculatedPressure - this.pressure;\r\n        this.pistonY += pressureDiff * 0.1;\r\n        this.pistonY = Math.max(100, Math.min(350, this.pistonY)); // Limit piston movement\r\n        this.volume = 400 - this.pistonY;\r\n        \r\n        return calculatedPressure;\r\n    }\r\n    \r\n    applyGasLaw() {\r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                // Boyle's Law: P₁V₁ = P₂V₂ (constant temperature)\r\n                const boyleConstant = this.initialConditions.pressure * this.initialConditions.volume;\r\n                if (this.volume !== this.initialConditions.volume) {\r\n                    this.pressure = boyleConstant / this.volume;\r\n                }\r\n                break;\r\n                \r\n            case 'charles':\r\n                // Charles's Law: V₁/T₁ = V₂/T₂ (constant pressure)\r\n                const charlesConstant = this.initialConditions.volume / this.initialConditions.temperature;\r\n                if (this.temperature !== this.initialConditions.temperature) {\r\n                    this.volume = charlesConstant * this.temperature;\r\n                    this.pistonY = 400 - this.volume;\r\n                }\r\n                break;\r\n                \r\n            case 'gay-lussac':\r\n                // Gay-Lussac's Law: P₁/T₁ = P₂/T₂ (constant volume)\r\n                const gayLussacConstant = this.initialConditions.pressure / this.initialConditions.temperature;\r\n                if (this.temperature !== this.initialConditions.temperature) {\r\n                    this.pressure = gayLussacConstant * this.temperature;\r\n                }\r\n                break;\r\n                \r\n            case 'combined':\r\n                // Combined Gas Law: P₁V₁/T₁ = P₂V₂/T₂\r\n                const combinedConstant = (this.initialConditions.pressure * this.initialConditions.volume) / this.initialConditions.temperature;\r\n                if (this.volume !== this.initialConditions.volume || this.temperature !== this.initialConditions.temperature) {\r\n                    this.pressure = (combinedConstant * this.temperature) / this.volume;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw pressure heatmap\r\n        if (this.showPressureHeatmap) {\r\n            this.drawPressureHeatmap();\r\n        }\r\n        \r\n        // Draw velocity distribution\r\n        if (this.showVelocityDistribution) {\r\n            this.drawVelocityDistribution();\r\n        }\r\n        \r\n        // Draw gas law graph\r\n        if (this.showGasLawGraph) {\r\n            this.drawGasLawGraph();\r\n        }\r\n        \r\n        // Draw enhanced container with better visual design\r\n        this.drawEnhancedContainer();\r\n        \r\n        // Draw particles with temperature-based coloring\r\n            this.particles.forEach(particle => {\r\n            // Draw particle with temperature-based color\r\n                this.ctx.beginPath();\r\n            this.ctx.fillStyle = this.getTemperatureColor(particle);\r\n            this.ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            \r\n            // Add particle border\r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n        \r\n        // Draw pressure gauge\r\n        if (this.showPressureGauge) {\r\n            this.drawPressureGauge();\r\n        }\r\n        \r\n        // Draw law description and formula on canvas\r\n        this.drawLawDescription();\r\n        \r\n        // Draw canvas labels\r\n        this.drawGasLabels();\r\n    }\r\n    \r\n    drawEnhancedContainer() {\r\n        // Draw container with gradient and better styling\r\n        const gradient = this.ctx.createLinearGradient(\r\n            this.containerX, this.pistonY, \r\n            this.containerX + this.containerWidth, this.pistonY + this.volume\r\n        );\r\n        gradient.addColorStop(0, 'rgba(200, 220, 255, 0.1)');\r\n        gradient.addColorStop(1, 'rgba(150, 180, 255, 0.2)');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.containerX, this.pistonY, this.containerWidth, this.volume);\r\n        \r\n        // Draw container border\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.strokeRect(this.containerX, this.pistonY, this.containerWidth, this.volume);\r\n        \r\n        // Draw piston with enhanced styling\r\n        this.ctx.fillStyle = '#34495E';\r\n        this.ctx.fillRect(this.containerX - 8, this.pistonY - 15, this.containerWidth + 16, 30);\r\n        \r\n        // Piston border\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeRect(this.containerX - 8, this.pistonY - 15, this.containerWidth + 16, 30);\r\n        \r\n        // Piston handle\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.fillRect(this.containerX + this.containerWidth/2 - 15, this.pistonY - 25, 30, 10);\r\n        \r\n        // Add labels\r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('GAS', this.containerX + this.containerWidth/2, this.pistonY + this.volume/2);\r\n        \r\n        // Volume indicator\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.fillStyle = '#7F8C8D';\r\n        this.ctx.fillText(`Volume: ${this.volume}`, this.containerX + this.containerWidth/2, this.pistonY + this.volume + 25);\r\n    }\r\n    \r\n    drawLawDescription() {\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Position the description panel on the right side (reduced width to avoid overlap)\r\n        const panelX = canvasWidth - 220;\r\n        const panelY = 20;\r\n        const panelWidth = 200;\r\n        const panelHeight = 220;\r\n        \r\n        // Background panel\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = panelY + 30;\r\n        \r\n        // Law title\r\n        const lawNames = {\r\n            'boyle': \"Boyle's Law\",\r\n            'charles': \"Charles's Law\", \r\n            'gay-lussac': \"Gay-Lussac's Law\",\r\n            'combined': \"Combined Gas Law\"\r\n        };\r\n        \r\n        this.ctx.fillText(lawNames[this.lawType], panelX + 10, y);\r\n        y += 30;\r\n        \r\n        // Formula\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        \r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                this.ctx.fillText('P₁V₁ = P₂V₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant temperature', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Pressure ∝ 1/Volume', panelX + 10, y);\r\n                break;\r\n            case 'charles':\r\n                this.ctx.fillText('V₁/T₁ = V₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant pressure', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Volume ∝ Temperature', panelX + 10, y);\r\n                break;\r\n            case 'gay-lussac':\r\n                this.ctx.fillText('P₁/T₁ = P₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant volume', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Pressure ∝ Temperature', panelX + 10, y);\r\n                break;\r\n            case 'combined':\r\n                this.ctx.fillText('P₁V₁/T₁ = P₂V₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('Combines all three laws', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('PV/T = constant', panelX + 10, y);\r\n                break;\r\n        }\r\n        \r\n        // Current values\r\n        y += 30;\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.fillText('Current Values:', panelX + 10, y);\r\n        y += 20;\r\n        \r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.fillStyle = '#7F8C8D';\r\n        this.ctx.fillText(`P = ${this.pressure.toFixed(2)} atm`, panelX + 10, y);\r\n        y += 16;\r\n        this.ctx.fillText(`V = ${this.volume.toFixed(0)} units`, panelX + 10, y);\r\n        y += 16;\r\n        this.ctx.fillText(`T = ${this.temperature} K`, panelX + 10, y);\r\n    }\r\n    \r\n    getTemperatureColor(particle) {\r\n        const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n        const maxVelocity = this.temperature * 0.2;\r\n        const normalizedVelocity = Math.min(velocity / maxVelocity, 1);\r\n        \r\n        if (normalizedVelocity < 0.5) {\r\n            // Blue to green\r\n            const t = normalizedVelocity * 2;\r\n            return `rgb(0, ${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))})`;\r\n        } else {\r\n            // Green to red\r\n            const t = (normalizedVelocity - 0.5) * 2;\r\n            return `rgb(${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))}, 0)`;\r\n        }\r\n    }\r\n    \r\n    drawPressureGauge() {\r\n        const gaugeX = 50;\r\n        const gaugeY = 150; // Moved down to avoid overlap with main labels\r\n        const gaugeRadius = 30;\r\n        \r\n        // Draw gauge background\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#f0f0f0';\r\n        this.ctx.arc(gaugeX, gaugeY, gaugeRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Calculate pressure value (0-1 scale)\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Use the actual pressure value from gas law calculations\r\n        const pressureValue = Math.min(this.pressure / 2.0, 1.0); // Scale to 0-1 range\r\n        \r\n        // Draw pressure needle\r\n        const angle = -Math.PI/2 + pressureValue * Math.PI;\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#FF6B6B';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(gaugeX, gaugeY);\r\n        this.ctx.lineTo(\r\n            gaugeX + Math.cos(angle) * (gaugeRadius - 5),\r\n            gaugeY + Math.sin(angle) * (gaugeRadius - 5)\r\n        );\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pressure label\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Pressure', gaugeX, gaugeY + gaugeRadius + 15);\r\n        this.ctx.fillText(pressureValue.toFixed(2), gaugeX, gaugeY + gaugeRadius + 30);\r\n    }\r\n    \r\n    drawPressureHeatmap() {\r\n        const gridSize = 15;\r\n        const cols = Math.ceil(this.containerWidth / gridSize);\r\n        const rows = Math.ceil(this.volume / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                const centerX = this.containerX + j * gridSize + gridSize / 2;\r\n                const centerY = this.pistonY + i * gridSize + gridSize / 2;\r\n                \r\n                // Calculate local pressure based on nearby particles\r\n                let localPressure = 0;\r\n                let particleCount = 0;\r\n                \r\n                this.particles.forEach(particle => {\r\n                    const dx = particle.x - centerX;\r\n                    const dy = particle.y - centerY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < gridSize) {\r\n                        const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n                        localPressure += velocity * velocity;\r\n                        particleCount++;\r\n                    }\r\n                });\r\n                \r\n                if (particleCount > 0) {\r\n                    localPressure /= particleCount;\r\n                    const alpha = Math.min(localPressure / 100, 0.4);\r\n                    this.ctx.fillStyle = `rgba(255, 100, 100, ${alpha})`;\r\n                    this.ctx.fillRect(\r\n                        this.containerX + j * gridSize, \r\n                        this.pistonY + i * gridSize, \r\n                        gridSize, \r\n                        gridSize\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityDistribution() {\r\n        const graphWidth = 200;\r\n        const graphHeight = 100;\r\n        const graphX = this.ctx.canvas.width - graphWidth - 20;\r\n        const graphY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.velocityData.length > 0) {\r\n            // Create histogram\r\n            const bins = 20;\r\n            const histogram = new Array(bins).fill(0);\r\n            const maxVelocity = Math.max(...this.velocityData);\r\n            \r\n            this.velocityData.forEach(velocity => {\r\n                const binIndex = Math.floor((velocity / maxVelocity) * (bins - 1));\r\n                if (binIndex >= 0 && binIndex < bins) {\r\n                    histogram[binIndex]++;\r\n                }\r\n            });\r\n            \r\n            // Draw histogram\r\n            const maxCount = Math.max(...histogram);\r\n            const barWidth = graphWidth / bins;\r\n            \r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            for (let i = 0; i < bins; i++) {\r\n                const barHeight = (histogram[i] / maxCount) * (graphHeight - 20);\r\n                this.ctx.fillRect(\r\n                    graphX + i * barWidth + 2, \r\n                    graphY + graphHeight - 10 - barHeight, \r\n                    barWidth - 4, \r\n                    barHeight\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Velocity Distribution', graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    drawGasLawGraph() {\r\n        const graphWidth = 300;\r\n        const graphHeight = 150;\r\n        const graphX = 20;\r\n        const graphY = this.ctx.canvas.height - graphHeight - 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.pressureHistory.length > 1) {\r\n            // Calculate data ranges for proper scaling\r\n            const maxPressure = Math.max(...this.pressureHistory);\r\n            const minPressure = Math.min(...this.pressureHistory);\r\n            const maxVolume = Math.max(...this.volumeHistory);\r\n            const minVolume = Math.min(...this.volumeHistory);\r\n            const maxTemp = Math.max(...this.temperatureHistory);\r\n            const minTemp = Math.min(...this.temperatureHistory);\r\n            \r\n            // Draw graph based on current law type\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            \r\n            for (let i = 0; i < this.pressureHistory.length; i++) {\r\n                let x, y;\r\n                \r\n                switch(this.lawType) {\r\n                    case 'boyle':\r\n                        // P vs V (inverse relationship)\r\n                        x = graphX + ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    case 'charles':\r\n                        // V vs T (linear relationship)\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphHeight;\r\n                        break;\r\n                    case 'gay-lussac':\r\n                        // P vs T (linear relationship)\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    default:\r\n                        x = graphX + (i / this.pressureHistory.length) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                }\r\n                \r\n                // Ensure coordinates are within graph bounds\r\n                x = Math.max(graphX, Math.min(graphX + graphWidth, x));\r\n                y = Math.max(graphY, Math.min(graphY + graphHeight, y));\r\n                \r\n                if (i === 0) {\r\n                    this.ctx.moveTo(x, y);\r\n                } else {\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            this.ctx.stroke();\r\n            \r\n            // Draw data points\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            for (let i = 0; i < this.pressureHistory.length; i += 5) { // Draw every 5th point\r\n                let x, y;\r\n                \r\n                switch(this.lawType) {\r\n                    case 'boyle':\r\n                        x = graphX + ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    case 'charles':\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphHeight;\r\n                        break;\r\n                    case 'gay-lussac':\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    default:\r\n                        x = graphX + (i / this.pressureHistory.length) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                }\r\n                \r\n                x = Math.max(graphX, Math.min(graphX + graphWidth, x));\r\n                y = Math.max(graphY, Math.min(graphY + graphHeight, y));\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        let xLabel, yLabel;\r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                xLabel = 'Volume';\r\n                yLabel = 'Pressure';\r\n                break;\r\n            case 'charles':\r\n                xLabel = 'Temperature (K)';\r\n                yLabel = 'Volume';\r\n                break;\r\n            case 'gay-lussac':\r\n                xLabel = 'Temperature (K)';\r\n                yLabel = 'Pressure';\r\n                break;\r\n            default:\r\n                xLabel = 'Time';\r\n                yLabel = 'Pressure';\r\n        }\r\n        \r\n        this.ctx.fillText(`${yLabel} vs ${xLabel}`, graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    getStats() {\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        const calculatedPressure = particleDensity * avgSpeed * avgSpeed * 0.01;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            temperature: this.temperature,\r\n            pressure: calculatedPressure,\r\n            volume: Math.round(this.volume),\r\n            collisionCount: this.collisionCount,\r\n            lawType: this.lawType\r\n        };\r\n    }\r\n    \r\n    drawGasLabels() {\r\n        this.drawLabels('Gas Laws', '');\r\n    }\r\n}","// Classical Mechanics Animations\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\n// Pendulum Simulation\r\nexport class Pendulum extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'pendulum';\r\n        this.length = 120;\r\n        this.angle = Math.PI / 4; // 45 degrees\r\n        this.angularVelocity = 0;\r\n        this.gravity = 1;\r\n        this.damping = 0.01;\r\n        this.speed = 1;\r\n        this.mass = 1.0; // New: bob mass\r\n        this.showPath = false;\r\n        this.showVelocityVectors = false; // New: show velocity vectors\r\n        this.showForceVectors = false; // New: show force vectors\r\n        this.showEnergyInfo = false; // New: show energy information\r\n        this.showPhaseSpace = false; // New: show phase space plot\r\n        this.path = [];\r\n        this.phaseSpaceData = []; // New: store phase space data\r\n        this.energyHistory = []; // New: store energy data\r\n        this.initialAngle = Math.PI / 4;\r\n        this.maxAmplitude = Math.PI / 4; // Track maximum amplitude\r\n        this.periods = []; // Track periods\r\n        this.lastZeroCrossing = 0; // For period calculation\r\n        this.crossingCount = 0; // Count zero crossings\r\n        this.lastAngle = this.angle;\r\n    }\r\n    \r\n    setLength(length) {\r\n        this.length = length;\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setInitialAngle(angle) {\r\n        this.initialAngle = angle * Math.PI / 180;\r\n        this.angle = this.initialAngle;\r\n    }\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setDamping(damping) {\r\n        this.damping = damping;\r\n    }\r\n    \r\n    setShowPath(show) {\r\n        this.showPath = show;\r\n        if (!show) this.path = [];\r\n    }\r\n    \r\n    setMass(mass) {\r\n        this.mass = mass;\r\n    }\r\n    \r\n    setShowVelocityVectors(show) {\r\n        this.showVelocityVectors = show;\r\n    }\r\n    \r\n    setShowForceVectors(show) {\r\n        this.showForceVectors = show;\r\n    }\r\n    \r\n    setShowEnergyInfo(show) {\r\n        this.showEnergyInfo = show;\r\n    }\r\n    \r\n    setShowPhaseSpace(show) {\r\n        this.showPhaseSpace = show;\r\n        if (!show) this.phaseSpaceData = [];\r\n    }\r\n    \r\n    reset() {\r\n        this.angle = this.initialAngle;\r\n        this.angularVelocity = 0;\r\n        this.time = 0;\r\n        this.path = [];\r\n        this.phaseSpaceData = [];\r\n        this.energyHistory = [];\r\n        this.maxAmplitude = Math.abs(this.initialAngle);\r\n        this.periods = [];\r\n        this.lastZeroCrossing = 0;\r\n        this.crossingCount = 0;\r\n        this.lastAngle = this.angle;\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed;\r\n        const simulationRate = 10.0; // Speed up pendulum evolution while keeping correct dynamics\r\n        const stepDt = dt * simulationRate;\r\n\r\n        // Nonlinear simple pendulum with linear damping: θ¨ + c θ˙ + (g/L) sin θ = 0\r\n        const g = this.gravity * 9.8; // m/s^2 effective\r\n        const L = this.length; // treat length as pixels; constant factor cancels visually\r\n        const angularAcceleration = -(g / L) * Math.sin(this.angle) - this.damping * this.angularVelocity;\r\n\r\n        // Semi-implicit Euler for better energy behavior\r\n        this.angularVelocity += angularAcceleration * stepDt;\r\n        this.angle += this.angularVelocity * stepDt;\r\n        \r\n        // Track maximum amplitude\r\n        this.maxAmplitude = Math.max(this.maxAmplitude, Math.abs(this.angle));\r\n        \r\n        // Period calculation (zero crossing detection)\r\n        // Positive-going zero crossing detection for period measurement\r\n        if (this.lastAngle <= 0 && this.angle > 0 && this.angularVelocity > 0) {\r\n            if (this.crossingCount > 0) {\r\n                const period = this.time - this.lastZeroCrossing;\r\n                this.periods.push(period);\r\n                if (this.periods.length > 10) this.periods.shift();\r\n            }\r\n            this.lastZeroCrossing = this.time;\r\n            this.crossingCount++;\r\n        }\r\n        \r\n        // Update path\r\n        if (this.showPath) {\r\n            const x = this.ctx.canvas.width / 2 + this.length * Math.sin(this.angle);\r\n            const y = this.ctx.canvas.height / 2 + this.length * Math.cos(this.angle);\r\n            this.path.push({ x, y });\r\n            if (this.path.length > 100) {\r\n                this.path.shift();\r\n            }\r\n        }\r\n        \r\n        // Update phase space data\r\n        if (this.showPhaseSpace) {\r\n            this.phaseSpaceData.push({ angle: this.angle, velocity: this.angularVelocity });\r\n            if (this.phaseSpaceData.length > 200) {\r\n                this.phaseSpaceData.shift();\r\n            }\r\n        }\r\n        \r\n        // Update energy history\r\n        if (this.showEnergyInfo) {\r\n            const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n            const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n            this.energyHistory.push({ kinetic: kineticEnergy, potential: potentialEnergy, total: kineticEnergy + potentialEnergy });\r\n            if (this.energyHistory.length > 100) {\r\n                this.energyHistory.shift();\r\n            }\r\n        }\r\n\r\n        // Update last angle for zero-crossing detection\r\n        this.lastAngle = this.angle;\r\n    }\r\n    \r\n    render() {\r\n        const centerX = this.ctx.canvas.width / 2;\r\n        const centerY = this.ctx.canvas.height * 0.3; // Move pendulum higher up\r\n        const bobX = centerX + this.length * Math.sin(this.angle);\r\n        const bobY = centerY + this.length * Math.cos(this.angle);\r\n        \r\n        // Calculate energy for color coding\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const totalEnergy = kineticEnergy + potentialEnergy;\r\n        const energyRatio = kineticEnergy / totalEnergy;\r\n        \r\n        // Draw phase space plot\r\n        if (this.showPhaseSpace) {\r\n            this.drawPhaseSpacePlot();\r\n        }\r\n        \r\n        // Draw energy bar\r\n        if (this.showEnergyInfo) {\r\n            this.drawEnergyBar();\r\n        }\r\n        \r\n        // Draw path with energy-based color\r\n        if (this.showPath && this.path.length > 1) {\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = `hsl(${200 + energyRatio * 60}, 70%, 50%, 0.6)`;\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for (let i = 1; i < this.path.length; i++) {\r\n                this.ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw enhanced pivot\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#2c3e50';\r\n        this.ctx.arc(centerX, centerY, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.strokeStyle = '#34495e';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pivot shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.arc(centerX + 2, centerY + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw string with shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(centerX + 1, centerY + 1);\r\n        this.ctx.lineTo(bobX + 1, bobY + 1);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#34495e';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.moveTo(centerX, centerY);\r\n        this.ctx.lineTo(bobX, bobY);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw force vectors\r\n        if (this.showForceVectors) {\r\n            this.drawForceVectors(centerX, centerY, bobX, bobY);\r\n        }\r\n        \r\n        // Draw velocity vector\r\n        if (this.showVelocityVectors) {\r\n            this.drawVelocityVector(bobX, bobY);\r\n        }\r\n        \r\n        // Draw enhanced bob with energy-based color\r\n        const bobColor = `hsl(${200 + energyRatio * 60}, 70%, 50%)`;\r\n        \r\n        // Bob shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.arc(bobX + 2, bobY + 2, 18, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob main\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = bobColor;\r\n        this.ctx.arc(bobX, bobY, 18, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob highlight\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.arc(bobX - 5, bobY - 5, 6, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob border\r\n        this.ctx.strokeStyle = '#2c3e50';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pendulum info\r\n        if (this.showEnergyInfo) {\r\n            this.drawPendulumInfo();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawPendulumLabels();\r\n    }\r\n    \r\n    drawForceVectors(centerX, centerY, bobX, bobY) {\r\n        // Gravity force vector\r\n        const gravityForce = this.mass * this.gravity * 9.8;\r\n        const gravityLength = 50; // Increased from 30\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#e74c3c';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(bobX, bobY);\r\n        this.ctx.lineTo(bobX, bobY + gravityLength);\r\n        this.ctx.stroke();\r\n        \r\n        // Arrow head for gravity\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(bobX, bobY + gravityLength);\r\n        this.ctx.lineTo(bobX - 6, bobY + gravityLength - 10);\r\n        this.ctx.lineTo(bobX + 6, bobY + gravityLength - 10);\r\n        this.ctx.closePath();\r\n        this.ctx.fillStyle = '#e74c3c';\r\n        this.ctx.fill();\r\n        \r\n        // Gravity force label\r\n        this.ctx.fillStyle = '#e74c3c';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Fg', bobX + 15, bobY + gravityLength / 2);\r\n        \r\n        // Tension force vector (along the string)\r\n        const tensionLength = 40; // Increased from 25\r\n        const tensionX = bobX - centerX;\r\n        const tensionY = bobY - centerY;\r\n        const tensionMagnitude = Math.sqrt(tensionX * tensionX + tensionY * tensionY);\r\n        \r\n        if (tensionMagnitude > 0) {\r\n            const unitX = tensionX / tensionMagnitude;\r\n            const unitY = tensionY / tensionMagnitude;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#3498db';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(bobX, bobY);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength, bobY - unitY * tensionLength);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head for tension\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(bobX - unitX * tensionLength, bobY - unitY * tensionLength);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength + unitY * 6, bobY - unitY * tensionLength - unitX * 6);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength - unitY * 6, bobY - unitY * tensionLength + unitX * 6);\r\n            this.ctx.closePath();\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.fill();\r\n            \r\n            // Tension force label\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.font = 'bold 14px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('T', bobX - unitX * tensionLength / 2 + 15, bobY - unitY * tensionLength / 2 - 10);\r\n        }\r\n        \r\n        // Air resistance force vector (if damping is significant)\r\n        if (this.damping > 0.001 && Math.abs(this.angularVelocity) > 0.1) {\r\n            const velocityX = this.length * this.angularVelocity * Math.cos(this.angle);\r\n            const velocityY = -this.length * this.angularVelocity * Math.sin(this.angle);\r\n            const velocityMagnitude = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n            \r\n            if (velocityMagnitude > 0) {\r\n                const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n                const airResistanceLength = Math.min(airResistanceForce * 2, 30); // Scale for visibility\r\n                \r\n                const unitVX = velocityX / velocityMagnitude;\r\n                const unitVY = velocityY / velocityMagnitude;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#e67e22';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.moveTo(bobX, bobY);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength, bobY - unitVY * airResistanceLength);\r\n                this.ctx.stroke();\r\n                \r\n                // Arrow head for air resistance\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(bobX - unitVX * airResistanceLength, bobY - unitVY * airResistanceLength);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength + unitVY * 4, bobY - unitVY * airResistanceLength - unitVX * 4);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength - unitVY * 4, bobY - unitVY * airResistanceLength + unitVX * 4);\r\n                this.ctx.closePath();\r\n                this.ctx.fillStyle = '#e67e22';\r\n                this.ctx.fill();\r\n                \r\n                // Air resistance force label\r\n                this.ctx.fillStyle = '#e67e22';\r\n                this.ctx.font = 'bold 12px Inter';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('Fd', bobX - unitVX * airResistanceLength / 2 - 10, bobY - unitVY * airResistanceLength / 2 - 5);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityVector(bobX, bobY) {\r\n        const velocityX = this.length * this.angularVelocity * Math.cos(this.angle);\r\n        const velocityY = -this.length * this.angularVelocity * Math.sin(this.angle);\r\n        const velocityMagnitude = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n        \r\n        if (velocityMagnitude > 0.1) {\r\n            const scale = 20 / velocityMagnitude;\r\n            const scaledVX = velocityX * scale;\r\n            const scaledVY = velocityY * scale;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#f39c12';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(bobX, bobY);\r\n            this.ctx.lineTo(bobX + scaledVX, bobY + scaledVY);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(bobX + scaledVX, bobY + scaledVY);\r\n            this.ctx.lineTo(bobX + scaledVX - scaledVY * 0.3, bobY + scaledVY + scaledVX * 0.3);\r\n            this.ctx.lineTo(bobX + scaledVX + scaledVY * 0.3, bobY + scaledVY - scaledVX * 0.3);\r\n            this.ctx.closePath();\r\n            this.ctx.fillStyle = '#f39c12';\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawEnergyBar() {\r\n        const barWidth = 200;\r\n        const barHeight = 20;\r\n        const barX = 20;\r\n        const barY = 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(barX, barY, barWidth, barHeight);\r\n        \r\n        // Calculate current energies\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const totalEnergy = kineticEnergy + potentialEnergy;\r\n        \r\n        if (totalEnergy > 0) {\r\n            const kineticRatio = kineticEnergy / totalEnergy;\r\n            const potentialRatio = potentialEnergy / totalEnergy;\r\n            \r\n            // Kinetic energy (orange)\r\n            this.ctx.fillStyle = '#f39c12';\r\n            this.ctx.fillRect(barX, barY, barWidth * kineticRatio, barHeight);\r\n            \r\n            // Potential energy (blue)\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.fillRect(barX + barWidth * kineticRatio, barY, barWidth * potentialRatio, barHeight);\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Energy', barX + barWidth / 2, barY - 5);\r\n        this.ctx.fillText('K', barX + 10, barY + 15);\r\n        this.ctx.fillText('P', barX + barWidth - 10, barY + 15);\r\n    }\r\n    \r\n    drawPhaseSpacePlot() {\r\n        const plotWidth = 200;\r\n        const plotHeight = 150;\r\n        const plotX = this.ctx.canvas.width - plotWidth - 20;\r\n        const plotY = 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(plotX, plotY, plotWidth, plotHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(plotX, plotY, plotWidth, plotHeight);\r\n        \r\n        if (this.phaseSpaceData.length > 1) {\r\n            // Find data ranges\r\n            const angles = this.phaseSpaceData.map(d => d.angle);\r\n            const velocities = this.phaseSpaceData.map(d => d.velocity);\r\n            const minAngle = Math.min(...angles);\r\n            const maxAngle = Math.max(...angles);\r\n            const minVel = Math.min(...velocities);\r\n            const maxVel = Math.max(...velocities);\r\n            \r\n            // Draw phase space trajectory\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#9b59b6';\r\n            this.ctx.lineWidth = 2;\r\n            \r\n            for (let i = 0; i < this.phaseSpaceData.length; i++) {\r\n                const x = plotX + ((this.phaseSpaceData[i].angle - minAngle) / (maxAngle - minAngle)) * plotWidth;\r\n                const y = plotY + plotHeight - ((this.phaseSpaceData[i].velocity - minVel) / (maxVel - minVel)) * plotHeight;\r\n                \r\n                if (i === 0) {\r\n                    this.ctx.moveTo(x, y);\r\n                } else {\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Phase Space', plotX + plotWidth / 2, plotY - 5);\r\n        this.ctx.fillText('θ', plotX + plotWidth / 2, plotY + plotHeight + 15);\r\n        this.ctx.fillText('ω', plotX - 10, plotY + plotHeight / 2);\r\n    }\r\n    \r\n    drawPendulumInfo() {\r\n        const infoX = 20;\r\n        const infoY = 60;\r\n        \r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = infoY;\r\n        this.ctx.fillText(`Angle: ${(this.angle * 180 / Math.PI).toFixed(1)}°`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Angular Velocity: ${this.angularVelocity.toFixed(2)} rad/s`, infoX, y);\r\n        y += 20;\r\n        \r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        this.ctx.fillText(`Kinetic Energy: ${kineticEnergy.toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Potential Energy: ${potentialEnergy.toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Total Energy: ${(kineticEnergy + potentialEnergy).toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        \r\n        // Period information\r\n        if (this.periods.length > 0) {\r\n            const avgPeriod = this.periods.reduce((sum, p) => sum + p, 0) / this.periods.length;\r\n            this.ctx.fillText(`Measured Period: ${avgPeriod.toFixed(2)} s`, infoX, y);\r\n            y += 20;\r\n        }\r\n        \r\n        const theoreticalPeriod = 2 * Math.PI * Math.sqrt(this.length / (this.gravity * 9.8));\r\n        this.ctx.fillText(`Theoretical Period: ${theoreticalPeriod.toFixed(2)} s`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Max Amplitude: ${(this.maxAmplitude * 180 / Math.PI).toFixed(1)}°`, infoX, y);\r\n        y += 20;\r\n        \r\n        // Air resistance information\r\n        const velocityMagnitude = Math.abs(this.angularVelocity);\r\n        const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n        this.ctx.fillText(`Air Resistance: ${airResistanceForce.toFixed(3)} N`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Damping Coefficient: ${this.damping.toFixed(3)}`, infoX, y);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    getStats() {\r\n        const theoreticalPeriod = 2 * Math.PI * Math.sqrt(this.length / (this.gravity * 9.8));\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const velocityMagnitude = Math.abs(this.angularVelocity);\r\n        const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n        \r\n        return {\r\n            angle: this.angle * 180 / Math.PI,\r\n            angularVelocity: this.angularVelocity,\r\n            theoreticalPeriod: theoreticalPeriod,\r\n            measuredPeriod: this.periods.length > 0 ? this.periods.reduce((sum, p) => sum + p, 0) / this.periods.length : 0,\r\n            kineticEnergy: kineticEnergy,\r\n            potentialEnergy: potentialEnergy,\r\n            totalEnergy: kineticEnergy + potentialEnergy,\r\n            maxAmplitude: this.maxAmplitude * 180 / Math.PI,\r\n            airResistanceForce: airResistanceForce,\r\n            dampingCoefficient: this.damping,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawPendulumLabels() {\r\n        this.drawLabels(\r\n            'Simple Pendulum',\r\n            'T = 2π√(L/g)  |  θ̈ + (g/L)sin(θ) = 0  |  E = ½mL²θ̇² + mgL(1-cos(θ))'\r\n        );\r\n    }\r\n}\r\n\r\n// Orbital Motion Simulation\r\nexport class OrbitalMotion extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'orbital-motion';\r\n        this.centerX = 400;\r\n        this.centerY = 300;\r\n        this.semiMajorAxis = 200;\r\n        this.eccentricity = 0.2;\r\n        this.centralMass = 1000;\r\n        this.speed = 1.0;\r\n        this.angle = 0;\r\n        this.showOrbitPath = true;\r\n        this.showVelocityVector = false;\r\n        this.showKeplerInfo = false;\r\n        \r\n        // Calculate orbital parameters\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    calculateOrbitalParameters() {\r\n        // Calculate semi-minor axis from eccentricity\r\n        this.semiMinorAxis = this.semiMajorAxis * Math.sqrt(1 - this.eccentricity * this.eccentricity);\r\n        \r\n        // Calculate focal distance\r\n        this.focalDistance = this.semiMajorAxis * this.eccentricity;\r\n        \r\n        // Calculate orbital period (Kepler's Third Law)\r\n        this.period = 2 * Math.PI * Math.sqrt(Math.pow(this.semiMajorAxis, 3) / this.centralMass);\r\n        \r\n        // Calculate angular velocity\r\n        this.angularVelocity = 2 * Math.PI / this.period;\r\n        \r\n        // Store orbit path points\r\n        this.orbitPath = [];\r\n        for (let i = 0; i <= 360; i += 2) {\r\n            const angle = (i * Math.PI) / 180;\r\n            const r = this.semiMajorAxis * (1 - this.eccentricity * this.eccentricity) / \r\n                     (1 + this.eccentricity * Math.cos(angle));\r\n            const x = this.centerX + r * Math.cos(angle);\r\n            const y = this.centerY + r * Math.sin(angle);\r\n            this.orbitPath.push({ x, y });\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setEccentricity(eccentricity) {\r\n        this.eccentricity = eccentricity;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setSemiMajorAxis(axis) {\r\n        this.semiMajorAxis = axis;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setCentralMass(mass) {\r\n        this.centralMass = mass;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setShowOrbitPath(show) {\r\n        this.showOrbitPath = show;\r\n    }\r\n    \r\n    setShowVelocityVector(show) {\r\n        this.showVelocityVector = show;\r\n    }\r\n    \r\n    setShowKeplerInfo(show) {\r\n        this.showKeplerInfo = show;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.angle = 0;\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        \r\n        // Update orbital angle\r\n        this.angle += this.angularVelocity * dt * 100;\r\n        if (this.angle > 2 * Math.PI) {\r\n            this.angle -= 2 * Math.PI;\r\n        }\r\n        \r\n        // Calculate current position\r\n        const r = this.semiMajorAxis * (1 - this.eccentricity * this.eccentricity) / \r\n                 (1 + this.eccentricity * Math.cos(this.angle));\r\n        this.currentX = this.centerX + r * Math.cos(this.angle);\r\n        this.currentY = this.centerY + r * Math.sin(this.angle);\r\n        \r\n        // Calculate velocity components\r\n        const velocity = this.angularVelocity * r;\r\n        this.velocityX = -velocity * Math.sin(this.angle);\r\n        this.velocityY = velocity * Math.cos(this.angle);\r\n        \r\n        // Calculate orbital energy\r\n        const kineticEnergy = 0.5 * velocity * velocity;\r\n        const potentialEnergy = -this.centralMass / r;\r\n        this.totalEnergy = kineticEnergy + potentialEnergy;\r\n        \r\n        // Track perigee and apogee\r\n        if (r < this.perigee || this.perigee === undefined) {\r\n            this.perigee = r;\r\n        }\r\n        if (r > this.apogee || this.apogee === undefined) {\r\n            this.apogee = r;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw central mass\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.arc(this.centerX, this.centerY, 15, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add glow effect\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 215, 0, 0.3)';\r\n        this.ctx.arc(this.centerX, this.centerY, 25, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw orbit path\r\n        if (this.showOrbitPath && this.orbitPath.length > 1) {\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.5)';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.moveTo(this.orbitPath[0].x, this.orbitPath[0].y);\r\n            for (let i = 1; i < this.orbitPath.length; i++) {\r\n                this.ctx.lineTo(this.orbitPath[i].x, this.orbitPath[i].y);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw orbiting object\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.arc(this.currentX, this.currentY, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n        this.ctx.arc(this.currentX + 2, this.currentY + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw velocity vector with enhanced visualization\r\n        if (this.showVelocityVector) {\r\n            const vectorLength = 40;\r\n            const velocity = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n            const normalizedVX = this.velocityX / velocity;\r\n            const normalizedVY = this.velocityY / velocity;\r\n            \r\n            // Draw velocity vector\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(this.currentX, this.currentY);\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength,\r\n                this.currentY + normalizedVY * vectorLength\r\n            );\r\n            this.ctx.stroke();\r\n            \r\n            // Draw arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            const angle = Math.atan2(this.velocityY, this.velocityX);\r\n            const arrowLength = 10;\r\n            this.ctx.moveTo(\r\n                this.currentX + normalizedVX * vectorLength,\r\n                this.currentY + normalizedVY * vectorLength\r\n            );\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength - arrowLength * Math.cos(angle - Math.PI / 6),\r\n                this.currentY + normalizedVY * vectorLength - arrowLength * Math.sin(angle - Math.PI / 6)\r\n            );\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength - arrowLength * Math.cos(angle + Math.PI / 6),\r\n                this.currentY + normalizedVY * vectorLength - arrowLength * Math.sin(angle + Math.PI / 6)\r\n            );\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n            \r\n            // Draw velocity label\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.font = 'bold 14px Inter';\r\n            this.ctx.fillText(`v = ${velocity.toFixed(1)}`, \r\n                this.currentX + normalizedVX * (vectorLength + 15),\r\n                this.currentY + normalizedVY * (vectorLength + 15));\r\n        }\r\n        \r\n        // Draw perigee and apogee markers\r\n        if (this.showKeplerInfo && this.perigee && this.apogee) {\r\n            // Perigee marker (closest point)\r\n            const perigeeAngle = 0; // Perigee is at angle 0\r\n            const perigeeX = this.centerX + this.perigee * Math.cos(perigeeAngle);\r\n            const perigeeY = this.centerY + this.perigee * Math.sin(perigeeAngle);\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#2ECC71';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.arc(perigeeX, perigeeY, 12, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.fillStyle = '#2ECC71';\r\n            this.ctx.font = 'bold 12px Inter';\r\n            this.ctx.fillText('P', perigeeX - 3, perigeeY + 3);\r\n            \r\n            // Apogee marker (farthest point)\r\n            const apogeeAngle = Math.PI; // Apogee is at angle π\r\n            const apogeeX = this.centerX + this.apogee * Math.cos(apogeeAngle);\r\n            const apogeeY = this.centerY + this.apogee * Math.sin(apogeeAngle);\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#E74C3C';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.arc(apogeeX, apogeeY, 12, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.fillStyle = '#E74C3C';\r\n            this.ctx.font = 'bold 12px Inter';\r\n            this.ctx.fillText('A', apogeeX - 3, apogeeY + 3);\r\n        }\r\n        \r\n        // Draw Kepler's laws information\r\n        if (this.showKeplerInfo) {\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.font = '14px Inter';\r\n            this.ctx.textAlign = 'left';\r\n            \r\n            // Position text on the right side to avoid cutoff\r\n            const textX = this.ctx.canvas.width - 250;\r\n            const startY = 30;\r\n            \r\n            this.ctx.fillText(`Kepler's 1st Law: Elliptical orbit (e = ${this.eccentricity.toFixed(2)})`, textX, startY);\r\n            this.ctx.fillText(`Kepler's 2nd Law: Equal areas in equal times`, textX, startY + 20);\r\n            this.ctx.fillText(`Kepler's 3rd Law: T^2 ∝ a^3 (T = ${this.period.toFixed(1)}s)`, textX, startY + 40);\r\n            \r\n            // Add orbital mechanics details\r\n            if (this.perigee && this.apogee) {\r\n                this.ctx.fillText(`Perigee: ${this.perigee.toFixed(0)}px`, textX, startY + 60);\r\n                this.ctx.fillText(`Apogee: ${this.apogee.toFixed(0)}px`, textX, startY + 80);\r\n                this.ctx.fillText(`Semi-major axis: ${this.semiMajorAxis}px`, textX, startY + 100);\r\n            }\r\n            \r\n            // Show current orbital position info\r\n            const currentDistance = Math.sqrt(\r\n                Math.pow(this.currentX - this.centerX, 2) + \r\n                Math.pow(this.currentY - this.centerY, 2)\r\n            );\r\n            const currentSpeed = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n            this.ctx.fillText(`Current distance: ${currentDistance.toFixed(0)}px`, textX, startY + 120);\r\n            this.ctx.fillText(`Current speed: ${currentSpeed.toFixed(1)}`, textX, startY + 140);\r\n            \r\n            // Show orbital energy\r\n            if (this.totalEnergy !== undefined) {\r\n                this.ctx.fillText(`Total energy: ${this.totalEnergy.toFixed(1)}`, textX, startY + 160);\r\n            }\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawOrbitalLabels();\r\n    }\r\n    \r\n    getStats() {\r\n        const distance = Math.sqrt(\r\n            Math.pow(this.currentX - this.centerX, 2) + \r\n            Math.pow(this.currentY - this.centerY, 2)\r\n        );\r\n        const speed = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n        \r\n        return {\r\n            period: this.period,\r\n            speed: speed,\r\n            distance: distance,\r\n            eccentricity: this.eccentricity,\r\n            perigee: this.perigee,\r\n            apogee: this.apogee,\r\n            semiMajorAxis: this.semiMajorAxis,\r\n            totalEnergy: this.totalEnergy,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawOrbitalLabels() {\r\n        this.drawLabels(\r\n            'Orbital Motion',\r\n            'r = a(1-e²)/(1+ecos(θ))  |  T² ∝ a³  |  E = ½mv² - GMm/r'\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Collision Physics Simulation\r\nexport class CollisionPhysics extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.balls = [];\r\n        this.ballCount = 5;\r\n        this.restitution = 0.8;\r\n        this.gravity = 0.5;\r\n        this.speed = 1.0;\r\n        this.showAnalytics = true; // Always enable analytics\r\n        this.collisionType = 'elastic';\r\n        this.collisionCount = 0;\r\n        this.collisionEffects = []; // Track collision effects for visual feedback\r\n        \r\n        this.initializeBalls();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setBallCount(count) {\r\n        this.ballCount = count;\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    setRestitution(restitution) {\r\n        this.restitution = restitution;\r\n    }\r\n    \r\n\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n    setCollisionType(type) {\r\n        this.collisionType = type;\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    initializeBalls() {\r\n        this.balls = [];\r\n        \r\n        if (this.collisionType === 'head-on') {\r\n            // Head-on collision: two balls moving toward each other\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            this.balls = [\r\n                {\r\n                    x: canvasWidth * 0.25,\r\n                    y: canvasHeight * 0.5,\r\n                    vx: 80,\r\n                    vy: 0,\r\n                    radius: 20,\r\n                    mass: 2\r\n                },\r\n                {\r\n                    x: canvasWidth * 0.75,\r\n                    y: canvasHeight * 0.5,\r\n                    vx: -80,\r\n                    vy: 0,\r\n                    radius: 20,\r\n                    mass: 2\r\n                }\r\n            ];\r\n        } else if (this.collisionType === 'elastic') {\r\n            // Multiple balls with elastic collisions - respect ball count\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.25}, {x: canvasWidth * 0.8, y: canvasHeight * 0.25},\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.5}, {x: canvasWidth * 0.8, y: canvasHeight * 0.5},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}, {x: canvasWidth * 0.375, y: canvasHeight * 0.2}, {x: canvasWidth * 0.625, y: canvasHeight * 0.55},\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.55}, {x: canvasWidth * 0.75, y: canvasHeight * 0.2}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 120,\r\n                    vy: (Math.random() - 0.5) * 120,\r\n                    radius: 15 + Math.random() * 10,\r\n                    mass: 1 + Math.random() * 2\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'inelastic') {\r\n            // Inelastic collisions with energy loss\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.25}, {x: canvasWidth * 0.75, y: canvasHeight * 0.25},\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.5}, {x: canvasWidth * 0.75, y: canvasHeight * 0.5},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 100,\r\n                    vy: (Math.random() - 0.5) * 100,\r\n                    radius: 18 + Math.random() * 8,\r\n                    mass: 1.5 + Math.random() * 1.5\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'mixed') {\r\n            // Mixed collision types with varying properties\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.2}, {x: canvasWidth * 0.8, y: canvasHeight * 0.2},\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.55}, {x: canvasWidth * 0.8, y: canvasHeight * 0.55},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}, {x: canvasWidth * 0.375, y: canvasHeight * 0.3}, {x: canvasWidth * 0.625, y: canvasHeight * 0.45}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 110,\r\n                    vy: (Math.random() - 0.5) * 110,\r\n                    radius: 12 + Math.random() * 12,\r\n                    mass: 0.8 + Math.random() * 2.4\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'cascade') {\r\n            // Cascade collision - balls in a line\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const spacing = canvasWidth * 0.075;\r\n            const startX = canvasWidth * 0.125;\r\n            const y = canvasHeight * 0.375;\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, 8); i++) {\r\n                this.balls.push({\r\n                    x: startX + i * spacing,\r\n                    y: y,\r\n                    vx: i === 0 ? 100 : 0, // Only first ball moves\r\n                    vy: 0,\r\n                    radius: 15,\r\n                    mass: 1.5\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Reset collision count\r\n        this.collisionCount = 0;\r\n        this.lastCollision = null;\r\n    }\r\n    \r\n    reset() {\r\n        this.collisionCount = 0;\r\n        this.collisionEffects = [];\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 5; // Fixed time step calculation\r\n        \r\n        // Update collision effects\r\n        this.collisionEffects = this.collisionEffects.filter(effect => {\r\n            effect.time += dt;\r\n            return effect.time < effect.maxTime;\r\n        });\r\n        \r\n        // Update ball positions\r\n        this.balls.forEach(ball => {\r\n            ball.x += ball.vx * dt;\r\n            ball.y += ball.vy * dt;\r\n            \r\n            // Apply gravity\r\n            ball.vy += this.gravity * 9.8 * dt;\r\n            \r\n            // Apply minimal friction for stability\r\n            ball.vx *= (1 - 0.02 * dt);\r\n            ball.vy *= (1 - 0.02 * dt);\r\n            \r\n            // Bounce off canvas boundaries with energy loss\r\n            if (ball.x - ball.radius < 0 || ball.x + ball.radius > this.ctx.canvas.width) {\r\n                ball.vx *= -this.restitution;\r\n                ball.x = Math.max(ball.radius, Math.min(this.ctx.canvas.width - ball.radius, ball.x));\r\n                \r\n                // Add wall collision effect\r\n                this.collisionEffects.push({\r\n                    x: ball.x,\r\n                    y: ball.y,\r\n                    time: 0,\r\n                    maxTime: 0.3,\r\n                    type: 'wall'\r\n                });\r\n            }\r\n            \r\n            if (ball.y - ball.radius < 0 || ball.y + ball.radius > this.ctx.canvas.height) {\r\n                ball.vy *= -this.restitution;\r\n                ball.y = Math.max(ball.radius, Math.min(this.ctx.canvas.height - ball.radius, ball.y));\r\n                \r\n                // Add wall collision effect\r\n                this.collisionEffects.push({\r\n                    x: ball.x,\r\n                    y: ball.y,\r\n                    time: 0,\r\n                    maxTime: 0.3,\r\n                    type: 'wall'\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Check for collisions between balls\r\n        for (let i = 0; i < this.balls.length; i++) {\r\n            for (let j = i + 1; j < this.balls.length; j++) {\r\n                this.checkCollision(this.balls[i], this.balls[j]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    checkCollision(ball1, ball2) {\r\n        const dx = ball2.x - ball1.x;\r\n        const dy = ball2.y - ball1.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n        if (distance < ball1.radius + ball2.radius) {\r\n            this.collisionCount++;\r\n            \r\n            // Add collision effect for visual feedback\r\n            this.collisionEffects.push({\r\n                x: (ball1.x + ball2.x) / 2,\r\n                y: (ball1.y + ball2.y) / 2,\r\n                time: 0,\r\n                maxTime: 0.5,\r\n                type: 'ball'\r\n            });\r\n            \r\n            // Normalize collision vector\r\n            const nx = dx / distance;\r\n            const ny = dy / distance;\r\n            \r\n            // Relative velocity\r\n            const dvx = ball2.vx - ball1.vx;\r\n            const dvy = ball2.vy - ball1.vy;\r\n            const relativeVelocity = dvx * nx + dvy * ny;\r\n            \r\n            // Don't resolve if balls are moving apart\r\n            if (relativeVelocity > 0) return;\r\n            \r\n            // Calculate impulse based on collision type\r\n            let effectiveRestitution = this.restitution;\r\n            if (this.collisionType === 'inelastic') {\r\n                effectiveRestitution = 0.3; // More energy loss\r\n            } else if (this.collisionType === 'mixed') {\r\n                effectiveRestitution = 0.5 + Math.random() * 0.3; // Variable energy loss\r\n            }\r\n            \r\n            // Calculate impulse\r\n            const impulse = -(1 + effectiveRestitution) * relativeVelocity / \r\n                           (1/ball1.mass + 1/ball2.mass);\r\n            \r\n            // Update velocities\r\n            ball1.vx -= (impulse * nx) / ball1.mass;\r\n            ball1.vy -= (impulse * ny) / ball1.mass;\r\n            ball2.vx += (impulse * nx) / ball2.mass;\r\n            ball2.vy += (impulse * ny) / ball2.mass;\r\n            \r\n            // Separate balls to prevent sticking\r\n            const overlap = ball1.radius + ball2.radius - distance;\r\n            const separationX = nx * overlap * 0.5;\r\n            const separationY = ny * overlap * 0.5;\r\n            \r\n            ball1.x -= separationX;\r\n            ball1.y -= separationY;\r\n            ball2.x += separationX;\r\n            ball2.y += separationY;\r\n            \r\n            // Track collision energy\r\n            const preCollisionEnergy = 0.5 * ball1.mass * (ball1.vx * ball1.vx + ball1.vy * ball1.vy) +\r\n                                      0.5 * ball2.mass * (ball2.vx * ball2.vx + ball2.vy * ball2.vy);\r\n            \r\n            // Store collision data for analysis\r\n            this.lastCollision = {\r\n                ball1: { mass: ball1.mass, velocity: Math.sqrt(ball1.vx * ball1.vx + ball1.vy * ball1.vy) },\r\n                ball2: { mass: ball2.mass, velocity: Math.sqrt(ball2.vx * ball2.vx + ball2.vy * ball2.vy) },\r\n                energy: preCollisionEnergy,\r\n                restitution: effectiveRestitution\r\n            };\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Use the same neutral canvas background approach as other animations\r\n        \r\n        // Draw enhanced collision effects with modern styling\r\n        this.collisionEffects.forEach(effect => {\r\n            const alpha = 1 - (effect.time / effect.maxTime);\r\n            const radius = 30 * (1 - effect.time / effect.maxTime); // Reduced from 40 to 30\r\n            \r\n            if (effect.type === 'ball') {\r\n                // Simplified ball collision effect with fewer rings\r\n                for (let i = 0; i < 2; i++) { // Reduced from 3 to 2 rings\r\n                    const ringRadius = radius * (0.4 + i * 0.4);\r\n                    const ringAlpha = alpha * (1 - i * 0.4) * 0.6; // Reduced opacity by 40%\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(255, 107, 107, ${ringAlpha})`;\r\n                    this.ctx.lineWidth = 2 - i; // Reduced line width\r\n                    this.ctx.arc(effect.x, effect.y, ringRadius, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                }\r\n                \r\n                // Reduced sparkle effect\r\n                for (let i = 0; i < 4; i++) { // Reduced from 8 to 4 sparkles\r\n                    const angle = (i * Math.PI * 2) / 4;\r\n                    const sparkleX = effect.x + Math.cos(angle) * radius * 0.6;\r\n                    const sparkleY = effect.y + Math.sin(angle) * radius * 0.6;\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.4})`; // Reduced opacity\r\n                    this.ctx.arc(sparkleX, sparkleY, 1, 0, Math.PI * 2); // Reduced size from 2 to 1\r\n                    this.ctx.fill();\r\n                }\r\n            } else if (effect.type === 'wall') {\r\n                // Simplified wall collision effect\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = `rgba(100, 150, 255, ${alpha * 0.5})`; // Reduced opacity\r\n                this.ctx.lineWidth = 2; // Reduced from 4 to 2\r\n                this.ctx.arc(effect.x, effect.y, radius * 0.6, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n                \r\n                // Remove ripple effect to reduce distraction\r\n            }\r\n        });\r\n        \r\n        // Draw enhanced balls with modern styling\r\n        this.balls.forEach((ball, index) => {\r\n            // Create gradient for each ball based on velocity\r\n            const velocity = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n            const normalizedVelocity = Math.min(velocity / 100, 1);\r\n            \r\n            // Dynamic color based on velocity and ball index\r\n            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\r\n            const baseColor = colors[index % colors.length];\r\n            \r\n            // Ball shadow with modern blur effect\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n            this.ctx.arc(ball.x + 3, ball.y + 3, ball.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball gradient\r\n            const gradient = this.ctx.createRadialGradient(\r\n                ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, 0,\r\n                ball.x, ball.y, ball.radius\r\n            );\r\n            gradient.addColorStop(0, baseColor);\r\n            gradient.addColorStop(0.7, baseColor);\r\n            gradient.addColorStop(1, '#1a1a2e');\r\n            \r\n            // Ball main with gradient\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball highlight with velocity-based intensity\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + normalizedVelocity * 0.4})`;\r\n            this.ctx.arc(ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, ball.radius * 0.5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball border with velocity-based color\r\n            this.ctx.strokeStyle = normalizedVelocity > 0.5 ? '#FFD700' : '#333';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.stroke();\r\n            \r\n            // Draw enhanced momentum vectors with modern styling\r\n            if (this.showAnalytics) {\r\n                const velocity = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n                if (velocity > 1) { // Only show vectors for moving balls\r\n                    const vectorLength = 50; // Restore original length\r\n                    const normalizedVX = ball.vx / velocity;\r\n                    const normalizedVY = ball.vy / velocity;\r\n                    \r\n                    // Vector glow effect\r\n                this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(78, 205, 196, 0.3)`;\r\n                    this.ctx.lineWidth = 6; // Restore original width\r\n                this.ctx.moveTo(ball.x, ball.y);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                this.ctx.stroke();\r\n                \r\n                    // Main momentum vector\r\n                this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = '#4ECDC4';\r\n                    this.ctx.lineWidth = 3; // Restore original width\r\n                    this.ctx.moveTo(ball.x, ball.y);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrowhead with gradient\r\n                    const angle = Math.atan2(ball.vy, ball.vx);\r\n                    const arrowLength = 12; // Restore original arrow size\r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = '#4ECDC4';\r\n                    this.ctx.moveTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength - arrowLength * Math.cos(angle - Math.PI / 6),\r\n                                  ball.y + normalizedVY * vectorLength - arrowLength * Math.sin(angle - Math.PI / 6));\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength - arrowLength * Math.cos(angle + Math.PI / 6),\r\n                                  ball.y + normalizedVY * vectorLength - arrowLength * Math.sin(angle + Math.PI / 6));\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n                    \r\n                    // Restore velocity magnitude labels for force analysis\r\n                    const labelX = ball.x + normalizedVX * (vectorLength + 20);\r\n                    const labelY = ball.y + normalizedVY * (vectorLength + 20);\r\n                    \r\n                    // Label background\r\n                    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n                    this.ctx.fillRect(labelX - 25, labelY - 8, 50, 16);\r\n                    \r\n                    // Label text\r\n                    this.ctx.fillStyle = '#4ECDC4';\r\n                    this.ctx.font = 'bold 13px Inter';\r\n                    this.ctx.textAlign = 'center';\r\n                    this.ctx.fillText(`v = ${velocity.toFixed(1)}`, labelX, labelY + 3);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Draw collision info\r\n        if (this.showAnalytics) {\r\n            this.drawCollisionInfo();\r\n        }\r\n        \r\n        // Draw gravity force arrows on balls\r\n        if (this.showAnalytics) {\r\n            this.drawGravityForceArrows();\r\n        }\r\n        \r\n        // Draw canvas labels for physics context\r\n        this.drawCollisionLabels();\r\n    }\r\n    \r\n    drawGravityForceArrows() {\r\n        this.balls.forEach(ball => {\r\n            // Calculate gravity force magnitude\r\n            const gravityForce = ball.mass * this.gravity * 9.8;\r\n            \r\n            // Draw gravity arrow pointing downward\r\n            const arrowLength = Math.max(40, Math.min(gravityForce * 0.8, 80)); // Ensure minimum length of 40px\r\n            const startX = ball.x;\r\n            const startY = ball.y + ball.radius + 5; // Start below the ball\r\n            const endX = startX;\r\n            const endY = startY + arrowLength;\r\n            \r\n            // Draw arrow with modern styling\r\n            this.ctx.save();\r\n            \r\n            // Arrow glow effect\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = 'rgba(255, 107, 107, 0.4)';\r\n            this.ctx.lineWidth = 6;\r\n            this.ctx.moveTo(startX, startY);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.stroke();\r\n            \r\n            // Main arrow\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(startX, startY);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.moveTo(endX, endY);\r\n            this.ctx.lineTo(endX - 8, endY - 12);\r\n            this.ctx.lineTo(endX + 8, endY - 12);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n            \r\n            // Force label\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n            this.ctx.fillRect(endX - 20, endY + 5, 40, 16);\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.font = 'bold 12px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(`mg`, endX, endY + 15);\r\n            \r\n            this.ctx.restore();\r\n        });\r\n    }\r\n    \r\n    drawCollisionInfo() {\r\n        // Compact info panel background\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Smaller, more compact panel\r\n        const panelWidth = Math.min(canvasWidth * 0.15, 200);\r\n        const panelHeight = Math.min(canvasHeight * 0.15, 120);\r\n        const panelX = 10;\r\n        const panelY = 10;\r\n        \r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.8)';\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = panelY + 20;\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`Collisions: ${this.collisionCount}`, panelX + 8, y);\r\n        y += 18;\r\n        \r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText(`Balls: ${this.balls.length}`, panelX + 8, y);\r\n        y += 16;\r\n        this.ctx.fillText(`Bounce: ${this.restitution}`, panelX + 8, y);\r\n        y += 16;\r\n        this.ctx.fillText(`Type: ${this.collisionType}`, panelX + 8, y);\r\n        \r\n        // Remove detailed collision analysis to reduce clutter\r\n    }\r\n    \r\n    getStats() {\r\n        let totalMomentum = 0;\r\n        let totalEnergy = 0;\r\n        \r\n        this.balls.forEach(ball => {\r\n            const momentum = ball.mass * Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n            const energy = 0.5 * ball.mass * (ball.vx * ball.vx + ball.vy * ball.vy);\r\n            totalMomentum += momentum;\r\n            totalEnergy += energy;\r\n        });\r\n        \r\n        return {\r\n            ballCount: this.balls.length,\r\n            totalMomentum: totalMomentum,\r\n            totalEnergy: totalEnergy,\r\n            collisionCount: this.collisionCount\r\n        };\r\n    }\r\n    \r\n    drawCollisionLabels() {\r\n        this.drawLabels(\r\n            'Collision Physics',\r\n            'p = mv  |  Σp = constant  |  KE = ½mv²'\r\n        );\r\n    }\r\n}\r\n\r\n// Friction & Inclined Planes Simulation\r\nexport class FrictionInclinedPlanes extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.object = {\r\n            x: 100,\r\n            y: 200,\r\n            vx: 0,\r\n            vy: 0\r\n        };\r\n        this.inclineAngle = 20;\r\n        this.frictionCoefficient = 0.3;\r\n        this.objectMass = 5;\r\n        this.initialVelocity = 0; // Start from rest by default\r\n        this.gravity = 1.0;\r\n        this.speed = 1.0;\r\n        this.showAnalytics = true; // Always enable analytics\r\n        \r\n        this.resetObject();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setInclineAngle(angle) {\r\n        this.inclineAngle = angle;\r\n        // Don't reset object position when changing angle\r\n    }\r\n    \r\n    setFrictionCoefficient(coefficient) {\r\n        this.frictionCoefficient = coefficient;\r\n    }\r\n    \r\n    setObjectMass(mass) {\r\n        this.objectMass = mass;\r\n    }\r\n    \r\n    setInitialVelocity(velocity) {\r\n        this.initialVelocity = velocity;\r\n        // Don't reset object position when changing initial velocity\r\n    }\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n\r\n    \r\n    resetObject() {\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const startX = canvasWidth * 0.125;\r\n        \r\n        // Position object a bit down the incline (about 5% of the incline length)\r\n        const offsetDistance = canvasWidth * 0.75 * 0.05; // 5% of incline length\r\n        this.object.x = startX + offsetDistance;\r\n        \r\n        // Calculate adjusted start position based on current angle\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startY = canvasHeight * 0.5;\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        \r\n        // Scale object size with mass for positioning\r\n        const objectSize = Math.max(12, Math.min(25, 12 + this.objectMass * 2));\r\n        this.object.y = adjustedStartY + offsetDistance * Math.tan(angleRad) - objectSize - 18 * Math.cos(angleRad);\r\n        this.object.vx = this.initialVelocity * Math.cos(angleRad);\r\n        this.object.vy = 0;\r\n    }\r\n    \r\n    reset() {\r\n        this.resetObject();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 3; // Increased speed multiplier for more engaging motion\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        \r\n        // Calculate forces\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n\r\n        let netForce = 0;\r\n        if (Math.abs(this.object.vx) < 1e-4) {\r\n            // Object is at rest\r\n            if (Math.abs(parallelForce) > frictionForce) {\r\n                // Static friction is overcome, object starts moving\r\n                netForce = parallelForce - Math.sign(parallelForce) * frictionForce;\r\n            } else {\r\n                // Static friction holds object in place\r\n                netForce = 0;\r\n                this.object.vx = 0;\r\n            }\r\n        } else {\r\n            // Object is moving, use kinetic friction (always opposes motion)\r\n            netForce = parallelForce - Math.sign(this.object.vx) * frictionForce;\r\n        }\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        // Enhanced acceleration scaling for more dramatic effect with higher angles\r\n        const angleEffect = Math.sin(angleRad) * 1.5; // Amplify the angle effect\r\n        const enhancedAcceleration = acceleration * (1 + angleEffect);\r\n        \r\n        // Update velocity\r\n        this.object.vx += enhancedAcceleration * dt;\r\n        \r\n        // Update position\r\n        this.object.x += this.object.vx * dt;\r\n        \r\n        // Calculate incline length and end position with adjusted start\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startX = canvasWidth * 0.125;\r\n        const startY = canvasHeight * 0.5;\r\n        const endX = startX + inclineLength * Math.cos(angleRad);\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        \r\n        // Calculate how much to move the incline up to keep it within bounds\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        \r\n        // Constrain object to stay within the incline\r\n        if (this.object.x > endX) {\r\n            this.object.x = endX;\r\n            this.object.vx = 0;\r\n        }\r\n        \r\n        // Position object ON TOP of the incline surface (not embedded)\r\n        // Scale object size with mass for positioning\r\n        const objectSize = Math.max(12, Math.min(25, 12 + this.objectMass * 2));\r\n        this.object.y = adjustedStartY + (this.object.x - startX) * Math.tan(angleRad) - objectSize - 18 * Math.cos(angleRad);\r\n    }\r\n    \r\n    render() {\r\n        // Use standardized neutral canvas background handled globally\r\n        \r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        // Use canvas dimensions for incline positioning\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startX = canvasWidth * 0.125;\r\n        const startY = canvasHeight * 0.5;\r\n        const endX = startX + inclineLength * Math.cos(angleRad);\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        \r\n        // Calculate how much to move the incline up to keep it within bounds\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        const adjustedEndY = endY - verticalOffset;\r\n        // Scale object size with mass (minimum 12, maximum 25)\r\n        const objectSize = Math.max(12, Math.min(25, 12 + this.objectMass * 2));\r\n\r\n        // Draw subtle grid/ruler along the incline\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = 'rgba(80,80,80,0.25)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let i = 0; i <= inclineLength; i += 40) {\r\n            const x = startX + i * Math.cos(angleRad);\r\n            const y = adjustedStartY + i * Math.sin(angleRad);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            this.ctx.lineTo(x - 8 * Math.sin(angleRad), y + 8 * Math.cos(angleRad));\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.restore();\r\n\r\n        // Draw enhanced incline surface with modern styling\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(startX, adjustedStartY);\r\n        this.ctx.lineTo(endX, adjustedEndY);\r\n        this.ctx.lineTo(endX + 20 * Math.sin(angleRad), adjustedEndY - 20 * Math.cos(angleRad));\r\n        this.ctx.lineTo(startX + 20 * Math.sin(angleRad), adjustedStartY - 20 * Math.cos(angleRad));\r\n        this.ctx.closePath();\r\n        \r\n        // Modern surface colors - use generic surface appearance\r\n        const surfaceColor = '#f5f5f5';\r\n        const textureColor = '#757575';\r\n        \r\n        // Main surface fill\r\n        this.ctx.fillStyle = surfaceColor;\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced gradient shading\r\n        const surfaceGradient = this.ctx.createLinearGradient(startX, adjustedStartY, endX, adjustedEndY);\r\n        surfaceGradient.addColorStop(0, 'rgba(255,255,255,0.3)');\r\n        surfaceGradient.addColorStop(0.5, 'rgba(255,255,255,0.1)');\r\n        surfaceGradient.addColorStop(1, 'rgba(0,0,0,0.2)');\r\n        this.ctx.fillStyle = surfaceGradient;\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced texture pattern\r\n        this.ctx.strokeStyle = textureColor;\r\n        this.ctx.lineWidth = 1.5;\r\n        for (let i = 0; i < inclineLength; i += 20) {\r\n            const x = startX + i * Math.cos(angleRad);\r\n            const y = adjustedStartY + i * Math.sin(angleRad);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            this.ctx.lineTo(x + 15 * Math.sin(angleRad), y - 15 * Math.cos(angleRad));\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.restore();\r\n\r\n        // Draw angle label at the base of the incline\r\n        this.ctx.save();\r\n        \r\n        // Draw horizontal reference line at the base\r\n        this.ctx.strokeStyle = 'rgba(78, 205, 196, 0.6)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(endX - 80, adjustedEndY);\r\n        this.ctx.lineTo(endX + 20, adjustedEndY);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 20px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        // Position label at the bottom of the incline where it meets the ground\r\n        const labelX = endX - 35; // Position near the bottom end\r\n        const labelY = adjustedEndY + 25; // Position below the incline at the base\r\n        this.ctx.fillText(`${this.inclineAngle}°`, labelX, labelY);\r\n        \r\n        // Add a subtle background for better readability\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.8)';\r\n        this.ctx.fillRect(labelX - 25, labelY - 15, 50, 20);\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`${this.inclineAngle}°`, labelX, labelY);\r\n        this.ctx.restore();\r\n\r\n        // Draw enhanced object with modern styling\r\n        this.ctx.save();\r\n        this.ctx.translate(this.object.x, this.object.y);\r\n        this.ctx.rotate(angleRad);\r\n        \r\n        // Add subtle bounce effect based on velocity\r\n        const bounceOffset = Math.sin(this.time * 0.01) * Math.min(Math.abs(this.object.vx) * 0.1, 2);\r\n        this.ctx.translate(0, bounceOffset);\r\n        \r\n        // Add rolling rotation effect when moving\r\n        if (Math.abs(this.object.vx) > 0.1) {\r\n            const rotationSpeed = this.object.vx * 0.02; // Rotation based on velocity\r\n            this.ctx.rotate(this.time * rotationSpeed);\r\n        }\r\n        \r\n        // Enhanced 3D shadow effect with blur and dynamic positioning\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.shadowOffsetX = 4;\r\n        this.ctx.shadowOffsetY = 4 + Math.abs(this.object.vx) * 0.5; // Dynamic shadow based on speed\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(-objectSize + 6, -objectSize + 6, objectSize * 2, objectSize * 2);\r\n        \r\n        // Reset shadow for main object\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        this.ctx.shadowOffsetY = 0;\r\n        \r\n        // Create rounded rectangle path for modern look\r\n        const radius = objectSize * 0.2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(-objectSize + radius, -objectSize);\r\n        this.ctx.lineTo(objectSize - radius, -objectSize);\r\n        this.ctx.quadraticCurveTo(objectSize, -objectSize, objectSize, -objectSize + radius);\r\n        this.ctx.lineTo(objectSize, objectSize - radius);\r\n        this.ctx.quadraticCurveTo(objectSize, objectSize, objectSize - radius, objectSize);\r\n        this.ctx.lineTo(-objectSize + radius, objectSize);\r\n        this.ctx.quadraticCurveTo(-objectSize, objectSize, -objectSize, objectSize - radius);\r\n        this.ctx.lineTo(-objectSize, -objectSize + radius);\r\n        this.ctx.quadraticCurveTo(-objectSize, -objectSize, -objectSize + radius, -objectSize);\r\n        this.ctx.closePath();\r\n        \r\n        // Modern gradient for the object with more sophisticated colors\r\n        const objectGradient = this.ctx.createLinearGradient(-objectSize, -objectSize, objectSize, objectSize);\r\n        objectGradient.addColorStop(0, '#ff6b6b');\r\n        objectGradient.addColorStop(0.3, '#ee5a52');\r\n        objectGradient.addColorStop(0.7, '#d32f2f');\r\n        objectGradient.addColorStop(1, '#b71c1c');\r\n        \r\n        // Main object body\r\n        this.ctx.fillStyle = objectGradient;\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced highlight effect with multiple layers\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n        this.ctx.fillRect(-objectSize, -objectSize, objectSize * 2, objectSize * 0.4);\r\n        \r\n        // Secondary highlight for more depth\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.fillRect(-objectSize, -objectSize, objectSize * 2, objectSize * 0.2);\r\n        \r\n        // Add subtle texture pattern\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let i = -objectSize + 4; i < objectSize - 4; i += 6) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(i, -objectSize + 4);\r\n            this.ctx.lineTo(i, objectSize - 4);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Modern border with gradient\r\n        this.ctx.strokeStyle = '#2c3e50';\r\n        this.ctx.lineWidth = 2.5;\r\n        this.ctx.stroke();\r\n        \r\n        // Add a subtle inner glow effect\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.stroke();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add motion blur effect when object is moving\r\n        if (Math.abs(this.object.vx) > 0.1) {\r\n            const blurIntensity = Math.min(Math.abs(this.object.vx) * 0.5, 0.8);\r\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${blurIntensity * 0.3})`;\r\n            this.ctx.fillRect(-objectSize - 8, -objectSize, 8, objectSize * 2);\r\n        }\r\n        \r\n        this.ctx.restore();\r\n\r\n        // Draw analytics if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawForceVectors();\r\n            // Removed on-canvas stats panel for a cleaner view\r\n        }\r\n        \r\n        // Draw canvas labels for physics context\r\n        this.drawFrictionLabels();\r\n    }\r\n    \r\n    drawForceVectors() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = (Math.abs(this.object.vx) < 1e-4 && Math.abs(parallelForce) <= frictionForce)\r\n            ? 0\r\n            : parallelForce - Math.sign(this.object.vx || parallelForce) * frictionForce;\r\n        // Scale object size with mass for force vectors\r\n        const objectSize = Math.max(12, Math.min(25, 12 + this.objectMass * 2));\r\n        const x = this.object.x;\r\n        const y = this.object.y;\r\n\r\n        // Helper to draw an arrow\r\n        const drawArrow = (fromX, fromY, dx, dy, color, label) => {\r\n            const len = Math.sqrt(dx * dx + dy * dy);\r\n            if (len < 1) return; // Reduced minimum threshold\r\n            const normDX = dx / len;\r\n            const normDY = dy / len;\r\n            const arrowLen = Math.max(50, Math.min(120, len));\r\n            const endX = fromX + normDX * arrowLen;\r\n            const endY = fromY + normDY * arrowLen;\r\n            this.ctx.save();\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(fromX, fromY);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.strokeStyle = color;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.stroke();\r\n            // Arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(endX, endY);\r\n            this.ctx.lineTo(endX - 12 * normDX - 8 * normDY, endY - 12 * normDY + 8 * normDX);\r\n            this.ctx.lineTo(endX - 12 * normDX + 8 * normDY, endY - 12 * normDY - 8 * normDX);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.fill();\r\n            // Label\r\n            this.ctx.font = 'bold 14px Inter';\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.textAlign = 'left';\r\n            this.ctx.fillText(label, endX + 15, endY + 4);\r\n            this.ctx.restore();\r\n        };\r\n\r\n        // Gravity (downward) - Dark Blue\r\n        drawArrow(x, y, 0, weight * 0.12, '#1565C0', 'mg');\r\n        \r\n        // Parallel component of gravity (down the incline) - Orange\r\n        drawArrow(x, y, parallelForce * Math.cos(angleRad) * 0.12, parallelForce * Math.sin(angleRad) * 0.12, '#FF8C00', `mg sin(${this.inclineAngle}°)`);\r\n        \r\n        // Friction (opposes motion, along incline) - Dark Red\r\n        let frictionDir = -1;\r\n        if (Math.abs(this.object.vx) < 1e-4) {\r\n            frictionDir = -Math.sign(parallelForce);\r\n        } else {\r\n            frictionDir = -Math.sign(this.object.vx);\r\n        }\r\n        // Ensure friction force is always visible with minimum length\r\n        const frictionMagnitude = Math.max(frictionForce * 0.12, 20);\r\n        drawArrow(x, y, frictionDir * frictionMagnitude * Math.cos(angleRad), frictionDir * frictionMagnitude * Math.sin(angleRad), '#C62828', 'f');\r\n        \r\n        // Net force (along incline) - Dark Purple\r\n        if (Math.abs(netForce) > 0.1) {\r\n            drawArrow(x, y, netForce * Math.cos(angleRad) * 0.12, netForce * Math.sin(angleRad) * 0.12, '#6A1B9A', 'Fₙₑₜ');\r\n        }\r\n    }\r\n    \r\n    drawFrictionInfo() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = parallelForce - frictionForce;\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        // Modern info panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(10, 10, 280, 120);\r\n        \r\n        // Border\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(10, 10, 280, 120);\r\n        \r\n        // Modern text styling\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = 35;\r\n        this.ctx.fillText(`Friction: ${this.frictionCoefficient.toFixed(2)}`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Angle: ${this.inclineAngle}°`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Net Force: ${netForce.toFixed(1)} N`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Acceleration: ${acceleration.toFixed(2)} m/s²`, 20, y);\r\n    }\r\n    \r\n    getStats() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = parallelForce - frictionForce;\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        return {\r\n            frictionCoefficient: this.frictionCoefficient,\r\n            inclineAngle: this.inclineAngle,\r\n            netForce: netForce,\r\n            acceleration: acceleration\r\n        };\r\n    }\r\n    \r\n    drawFrictionLabels() {\r\n        this.drawLabels(\r\n            'Friction & Inclined Planes',\r\n            'F = μN  |  F∥ = mg sin θ  |  N = mg cos θ'\r\n        );\r\n    }\r\n}","\r\n// Wave Propagation Simulation\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class WavePropagation extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'wave-propagation';\r\n        this.waveType = 'transverse';\r\n        this.speed = 1;\r\n        this.frequency = 1;\r\n        this.amplitude = 50;\r\n        this.wavelength = 150;\r\n        this.showAnalytics = false;\r\n        this.particles = [];\r\n        this.waveSpeed = 0; // Calculated from frequency and wavelength\r\n        this.energy = 0; // Wave energy\r\n        \r\n        this.initializeParticles();\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const particleCount = 80; // Reduced particles for cleaner visualization\r\n        for (let i = 0; i < particleCount; i++) {\r\n            this.particles.push({\r\n                x: (i / particleCount) * this.ctx.canvas.width,\r\n                y: this.ctx.canvas.height / 2,\r\n                originalY: this.ctx.canvas.height / 2,\r\n                originalX: (i / particleCount) * this.ctx.canvas.width,\r\n                vx: 0,\r\n                vy: 0,\r\n                index: i\r\n            });\r\n        }\r\n    }\r\n    \r\n    calculateWaveParameters() {\r\n        // Calculate wave speed: v = f × λ\r\n        this.waveSpeed = this.frequency * this.wavelength;\r\n        // Calculate wave energy (proportional to amplitude^2 and frequency^2)\r\n        this.energy = 0.5 * this.amplitude * this.amplitude * this.frequency * this.frequency;\r\n    }\r\n    \r\n    setWaveType(type) {\r\n        this.waveType = type;\r\n        \r\n        // Don't reset parameters - keep current values\r\n        // Just reinitialize particles with new wave type and restart time\r\n        this.time = 0;\r\n        this.initializeParticles();\r\n        \r\n        // Recalculate wave parameters\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        // Don't recalculate wave parameters when user changes speed\r\n        // this.calculateWaveParameters();\r\n    }\r\n    \r\n    setFrequency(freq) {\r\n        this.frequency = freq;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setAmplitude(amp) {\r\n        this.amplitude = amp;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setWavelength(wavelength) {\r\n        this.wavelength = wavelength;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n    reset() {\r\n        // Reset all parameters to initial state\r\n        this.waveType = 'transverse';\r\n        this.speed = 1;\r\n        this.frequency = 1;\r\n        this.amplitude = 50;\r\n        this.wavelength = 150;\r\n        this.showAnalytics = false;\r\n        this.time = 0;\r\n        \r\n        // Reinitialize particles\r\n        this.initializeParticles();\r\n        \r\n        // Recalculate wave parameters\r\n        this.calculateWaveParameters();\r\n        \r\n        // Reset controls to match the reset state\r\n        const speedSlider = document.getElementById('waveSpeed');\r\n        const frequencySlider = document.getElementById('waveFrequency');\r\n        const amplitudeSlider = document.getElementById('waveAmplitude');\r\n        const waveTypeSelect = document.getElementById('waveType');\r\n        const analyticsCheckbox = document.getElementById('waveShowAnalytics');\r\n        \r\n        if (speedSlider) {\r\n            speedSlider.value = this.speed;\r\n            document.getElementById('waveSpeedValue').textContent = this.speed + 'x';\r\n        }\r\n        \r\n        if (frequencySlider) {\r\n            frequencySlider.value = this.frequency;\r\n            document.getElementById('waveFrequencyValue').textContent = this.frequency;\r\n        }\r\n        \r\n        if (amplitudeSlider) {\r\n            amplitudeSlider.value = this.amplitude;\r\n            document.getElementById('waveAmplitudeValue').textContent = this.amplitude;\r\n        }\r\n        \r\n        if (waveTypeSelect) {\r\n            waveTypeSelect.value = this.waveType;\r\n        }\r\n        \r\n        if (analyticsCheckbox) {\r\n            analyticsCheckbox.checked = this.showAnalytics;\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        // Reduced speed for better observation\r\n        const speedMultiplier = this.waveType === 'longitudinal' ? 0.5 : 2;\r\n        const dt = (deltaTime / 1000) * this.speed * speedMultiplier;\r\n        this.time += dt;\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            const phase = (particle.x / this.wavelength) * 2 * Math.PI;\r\n            const timePhase = this.time * this.frequency * 2 * Math.PI;\r\n            \r\n            let displacement = 0;\r\n            let velocity = 0;\r\n            \r\n            switch (this.waveType) {\r\n                case 'transverse':\r\n                    displacement = this.amplitude * Math.sin(phase - timePhase);\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * Math.cos(phase - timePhase);\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n\r\n                case 'longitudinal':\r\n                    // Longitudinal wave: particles move horizontally along wave direction\r\n                    // Use smaller amplitude for more visible movement\r\n                    const longitudinalAmplitude = this.amplitude * 0.5;\r\n                    displacement = longitudinalAmplitude * Math.sin(phase - timePhase);\r\n                    velocity = -longitudinalAmplitude * this.frequency * 2 * Math.PI * Math.cos(phase - timePhase);\r\n                    particle.x = particle.originalX + displacement;\r\n                    particle.y = particle.originalY; // Keep vertical position constant\r\n                    particle.vx = velocity;\r\n                    particle.vy = 0;\r\n                    // Store displacement for spring visualization\r\n                    particle.displacement = displacement;\r\n                    break;\r\n                case 'interference':\r\n                    const wave1 = this.amplitude * Math.sin(phase - timePhase);\r\n                    const wave2 = this.amplitude * Math.sin(phase + timePhase);\r\n                    displacement = wave1 + wave2;\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * \r\n                              (Math.cos(phase - timePhase) - Math.cos(phase + timePhase));\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n                case 'standing':\r\n                    displacement = this.amplitude * Math.sin(phase) * Math.cos(timePhase);\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * Math.sin(phase) * Math.sin(timePhase);\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Draw grid and scale markers\r\n        this.drawGrid();\r\n        \r\n        // Draw waveform based on wave type\r\n        if (this.waveType === 'longitudinal') {\r\n            this.drawLongitudinalWaveform();\r\n        } else {\r\n        this.drawEnhancedWaveform();\r\n        }\r\n        \r\n        // Always draw particles with velocity-based coloring\r\n        this.drawParticles();\r\n        \r\n        // Draw wave direction indicator\r\n        this.drawWaveDirection();\r\n        \r\n        // Draw canvas labels\r\n        this.drawCanvasLabels();\r\n        \r\n        // Draw analytics if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawVelocityVectors();\r\n            this.drawWaveInfo();\r\n            this.drawEnergyVisualization();\r\n        }\r\n    }\r\n    \r\n    drawGrid() {\r\n        // Draw wavelength markers with half-pixel alignment for crisp lines\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.lineCap = 'butt';\r\n        this.ctx.setLineDash([5, 5]);\r\n        for (let x = 0; x < this.ctx.canvas.width; x += this.wavelength) {\r\n            const px = Math.round(x) + 0.5;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(px, 0.5);\r\n            this.ctx.lineTo(px, this.ctx.canvas.height - 0.5);\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.setLineDash([]);\r\n        // Draw amplitude markers\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let y = centerY - this.amplitude; y <= centerY + this.amplitude; y += this.amplitude / 2) {\r\n            const py = Math.round(y) + 0.5;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0.5, py);\r\n            this.ctx.lineTo(this.ctx.canvas.width - 0.5, py);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawEnhancedWaveform() {\r\n        this.ctx.beginPath();\r\n        \r\n        // Create gradient for waveform\r\n        const gradient = this.ctx.createLinearGradient(0, 0, this.ctx.canvas.width, 0);\r\n        gradient.addColorStop(0, '#667eea');\r\n        gradient.addColorStop(0.5, '#764ba2');\r\n        gradient.addColorStop(1, '#667eea');\r\n        \r\n        this.ctx.strokeStyle = gradient;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        \r\n        // Create smooth waveform with dense interpolation\r\n        if (this.particles.length > 1) {\r\n            const startX = this.particles[0].x;\r\n            const endX = this.particles[this.particles.length - 1].x;\r\n            const numPoints = 300; // Even denser sampling\r\n            \r\n            // For transverse waves, draw vertical waveform\r\n            this.ctx.moveTo(startX, this.particles[0].y);\r\n            \r\n            for (let i = 1; i < numPoints; i++) {\r\n                const t = i / (numPoints - 1);\r\n                const x = startX + t * (endX - startX);\r\n                \r\n                // Find the corresponding y value by interpolating between particles\r\n                const particleIndex = t * (this.particles.length - 1);\r\n                const lowIndex = Math.floor(particleIndex);\r\n                const highIndex = Math.min(lowIndex + 1, this.particles.length - 1);\r\n                const fraction = particleIndex - lowIndex;\r\n                \r\n                const lowY = this.particles[lowIndex].y;\r\n                const highY = this.particles[highIndex].y;\r\n                const y = lowY + fraction * (highY - lowY);\r\n                \r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    drawLongitudinalWaveform() {\r\n        if (this.particles.length < 2) return;\r\n        \r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const springRadius = 20;\r\n        \r\n        // Draw a slinky-like spring with multiple coils\r\n        this.ctx.strokeStyle = '#667eea';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        \r\n        // Create a continuous spring path\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particles[0].x, centerY);\r\n        \r\n        // Draw smooth spring coils along the entire length\r\n        const totalLength = this.particles[this.particles.length - 1].x - this.particles[0].x;\r\n        const numPoints = 200; // Much more points for smooth curve\r\n        \r\n        for (let i = 0; i <= numPoints; i++) {\r\n            const t = i / numPoints;\r\n            const x = this.particles[0].x + t * totalLength;\r\n            \r\n            // Calculate wave displacement at this position\r\n            const phase = (x / this.wavelength) * 2 * Math.PI;\r\n            const timePhase = this.time * this.frequency * 2 * Math.PI;\r\n            const waveDisplacement = this.amplitude * Math.sin(phase - timePhase);\r\n            \r\n            // Add smooth spring coil offset\r\n            const coilOffset = Math.sin(t * Math.PI * 8) * springRadius; // More coils for smoothness\r\n            \r\n            // Combine wave displacement with spring coil\r\n            const y = centerY + coilOffset + waveDisplacement * 0.3;\r\n            \r\n            this.ctx.lineTo(x, y);\r\n        }\r\n        \r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave direction arrows\r\n        this.drawLongitudinalWaveDirection();\r\n    }\r\n    \r\n    drawLongitudinalWaveDirection() {\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const waveSpeed = this.frequency * this.wavelength;\r\n        const arrowX = 50 + (this.time * waveSpeed * 0.1) % 100;\r\n        \r\n        const y = Math.round(centerY) + 0.5;\r\n        const ax = Math.round(arrowX) + 0.5;\r\n\r\n        // Draw horizontal arrow (crisp)\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#ff6b6b';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.moveTo(ax, y);\r\n        this.ctx.lineTo(ax + 30, y);\r\n        this.ctx.stroke();\r\n        \r\n        // Arrowhead\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#ff6b6b';\r\n        this.ctx.moveTo(ax + 30.5, y);\r\n        this.ctx.lineTo(ax + 25.5, y - 5);\r\n        this.ctx.lineTo(ax + 25.5, y + 5);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawCanvasLabels() {\r\n        const waveTypeLabel = this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1) + ' Wave';\r\n        this.drawLabels(\r\n            waveTypeLabel,\r\n            `v = f×λ = ${this.waveSpeed.toFixed(1)} px/s  |  y = A sin(2π(ft-x/λ))  |  E ∝ A²f²`\r\n        );\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Calculate velocity magnitude for coloring\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const maxVelocity = this.amplitude * this.frequency * 2 * Math.PI;\r\n            const velocityRatio = Math.min(velocity / maxVelocity, 1);\r\n            \r\n            // Color based on velocity (blue = slow, red = fast)\r\n            const r = Math.floor(100 + velocityRatio * 155);\r\n            const g = Math.floor(100 + (1 - velocityRatio) * 100);\r\n            const b = Math.floor(200 + velocityRatio * 55);\r\n            \r\n            // Make particles larger for longitudinal waves\r\n            const particleSize = this.waveType === 'longitudinal' ? 8 : 5;\r\n            \r\n            // Draw crisp particle using rect aligned to pixel grid for sharper look\r\n            const px = Math.round(particle.x) + 0.5;\r\n            const py = Math.round(particle.y) + 0.5;\r\n            this.ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(px, py, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            // Thin stroke for definition\r\n            this.ctx.strokeStyle = 'rgba(255,255,255,0.9)';\r\n            this.ctx.lineWidth = 0.75;\r\n            this.ctx.stroke();\r\n        });\r\n    }\r\n    \r\n    drawVelocityVectors() {\r\n        this.particles.forEach(particle => {\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            if (velocity > 1) {\r\n                const scale = 0.1;\r\n                const endX = particle.x + particle.vx * scale;\r\n                const endY = particle.y + particle.vy * scale;\r\n\r\n                const sx = Math.round(particle.x) + 0.5;\r\n                const sy = Math.round(particle.y) + 0.5;\r\n                const ex = Math.round(endX) + 0.5;\r\n                const ey = Math.round(endY) + 0.5;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#ff6b6b';\r\n                this.ctx.lineWidth = 1.5;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(sx, sy);\r\n                this.ctx.lineTo(ex, ey);\r\n                this.ctx.stroke();\r\n                \r\n                // Arrowhead\r\n                const angle = Math.atan2(particle.vy, particle.vx);\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#ff6b6b';\r\n                this.ctx.moveTo(ex, ey);\r\n                this.ctx.lineTo(ex - 6 * Math.cos(angle - Math.PI / 6), ey - 6 * Math.sin(angle - Math.PI / 6));\r\n                this.ctx.lineTo(ex - 6 * Math.cos(angle + Math.PI / 6), ey - 6 * Math.sin(angle + Math.PI / 6));\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawWaveDirection() {\r\n        if (this.waveType !== 'standing') {\r\n            // Animated wave direction indicator - move at wave speed\r\n            const waveSpeed = this.frequency * this.wavelength;\r\n            const arrowX = 50 + (this.time * waveSpeed * 0.1) % 100;\r\n\r\n            const y = 50.5;\r\n            const ax = Math.round(arrowX) + 0.5;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#ff6b6b';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.lineCap = 'round';\r\n            this.ctx.moveTo(ax, y);\r\n            this.ctx.lineTo(ax + 20, y);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#ff6b6b';\r\n            this.ctx.moveTo(ax + 20.5, y);\r\n            this.ctx.lineTo(ax + 15.5, y - 5);\r\n            this.ctx.lineTo(ax + 15.5, y + 5);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawWaveInfo() {\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = 120; // Moved down to avoid overlap with main labels\r\n        this.ctx.fillText(`Wave Type: ${this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1)}`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Frequency: ${this.frequency.toFixed(1)} Hz`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Wavelength: ${this.wavelength.toFixed(0)} px`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Amplitude: ${this.amplitude.toFixed(0)} px`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Wave Speed: ${this.waveSpeed.toFixed(1)} px/s`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Energy: ${this.energy.toFixed(1)}`, 10, y);\r\n        y += 30;\r\n        \r\n        // Wave equation\r\n        this.ctx.fillText(`Wave Equation: y = A sin(kx - ωt)`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`where: k = 2π/λ, ω = 2πf`, 10, y);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    drawEnergyVisualization() {\r\n        // Draw energy bar\r\n        const barWidth = 200;\r\n        const barHeight = 20;\r\n        const barX = this.ctx.canvas.width - barWidth - 20;\r\n        const barY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n        \r\n        // Energy level\r\n        const maxEnergy = 0.5 * 100 * 100 * 3 * 3; // Max possible energy\r\n        const energyRatio = Math.min(this.energy / maxEnergy, 1);\r\n        const energyWidth = barWidth * energyRatio;\r\n        \r\n        // Gradient for energy bar\r\n        const energyGradient = this.ctx.createLinearGradient(barX, barY, barX + energyWidth, barY);\r\n        energyGradient.addColorStop(0, '#4CAF50');\r\n        energyGradient.addColorStop(1, '#FF9800');\r\n        \r\n        this.ctx.fillStyle = energyGradient;\r\n        this.ctx.fillRect(barX, barY, energyWidth, barHeight);\r\n        \r\n        // Label\r\n        this.ctx.fillStyle = '#fff';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(`Energy: ${this.energy.toFixed(1)}`, barX + barWidth / 2, barY + 15);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            waveType: this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1),\r\n            frequency: this.frequency.toFixed(1),\r\n            wavelength: this.wavelength.toFixed(0),\r\n            amplitude: this.amplitude.toFixed(0),\r\n            waveSpeed: this.waveSpeed.toFixed(1),\r\n            energy: this.energy.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n}\r\n\r\n// Sound Waves Simulation\r\nexport class SoundWaves extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'wave-propagation';\r\n        this.particles = [];\r\n        this.frequency = 2; // Hz (even lower frequency for easier observation)\r\n        this.amplitude = 50; // Percentage\r\n        this.waveSpeed = 343; // m/s (speed of sound in air)\r\n        this.particleCount = 80; // Much more particles for dense wave visualization\r\n        this.waveType = 'transverse'; // 'transverse', 'longitudinal', 'combined'\r\n        this.showPressure = true;\r\n        this.animationSpeed = 1.0;\r\n        \r\n        // Source and receiver properties\r\n        this.sourceX = 100;\r\n        this.sourceY = this.ctx.canvas.height / 2;\r\n        this.receiverX = this.ctx.canvas.width - 100;\r\n        this.receiverY = this.ctx.canvas.height / 2;\r\n        this.showSourceReceiver = true;\r\n        this.sourceActive = true;\r\n        this.pulses = [];\r\n        this.pulseDuration = 15; // much longer duration to ensure wave reaches receiver\r\n        \r\n        // Control button properties\r\n        this.isPlaying = false;\r\n        this.controlButtons = {\r\n            playPause: { x: 220, y: 20, width: 80, height: 30, label: '▶ Play' },\r\n            reset: { x: 310, y: 20, width: 60, height: 30, label: '🔄 Reset' }\r\n        };\r\n        \r\n        this.initializeParticles();\r\n        this.setupClickEvents();\r\n        \r\n        // Musical note frequencies (Hz)\r\n        this.musicalNotes = {\r\n            'C4': 261.63,\r\n            'D4': 293.66,\r\n            'E4': 329.63,\r\n            'F4': 349.23,\r\n            'G4': 392.00,\r\n            'A4': 440.00,\r\n            'B4': 493.88,\r\n            'C5': 523.25\r\n        };\r\n    }\r\n    \r\n    setupClickEvents() {\r\n        // Add click event listener to canvas for triggering wave pulses\r\n        this.ctx.canvas.addEventListener('click', (e) => {\r\n            const rect = this.ctx.canvas.getBoundingClientRect();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            \r\n            // Check if click is near the source\r\n            const distanceFromSource = Math.sqrt((x - this.sourceX) ** 2 + (y - this.sourceY) ** 2);\r\n            if (distanceFromSource < 50) {\r\n                this.triggerWavePulse();\r\n            }\r\n        });\r\n        \r\n        // Add touch event listener for mobile support\r\n        this.ctx.canvas.addEventListener('touchstart', (e) => {\r\n            e.preventDefault();\r\n            const rect = this.ctx.canvas.getBoundingClientRect();\r\n            const touch = e.touches[0];\r\n            const x = touch.clientX - rect.left;\r\n            const y = touch.clientY - rect.top;\r\n            \r\n            // Check if touch is near the source\r\n            const distanceFromSource = Math.sqrt((x - this.sourceX) ** 2 + (y - this.sourceY) ** 2);\r\n            if (distanceFromSource < 50) {\r\n                this.triggerWavePulse();\r\n            }\r\n        });\r\n    }\r\n    \r\n    handleButtonClick(x, y) {\r\n        // Check if click is on any control button\r\n        Object.keys(this.controlButtons).forEach(key => {\r\n            const button = this.controlButtons[key];\r\n            if (x >= button.x && x <= button.x + button.width &&\r\n                y >= button.y && y <= button.y + button.height) {\r\n                this.handleControlAction(key);\r\n            }\r\n        });\r\n    }\r\n    \r\n    handleControlAction(action) {\r\n        switch (action) {\r\n            case 'playPause':\r\n                if (this.isPlaying) {\r\n                    // Currently playing, so pause\r\n                    this.isPlaying = false;\r\n                    this.controlButtons.playPause.label = '▶ Play';\r\n                } else {\r\n                    // Currently paused, so play\r\n                    this.isPlaying = true;\r\n                    this.controlButtons.playPause.label = '⏸ Pause';\r\n                    this.triggerWavePulse();\r\n                }\r\n                break;\r\n            case 'reset':\r\n                this.isPlaying = false;\r\n                this.pulses = [];\r\n                this.time = 0;\r\n                this.initializeParticles();\r\n                this.controlButtons.playPause.label = '▶ Play';\r\n                break;\r\n        }\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const spacing = this.ctx.canvas.width / this.particleCount;\r\n        \r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: i * spacing,\r\n                originalX: i * spacing,\r\n                y: this.ctx.canvas.height / 2,\r\n                originalY: this.ctx.canvas.height / 2,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 2 + Math.random() * 1,\r\n                color: `hsl(${200 + Math.random() * 60}, 70%, 60%)`,\r\n                pressure: 0,\r\n                life: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    setFrequency(freq) {\r\n        this.frequency = freq;\r\n    }\r\n    \r\n    setAmplitude(amp) {\r\n        this.amplitude = amp;\r\n    }\r\n    \r\n    setWaveSpeed(speed) {\r\n        this.waveSpeed = speed;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setWaveType(type) {\r\n        this.waveType = type;\r\n    }\r\n    \r\n    setShowPressure(show) {\r\n        this.showPressure = show;\r\n    }\r\n    \r\n    setAnimationSpeed(speed) {\r\n        this.animationSpeed = speed;\r\n    }\r\n    \r\n    setShowSourceReceiver(show) {\r\n        this.showSourceReceiver = show;\r\n    }\r\n    \r\n    setSourceActive(active) {\r\n        this.sourceActive = active;\r\n    }\r\n    \r\n    setSourcePosition(x, y) {\r\n        this.sourceX = x;\r\n        this.sourceY = y;\r\n    }\r\n    \r\n    setReceiverPosition(x, y) {\r\n        this.receiverX = x;\r\n        this.receiverY = y;\r\n    }\r\n    \r\n    setMusicalNote(note) {\r\n        if (this.musicalNotes[note]) {\r\n            this.frequency = this.musicalNotes[note];\r\n        }\r\n    }\r\n    \r\n    setInstrumentPreset(instrument) {\r\n        switch (instrument) {\r\n            case 'guitar':\r\n                this.frequency = 82.41; // Low E string\r\n                this.amplitude = 60;\r\n                this.waveType = 'transverse';\r\n                break;\r\n            case 'piano':\r\n                this.frequency = 440.00; // A4\r\n                this.amplitude = 70;\r\n                this.waveType = 'transverse';\r\n                break;\r\n            case 'flute':\r\n                this.frequency = 523.25; // C5\r\n                this.amplitude = 50;\r\n                this.waveType = 'longitudinal';\r\n                break;\r\n            case 'drum':\r\n                this.frequency = 100; // Low frequency\r\n                this.amplitude = 80;\r\n                this.waveType = 'combined';\r\n                break;\r\n        }\r\n    }\r\n    \r\n    triggerWavePulse() {\r\n        const pulse = {\r\n            startTime: this.time, // Use animation time instead of Date.now()\r\n            duration: 20.0, // 20 seconds in animation time - much longer to reach receiver\r\n            active: true\r\n        };\r\n        this.pulses.push(pulse);\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.pulses = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        // Only update if playing\r\n        if (!this.isPlaying) {\r\n            return;\r\n        }\r\n        \r\n        this.time += deltaTime * this.animationSpeed;\r\n        \r\n        // Update pulses - remove expired ones\r\n        this.pulses = this.pulses.filter(pulse => {\r\n            const elapsed = (this.time - pulse.startTime) / 1000; // Convert to seconds\r\n            return elapsed < pulse.duration;\r\n        });\r\n        \r\n        const wavelength = (this.waveSpeed / this.frequency) * 0.3; // Scale down for better visualization\r\n        const angularFrequency = 2 * Math.PI * this.frequency;\r\n        const amplitude = (this.amplitude / 100) * 60; // Moderate amplitude for clear wave pattern\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Check if any pulse is active\r\n            let waveActive = false;\r\n            let wavePhase = 0;\r\n            let isInWavePacket = false;\r\n            let wavePacketStart = 0;\r\n            let wavePacketLength = 150;\r\n            let elapsed = 0;\r\n            \r\n            this.pulses.forEach(pulse => {\r\n                elapsed = (this.time - pulse.startTime) / 1000; // Convert to seconds\r\n                \r\n                // Check if pulse is active\r\n                if (elapsed >= 0 && elapsed <= pulse.duration) {\r\n                    waveActive = true;\r\n                    \r\n                    // Calculate wave packet properties - make it much more visible\r\n                    wavePacketLength = 150; // Fixed length in pixels for better visibility\r\n                    const waveFrontPosition = this.sourceX + (elapsed * this.waveSpeed * 0.1); // Slower wave front position\r\n                    \r\n                    // Check if wave has reached the receiver for collapsing effect\r\n                    const hasReachedReceiver = waveFrontPosition >= this.receiverX;\r\n                    \r\n                    let wavePacketEnd;\r\n                    if (hasReachedReceiver) {\r\n                        // Wave collapsing effect: trailing edge extends to receiver\r\n                        wavePacketStart = Math.max(this.sourceX - 50, waveFrontPosition - wavePacketLength) + 100;\r\n                        wavePacketEnd = this.receiverX; // Trailing edge goes all the way to receiver\r\n                    } else {\r\n                        // Normal wave packet - allow it to reach the receiver\r\n                        wavePacketStart = Math.max(this.sourceX - 50, waveFrontPosition - wavePacketLength) + 100;\r\n                        wavePacketEnd = Math.min(this.receiverX, waveFrontPosition) + 100;\r\n                    }\r\n                    \r\n                    // Check if particle is within the wave packet\r\n                    if (particle.originalX >= wavePacketStart && particle.originalX <= wavePacketEnd) {\r\n                        isInWavePacket = true;\r\n                        \r\n                        // Calculate phase within the wave packet\r\n                        const positionInPacket = (particle.originalX - wavePacketStart) / wavePacketLength;\r\n                        const wavePosition = positionInPacket * 3; // 3 wavelengths in the packet for better visibility\r\n                        const timePhase = elapsed * this.frequency * 2 * Math.PI;\r\n                        wavePhase = wavePosition * 2 * Math.PI - timePhase;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (waveActive && isInWavePacket) {\r\n                // Update particle trail history\r\n                if (!particle.trail) particle.trail = [];\r\n                particle.trail.push({ x: particle.x, y: particle.y });\r\n                if (particle.trail.length > 8) {\r\n                    particle.trail.shift();\r\n                }\r\n                \r\n                // Wave motion within the packet\r\n                if (this.waveType === 'transverse' || this.waveType === 'combined') {\r\n                    // Transverse wave motion - create proper sinusoidal wave pattern\r\n                    particle.x = particle.originalX;\r\n                    \r\n                    // Create sinusoidal wave with proper phase relationship\r\n                    const wavePosition = (particle.originalX - wavePacketStart) / wavePacketLength;\r\n                    const spatialPhase = wavePosition * 3 * 2 * Math.PI; // 3 wavelengths in packet\r\n                    const temporalPhase = elapsed * this.frequency * 2 * Math.PI;\r\n                    const totalPhase = spatialPhase - temporalPhase;\r\n                    \r\n                    particle.y = particle.originalY + amplitude * Math.sin(totalPhase);\r\n                    particle.vy = amplitude * angularFrequency * Math.cos(totalPhase) * 0.1; // Slower motion\r\n                    particle.vx = 0;\r\n                }\r\n                \r\n                if (this.waveType === 'longitudinal' || this.waveType === 'combined') {\r\n                    // Longitudinal wave motion - create proper compression/rarefaction pattern\r\n                    particle.y = particle.originalY;\r\n                    \r\n                    // Create sinusoidal wave with proper phase relationship for longitudinal waves\r\n                    const wavePosition = (particle.originalX - wavePacketStart) / wavePacketLength;\r\n                    const spatialPhase = wavePosition * 3 * 2 * Math.PI; // 3 wavelengths in packet\r\n                    const temporalPhase = elapsed * this.frequency * 2 * Math.PI;\r\n                    const totalPhase = spatialPhase - temporalPhase;\r\n                    \r\n                    // Horizontal displacement for compression/rarefaction\r\n                    particle.x = particle.originalX + amplitude * 0.4 * Math.sin(totalPhase);\r\n                    particle.vx = amplitude * 0.4 * angularFrequency * Math.cos(totalPhase) * 0.1; // Slower motion\r\n                    particle.vy = 0;\r\n                    \r\n                    // Calculate pressure for compression/rarefaction visualization\r\n                    particle.pressure = Math.sin(totalPhase);\r\n                }\r\n                \r\n                } else {\r\n                // Reset particle to original position when no wave packet is present\r\n                particle.y = particle.originalY;\r\n                particle.x = particle.originalX;\r\n                particle.vy = 0;\r\n                particle.vx = 0;\r\n                particle.pressure = 0;\r\n                particle.trail = []; // Clear trail when no wave\r\n            }\r\n            \r\n            particle.life += deltaTime;\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Always draw background and source/receiver\r\n        this.drawBackground();\r\n        if (this.showSourceReceiver) {\r\n            this.drawSourceAndReceiver();\r\n        }\r\n        \r\n        // Draw wave if pulses are active\r\n        if (this.pulses && this.pulses.length > 0) {\r\n            switch (this.waveType) {\r\n                case 'transverse':\r\n                    this.drawTransverseWave();\r\n                    break;\r\n                case 'longitudinal':\r\n                    this.drawLongitudinalWave();\r\n                    break;\r\n                case 'combined':\r\n                    this.drawCombinedWave();\r\n                    break;\r\n            }\r\n        } else {\r\n            // Show instruction when no wave is active\r\n            this.drawInstruction();\r\n        }\r\n        \r\n        // Always show info panels\r\n        this.drawSoundInfo();\r\n        \r\n        // Draw control buttons\r\n        this.drawControlButtons();\r\n        \r\n        // Draw wave packet boundaries if wave is active\r\n        this.drawWavePacketBoundaries();\r\n        \r\n    }\r\n    \r\n    drawInstruction() {\r\n        // Draw instruction at bottom of canvas\r\n        const y = this.ctx.canvas.height - 30;\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(this.ctx.canvas.width / 2 - 150, y - 15, 300, 30);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🎵 Click the red source to start!', this.ctx.canvas.width / 2, y);\r\n    }\r\n    \r\n    drawControlButtons() {\r\n        // Draw control buttons at top left\r\n        Object.keys(this.controlButtons).forEach(key => {\r\n            const button = this.controlButtons[key];\r\n            \r\n            // Button background\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n            this.ctx.fillRect(button.x, button.y, button.width, button.height);\r\n            \r\n            // Button border\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.strokeRect(button.x, button.y, button.width, button.height);\r\n            \r\n            // Button text\r\n            this.ctx.fillStyle = 'white';\r\n            this.ctx.font = 'bold 10px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(button.label, button.x + button.width / 2, button.y + button.height / 2 + 3);\r\n        });\r\n    }\r\n    \r\n    drawBackground() {\r\n        // Draw subtle gradient background\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw subtle wave direction indicators\r\n        this.ctx.strokeStyle = 'rgba(100, 149, 237, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([20, 10]);\r\n        \r\n        // Draw horizontal reference line\r\n            this.ctx.beginPath();\r\n        this.ctx.moveTo(this.sourceX, this.sourceY);\r\n        this.ctx.lineTo(this.receiverX, this.receiverY);\r\n            this.ctx.stroke();\r\n        \r\n        // Add wave direction arrows\r\n        const arrowSpacing = 100;\r\n        for (let x = this.sourceX + 50; x < this.receiverX - 50; x += arrowSpacing) {\r\n            const y = this.sourceY;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y - 5);\r\n            this.ctx.lineTo(x + 15, y);\r\n            this.ctx.lineTo(x, y + 5);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawTransverseWave() {\r\n        // Draw particle trails first (behind particles)\r\n        this.particles.forEach(particle => {\r\n            if (particle.trail && particle.trail.length > 1) {\r\n        this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                for (let i = 1; i < particle.trail.length; i++) {\r\n                    this.ctx.lineTo(particle.trail[i].x, particle.trail[i].y);\r\n                }\r\n                this.ctx.strokeStyle = `rgba(100, 149, 237, ${0.4 * (particle.trail.length / 8)})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.lineJoin = 'round';\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n        \r\n        // Draw wave envelope\r\n        this.ctx.strokeStyle = 'rgba(100, 149, 237, 0.8)';\r\n        this.ctx.lineWidth = 3; // Moderate line thickness\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.beginPath();\r\n        \r\n        // Draw smooth curve through particles\r\n        this.drawSmoothWave();\r\n        this.ctx.stroke();\r\n        \r\n        // Add a subtle background line for depth\r\n        this.ctx.strokeStyle = 'rgba(100, 149, 237, 0.3)';\r\n        this.ctx.lineWidth = 6; // Background line\r\n        this.ctx.beginPath();\r\n        this.drawSmoothWave();\r\n        this.ctx.stroke();\r\n        \r\n        // Draw larger, more visible particles\r\n        this.particles.forEach(particle => {\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const intensity = Math.min(velocity * 50, 1);\r\n            \r\n            // Color based on frequency and amplitude\r\n            const frequencyHue = (this.frequency / 20) * 360; // Map frequency to hue\r\n            const amplitudeSat = Math.min(this.amplitude / 50, 1) * 100; // Map amplitude to saturation\r\n            const color = `hsl(${frequencyHue}, ${amplitudeSat}%, 70%)`;\r\n            \r\n            // Draw larger particle with glow effect\r\n                this.ctx.shadowColor = color;\r\n            this.ctx.shadowBlur = 6;\r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size * (1 + intensity * 0.2), 0, Math.PI * 2); // Smaller particles\r\n                this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n                this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawLongitudinalWave() {\r\n        // Draw wave envelope for longitudinal waves\r\n        this.ctx.strokeStyle = 'rgba(255, 100, 0, 0.8)';\r\n        this.ctx.lineWidth = 3; // Moderate line thickness\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.beginPath();\r\n        \r\n        // Draw smooth curve through particles for longitudinal wave\r\n        this.drawSmoothWave();\r\n        this.ctx.stroke();\r\n        \r\n        // Add a subtle background line for depth\r\n        this.ctx.strokeStyle = 'rgba(255, 100, 0, 0.3)';\r\n        this.ctx.lineWidth = 6; // Background line\r\n        this.ctx.beginPath();\r\n        this.drawSmoothWave();\r\n        this.ctx.stroke();\r\n        \r\n        // Draw particles with compression/rarefaction visualization\r\n        this.particles.forEach(particle => {\r\n            const pressure = particle.pressure || 0;\r\n            const intensity = Math.abs(pressure);\r\n            \r\n            // Color based on pressure (red for compression, blue for rarefaction)\r\n            let color;\r\n            if (pressure > 0) {\r\n                // High pressure (compression) - red\r\n                color = `hsl(0, 80%, 60%)`;\r\n            } else {\r\n                // Low pressure (rarefaction) - blue\r\n                color = `hsl(240, 80%, 60%)`;\r\n            }\r\n            \r\n            // Draw particle with size based on pressure\r\n            const particleSize = particle.size + intensity * 1.5;\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add compression/rarefaction indicators\r\n            if (intensity > 0.3) {\r\n                this.ctx.strokeStyle = color;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.beginPath();\r\n                \r\n                if (pressure > 0) {\r\n                    // Compression - particles closer together\r\n                    this.ctx.moveTo(particle.x - 8, particle.y - 5);\r\n                    this.ctx.lineTo(particle.x - 8, particle.y + 5);\r\n                    this.ctx.moveTo(particle.x + 8, particle.y - 5);\r\n                    this.ctx.lineTo(particle.x + 8, particle.y + 5);\r\n                } else {\r\n                    // Rarefaction - particles farther apart\r\n                    this.ctx.moveTo(particle.x - 12, particle.y - 3);\r\n                    this.ctx.lineTo(particle.x - 12, particle.y + 3);\r\n                    this.ctx.moveTo(particle.x + 12, particle.y - 3);\r\n                    this.ctx.lineTo(particle.x + 12, particle.y + 3);\r\n                }\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n        \r\n        // Draw pressure zones\r\n        if (this.showPressure) {\r\n            this.drawPressureZones();\r\n        }\r\n    }\r\n    \r\n    drawCombinedWave() {\r\n        // Draw transverse wave as the main wave\r\n        this.drawTransverseWave();\r\n        \r\n        // Draw longitudinal components as pressure indicators\r\n        if (this.showPressure) {\r\n            this.drawPressureZones();\r\n        }\r\n        \r\n        // Draw longitudinal particles as small indicators\r\n        this.particles.forEach(particle => {\r\n            const pressure = particle.pressure;\r\n            const intensity = Math.abs(pressure);\r\n            \r\n            if (intensity > 0.3) {\r\n                // Color based on pressure (red for high, blue for low)\r\n                let color;\r\n                if (pressure > 0) {\r\n                    color = `hsl(0, 80%, 60%)`; // Red for compression\r\n                } else {\r\n                    color = `hsl(240, 80%, 60%)`; // Blue for rarefaction\r\n                }\r\n                \r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y + 30, 3, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawPressureZones() {\r\n        // Draw pressure zones that move with the wave - using more subtle colors\r\n        const wavelength = this.waveSpeed / this.frequency;\r\n        const waveSpeed = this.waveSpeed;\r\n        const frequency = this.frequency;\r\n        \r\n        // Calculate wave position based on time\r\n        const wavePosition = (this.time * 0.001 * waveSpeed) % wavelength;\r\n        \r\n        // Draw compression and rarefaction zones that move with the wave - only between source and receiver\r\n        const zoneHeight = 80; // Reduced height for pressure zones\r\n        const zoneY = this.sourceY - zoneHeight / 2; // Center zones vertically on the wave path\r\n        \r\n        for (let x = this.sourceX; x <= this.receiverX; x += wavelength / 4) {\r\n            const relativeX = (x - wavePosition) % wavelength;\r\n            const phase = (2 * Math.PI * relativeX) / wavelength;\r\n            const pressure = Math.sin(phase);\r\n            \r\n            if (pressure > 0.5) {\r\n                // High pressure zone (compression) - subtle orange/amber\r\n                this.ctx.fillStyle = 'rgba(255, 165, 0, 0.2)';\r\n                this.ctx.fillRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle border\r\n                this.ctx.strokeStyle = 'rgba(255, 165, 0, 0.3)';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle compression label\r\n                this.ctx.fillStyle = 'rgba(255, 165, 0, 0.7)';\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('C', x + wavelength / 8, zoneY + 15);\r\n            } else if (pressure < -0.5) {\r\n                // Low pressure zone (rarefaction) - subtle cyan/teal\r\n                this.ctx.fillStyle = 'rgba(0, 128, 128, 0.2)';\r\n                this.ctx.fillRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle border\r\n                this.ctx.strokeStyle = 'rgba(0, 128, 128, 0.3)';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle rarefaction label\r\n                this.ctx.fillStyle = 'rgba(0, 128, 128, 0.7)';\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('R', x + wavelength / 8, zoneY + 15);\r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n        \r\n    drawSourceAndReceiver() {\r\n        // Draw clickable area indicator (for debugging)\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.3)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.sourceX, this.sourceY, 50, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw source (speaker/microphone)\r\n        this.ctx.fillStyle = this.sourceActive ? '#FF6B6B' : '#666666';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.sourceX, this.sourceY, 25, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add speaker cone effect when active\r\n        if (this.sourceActive) {\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.sourceX, this.sourceY, 35, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Add pulsing effect\r\n            const pulse = Math.sin(this.time * 0.01) * 0.3 + 0.7;\r\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${pulse * 0.3})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.sourceX, this.sourceY, 40, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw receiver (ear/microphone)\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.receiverX, this.receiverY, 20, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add receiver cone\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.receiverX, this.receiverY, 30, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw labels with improved styling\r\n        // Add text shadow for better visibility\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 3;\r\n        this.ctx.shadowOffsetX = 1;\r\n        this.ctx.shadowOffsetY = 1;\r\n        \r\n        // Source label\r\n        this.ctx.fillStyle = '#FF6B6B'; // Match source color\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🎤 Source', this.sourceX, this.sourceY + 50);\r\n        \r\n        // Receiver label\r\n        this.ctx.fillStyle = '#4ECDC4'; // Match receiver color\r\n        this.ctx.fillText('👂 Receiver', this.receiverX, this.receiverY + 50);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        this.ctx.shadowOffsetY = 0;\r\n        \r\n        // Draw wave direction arrow\r\n        this.ctx.strokeStyle = '#FFD93D';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.setLineDash([10, 5]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.sourceX + 40, this.sourceY);\r\n        this.ctx.lineTo(this.receiverX - 30, this.receiverY);\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n        \r\n        // Add arrowhead\r\n        this.ctx.fillStyle = '#FFD93D';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.receiverX - 30, this.receiverY);\r\n        this.ctx.lineTo(this.receiverX - 40, this.receiverY - 5);\r\n        this.ctx.lineTo(this.receiverX - 40, this.receiverY + 5);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawSoundInfo() {\r\n        // Compact info panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(10, 10, 200, 60);\r\n        \r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔊 Sound Wave', 20, 25);\r\n        \r\n        this.ctx.font = '11px Arial';\r\n        this.ctx.fillText(`${this.waveType} • ${this.frequency}Hz • ${this.amplitude}%`, 20, 40);\r\n        this.ctx.fillText(`λ: ${(this.waveSpeed / this.frequency).toFixed(1)}m • v: ${this.waveSpeed}m/s`, 20, 55);\r\n    }\r\n    \r\n    drawSmoothWave() {\r\n        // Draw smooth curve through particles using quadratic Bezier curves\r\n        const particles = this.particles.filter(p => p.x > 0 && p.y > 0); // Filter out hidden particles\r\n        \r\n        if (particles.length < 2) return;\r\n        \r\n        // Start at first particle\r\n        this.ctx.moveTo(particles[0].x, particles[0].y);\r\n        \r\n        // Draw smooth curve through remaining particles\r\n        for (let i = 1; i < particles.length - 1; i++) {\r\n            const current = particles[i];\r\n            const next = particles[i + 1];\r\n            \r\n            // Calculate control point for smooth curve\r\n            const cp1x = current.x + (next.x - particles[i - 1].x) * 0.2;\r\n            const cp1y = current.y + (next.y - particles[i - 1].y) * 0.2;\r\n            \r\n            // Use quadratic curve for smooth interpolation\r\n            this.ctx.quadraticCurveTo(cp1x, cp1y, (current.x + next.x) / 2, (current.y + next.y) / 2);\r\n        }\r\n        \r\n        // End at last particle\r\n        if (particles.length > 1) {\r\n            this.ctx.lineTo(particles[particles.length - 1].x, particles[particles.length - 1].y);\r\n        }\r\n    }\r\n    \r\n    \r\n    drawWavePacketBoundaries() {\r\n        // Draw wave packet boundaries if wave is active\r\n        this.pulses.forEach(pulse => {\r\n            const elapsed = (this.time - pulse.startTime) / 1000;\r\n            \r\n            if (elapsed >= 0 && elapsed <= pulse.duration) {\r\n                const wavePacketLength = 150; // Fixed length in pixels for better visibility\r\n                const waveFrontPosition = this.sourceX + (elapsed * this.waveSpeed * 0.1);\r\n                \r\n                // Check if wave has reached the receiver for collapsing effect\r\n                const hasReachedReceiver = waveFrontPosition >= this.receiverX;\r\n                \r\n                let wavePacketStart, wavePacketEnd;\r\n                if (hasReachedReceiver) {\r\n                    // Wave collapsing effect: trailing edge extends to receiver\r\n                    wavePacketStart = Math.max(this.sourceX - 50, waveFrontPosition - wavePacketLength) + 100;\r\n                    wavePacketEnd = this.receiverX; // Trailing edge goes all the way to receiver\r\n        } else {\r\n                    // Normal wave packet - allow it to reach the receiver\r\n                    wavePacketStart = Math.max(this.sourceX - 50, waveFrontPosition - wavePacketLength) + 100;\r\n                    wavePacketEnd = Math.min(this.receiverX, waveFrontPosition) + 100;\r\n                }\r\n                \r\n                // Draw wave packet boundaries - make them more prominent\r\n                this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.9)';\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.setLineDash([8, 4]);\r\n                \r\n                // Leading edge (wave front)\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(wavePacketEnd, this.sourceY - 50);\r\n                this.ctx.lineTo(wavePacketEnd, this.sourceY + 50);\r\n                this.ctx.stroke();\r\n                \r\n                // Trailing edge\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(wavePacketStart, this.sourceY - 50);\r\n                this.ctx.lineTo(wavePacketStart, this.sourceY + 50);\r\n                this.ctx.stroke();\r\n                \r\n                // Wave packet label\r\n                this.ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\r\n                this.ctx.font = 'bold 10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                if (hasReachedReceiver) {\r\n                    this.ctx.fillText('Wave Collapsing', (wavePacketStart + wavePacketEnd) / 2, this.sourceY - 40);\r\n                } else {\r\n                    this.ctx.fillText('Wave Packet', (wavePacketStart + wavePacketEnd) / 2, this.sourceY - 40);\r\n                }\r\n                \r\n                this.ctx.setLineDash([]);\r\n            }\r\n        });\r\n    }\r\n    \r\n    \r\n    \r\n    getStats() {\r\n        return {\r\n            waveType: this.waveType,\r\n            frequency: this.frequency,\r\n            wavelength: this.waveSpeed / this.frequency,\r\n            waveSpeed: this.waveSpeed,\r\n            amplitude: this.amplitude,\r\n            particleCount: this.particleCount,\r\n            time: this.time\r\n        };\r\n    }\r\n}","\r\n\r\n// Electric Fields Simulation - Simplified\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class ElectricFields extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.charges = [];\r\n        this.testParticles = [];\r\n        this.fieldStrength = 1.0;\r\n        this.speed = 1.0;\r\n        this.particleCount = 20;\r\n        this.showFieldLines = true;\r\n        this.showParticles = true;\r\n        this.showForceArrows = false;\r\n        this.showAnalytics = true; // Enable analytics by default for electric fields\r\n        \r\n        this.initializeTestParticles();\r\n        this.initializeDefaultCharges();\r\n    }\r\n    \r\n    initializeTestParticles() {\r\n        this.testParticles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.testParticles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: 0,\r\n                vy: 0,\r\n                trail: [],\r\n                maxTrailLength: 30\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeDefaultCharges() {\r\n        // Add some default charges to make the animation interesting\r\n        this.addChargeAtPosition('positive', this.ctx.canvas.width * 0.3, this.ctx.canvas.height * 0.5);\r\n        this.addChargeAtPosition('negative', this.ctx.canvas.width * 0.7, this.ctx.canvas.height * 0.5);\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setFieldStrength(strength) {\r\n        this.fieldStrength = strength;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeTestParticles();\r\n    }\r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    addChargeAtPosition(type, x, y) {\r\n        const charge = {\r\n            x: x,\r\n            y: y,\r\n            type: type, // 'positive' or 'negative'\r\n            magnitude: 1,\r\n            color: type === 'positive' ? '#ff6b6b' : '#667eea'\r\n        };\r\n        this.charges.push(charge);\r\n    }\r\n    \r\n    clearCharges() {\r\n        this.charges = [];\r\n        this.initializeDefaultCharges(); // Re-add default charges after clearing\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.charges = [];\r\n        this.initializeTestParticles();\r\n        this.initializeDefaultCharges();\r\n    }\r\n    \r\n    calculateElectricField(x, y) {\r\n        let ex = 0, ey = 0;\r\n        const k = 500; // Simplified Coulomb's constant\r\n        \r\n        this.charges.forEach(charge => {\r\n            const dx = x - charge.x;\r\n            const dy = y - charge.y;\r\n            const r = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (r > 10) { // Avoid division by zero\r\n                const force = k * charge.magnitude * this.fieldStrength / (r * r);\r\n                const sign = charge.type === 'positive' ? 1 : -1;\r\n                ex += sign * force * dx / r;\r\n                ey += sign * force * dy / r;\r\n            }\r\n        });\r\n        \r\n        return { ex, ey };\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 20; // Much faster animation\r\n        this.time += dt;\r\n        \r\n        this.testParticles.forEach(particle => {\r\n            const field = this.calculateElectricField(particle.x, particle.y);\r\n            \r\n            // Apply electric force (simplified)\r\n            particle.vx += field.ex * dt * 0.5;\r\n            particle.vy += field.ey * dt * 0.5;\r\n            \r\n            // Add damping to prevent chaos\r\n            particle.vx *= 0.95;\r\n            particle.vy *= 0.95;\r\n            \r\n            // Limit maximum speed\r\n            const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            if (speed > 100) {\r\n                particle.vx *= 0.8;\r\n                particle.vy *= 0.8;\r\n            }\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * dt;\r\n            particle.y += particle.vy * dt;\r\n            \r\n            // Add to trail\r\n            particle.trail.push({ x: particle.x, y: particle.y });\r\n            if (particle.trail.length > particle.maxTrailLength) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Wrap around edges\r\n            if (particle.x < 0) particle.x = this.ctx.canvas.width;\r\n            if (particle.x > this.ctx.canvas.width) particle.x = 0;\r\n            if (particle.y < 0) particle.y = this.ctx.canvas.height;\r\n            if (particle.y > this.ctx.canvas.height) particle.y = 0;\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Standardized neutral background handled globally\r\n\r\n        // Show analytics (field lines, particles, force arrows) if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawFieldLines();\r\n            this.drawParticles();\r\n            this.drawForceArrows();\r\n        }\r\n        // Always show charges\r\n        this.drawCharges();\r\n        \r\n        // Draw canvas labels\r\n        this.drawElectricLabels();\r\n    }\r\n    \r\n    drawFieldLines() {\r\n        const spacing = 30; // Reduced spacing for more field lines\r\n        \r\n        for (let x = spacing; x < this.ctx.canvas.width; x += spacing) {\r\n            for (let y = spacing; y < this.ctx.canvas.height; y += spacing) {\r\n                const field = this.calculateElectricField(x, y);\r\n                const magnitude = Math.sqrt(field.ex * field.ex + field.ey * field.ey);\r\n                \r\n                if (magnitude > 0.1) { // Lower threshold to show more field lines\r\n                    const angle = Math.atan2(field.ey, field.ex);\r\n                    const intensity = Math.min(magnitude / 50, 1); // Adjusted intensity scaling\r\n                    \r\n                    // Crisp field line arrow\r\n                    const sx = Math.round(x) + 0.5;\r\n                    const sy = Math.round(y) + 0.5;\r\n                    const ex = Math.round(x + 25 * Math.cos(angle)) + 0.5;\r\n                    const ey = Math.round(y + 25 * Math.sin(angle)) + 0.5;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(102, 126, 234, ${intensity})`;\r\n                    this.ctx.lineWidth = 1.5;\r\n                    this.ctx.lineCap = 'round';\r\n                    this.ctx.moveTo(sx, sy);\r\n                    this.ctx.lineTo(ex, ey);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrowhead\r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = `rgba(102, 126, 234, ${intensity})`;\r\n                    this.ctx.moveTo(ex, ey);\r\n                    this.ctx.lineTo(\r\n                        ex - 5 * Math.cos(angle - Math.PI / 6),\r\n                        ey - 5 * Math.sin(angle - Math.PI / 6)\r\n                    );\r\n                    this.ctx.lineTo(\r\n                        ex - 5 * Math.cos(angle + Math.PI / 6),\r\n                        ey - 5 * Math.sin(angle + Math.PI / 6)\r\n                    );\r\n                    this.ctx.closePath();\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawCharges() {\r\n        this.charges.forEach(charge => {\r\n            // Modern gradient charge with glow effect\r\n            const gradient = this.ctx.createRadialGradient(\r\n                charge.x - 8, charge.y - 8, 0,\r\n                charge.x, charge.y, 20\r\n            );\r\n            \r\n            if (charge.type === 'positive') {\r\n                gradient.addColorStop(0, '#ff6b6b');\r\n                gradient.addColorStop(0.7, '#ff4757');\r\n                gradient.addColorStop(1, '#ff3838');\r\n            } else {\r\n                gradient.addColorStop(0, '#667eea');\r\n                gradient.addColorStop(0.7, '#5f6fd8');\r\n                gradient.addColorStop(1, '#5352ed');\r\n            }\r\n            \r\n            // Glow effect\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = charge.type === 'positive' ? 'rgba(255, 107, 107, 0.3)' : 'rgba(102, 126, 234, 0.3)';\r\n            this.ctx.arc(charge.x, charge.y, 18, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Main charge circle\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(charge.x, charge.y, 12, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Modern shadow\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n            this.ctx.arc(charge.x + 2, charge.y + 2, 12, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Charge symbol with modern styling (outlined for contrast)\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = 'bold 20px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.strokeStyle = 'rgba(0,0,0,0.9)';\r\n            this.ctx.strokeText(charge.type === 'positive' ? '+' : '−', charge.x, charge.y);\r\n            this.ctx.fillText(charge.type === 'positive' ? '+' : '−', charge.x, charge.y);\r\n        });\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.testParticles.forEach(particle => {\r\n            // Higher-contrast trail\r\n            if (particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                const gradient = this.ctx.createLinearGradient(\r\n                    particle.trail[0].x, particle.trail[0].y,\r\n                    particle.x, particle.y\r\n                );\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.25)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.9)');\r\n                this.ctx.strokeStyle = gradient;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                particle.trail.forEach(point => {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                });\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Main particle: bright fill + dark outline (crisper)\r\n            const px = Math.round(particle.x) + 0.5;\r\n            const py = Math.round(particle.y) + 0.5;\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.arc(px, py, 5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)';\r\n            this.ctx.lineWidth = 1.25;\r\n            this.ctx.stroke();\r\n            \r\n            // No shadow to keep sharp contrast\r\n        });\r\n    }\r\n    \r\n    drawForceArrows() {\r\n        this.testParticles.forEach(particle => {\r\n            const field = this.calculateElectricField(particle.x, particle.y);\r\n            const forceMagnitude = Math.sqrt(field.ex * field.ex + field.ey * field.ey);\r\n            \r\n            if (forceMagnitude > 5) {\r\n                const scale = 0.8;\r\n                const endX = particle.x + field.ex * scale;\r\n                const endY = particle.y + field.ey * scale;\r\n                \r\n                // Modern force arrow with gradient and glow\r\n                const arrowGradient = this.ctx.createLinearGradient(\r\n                    particle.x, particle.y, endX, endY\r\n                );\r\n                arrowGradient.addColorStop(0, '#ff6b35');\r\n                arrowGradient.addColorStop(1, '#ff8c42');\r\n                \r\n                // Glow effect\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = 'rgba(255, 107, 53, 0.4)';\r\n                this.ctx.lineWidth = 6;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Main arrow\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = arrowGradient;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Modern arrowhead\r\n                const angle = Math.atan2(field.ey, field.ex);\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = arrowGradient;\r\n                this.ctx.moveTo(endX, endY);\r\n                this.ctx.lineTo(\r\n                    endX - 10 * Math.cos(angle - Math.PI / 6),\r\n                    endY - 10 * Math.sin(angle - Math.PI / 6)\r\n                );\r\n                this.ctx.lineTo(\r\n                    endX - 10 * Math.cos(angle + Math.PI / 6),\r\n                    endY - 10 * Math.sin(angle + Math.PI / 6)\r\n                );\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawInfo() {\r\n        // Modern analytics panel with gradient background\r\n        const panelWidth = 200;\r\n        const panelHeight = 120;\r\n        const panelX = this.ctx.canvas.width - panelWidth - 20;\r\n        const panelY = 20;\r\n        \r\n        // Panel background with gradient\r\n        const panelGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        panelGradient.addColorStop(0, 'rgba(24, 28, 43, 0.95)');\r\n        panelGradient.addColorStop(1, 'rgba(35, 41, 70, 0.95)');\r\n        \r\n        this.ctx.fillStyle = panelGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel border with glow\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel title\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Electric Field Analytics', panelX + 15, panelY + 25);\r\n        \r\n        // Analytics data with modern styling\r\n        this.ctx.fillStyle = '#e9ecef';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Charges: ${this.charges.length}`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`Particles: ${this.testParticles.length}`, panelX + 15, panelY + 65);\r\n        this.ctx.fillText(`Field Strength: ${this.fieldStrength.toFixed(1)}`, panelX + 15, panelY + 85);\r\n        \r\n        // Modern explanation at bottom with dark background for visibility\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(5, this.ctx.canvas.height - 50, 300, 40);\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔴 Positive (+)  🔵 Negative (−)', 10, this.ctx.canvas.height - 40);\r\n        this.ctx.fillText('Click canvas to add charges', 10, this.ctx.canvas.height - 20);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            chargeCount: this.charges.length,\r\n            particleCount: this.testParticles.length,\r\n            fieldStrength: this.fieldStrength.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawElectricLabels() {\r\n        this.drawLabels(\r\n            'Electric Fields',\r\n            'E = kQ/r²  |  F = kq₁q₂/r²  |  E = ΣEᵢ'\r\n        );\r\n        \r\n        // Draw test particle explanation banner\r\n        this.drawTestParticleBanner();\r\n    }\r\n    \r\n    drawTestParticleBanner() {\r\n        // Create banner background with gradient\r\n        const bannerWidth = 320;\r\n        const bannerHeight = 40;\r\n        const bannerX = 10;\r\n        const bannerY = this.ctx.canvas.height - 55;\r\n        \r\n        // Banner background with gradient\r\n        const bannerGradient = this.ctx.createLinearGradient(bannerX, bannerY, bannerX, bannerY + bannerHeight);\r\n        bannerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.95)');\r\n        bannerGradient.addColorStop(1, 'rgba(240, 240, 240, 0.95)');\r\n        \r\n        this.ctx.fillStyle = bannerGradient;\r\n        this.ctx.fillRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        \r\n        // Banner border with glow\r\n        this.ctx.shadowColor = 'rgba(102, 126, 234, 0.6)';\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.strokeStyle = 'rgba(102, 126, 234, 0.8)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Banner text\r\n        this.ctx.fillStyle = '#1a1a2e';\r\n        this.ctx.font = 'bold 13px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('White particles = Test charges (positive)', bannerX + 12, bannerY + bannerHeight/2);\r\n        \r\n        // Add small test charge icon with glow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';\r\n        this.ctx.arc(bannerX + 290, bannerY + bannerHeight/2, 6, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.arc(bannerX + 290, bannerY + bannerHeight/2, 3, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n    }\r\n}\r\n\r\n// Magnetic Fields Simulation - Simplified\r\nexport class MagneticFields extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.speed = 0.5; // Slower default speed\r\n        this.fieldStrength = 3.0; // Increased field strength for more visible effect\r\n        this.particleCount = 15;\r\n        this.showFieldLines = true;\r\n        this.showParticles = true;\r\n        this.animationOffset = 0;\r\n        this.magnets = [];\r\n        this.particles = [];\r\n        \r\n        this.initializeParticles();\r\n        this.initializeDefaultMagnets();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: (Math.random() - 0.5) * 80,\r\n                vy: (Math.random() - 0.5) * 80,\r\n                charge: Math.random() > 0.5 ? 1 : -1, // Simple +1 or -1\r\n                trail: [],\r\n                maxTrailLength: 30\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeDefaultMagnets() {\r\n        // Start with one complete magnet in the center\r\n        const centerX = this.ctx.canvas.width / 2;\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const magnetLength = 50;\r\n        \r\n        this.magnets = [\r\n            {\r\n                x: centerX,\r\n                y: centerY - magnetLength/2, // North pole\r\n                strength: this.fieldStrength,\r\n                pole: 'north',\r\n                color: '#ff6b6b',\r\n                isPartOfMagnet: true,\r\n                magnetId: 1\r\n            },\r\n            {\r\n                x: centerX,\r\n                y: centerY + magnetLength/2, // South pole\r\n                strength: this.fieldStrength,\r\n                pole: 'south',\r\n                color: '#667eea',\r\n                isPartOfMagnet: true,\r\n                magnetId: 1\r\n            }\r\n        ];\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setFieldStrength(strength) {\r\n        this.fieldStrength = strength;\r\n        this.magnets.forEach(magnet => {\r\n            magnet.strength = strength;\r\n        });\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setShowFieldLines(show) {\r\n        this.showFieldLines = show;\r\n    }\r\n    \r\n    setShowParticles(show) {\r\n        this.showParticles = show;\r\n    }\r\n    \r\n\r\n    \r\n    addMagnetAtPosition(x, y) {\r\n        // Add a complete magnet with both poles\r\n        // North pole at the top, South pole at the bottom\r\n        const magnetLength = 50; // Increased distance between poles\r\n        \r\n        this.magnets.push({\r\n            x: x,\r\n            y: y - magnetLength/2, // North pole\r\n            strength: this.fieldStrength,\r\n            pole: 'north',\r\n            color: '#ff6b6b',\r\n            isPartOfMagnet: true,\r\n            magnetId: this.magnets.length\r\n        });\r\n        \r\n        this.magnets.push({\r\n            x: x,\r\n            y: y + magnetLength/2, // South pole\r\n            strength: this.fieldStrength,\r\n            pole: 'south',\r\n            color: '#667eea',\r\n            isPartOfMagnet: true,\r\n            magnetId: this.magnets.length - 1 // Same magnet ID\r\n        });\r\n    }\r\n    \r\n    clearMagnets() {\r\n        this.magnets = [];\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.clearMagnets();\r\n        this.initializeDefaultMagnets();\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    calculateMagneticField(x, y) {\r\n        let Bx = 0, By = 0;\r\n        \r\n        this.magnets.forEach(magnet => {\r\n            const dx = x - magnet.x;\r\n            const dy = y - magnet.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance > 10) {\r\n                // Field strength decreases with distance\r\n                const fieldStrength = magnet.strength / (1 + distance / 100);\r\n                \r\n                // Calculate unit vector from magnet to point\r\n                const unitX = dx / distance;\r\n                const unitY = dy / distance;\r\n                \r\n                // Field direction depends on pole\r\n                if (magnet.pole === 'north') {\r\n                    // North pole: field points AWAY from magnet (outward)\r\n                    Bx += fieldStrength * unitX;\r\n                    By += fieldStrength * unitY;\r\n                } else {\r\n                    // South pole: field points TOWARD magnet (inward)\r\n                    Bx -= fieldStrength * unitX;\r\n                    By -= fieldStrength * unitY;\r\n                }\r\n            }\r\n        });\r\n        \r\n        return { Bx, By };\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 3;\r\n        this.time += dt;\r\n        \r\n        // Update animation offset for field lines\r\n        this.animationOffset = (this.time * 0.5) % 1;\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Calculate magnetic field at particle position\r\n            const field = this.calculateMagneticField(particle.x, particle.y);\r\n            const fieldMagnitude = Math.sqrt(field.Bx * field.Bx + field.By * field.By);\r\n            \r\n            // Enhanced Lorentz force with field strength scaling\r\n            // F = q(v × B) - force is perpendicular to both velocity and magnetic field\r\n            const forceX = particle.charge * (particle.vy * field.Bx - particle.vx * field.By) * 8.0;\r\n            const forceY = particle.charge * (particle.vx * field.By - particle.vy * field.Bx) * 8.0;\r\n            \r\n            // Scale force based on field strength for more realistic behavior\r\n            const forceScale = Math.min(1.0, fieldMagnitude / 2.0);\r\n            const scaledForceX = forceX * forceScale;\r\n            const scaledForceY = forceY * forceScale;\r\n        \r\n        // Update velocity with enhanced physics\r\n            particle.vx += scaledForceX * dt;\r\n            particle.vy += scaledForceY * dt;\r\n            \r\n            // Enhanced damping based on field strength\r\n            const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const dampingFactor = fieldMagnitude > 0.5 ? 0.98 : 0.95; // Less damping in strong fields\r\n            \r\n            if (speed > 120) {\r\n                particle.vx *= dampingFactor;\r\n                particle.vy *= dampingFactor;\r\n            }\r\n        \r\n        // Update position\r\n            particle.x += particle.vx * dt;\r\n            particle.y += particle.vy * dt;\r\n            \r\n            // Enhanced trail with charge-based properties\r\n            particle.trail.push({ \r\n                x: particle.x, \r\n                y: particle.y,\r\n                fieldStrength: fieldMagnitude // Store field strength for trail coloring\r\n            });\r\n            if (particle.trail.length > particle.maxTrailLength) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Wrap around edges with momentum preservation\r\n            if (particle.x < 0) {\r\n                particle.x = this.ctx.canvas.width;\r\n                particle.vx *= 0.8; // Slight energy loss at boundaries\r\n            }\r\n            if (particle.x > this.ctx.canvas.width) {\r\n                particle.x = 0;\r\n                particle.vx *= 0.8;\r\n            }\r\n            if (particle.y < 0) {\r\n                particle.y = this.ctx.canvas.height;\r\n                particle.vy *= 0.8;\r\n            }\r\n            if (particle.y > this.ctx.canvas.height) {\r\n                particle.y = 0;\r\n                particle.vy *= 0.8;\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Standardized neutral background handled globally\r\n        \r\n        // Draw enhanced field lines\r\n        if (this.showFieldLines) {\r\n            this.drawFieldLines();\r\n        }\r\n        \r\n        // Draw enhanced magnets\r\n        this.drawMagnets();\r\n        \r\n        // Draw enhanced particles\r\n        this.drawParticles();\r\n        \r\n\r\n        \r\n        // Draw canvas labels\r\n        this.drawMagneticLabels();\r\n    }\r\n    \r\n    drawFieldLines() {\r\n        if (this.magnets.length === 0) return;\r\n        \r\n        // Draw combined field lines that show the actual magnetic field\r\n        this.drawCombinedFieldLines();\r\n        \r\n        // Draw interaction field lines between magnets\r\n        this.drawInteractionFieldLines();\r\n    }\r\n    \r\n    drawCombinedFieldLines() {\r\n        // Draw field lines that represent the combined field from all magnets\r\n        const numLines = 24; // More field lines for better coverage\r\n        const lineLength = 150;\r\n        \r\n        // Create a grid of starting points\r\n        const gridSize = 8;\r\n        const stepX = this.ctx.canvas.width / gridSize;\r\n        const stepY = this.ctx.canvas.height / gridSize;\r\n        \r\n        for (let i = 0; i < gridSize; i++) {\r\n            for (let j = 0; j < gridSize; j++) {\r\n                const startX = i * stepX + stepX / 2;\r\n                const startY = j * stepY + stepY / 2;\r\n                \r\n                // Draw field line from this point\r\n                this.drawCombinedFieldLine(startX, startY, lineLength);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawCombinedFieldLine(startX, startY, lineLength) {\r\n        const numSteps = 20;\r\n        const stepSize = lineLength / numSteps;\r\n        \r\n        let currentX = startX;\r\n        let currentY = startY;\r\n        \r\n        // Progressive drawing\r\n        const drawProgress = Math.min(1, this.animationOffset / 1.0);\r\n        const maxSteps = Math.floor(numSteps * drawProgress);\r\n        \r\n        // Combined field line color: high-contrast cyan\r\n        this.ctx.strokeStyle = '#00D1FF';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.lineCap = 'round';\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(currentX, currentY);\r\n        \r\n        for (let step = 0; step < maxSteps; step++) {\r\n            // Calculate magnetic field at current position\r\n            const field = this.calculateMagneticField(currentX, currentY);\r\n            const fieldMagnitude = Math.sqrt(field.Bx * field.Bx + field.By * field.By);\r\n            \r\n            if (fieldMagnitude > 0.1) {\r\n                // Normalize field direction\r\n                const fieldDirX = field.Bx / fieldMagnitude;\r\n                const fieldDirY = field.By / fieldMagnitude;\r\n                \r\n                // Move in field direction\r\n                currentX += fieldDirX * stepSize;\r\n                currentY += fieldDirY * stepSize;\r\n                \r\n                this.ctx.lineTo(currentX, currentY);\r\n            } else {\r\n                break; // Stop if field is too weak\r\n            }\r\n        }\r\n        \r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrowhead at the end\r\n        if (maxSteps > 5) {\r\n            const field = this.calculateMagneticField(currentX, currentY);\r\n            const fieldMagnitude = Math.sqrt(field.Bx * field.Bx + field.By * field.By);\r\n            \r\n            if (fieldMagnitude > 0.1) {\r\n                const fieldDirX = field.Bx / fieldMagnitude;\r\n                const fieldDirY = field.By / fieldMagnitude;\r\n                const angle = Math.atan2(fieldDirY, fieldDirX);\r\n                \r\n                this.drawSimpleArrowhead(currentX, currentY, angle, 'combined');\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawMagnetFieldLines(northPole, southPole) {\r\n        // Calculate magnet properties\r\n        const magnetLength = Math.sqrt(\r\n            Math.pow(southPole.x - northPole.x, 2) + \r\n            Math.pow(southPole.y - northPole.y, 2)\r\n        );\r\n        const magnetAngle = Math.atan2(southPole.y - northPole.y, southPole.x - northPole.x);\r\n        \r\n        // Draw field lines in a simple, clean pattern\r\n        this.drawSimpleFieldLines(northPole, southPole, magnetLength, magnetAngle);\r\n    }\r\n    \r\n    drawSimpleFieldLines(northPole, southPole, magnetLength, magnetAngle) {\r\n        // Number of field lines\r\n        const numLines = 12;\r\n        \r\n        // Draw field lines radiating from North pole\r\n        for (let i = 0; i < numLines; i++) {\r\n            const angle = (i / numLines) * Math.PI * 2;\r\n            this.drawRadiatingFieldLine(northPole, angle, 'north');\r\n        }\r\n        \r\n        // Draw field lines converging to South pole\r\n        for (let i = 0; i < numLines; i++) {\r\n            const angle = (i / numLines) * Math.PI * 2;\r\n            this.drawRadiatingFieldLine(southPole, angle, 'south');\r\n        }\r\n    }\r\n    \r\n    drawRadiatingFieldLine(pole, angle, poleType) {\r\n        let lineLength = 120;\r\n        \r\n        let startX, startY, endX, endY;\r\n        \r\n        if (poleType === 'north') {\r\n            // North pole: lines radiate outward from pole (slightly longer for better visibility)\r\n            lineLength = 140;\r\n            startX = pole.x;\r\n            startY = pole.y;\r\n            endX = startX + Math.cos(angle) * lineLength;\r\n            endY = startY + Math.sin(angle) * lineLength;\r\n        } else {\r\n            // South pole: lines converge inward to pole\r\n            endX = pole.x;\r\n            endY = pole.y;\r\n            startX = endX + Math.cos(angle) * lineLength;\r\n            startY = endY + Math.sin(angle) * lineLength;\r\n        }\r\n        \r\n        // Progressive drawing\r\n        const drawProgress = Math.min(1, this.animationOffset / 1.0);\r\n        const currentEndX = startX + (endX - startX) * drawProgress;\r\n        const currentEndY = startY + (endY - startY) * drawProgress;\r\n        \r\n        // High-contrast line styling based on pole type\r\n        const lineColor = poleType === 'north' ? '#FF3B3B' : '#6FA8FF';\r\n        const lineWidth = poleType === 'north' ? 2.5 : 2.2;\r\n        \r\n        // Draw the field line\r\n        this.ctx.strokeStyle = lineColor;\r\n        this.ctx.lineWidth = lineWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(startX, startY);\r\n        this.ctx.lineTo(currentEndX, currentEndY);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrowhead for direction\r\n        if (drawProgress >= 0.7) {\r\n            this.drawSimpleArrowhead(currentEndX, currentEndY, angle, poleType);\r\n        }\r\n    }\r\n    \r\n    drawSimpleArrowhead(x, y, angle, poleType) {\r\n        const arrowLength = 20; // Increased from 10 to 20\r\n        const arrowAngle = Math.PI / 6;\r\n        \r\n        // For North pole: arrows point outward (away from pole)\r\n        // For South pole: arrows point inward (towards pole)\r\n        const direction = poleType === 'north' ? angle : angle;\r\n        \r\n        // Calculate arrow points - attach to the line end\r\n        const tipX = x;\r\n        const tipY = y;\r\n        \r\n        const leftX = x - Math.cos(direction + arrowAngle) * arrowLength * 0.6;\r\n        const leftY = y - Math.sin(direction + arrowAngle) * arrowLength * 0.6;\r\n        \r\n        const rightX = x - Math.cos(direction - arrowAngle) * arrowLength * 0.6;\r\n        const rightY = y - Math.sin(direction - arrowAngle) * arrowLength * 0.6;\r\n        \r\n        // Arrow color with enhanced visibility\r\n        let arrowColor;\r\n        if (poleType === 'north') {\r\n            arrowColor = '#FF3B3B';\r\n        } else if (poleType === 'south') {\r\n            arrowColor = '#6FA8FF';\r\n        } else {\r\n            // Combined field - cyan to match combined lines\r\n            arrowColor = '#00D1FF';\r\n        }\r\n        \r\n        // Add shadow for better visibility\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        this.ctx.fillStyle = arrowColor;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(tipX, tipY);\r\n        this.ctx.lineTo(leftX, leftY);\r\n        this.ctx.lineTo(rightX, rightY);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n\r\n    \r\n    drawInteractionFieldLines() {\r\n        // Get all North and South poles\r\n        const northPoles = this.magnets.filter(m => m.pole === 'north');\r\n        const southPoles = this.magnets.filter(m => m.pole === 'south');\r\n        \r\n        // Draw field lines between different magnets\r\n        northPoles.forEach(northPole => {\r\n            southPoles.forEach(southPole => {\r\n                // Only draw if they're from different magnets\r\n                if (northPole.magnetId !== southPole.magnetId) {\r\n                    const distance = Math.sqrt(\r\n                        Math.pow(northPole.x - southPole.x, 2) + \r\n                        Math.pow(northPole.y - southPole.y, 2)\r\n                    );\r\n                    \r\n                    // Only draw if magnets are reasonably close\r\n                    if (distance < 200 && distance > 60) {\r\n                        this.drawInteractionFieldLine(northPole, southPole);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    drawInteractionFieldLine(northPole, southPole) {\r\n        const animationOffset = (this.time * 0.3) % 1; // Slower animation for interaction lines\r\n        \r\n        // Calculate the angle between the poles\r\n        const angle = Math.atan2(southPole.y - northPole.y, southPole.x - northPole.x);\r\n        \r\n        // Draw a simple straight line between poles for interactions\r\n        const startX = northPole.x;\r\n        const startY = northPole.y;\r\n        const endX = southPole.x;\r\n        const endY = southPole.y;\r\n        \r\n        // Animate the field line drawing\r\n        const animatedLength = 1 * animationOffset;\r\n        \r\n        // Calculate the actual end point based on animation\r\n        const actualEndX = startX + (endX - startX) * animatedLength;\r\n        const actualEndY = startY + (endY - startY) * animatedLength;\r\n        \r\n        // Draw the interaction line\r\n        this.ctx.shadowColor = 'transparent';\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.strokeStyle = '#00D1FF';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(startX, startY);\r\n        this.ctx.lineTo(actualEndX, actualEndY);\r\n        this.ctx.stroke();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw arrowhead at the end if animation is far enough\r\n        if (animatedLength > 0.1) {\r\n            const arrowAngle = Math.atan2(actualEndY - startY, actualEndX - startX);\r\n            const arrowLength = 20; // Increased from 10 to 20\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(255, 255, 255, 1.0)'; // Increased opacity\r\n            this.ctx.moveTo(actualEndX, actualEndY);\r\n            this.ctx.lineTo(actualEndX - arrowLength * Math.cos(arrowAngle - Math.PI / 6), \r\n                           actualEndY - arrowLength * Math.sin(arrowAngle - Math.PI / 6));\r\n            this.ctx.lineTo(actualEndX - arrowLength * Math.cos(arrowAngle + Math.PI / 6), \r\n                           actualEndY - arrowLength * Math.sin(arrowAngle + Math.PI / 6));\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawMagnets() {\r\n        // Group magnets by magnetId to draw complete magnets\r\n        const magnetGroups = {};\r\n        this.magnets.forEach(magnet => {\r\n            if (!magnetGroups[magnet.magnetId]) {\r\n                magnetGroups[magnet.magnetId] = [];\r\n            }\r\n            magnetGroups[magnet.magnetId].push(magnet);\r\n        });\r\n        \r\n        // Draw each complete magnet\r\n        Object.values(magnetGroups).forEach(magnetGroup => {\r\n            if (magnetGroup.length === 2) {\r\n                const northPole = magnetGroup.find(m => m.pole === 'north');\r\n                const southPole = magnetGroup.find(m => m.pole === 'south');\r\n                \r\n                if (northPole && southPole) {\r\n                    // Draw magnet body with enhanced design\r\n                    this.drawMagnetBody(northPole, southPole);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Individual poles are now drawn as part of the bar magnet\r\n    }\r\n    \r\n    drawMagnetBody(northPole, southPole) {\r\n        // Calculate magnet properties\r\n        const magnetLength = Math.sqrt(\r\n            Math.pow(southPole.x - northPole.x, 2) + \r\n            Math.pow(southPole.y - northPole.y, 2)\r\n        );\r\n        const magnetAngle = Math.atan2(southPole.y - northPole.y, southPole.x - northPole.x);\r\n        const magnetWidth = 20;\r\n        \r\n        // Create bar magnet shape\r\n        const halfWidth = magnetWidth / 2;\r\n        const corners = [\r\n            // Top-left\r\n            { x: northPole.x - halfWidth * Math.cos(magnetAngle + Math.PI/2), \r\n              y: northPole.y - halfWidth * Math.sin(magnetAngle + Math.PI/2) },\r\n            // Top-right\r\n            { x: northPole.x + halfWidth * Math.cos(magnetAngle + Math.PI/2), \r\n              y: northPole.y + halfWidth * Math.sin(magnetAngle + Math.PI/2) },\r\n            // Bottom-right\r\n            { x: southPole.x + halfWidth * Math.cos(magnetAngle + Math.PI/2), \r\n              y: southPole.y + halfWidth * Math.sin(magnetAngle + Math.PI/2) },\r\n            // Bottom-left\r\n            { x: southPole.x - halfWidth * Math.cos(magnetAngle + Math.PI/2), \r\n              y: southPole.y - halfWidth * Math.sin(magnetAngle + Math.PI/2) }\r\n        ];\r\n        \r\n        // Draw magnet shadow\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(corners[0].x + 3, corners[0].y + 3);\r\n        this.ctx.lineTo(corners[1].x + 3, corners[1].y + 3);\r\n        this.ctx.lineTo(corners[2].x + 3, corners[2].y + 3);\r\n        this.ctx.lineTo(corners[3].x + 3, corners[3].y + 3);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Create gradient for bar magnet\r\n        const magnetGradient = this.ctx.createLinearGradient(\r\n            northPole.x, northPole.y, southPole.x, southPole.y\r\n        );\r\n        magnetGradient.addColorStop(0, '#ff6b6b');      // North pole (red)\r\n        magnetGradient.addColorStop(0.3, '#ff8a65');    // Red-orange\r\n        magnetGradient.addColorStop(0.5, '#8b5cf6');    // Purple (middle)\r\n        magnetGradient.addColorStop(0.7, '#667eea');    // Blue\r\n        magnetGradient.addColorStop(1, '#5352ed');      // South pole (blue)\r\n        \r\n        // Draw main magnet body\r\n        this.ctx.fillStyle = magnetGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(corners[0].x, corners[0].y);\r\n        this.ctx.lineTo(corners[1].x, corners[1].y);\r\n        this.ctx.lineTo(corners[2].x, corners[2].y);\r\n        this.ctx.lineTo(corners[3].x, corners[3].y);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Draw magnet border\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(corners[0].x, corners[0].y);\r\n        this.ctx.lineTo(corners[1].x, corners[1].y);\r\n        this.ctx.lineTo(corners[2].x, corners[2].y);\r\n        this.ctx.lineTo(corners[3].x, corners[3].y);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n        \r\n        // Draw highlight\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(corners[0].x, corners[0].y);\r\n        this.ctx.lineTo(corners[1].x, corners[1].y);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pole indicators\r\n        this.drawPoleIndicator(northPole, 'N', '#ff3838');\r\n        this.drawPoleIndicator(southPole, 'S', '#5352ed');\r\n    }\r\n    \r\n    drawPoleIndicator(pole, label, color) {\r\n        const indicatorRadius = 8;\r\n        \r\n        // Pole indicator background\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(pole.x, pole.y, indicatorRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Pole indicator border\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(pole.x, pole.y, indicatorRadius, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Pole label\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.shadowBlur = 1;\r\n        this.ctx.fillText(label, pole.x, pole.y);\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    drawMagnetPole(magnet) {\r\n        // Enhanced pole design with multiple layers\r\n        const poleRadius = 18;\r\n        const innerRadius = 12;\r\n        \r\n        // Outer glow\r\n        this.ctx.shadowColor = magnet.pole === 'north' ? 'rgba(255, 107, 107, 0.6)' : 'rgba(102, 126, 234, 0.6)';\r\n        this.ctx.shadowBlur = 12;\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = magnet.pole === 'north' ? 'rgba(255, 107, 107, 0.4)' : 'rgba(102, 126, 234, 0.4)';\r\n        this.ctx.arc(magnet.x, magnet.y, poleRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Main pole gradient\r\n        const poleGradient = this.ctx.createRadialGradient(\r\n            magnet.x - 6, magnet.y - 6, 0,\r\n            magnet.x, magnet.y, innerRadius\r\n        );\r\n        \r\n        if (magnet.pole === 'north') {\r\n            poleGradient.addColorStop(0, '#ff6b6b');\r\n            poleGradient.addColorStop(0.6, '#ff4757');\r\n            poleGradient.addColorStop(1, '#ff3838');\r\n        } else {\r\n            poleGradient.addColorStop(0, '#667eea');\r\n            poleGradient.addColorStop(0.6, '#5f6fd8');\r\n            poleGradient.addColorStop(1, '#5352ed');\r\n        }\r\n        \r\n        // Main pole circle\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = poleGradient;\r\n        this.ctx.arc(magnet.x, magnet.y, innerRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Pole shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.arc(magnet.x + 2, magnet.y + 2, innerRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Pole highlight\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.arc(magnet.x - 3, magnet.y - 3, 4, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced pole label\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText(magnet.pole === 'north' ? 'N' : 'S', magnet.x, magnet.y);\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Calculate current field strength for enhanced visualization\r\n            const field = this.calculateMagneticField(particle.x, particle.y);\r\n            const fieldMagnitude = Math.sqrt(field.Bx * field.Bx + field.By * field.By);\r\n            \r\n            // Enhanced particle trail with field strength-based coloring\r\n            if (particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                const trailGradient = this.ctx.createLinearGradient(\r\n                    particle.trail[0].x, particle.trail[0].y,\r\n                    particle.x, particle.y\r\n                );\r\n                \r\n                // Trail color based on charge and field strength\r\n                const trailOpacity = Math.min(0.8, 0.3 + fieldMagnitude * 0.5);\r\n                if (particle.charge > 0) {\r\n                    trailGradient.addColorStop(0, `rgba(255, 100, 100, ${trailOpacity * 0.3})`);\r\n                    trailGradient.addColorStop(1, `rgba(255, 100, 100, ${trailOpacity})`);\r\n                } else {\r\n                    trailGradient.addColorStop(0, `rgba(100, 100, 255, ${trailOpacity * 0.3})`);\r\n                    trailGradient.addColorStop(1, `rgba(100, 100, 255, ${trailOpacity})`);\r\n                }\r\n                \r\n                this.ctx.strokeStyle = trailGradient;\r\n                this.ctx.lineWidth = 2 + fieldMagnitude * 2; // Thicker trail in strong fields\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                particle.trail.forEach(point => {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                });\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Enhanced particle with field strength-based effects\r\n            const particleSize = 5 + fieldMagnitude * 3; // Larger particles in strong fields\r\n            const particleGradient = this.ctx.createRadialGradient(\r\n                particle.x - particleSize/2, particle.y - particleSize/2, 0,\r\n                particle.x, particle.y, particleSize\r\n            );\r\n            \r\n            if (particle.charge > 0) {\r\n                particleGradient.addColorStop(0, '#ff8a65');\r\n                particleGradient.addColorStop(0.7, '#ff6b6b');\r\n                particleGradient.addColorStop(1, '#ff4757');\r\n            } else {\r\n                particleGradient.addColorStop(0, '#8b9dc3');\r\n                particleGradient.addColorStop(0.7, '#667eea');\r\n                particleGradient.addColorStop(1, '#5f6fd8');\r\n            }\r\n            \r\n            // Enhanced glow effect based on field strength\r\n            const glowIntensity = Math.min(12, 6 + fieldMagnitude * 10);\r\n            this.ctx.shadowColor = particle.charge > 0 ? 'rgba(255, 107, 107, 0.8)' : 'rgba(102, 126, 234, 0.8)';\r\n            this.ctx.shadowBlur = glowIntensity;\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = particleGradient;\r\n            this.ctx.arc(particle.x, particle.y, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Enhanced shadow\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n            this.ctx.arc(particle.x + 1, particle.y + 1, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Enhanced charge symbol with field strength-based styling\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = `bold ${12 + fieldMagnitude * 4}px Inter, Arial, sans-serif`;\r\n            this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            this.ctx.fillText(particle.charge > 0 ? '+' : '−', particle.x, particle.y);\r\n            \r\n            // Add velocity indicator in strong fields\r\n            if (fieldMagnitude > 1.0) {\r\n                const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n                const velocityAngle = Math.atan2(particle.vy, particle.vx);\r\n                \r\n                // Draw velocity arrow\r\n                this.ctx.strokeStyle = particle.charge > 0 ? '#ff6b6b' : '#667eea';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(\r\n                    particle.x + Math.cos(velocityAngle) * speed * 0.1,\r\n                    particle.y + Math.sin(velocityAngle) * speed * 0.1\r\n                );\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    drawInfo() {\r\n        // Enhanced modern info panel with gradient background\r\n        const panelWidth = 200;\r\n        const panelHeight = 120;\r\n        const panelX = this.ctx.canvas.width - panelWidth - 20;\r\n        const panelY = 20;\r\n        \r\n        // Panel background with gradient\r\n        const panelGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        panelGradient.addColorStop(0, 'rgba(24, 28, 43, 0.95)');\r\n        panelGradient.addColorStop(1, 'rgba(35, 41, 70, 0.95)');\r\n        \r\n        this.ctx.fillStyle = panelGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel border with glow\r\n        this.ctx.strokeStyle = 'rgba(255, 107, 107, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel title\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Magnetic Field Analytics', panelX + 15, panelY + 25);\r\n        \r\n        // Analytics data with modern styling\r\n        this.ctx.fillStyle = '#e9ecef';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Magnets: ${this.magnets.length}`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`Particles: ${this.particles.length}`, panelX + 15, panelY + 65);\r\n        this.ctx.fillText(`Field Strength: ${this.fieldStrength.toFixed(1)}`, panelX + 15, panelY + 85);\r\n        \r\n        // Enhanced explanation banner at bottom\r\n        const bannerWidth = 380;\r\n        const bannerHeight = 45;\r\n        const bannerX = 10;\r\n        const bannerY = this.ctx.canvas.height - 60;\r\n        \r\n        // Banner background with gradient\r\n        const bannerGradient = this.ctx.createLinearGradient(bannerX, bannerY, bannerX, bannerY + bannerHeight);\r\n        bannerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.95)');\r\n        bannerGradient.addColorStop(1, 'rgba(240, 240, 240, 0.95)');\r\n        \r\n        this.ctx.fillStyle = bannerGradient;\r\n        this.ctx.fillRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        \r\n        // Banner border\r\n        this.ctx.strokeStyle = 'rgba(255, 107, 107, 0.6)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        \r\n        // Banner text\r\n        this.ctx.fillStyle = '#1a1a2e';\r\n        this.ctx.font = 'bold 13px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('Red particles = Positive charge, Blue particles = Negative charge', bannerX + 12, bannerY + bannerHeight/2 - 8);\r\n        this.ctx.fillText('Click to add magnets, particles spiral around magnetic field lines', bannerX + 12, bannerY + bannerHeight/2 + 8);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            magnetCount: this.magnets.length,\r\n            particleCount: this.particles.length,\r\n            fieldStrength: this.fieldStrength.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawMagneticLabels() {\r\n        // Draw custom labels with better visibility\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation title with better contrast\r\n        // Outlined title for maximum contrast\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeStyle = 'rgba(0,0,0,0.9)';\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.strokeText('Magnetic Fields', this.ctx.canvas.width / 2, 30);\r\n        this.ctx.fillText('Magnetic Fields', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter, Arial, sans-serif';\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeStyle = 'rgba(0,0,0,0.8)';\r\n        this.ctx.strokeText('F = q(v × B)  |  F = qvB sin θ  |  B = μ₀I/2πr', this.ctx.canvas.width / 2, 50);\r\n        this.ctx.fillText('F = q(v × B)  |  F = qvB sin θ  |  B = μ₀I/2πr', this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n        \r\n        // Draw interaction and magnet explanation banner\r\n        this.drawMagneticBanner();\r\n    }\r\n    \r\n    drawMagneticBanner() {\r\n        // Create banner background with modern dark theme\r\n        const bannerWidth = 450;\r\n        const bannerHeight = 60;\r\n        const bannerX = 15;\r\n        const bannerY = this.ctx.canvas.height - 75;\r\n        \r\n        // Banner background with dark gradient\r\n        const bannerGradient = this.ctx.createLinearGradient(bannerX, bannerY, bannerX, bannerY + bannerHeight);\r\n        bannerGradient.addColorStop(0, 'rgba(26, 26, 46, 0.95)');\r\n        bannerGradient.addColorStop(1, 'rgba(22, 33, 62, 0.95)');\r\n        \r\n        this.ctx.fillStyle = bannerGradient;\r\n        this.ctx.fillRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        \r\n        // Banner border with subtle glow\r\n        this.ctx.shadowColor = 'rgba(255, 107, 107, 0.3)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.strokeStyle = 'rgba(255, 107, 107, 0.6)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(bannerX, bannerY, bannerWidth, bannerHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Banner text with better contrast\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 14px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('Click to add complete magnets (N-S pairs)', bannerX + 15, bannerY + bannerHeight/2 - 10);\r\n        \r\n        this.ctx.font = '12px Inter, Arial, sans-serif';\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillText('Red particles = Positive charge, Blue particles = Negative charge', bannerX + 15, bannerY + bannerHeight/2 + 10);\r\n        \r\n        // Add magnet icon with better styling\r\n        const iconX = bannerX + 400;\r\n        const iconY = bannerY + bannerHeight/2;\r\n        \r\n        // Magnet icon background\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 107, 107, 0.2)';\r\n        this.ctx.arc(iconX, iconY, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Magnet icon\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#ff6b6b';\r\n        this.ctx.arc(iconX, iconY, 4, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add N label to magnet icon\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 10px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('N', iconX, iconY);\r\n    }\r\n}\r\n\r\nexport class DiodeTransistor extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.componentType = 'diode'; // 'diode', 'npn', 'pnp'\r\n        this.biasType = 'forward'; // 'forward', 'reverse', 'off'\r\n        this.inputVoltage = 5; // Volts\r\n        this.baseVoltage = 0.7; // Volts for transistor\r\n        this.current = 0; // mA\r\n        this.power = 0; // mW\r\n        this.temperature = 25; // Celsius\r\n        this.showElectrons = true;\r\n        this.showCurrent = true;\r\n        this.showVoltage = true;\r\n        this.animationSpeed = 1.0;\r\n        this.isActive = false;\r\n        \r\n        // Scientific accuracy notes:\r\n        // - Diode: P-N junction with proper forward/reverse bias behavior\r\n        // - NPN: N-P-N with electron flow from emitter to collector\r\n        // - PNP: P-N-P with hole flow from emitter to collector\r\n        // - Current calculations use realistic transistor parameters (beta values)\r\n        // - Voltage drops follow standard semiconductor physics\r\n        \r\n        // Component positions\r\n        this.componentX = this.ctx.canvas.width / 2;\r\n        this.componentY = this.ctx.canvas.height / 2;\r\n        this.batteryX = this.componentX - 250;\r\n        this.batteryY = this.componentY;\r\n        this.loadX = this.componentX + 250;\r\n        this.loadY = this.componentY;\r\n        \r\n        // Enhanced particle systems\r\n        this.electrons = [];\r\n        this.holes = [];\r\n        this.sparks = [];\r\n        this.energyWaves = [];\r\n        this.initializeParticles();\r\n        \r\n        // Visual effects\r\n        this.glowIntensity = 0;\r\n        this.pulsePhase = 0;\r\n        this.energyParticles = [];\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.electrons = [];\r\n        this.holes = [];\r\n        this.sparks = [];\r\n        this.energyWaves = [];\r\n        this.energyParticles = [];\r\n        \r\n        // Create electron particles for N-type material (right side of diode)\r\n        for (let i = 0; i < 30; i++) {\r\n            this.electrons.push({\r\n                x: this.componentX + 50 + Math.random() * 100, // N-region (cathode)\r\n                y: this.componentY - 40 + Math.random() * 80,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 3.5 + Math.random() * 1.2, // Slightly larger electrons\r\n                color: '#00AAFF',\r\n                glow: 0,\r\n                trail: [],\r\n                active: false\r\n            });\r\n        }\r\n        \r\n        // Create hole particles for P-type material (left side of diode)\r\n        for (let i = 0; i < 30; i++) {\r\n            this.holes.push({\r\n                x: this.componentX - 150 + Math.random() * 100, // P-region (anode)\r\n                y: this.componentY - 40 + Math.random() * 80,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 3.5 + Math.random() * 1.2, // Slightly larger holes\r\n                color: '#FF4444',\r\n                glow: 0,\r\n                trail: [],\r\n                active: false\r\n            });\r\n        }\r\n        \r\n        // Create energy particles\r\n        for (let i = 0; i < 15; i++) {\r\n            this.energyParticles.push({\r\n                x: this.componentX - 100 + Math.random() * 200,\r\n                y: this.componentY - 60 + Math.random() * 120,\r\n                vx: (Math.random() - 0.5) * 2,\r\n                vy: (Math.random() - 0.5) * 2,\r\n                size: 1.8 + Math.random() * 0.7,\r\n                color: '#CC8F00',\r\n                life: 1.0,\r\n                decay: 0.02\r\n            });\r\n        }\r\n    }\r\n    \r\n    setComponentType(type) {\r\n        this.componentType = type;\r\n        this.initializeParticles();\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setBiasType(bias) {\r\n        this.biasType = bias;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setInputVoltage(voltage) {\r\n        this.inputVoltage = voltage;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setBaseVoltage(voltage) {\r\n        this.baseVoltage = voltage;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setShowElectrons(show) {\r\n        this.showElectrons = show;\r\n    }\r\n    \r\n    setShowCurrent(show) {\r\n        this.showCurrent = show;\r\n    }\r\n    \r\n    setShowVoltage(show) {\r\n        this.showVoltage = show;\r\n    }\r\n    \r\n    setAnimationSpeed(speed) {\r\n        this.animationSpeed = speed;\r\n    }\r\n    \r\n    calculateCurrent() {\r\n        if (this.componentType === 'diode') {\r\n            if (this.biasType === 'forward' && this.inputVoltage > 0.7) {\r\n                // Diode forward current: exponential relationship with voltage\r\n                const voltageDrop = this.inputVoltage - 0.7;\r\n                this.current = Math.exp(voltageDrop * 2) * 5; // Exponential current increase\r\n                this.power = this.current * 0.7;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.5;\r\n            } else if (this.biasType === 'reverse') {\r\n                // Diode reverse leakage current (very small)\r\n                this.current = 0.001; // 1μA leakage\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        } else if (this.componentType === 'npn') {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // NPN transistor: base current controls collector current\r\n                const baseCurrent = (this.baseVoltage - 0.7) * 10; // Base current\r\n                const beta = 100; // Current gain (typical value)\r\n                this.current = baseCurrent * beta; // Collector current\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.3;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        } else if (this.componentType === 'pnp') {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // PNP transistor: base current controls collector current (negative voltages)\r\n                const baseCurrent = (this.baseVoltage - 0.7) * 8; // Base current\r\n                const beta = 80; // Current gain (slightly lower for PNP)\r\n                this.current = baseCurrent * beta; // Collector current\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.4;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.current = 0;\r\n        this.power = 0;\r\n        this.isActive = false;\r\n        this.glowIntensity = 0;\r\n        this.pulsePhase = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime * this.animationSpeed;\r\n        this.calculateCurrent();\r\n        \r\n        // Update glow and pulse effects\r\n        this.glowIntensity = this.isActive ? Math.sin(this.time * 0.005) * 0.3 + 0.7 : 0;\r\n        this.pulsePhase = this.time * 0.01;\r\n        \r\n        // Update particle movement based on component type\r\n        if (this.isActive && this.showElectrons) {\r\n            if (this.componentType === 'diode') {\r\n                // Diode: show both electrons and holes\r\n                this.updateDiodeParticles();\r\n            } else if (this.componentType === 'npn') {\r\n                // NPN: emphasize electron flow from emitter to collector\r\n                this.updateNPNParticles();\r\n            } else if (this.componentType === 'pnp') {\r\n                // PNP: emphasize hole flow from emitter to collector\r\n                this.updatePNPParticles();\r\n            }\r\n        }\r\n        \r\n        // Update energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n            particle.life -= particle.decay;\r\n            \r\n            // Bounce off boundaries\r\n            if (particle.x < 0 || particle.x > this.ctx.canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > this.ctx.canvas.height) particle.vy *= -1;\r\n            \r\n            // Reset when life is over\r\n            if (particle.life <= 0) {\r\n                particle.x = this.componentX - 100 + Math.random() * 200;\r\n                particle.y = this.componentY - 60 + Math.random() * 120;\r\n                particle.life = 1.0;\r\n            }\r\n        });\r\n        \r\n        // Add sparks when current is high\r\n        if (this.isActive && this.current > 10 && Math.random() < 0.1) {\r\n            this.sparks.push({\r\n                x: this.componentX + Math.random() * 100 - 50,\r\n                y: this.componentY + Math.random() * 60 - 30,\r\n                vx: (Math.random() - 0.5) * 10,\r\n                vy: (Math.random() - 0.5) * 10,\r\n                life: 1.0,\r\n                color: '#CC8F00'\r\n            });\r\n        }\r\n        \r\n        // Update sparks\r\n        this.sparks.forEach((spark, index) => {\r\n            spark.x += spark.vx;\r\n            spark.y += spark.vy;\r\n            spark.life -= 0.05;\r\n            if (spark.life <= 0) {\r\n                this.sparks.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Standardized neutral background; skip custom drawBackground\r\n        this.drawEnergyField();\r\n        this.drawBattery();\r\n        this.drawComponent();\r\n        this.drawLoad();\r\n        this.drawParticles();\r\n        this.drawSparks();\r\n        this.drawCurrentFlow();\r\n        this.drawInfo();\r\n        this.drawInstructions();\r\n    }\r\n    \r\n    drawBackground() {\r\n        // No-op: background is standardized\r\n    }\r\n    \r\n    drawEnergyField() {\r\n        if (this.isActive) {\r\n            const time = this.time * 0.001;\r\n            \r\n            // Draw multiple energy field layers with different effects\r\n            for (let i = 0; i < 3; i++) {\r\n                const radius = 120 + i * 30;\r\n                const alpha = (this.glowIntensity * 0.2) / (i + 1);\r\n                const pulse = Math.sin(time * 5 + i) * 0.1;\r\n                \r\n                const gradient = this.ctx.createRadialGradient(\r\n                    this.componentX, this.componentY, 0,\r\n                    this.componentX, this.componentY, radius\r\n                );\r\n                gradient.addColorStop(0, `rgba(0, 255, 255, ${alpha + pulse})`);\r\n                gradient.addColorStop(0.7, `rgba(0, 255, 255, ${alpha * 0.3})`);\r\n                gradient.addColorStop(1, 'rgba(0, 255, 255, 0)');\r\n                \r\n                this.ctx.fillStyle = gradient;\r\n                this.ctx.fillRect(this.componentX - radius, this.componentY - radius, radius * 2, radius * 2);\r\n            }\r\n            \r\n            // Draw energy waves radiating from component\r\n            for (let i = 0; i < 5; i++) {\r\n                const waveRadius = 50 + i * 20 + Math.sin(time * 3 + i) * 10;\r\n                const waveAlpha = (0.3 - i * 0.05) * this.glowIntensity;\r\n                \r\n                this.ctx.strokeStyle = `rgba(0, 255, 255, ${waveAlpha})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(this.componentX, this.componentY, waveRadius, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawBattery() {\r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw battery with enhanced glow effect when active\r\n        const glowColor = this.isActive ? `rgba(46, 139, 87, ${0.85 + this.glowIntensity * 0.15})` : '#2E8B57';\r\n        this.ctx.fillStyle = glowColor;\r\n        this.ctx.fillRect(this.batteryX - 25, this.batteryY - 35, 50, 70);\r\n        \r\n        // Add metallic shine with animation\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.fillRect(this.batteryX - 20, this.batteryY - 30, 40, 5);\r\n        \r\n        // Draw battery terminals with enhanced metallic effect\r\n        this.ctx.fillStyle = '#888';\r\n        this.ctx.fillRect(this.batteryX - 8, this.batteryY - 45, 16, 12);\r\n        this.ctx.fillRect(this.batteryX - 8, this.batteryY + 33, 16, 12);\r\n        \r\n        // Add terminal shine\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n        this.ctx.fillRect(this.batteryX - 6, this.batteryY - 43, 12, 3);\r\n        this.ctx.fillRect(this.batteryX - 6, this.batteryY + 35, 12, 3);\r\n        \r\n        // Draw voltage label with pulsing glow\r\n        const labelGlow = this.isActive ? Math.sin(time * 3) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(204, 143, 0, ${labelGlow})` : '#111';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(`${this.inputVoltage}V`, this.batteryX, this.batteryY + 60);\r\n        \r\n        // Draw polarity with enhanced colors and glow\r\n        this.ctx.fillStyle = this.isActive ? `rgba(255, 102, 102, ${0.8 + this.glowIntensity})` : '#FF6666';\r\n        this.ctx.font = 'bold 20px Arial';\r\n        this.ctx.fillText('+', this.batteryX - 20, this.batteryY - 5);\r\n        \r\n        this.ctx.fillStyle = this.isActive ? `rgba(102, 102, 255, ${0.8 + this.glowIntensity})` : '#6666FF';\r\n        this.ctx.fillText('-', this.batteryX + 20, this.batteryY + 15);\r\n        \r\n        // Add energy indicator when active\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(46, 139, 87, ${0.5 + this.glowIntensity * 0.5})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.batteryX, this.batteryY, 30, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawComponent() {\r\n        if (this.componentType === 'diode') {\r\n            this.drawDiode();\r\n        } else {\r\n            this.drawTransistor();\r\n        }\r\n    }\r\n    \r\n    drawDiode() {\r\n        const time = this.time * 0.001;\r\n        const x = this.componentX;\r\n        const y = this.componentY;\r\n        const size = 40;\r\n        \r\n        // Determine visual state based on bias type\r\n        const isForward = this.biasType === 'forward';\r\n        const isReverse = this.biasType === 'reverse';\r\n        const glow = this.isActive ? this.glowIntensity : 0;\r\n        \r\n        // Enhanced glow effects with pulsing\r\n        const pulseEffect = Math.sin(time * 3) * 0.2;\r\n        const glowColor = isForward ? '#2EEA6A' : isReverse ? '#FF3B3B' : '#CC8F00';\r\n        const glowIntensity = isForward ? glow * (1 + pulseEffect) : isReverse ? glow * 0.3 : 0;\r\n        \r\n        // Apply enhanced shadow effect\r\n        this.ctx.shadowColor = this.isActive ? glowColor : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 15 + glowIntensity * 10 : 0;\r\n        \r\n        // Draw diode symbol with enhanced styling\r\n        const symbolColor = this.isActive ? `rgba(204, 143, 0, ${0.9 + glowIntensity})` : '#333333';\r\n        \r\n        // Triangle (anode) with gradient effect\r\n        this.ctx.fillStyle = symbolColor;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - size, y);\r\n        this.ctx.lineTo(x - size/3, y - size/2);\r\n        this.ctx.lineTo(x - size/3, y + size/2);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Add metallic shine to triangle\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + pulseEffect})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - size + 5, y - size/3);\r\n            this.ctx.lineTo(x - size/3, y);\r\n            this.ctx.lineTo(x - size + 5, y + size/3);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Bar (cathode) with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 8;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x + size/3, y - size/2);\r\n        this.ctx.lineTo(x + size/3, y + size/2);\r\n        this.ctx.stroke();\r\n        \r\n        // Leads with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 6;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - size - 25, y);\r\n        this.ctx.lineTo(x - size, y);\r\n        this.ctx.moveTo(x + size/3 + 25, y);\r\n        this.ctx.lineTo(x + size/3, y);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced labels with better positioning\r\n        this.drawComponentLabel('DIODE', x, y + size + 35, time);\r\n        this.drawBiasIndicator(this.biasType, x, y - size - 25, glowIntensity);\r\n        \r\n        // Enhanced current flow indicators with animation\r\n        if (this.isActive) {\r\n            if (isForward) {\r\n                this.drawCurrentFlow(x - size - 45, x + size/3 + 45, y, y, 'forward', glow);\r\n                this.drawVoltageDrop(x, y - size/2 - 15, '0.7V', glow);\r\n            } else if (isReverse) {\r\n                this.drawCurrentFlow(x - size - 45, x + size/3 + 45, y, y, 'reverse', glow);\r\n                this.drawVoltageDrop(x, y - size/2 - 15, 'BLOCKED', glow);\r\n            }\r\n        }\r\n        \r\n        // Add junction glow effect for forward bias\r\n        if (this.isActive && isForward) {\r\n            this.ctx.fillStyle = `rgba(46, 139, 87, ${0.25 + pulseEffect * 0.8})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x - size/3, y, 8, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawTransistor() {\r\n        const time = this.time * 0.001;\r\n        const x = this.componentX;\r\n        const y = this.componentY;\r\n        const radius = 35;\r\n        const leadLength = 25;\r\n        \r\n        // Determine visual state based on bias type\r\n        const isForward = this.biasType === 'forward';\r\n        const isReverse = this.biasType === 'reverse';\r\n        const glow = this.isActive ? this.glowIntensity : 0;\r\n        \r\n        // Enhanced glow effects with pulsing\r\n        const pulseEffect = Math.sin(time * 3) * 0.2;\r\n        const glowColor = isForward ? '#2EEA6A' : isReverse ? '#FF3B3B' : '#CC8F00';\r\n        const glowIntensity = isForward ? glow * (1 + pulseEffect) : isReverse ? glow * 0.3 : 0;\r\n        \r\n        // Apply enhanced shadow effect\r\n        this.ctx.shadowColor = this.isActive ? glowColor : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 15 + glowIntensity * 10 : 0;\r\n        \r\n        // Draw transistor symbol with enhanced styling\r\n        const symbolColor = this.isActive ? `rgba(204, 143, 0, ${0.9 + glowIntensity})` : '#333333';\r\n        \r\n        // Circle (transistor body) with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 6;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n        this.ctx.stroke();\r\n        \r\n        // Add inner glow for active state\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(204, 143, 0, ${0.1 + pulseEffect})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, radius - 2, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Enhanced leads with better styling\r\n        this.ctx.lineWidth = 6;\r\n        this.drawTransistorLeads(x, y, radius, leadLength, symbolColor);\r\n        \r\n        // Enhanced emitter arrow\r\n        this.drawEmitterArrow(x, y, radius, symbolColor);\r\n        \r\n        // Enhanced lead labels\r\n        this.drawLeadLabels(x, y, radius, leadLength, symbolColor);\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced labels with better positioning\r\n        this.drawComponentLabel(this.componentType.toUpperCase(), x, y + radius + leadLength + 55, time);\r\n        this.drawBiasIndicator(this.biasType, x, y - radius - leadLength - 35, glowIntensity);\r\n        \r\n        // Enhanced current flow indicators with voltage drops\r\n        if (this.isActive) {\r\n            if (isForward) {\r\n                // Different current flow direction for NPN vs PNP\r\n                if (this.componentType === 'npn') {\r\n                    // NPN: electrons flow from emitter to collector\r\n                    this.drawCurrentFlow(x, x, y + radius + leadLength + 25, y - radius - leadLength - 25, 'forward', glow);\r\n                    this.drawVoltageDrop(x, y - radius - 15, 'Vbe: 0.7V', glow);\r\n                    this.drawVoltageDrop(x, y + radius + 15, 'Vce: 0.2V', glow);\r\n                } else if (this.componentType === 'pnp') {\r\n                    // PNP: holes flow from emitter to collector\r\n                    this.drawCurrentFlow(x, x, y - radius - leadLength - 25, y + radius + leadLength + 25, 'forward', glow);\r\n                    this.drawVoltageDrop(x, y - radius - 15, 'Vbe: -0.7V', glow);\r\n                    this.drawVoltageDrop(x, y + radius + 15, 'Vce: -0.2V', glow);\r\n                }\r\n            } else if (isReverse) {\r\n                this.drawCurrentFlow(x, x, y - radius - leadLength - 25, y + radius + leadLength + 25, 'reverse', glow);\r\n                this.drawVoltageDrop(x, y - radius - 15, 'BLOCKED', glow);\r\n            }\r\n        }\r\n        \r\n        // Add base current indicator for forward bias\r\n        if (this.isActive && isForward) {\r\n            const baseCurrentColor = this.componentType === 'npn' ? \r\n                `rgba(0, 255, 255, ${0.5 + pulseEffect})` : \r\n                `rgba(255, 100, 100, ${0.5 + pulseEffect})`;\r\n            \r\n            this.ctx.strokeStyle = baseCurrentColor;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.setLineDash([3, 3]);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - radius - leadLength - 10, y);\r\n            this.ctx.lineTo(x - radius, y);\r\n            this.ctx.stroke();\r\n            this.ctx.setLineDash([]);\r\n        }\r\n        \r\n        // Add transistor type indicator\r\n        if (this.isActive) {\r\n        const typeColor = this.componentType === 'npn' ? '#008EDA' : '#FF3B3B';\r\n            this.ctx.fillStyle = `rgba(0, 0, 0, 0.7)`;\r\n            this.ctx.fillRect(x - 30, y - radius - 45, 60, 20);\r\n            this.ctx.fillStyle = typeColor;\r\n            this.ctx.font = 'bold 10px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(this.componentType.toUpperCase(), x, y - radius - 35);\r\n        }\r\n    }\r\n    \r\n    // Helper methods for drawing components\r\n    drawComponentLabel(text, x, y, time) {\r\n        const labelGlow = this.isActive ? Math.sin(time * 2) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(204, 143, 0, ${labelGlow})` : '#111';\r\n        this.ctx.font = 'bold 18px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n    \r\n    drawBiasIndicator(biasType, x, y, glowIntensity) {\r\n        const biasText = biasType.toUpperCase();\r\n        const biasColor = biasType === 'forward' ? '#2EEA6A' : \r\n                         biasType === 'reverse' ? '#FF3B3B' : '#CC8F00';\r\n        this.ctx.fillStyle = this.isActive ? `rgba(46, 139, 87, ${0.85 + glowIntensity * 0.5})` : biasColor;\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.fillText(biasText, x, y);\r\n    }\r\n    \r\n    drawCurrentFlow(x1, x2, y1, y2, type, glow) {\r\n        const isForward = type === 'forward';\r\n        const color = isForward ? `rgba(0, 255, 255, ${glow})` : `rgba(255, 0, 0, ${glow * 0.5})`;\r\n        const dash = isForward ? [5, 5] : [3, 3];\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.setLineDash(dash);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawTransistorLeads(x, y, radius, leadLength, color) {\r\n        this.ctx.strokeStyle = color;\r\n        \r\n        // Collector lead (top)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y - radius);\r\n        this.ctx.lineTo(x, y - radius - leadLength);\r\n        this.ctx.stroke();\r\n        \r\n        // Base lead (middle)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - radius, y);\r\n        this.ctx.lineTo(x - radius - leadLength, y);\r\n        this.ctx.stroke();\r\n        \r\n        // Emitter lead (bottom)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y + radius);\r\n        this.ctx.lineTo(x, y + radius + leadLength);\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    drawEmitterArrow(x, y, radius, color) {\r\n        this.ctx.fillStyle = color;\r\n        \r\n        if (this.componentType === 'npn') {\r\n            // NPN: arrow pointing outward from emitter (electron flow)\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 8, y + radius - 15);\r\n            this.ctx.lineTo(x + 8, y + radius - 15);\r\n            this.ctx.lineTo(x, y + radius - 5);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        } else if (this.componentType === 'pnp') {\r\n            // PNP: arrow pointing inward to emitter (hole flow)\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 8, y + radius + 5);\r\n            this.ctx.lineTo(x + 8, y + radius + 5);\r\n            this.ctx.lineTo(x, y + radius + 15);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawLeadLabels(x, y, radius, leadLength, color) {\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('C', x, y - radius - leadLength - 10);\r\n        this.ctx.fillText('B', x - radius - leadLength - 10, y);\r\n        this.ctx.fillText('E', x, y + radius + leadLength + 20);\r\n    }\r\n    \r\n    drawVoltageDrop(x, y, text, glow) {\r\n        this.ctx.fillStyle = `rgba(204, 143, 0, ${0.8 + glow})`;\r\n        this.ctx.font = 'bold 10px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n    \r\n    updateDiodeParticles() {\r\n        // Diode: show electrons and holes moving in opposite directions during forward bias\r\n        // Electrons: N-side (cathode) to P-side (anode) - right to left\r\n        // Holes: P-side (anode) to N-side (cathode) - left to right\r\n        // Both contribute to current flow in the same direction\r\n        this.electrons.forEach((electron, index) => {\r\n            if (this.biasType === 'forward') {\r\n                // Electrons flow from N-side (cathode) to P-side (anode) - right to left\r\n                electron.vx = -3 + Math.sin(this.time * 0.02 + index * 0.5) * 1.5;\r\n                electron.vy = Math.sin(this.time * 0.03 + index) * 0.5;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = Math.sin(this.time * 0.1 + index) * 0.5 + 0.5;\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 1.0});\r\n                if (electron.trail.length > 5) electron.trail.shift();\r\n                \r\n                if (electron.x < this.componentX - 200) {\r\n                    electron.x = this.componentX + 100;\r\n                    electron.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else if (this.biasType === 'reverse') {\r\n                // Minimal reverse leakage current\r\n                electron.vx = 0.1 + Math.sin(this.time * 0.01 + index * 0.5) * 0.05;\r\n                electron.vy = Math.sin(this.time * 0.02 + index) * 0.1;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = 0.1;\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 0.3});\r\n                if (electron.trail.length > 3) electron.trail.shift();\r\n                \r\n                if (electron.x > this.componentX + 200) {\r\n                    electron.x = this.componentX - 100;\r\n                    electron.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else {\r\n                electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n            }\r\n        });\r\n        \r\n        this.holes.forEach((hole, index) => {\r\n            if (this.biasType === 'forward') {\r\n                // Holes flow from P-side (anode) to N-side (cathode) - left to right\r\n                hole.vx = 2.5 + Math.sin(this.time * 0.02 + index * 0.5) * 1.2;\r\n                hole.vy = Math.sin(this.time * 0.03 + index) * 0.5;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = Math.sin(this.time * 0.1 + index) * 0.5 + 0.5;\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 1.0});\r\n                if (hole.trail.length > 5) hole.trail.shift();\r\n                \r\n                if (hole.x > this.componentX + 200) {\r\n                    hole.x = this.componentX - 100;\r\n                    hole.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else if (this.biasType === 'reverse') {\r\n                // Minimal reverse leakage current\r\n                hole.vx = 0.1 + Math.sin(this.time * 0.01 + index * 0.5) * 0.05;\r\n                hole.vy = Math.sin(this.time * 0.02 + index) * 0.1;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = 0.1;\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 0.3});\r\n                if (hole.trail.length > 3) hole.trail.shift();\r\n                \r\n                if (hole.x > this.componentX + 200) {\r\n                    hole.x = this.componentX - 100;\r\n                    hole.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else {\r\n                hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateNPNParticles() {\r\n        // NPN: emphasize electron flow from emitter to collector\r\n        // Base voltage affects particle speed and intensity\r\n        const baseVoltageEffect = Math.max(0, (this.baseVoltage - 0.7) / 0.3); // 0 to 1 scale\r\n        const speedMultiplier = 1 + baseVoltageEffect * 2; // 1x to 3x speed\r\n        \r\n        this.electrons.forEach((electron, index) => {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // Electrons flow from emitter (bottom) to collector (top)\r\n                electron.vx = Math.sin(this.time * 0.02 + index * 0.5) * 1.0 * speedMultiplier;\r\n                electron.vy = (-4 + Math.sin(this.time * 0.03 + index) * 1.0) * speedMultiplier;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = (Math.sin(this.time * 0.1 + index) * 0.5 + 0.5) * (0.5 + baseVoltageEffect * 0.5);\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 1.0});\r\n                if (electron.trail.length > 8) electron.trail.shift();\r\n                \r\n                if (electron.y < this.componentY - 150) {\r\n                    electron.x = this.componentX - 40 + Math.random() * 80;\r\n                    electron.y = this.componentY + 100;\r\n                }\r\n            } else {\r\n                electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n            }\r\n        });\r\n        \r\n        // Minimal hole movement for NPN\r\n        this.holes.forEach((hole, index) => {\r\n            hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n        });\r\n    }\r\n    \r\n    updatePNPParticles() {\r\n        // PNP: emphasize hole flow from emitter to collector\r\n        // Base voltage affects particle speed and intensity\r\n        const baseVoltageEffect = Math.max(0, (this.baseVoltage - 0.7) / 0.3); // 0 to 1 scale\r\n        const speedMultiplier = 1 + baseVoltageEffect * 2; // 1x to 3x speed\r\n        \r\n        this.holes.forEach((hole, index) => {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // Holes flow from emitter (top) to collector (bottom)\r\n                hole.vx = Math.sin(this.time * 0.02 + index * 0.5) * 1.0 * speedMultiplier;\r\n                hole.vy = (4 + Math.sin(this.time * 0.03 + index) * 1.0) * speedMultiplier;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = (Math.sin(this.time * 0.1 + index) * 0.5 + 0.5) * (0.5 + baseVoltageEffect * 0.5);\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 1.0});\r\n                if (hole.trail.length > 8) hole.trail.shift();\r\n                \r\n                if (hole.y > this.componentY + 150) {\r\n                    hole.x = this.componentX - 40 + Math.random() * 80;\r\n                    hole.y = this.componentY - 100;\r\n                }\r\n            } else {\r\n                hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n            }\r\n        });\r\n        \r\n        // Minimal electron movement for PNP\r\n        this.electrons.forEach((electron, index) => {\r\n            electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n        });\r\n    }\r\n    \r\n    drawLoad() {\r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw load (light bulb) with enhanced glow effect and animation\r\n        const bulbGlow = this.isActive ? this.glowIntensity : 0;\r\n        const pulseEffect = this.isActive ? Math.sin(time * 3) * 0.1 : 0;\r\n        const bulbColor = this.isActive ? `rgba(204, 143, 0, ${0.85 + bulbGlow * 0.15 + pulseEffect})` : '#666';\r\n        \r\n        // Draw outer glow when active\r\n        if (this.isActive) {\r\n            this.ctx.shadowColor = '#CC8F00';\r\n            this.ctx.shadowBlur = 30 + this.glowIntensity * 20;\r\n            this.ctx.fillStyle = `rgba(204, 143, 0, ${0.3 + this.glowIntensity * 0.2})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.loadX, this.loadY, 45, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0;\r\n        }\r\n        \r\n        // Draw main bulb\r\n        this.ctx.fillStyle = bulbColor;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.loadX, this.loadY, 35, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        \r\n        // Add metallic shine to bulb\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.4 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.loadX - 10, this.loadY - 15, 8, 0, Math.PI);\r\n        this.ctx.fill();\r\n        \r\n        // Draw bulb base with enhanced metallic effect\r\n        this.ctx.fillStyle = '#444';\r\n        this.ctx.fillRect(this.loadX - 18, this.loadY + 35, 36, 25);\r\n        \r\n        // Add metallic shine to base with animation\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.fillRect(this.loadX - 15, this.loadY + 37, 30, 5);\r\n        \r\n        // Draw filament with enhanced effect and glow\r\n        this.ctx.strokeStyle = this.isActive ? `rgba(255, 170, 0, ${0.8 + this.glowIntensity})` : '#999';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.shadowColor = this.isActive ? '#FFAA00' : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 5 : 0;\r\n        \r\n        // Main filament\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.loadX - 12, this.loadY);\r\n        this.ctx.lineTo(this.loadX + 12, this.loadY);\r\n        this.ctx.stroke();\r\n        \r\n        // Add additional filament lines when active with animation\r\n        if (this.isActive) {\r\n            const filamentPulse = Math.sin(time * 4) * 0.2 + 0.8;\r\n            this.ctx.strokeStyle = `rgba(255, 170, 0, ${0.8 + this.glowIntensity * filamentPulse})`;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.loadX - 8, this.loadY - 5);\r\n            this.ctx.lineTo(this.loadX + 8, this.loadY - 5);\r\n            this.ctx.stroke();\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.loadX - 8, this.loadY + 5);\r\n            this.ctx.lineTo(this.loadX + 8, this.loadY + 5);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw load label with pulsing glow\r\n        const labelGlow = this.isActive ? Math.sin(time * 2) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(204, 143, 0, ${labelGlow})` : '#111';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('LOAD', this.loadX, this.loadY + 80);\r\n        \r\n        // Add power indicator with enhanced styling\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(46, 139, 87, ${0.85 + this.glowIntensity * 0.5})`;\r\n            this.ctx.font = 'bold 12px Arial';\r\n            this.ctx.fillText(`${this.power.toFixed(1)}mW`, this.loadX, this.loadY - 60);\r\n            \r\n            // Add energy waves radiating from bulb\r\n            for (let i = 0; i < 3; i++) {\r\n                const waveRadius = 50 + i * 15 + Math.sin(time * 2 + i) * 5;\r\n                const waveAlpha = (0.2 - i * 0.05) * this.glowIntensity;\r\n                this.ctx.strokeStyle = `rgba(204, 143, 0, ${waveAlpha})`;\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(this.loadX, this.loadY, waveRadius, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawParticles() {\r\n        if (!this.showElectrons) return;\r\n        \r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw electron trails with enhanced effects (filled circles)\r\n        this.electrons.forEach(electron => {\r\n            if (electron.trail.length > 0) {\r\n                electron.trail.forEach((trailPoint, index) => {\r\n                    const alpha = trailPoint.alpha * (index / electron.trail.length) * 0.6;\r\n                    const pulse = Math.sin(time * 4 + index) * 0.2 + 0.8;\r\n                    this.ctx.fillStyle = `rgba(0, 170, 255, ${alpha * pulse})`;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(trailPoint.x, trailPoint.y, electron.size * 0.6, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Draw hole trails with enhanced effects (empty circles)\r\n        this.holes.forEach(hole => {\r\n            if (hole.trail.length > 0) {\r\n                hole.trail.forEach((trailPoint, index) => {\r\n                    const alpha = trailPoint.alpha * (index / hole.trail.length) * 0.6;\r\n                    const pulse = Math.sin(time * 4 + index) * 0.2 + 0.8;\r\n                    this.ctx.strokeStyle = `rgba(255, 68, 68, ${alpha * pulse})`;\r\n                    this.ctx.lineWidth = 1;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(trailPoint.x, trailPoint.y, hole.size * 0.6, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Draw electrons with enhanced glow effect and standard symbol (filled circle)\r\n        this.electrons.forEach(electron => {\r\n            const glowIntensity = electron.glow * 0.4;\r\n            const pulse = Math.sin(time * 3 + electron.x * 0.01) * 0.3 + 0.7;\r\n            \r\n            // Outer glow\r\n            this.ctx.shadowColor = '#00AAFF';\r\n            this.ctx.shadowBlur = glowIntensity * 15;\r\n            this.ctx.fillStyle = `rgba(0, 170, 255, ${0.8 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x, electron.y, electron.size * 1.2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Core electron circle (filled - standard notation)\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.fillStyle = electron.color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x, electron.y, electron.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Inner highlight\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.6 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x - 2, electron.y - 2, electron.size * 0.3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Draw holes with enhanced glow effect and standard symbol (empty circle)\r\n        this.holes.forEach(hole => {\r\n            const glowIntensity = hole.glow * 0.4;\r\n            const pulse = Math.sin(time * 3 + hole.x * 0.01) * 0.3 + 0.7;\r\n            \r\n            // Subtle outer glow for holes (not filling the circle)\r\n            this.ctx.shadowColor = '#FF4444';\r\n            this.ctx.shadowBlur = glowIntensity * 8;\r\n            \r\n            // Core hole circle (empty - standard notation)\r\n            this.ctx.strokeStyle = hole.color;\r\n            this.ctx.lineWidth = 0.5; // Very thin line for smaller holes\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(hole.x, hole.y, hole.size, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Optional: small center dot to show it's a hole (not an empty space)\r\n            this.ctx.fillStyle = `rgba(255, 68, 68, ${0.3 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(hole.x, hole.y, hole.size * 0.2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Draw energy particles with enhanced effects\r\n        this.energyParticles.forEach(particle => {\r\n            const pulse = Math.sin(time * 5 + particle.x * 0.01) * 0.3 + 0.7;\r\n            this.ctx.fillStyle = `rgba(204, 143, 0, ${particle.life * pulse})`;\r\n            this.ctx.shadowColor = '#CC8F00';\r\n            this.ctx.shadowBlur = particle.life * 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawSparks() {\r\n        // Draw sparks when current is high\r\n        this.sparks.forEach(spark => {\r\n            this.ctx.fillStyle = `rgba(204, 143, 0, ${spark.life})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(spark.x, spark.y, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n    }\r\n    \r\n    drawCurrentFlow() {\r\n        if (!this.showCurrent || !this.isActive) return;\r\n        \r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw current flow with enhanced effects and animation\r\n        this.ctx.strokeStyle = `rgba(204, 143, 0, ${0.85 + this.glowIntensity * 0.5})`;\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.setLineDash([15, 8]);\r\n        \r\n        // Add glow effect to current flow\r\n        this.ctx.shadowColor = '#CC8F00';\r\n        this.ctx.shadowBlur = 10 + this.glowIntensity * 10;\r\n        \r\n        // Battery to component with animated dash pattern\r\n        const dashOffset = Math.sin(time * 3) * 5;\r\n        this.ctx.setLineDash([15 + dashOffset, 8 - dashOffset]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.batteryX + 25, this.batteryY);\r\n        this.ctx.lineTo(this.componentX - 90, this.componentY);\r\n        this.ctx.stroke();\r\n        \r\n        // Component to load with animated dash pattern\r\n        this.ctx.setLineDash([15 - dashOffset, 8 + dashOffset]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.componentX + 90, this.componentY);\r\n        this.ctx.lineTo(this.loadX - 35, this.loadY);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.setLineDash([]);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw animated current arrows with pulsing effect\r\n        const arrowOffset = Math.sin(time * 2) * 5;\r\n        const arrowGlow = Math.sin(time * 4) * 0.3 + 0.7;\r\n        this.drawArrow(this.batteryX + 35 + arrowOffset, this.batteryY, 12, 0, `rgba(204, 143, 0, ${arrowGlow})`);\r\n        this.drawArrow(this.componentX + 100 + arrowOffset, this.componentY, 12, 0, `rgba(204, 143, 0, ${arrowGlow})`);\r\n        \r\n        // Draw current intensity indicator with animation\r\n        const intensity = Math.min(this.current / 20, 1);\r\n        const pulseIntensity = intensity * (0.3 + Math.sin(time * 5) * 0.1);\r\n        this.ctx.fillStyle = `rgba(204, 143, 0, ${pulseIntensity})`;\r\n        this.ctx.fillRect(this.componentX - 100, this.componentY - 10, 200, 20);\r\n        \r\n        // Add energy particles along the current path\r\n        for (let i = 0; i < 5; i++) {\r\n            const particleProgress = (time * 0.5 + i * 0.2) % 1;\r\n            const particleX = this.batteryX + 25 + (this.componentX - 90 - this.batteryX - 25) * particleProgress;\r\n            const particleY = this.batteryY + Math.sin(time * 3 + i) * 3;\r\n            \r\n            this.ctx.fillStyle = `rgba(204, 143, 0, ${0.6 + Math.sin(time * 4 + i) * 0.2})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particleX, particleY, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Voltage drop indicators are already shown on the component symbol\r\n    }\r\n    \r\n    drawArrow(x, y, dx, dy, color) {\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x - 16, y - 8); // Increased from 8,4 to 16,8\r\n        this.ctx.lineTo(x - 16, y + 8); // Increased from 8,4 to 16,8\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawInfo() {\r\n        // Draw info panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 200);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔌 Diode & Transistor', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText(`Component: ${this.componentType.toUpperCase()}`, 20, 50);\r\n        this.ctx.fillText(`Bias: ${this.biasType.toUpperCase()}`, 20, 70);\r\n        this.ctx.fillText(`Input Voltage: ${this.inputVoltage}V`, 20, 90);\r\n        \r\n        if (this.componentType === 'npn' || this.componentType === 'pnp') {\r\n            this.ctx.fillText(`Base Voltage: ${this.baseVoltage}V`, 20, 110);\r\n        }\r\n        \r\n        this.ctx.fillText(`Current: ${this.current.toFixed(1)}mA`, 20, 130);\r\n        this.ctx.fillText(`Power: ${this.power.toFixed(1)}mW`, 20, 150);\r\n        this.ctx.fillText(`Status: ${this.isActive ? 'ACTIVE' : 'INACTIVE'}`, 20, 170);\r\n        this.ctx.fillText(`Temperature: ${this.temperature}°C`, 20, 190);\r\n    }\r\n    \r\n    drawInstructions() {\r\n        // Draw instruction panel with color legend\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';\r\n        this.ctx.fillRect(this.ctx.canvas.width - 320, 10, 310, 180);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔌 Particle Legend:', this.ctx.canvas.width - 310, 30);\r\n        \r\n        // Draw color-coded legend\r\n        this.ctx.font = 'bold 14px Arial';\r\n        \r\n        // Blue particles (Electrons) - filled circle\r\n        this.ctx.fillStyle = '#008EDA';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 50, 2.5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Electrons (filled circle)', this.ctx.canvas.width - 285, 55);\r\n        \r\n        // Red particles (Holes) - empty circle\r\n        this.ctx.strokeStyle = '#FF4444';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 70, 2.5, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Holes (empty circle)', this.ctx.canvas.width - 285, 75);\r\n        \r\n        // Yellow particles (Energy)\r\n        this.ctx.fillStyle = '#CC8F00';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 90, 2.5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Energy Carriers', this.ctx.canvas.width - 285, 95);\r\n        \r\n        // Yellow arrows (Current flow)\r\n        this.ctx.fillStyle = '#CC8F00';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.ctx.canvas.width - 300, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 290, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 292, 108);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 290, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 292, 112);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Current Flow', this.ctx.canvas.width - 285, 115);\r\n        \r\n        // Component behavior\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.fillText('💡 Behavior:', this.ctx.canvas.width - 310, 140);\r\n        \r\n        this.ctx.font = '11px Arial';\r\n        if (this.componentType === 'diode') {\r\n            this.ctx.fillText('• Forward bias: Electrons flow, light on', this.ctx.canvas.width - 310, 155);\r\n            this.ctx.fillText('• Reverse bias: No flow, light off', this.ctx.canvas.width - 310, 170);\r\n        } else {\r\n            this.ctx.fillText('• Base controls collector current', this.ctx.canvas.width - 310, 155);\r\n            this.ctx.fillText('• Small base = Large collector', this.ctx.canvas.width - 310, 170);\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            componentType: this.componentType,\r\n            biasType: this.biasType,\r\n            inputVoltage: this.inputVoltage,\r\n            baseVoltage: this.baseVoltage,\r\n            current: this.current,\r\n            power: this.power,\r\n            temperature: this.temperature,\r\n            isActive: this.isActive,\r\n            time: this.time\r\n        };\r\n    }\r\n}","\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class WaveParticleDuality extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'wave-particle-duality';\r\n        this.canvas = ctx.canvas;\r\n        \r\n        // Quantum properties\r\n        this.mode = 'wave'; // 'wave', 'particle', 'superposition', 'measurement'\r\n        this.photonEnergy = 5.0; // eV\r\n        this.wavelength = 150; // nm\r\n        this.speed = 1.0;\r\n        \r\n        // Wave function properties\r\n        this.waveFunction = [];\r\n        this.amplitude = 50;\r\n        this.frequency = 1.0;\r\n        this.phase = 0;\r\n        this.wavePhase = 0;\r\n        \r\n        // Particle properties\r\n        this.particleX = 100;\r\n        this.particleY = 300;\r\n        this.particleVelocity = { x: 8, y: 0 };\r\n        this.particleSize = 8;\r\n        \r\n        // Interference properties\r\n        this.slits = [\r\n            { x: 400, y: 250, width: 20, height: 100 },\r\n            { x: 400, y: 350, width: 20, height: 100 }\r\n        ];\r\n        this.interferencePattern = [];\r\n        this.screenX = 600;\r\n        \r\n        // Measurement properties\r\n        this.measurementCount = 0;\r\n        this.measurementResults = [];\r\n        this.showMeasurement = false;\r\n        \r\n        // Display options\r\n        this.showWaveFunction = true;\r\n        this.showParticlePosition = true;\r\n        this.showInterference = true;\r\n        this.showMeasurementEffect = false;\r\n\r\n        \r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setMode(mode) {\r\n        this.mode = mode;\r\n        this.reset();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setPhotonEnergy(energy) {\r\n        this.photonEnergy = energy;\r\n        this.wavelength = 1240 / energy; // E = hc/λ, simplified\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setWavelength(wavelength) {\r\n        this.wavelength = wavelength;\r\n        this.photonEnergy = 1240 / wavelength; // E = hc/λ, simplified\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setShowWaveFunction(show) {\r\n        this.showWaveFunction = show;\r\n    }\r\n    \r\n    setShowParticlePosition(show) {\r\n        this.showParticlePosition = show;\r\n    }\r\n    \r\n    setShowInterference(show) {\r\n        this.showInterference = show;\r\n    }\r\n    \r\n    setShowMeasurementEffect(show) {\r\n        this.showMeasurementEffect = show;\r\n    }\r\n    \r\n\r\n    \r\n    performMeasurement() {\r\n        this.measurementCount++;\r\n        this.showMeasurement = true;\r\n        \r\n        // Simulate measurement collapse\r\n        if (this.mode === 'superposition') {\r\n            const random = Math.random();\r\n            if (random < 0.5) {\r\n                this.mode = 'particle';\r\n            } else {\r\n                this.mode = 'wave';\r\n            }\r\n        }\r\n        \r\n        // Record measurement result\r\n        this.measurementResults.push({\r\n            time: this.time,\r\n            mode: this.mode,\r\n            position: { x: this.particleX, y: this.particleY }\r\n        });\r\n        \r\n        // Force measurement effect to show regardless of checkbox\r\n        this.showMeasurementEffect = true;\r\n        \r\n        setTimeout(() => {\r\n            this.showMeasurement = false;\r\n            this.showMeasurementEffect = false;\r\n        }, 3000);\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.phase = 0;\r\n        this.wavePhase = 0;\r\n        this.particleX = 100;\r\n        this.particleY = 300;\r\n        this.measurementCount = 0;\r\n        this.measurementResults = [];\r\n        this.showMeasurement = false;\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    initializeWaveFunction() {\r\n        this.waveFunction = [];\r\n        const numPoints = 150;\r\n        for (let i = 0; i < numPoints; i++) {\r\n            const x = (i / numPoints) * this.canvas.width;\r\n            \r\n            // Create a clean sinusoidal wave function\r\n            const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength + this.phase);\r\n            \r\n            const y = this.canvas.height / 2 + wave;\r\n            this.waveFunction.push({ x, y });\r\n        }\r\n    }\r\n    \r\n    initializeInterferencePattern() {\r\n        this.interferencePattern = [];\r\n        const screenHeight = 300; // Reduced to match new detection screen height\r\n        const centerY = this.canvas.height / 2;\r\n        \r\n        // Define slit positions for vertical slits\r\n        const slit1X = 390; // Center of left slit\r\n        const slit2X = 410; // Center of right slit\r\n        const slitY = 300;   // Y position of slits (center)\r\n        const screenX = this.screenX;\r\n        \r\n        for (let y = 0; y < screenHeight; y += 8) {\r\n            const screenY = centerY - screenHeight/2 + y;\r\n            let intensity = 0;\r\n            \r\n            // Calculate path difference from each slit\r\n            const distance1 = Math.sqrt(Math.pow(screenX - slit1X, 2) + Math.pow(screenY - slitY, 2));\r\n            const distance2 = Math.sqrt(Math.pow(screenX - slit2X, 2) + Math.pow(screenY - slitY, 2));\r\n            \r\n            // Calculate phase difference\r\n            const pathDifference = distance2 - distance1;\r\n            const phaseDifference = 2 * Math.PI * pathDifference / this.wavelength;\r\n            \r\n            // Calculate interference intensity\r\n            const amplitude1 = 1 / Math.sqrt(distance1);\r\n            const amplitude2 = 1 / Math.sqrt(distance2);\r\n            \r\n            // Total amplitude with interference\r\n            const totalAmplitude = amplitude1 + amplitude2 * Math.cos(phaseDifference);\r\n            intensity = Math.abs(totalAmplitude);\r\n            \r\n            this.interferencePattern.push({\r\n                x: screenX,\r\n                y: screenY,\r\n                intensity: intensity\r\n            });\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 5; // Increased multiplier for better responsiveness\r\n        this.time += dt;\r\n        this.phase += dt * this.frequency;\r\n        \r\n        // Only update wave function when needed (not every frame)\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            // Update wave function points efficiently\r\n            this.waveFunction.forEach((point, i) => {\r\n                const x = point.x;\r\n                \r\n                // Check if wave is blocked by the barrier\r\n                if (x >= 380 && x <= 420) {\r\n                    // Inside barrier - wave is blocked except at slits\r\n                    // Check if this x position corresponds to a slit\r\n                    const slit1X = 390; // Left slit center\r\n                    const slit2X = 410; // Right slit center\r\n                    const slitWidth = 10;\r\n                    \r\n                    // Check if this x position is within either slit\r\n                    const distanceFromSlit1 = Math.abs(x - slit1X);\r\n                    const distanceFromSlit2 = Math.abs(x - slit2X);\r\n                    \r\n                    if (distanceFromSlit1 < slitWidth / 2 || distanceFromSlit2 < slitWidth / 2) {\r\n                        // Wave passes through slit\r\n                        const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength - this.phase);\r\n                        point.y = this.canvas.height / 2 + wave;\r\n                    } else {\r\n                        // Wave is blocked by barrier - make it invisible\r\n                        point.y = -1000; // Move off-screen\r\n                    }\r\n                } else {\r\n                    // Outside barrier - normal wave propagation\r\n                    const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength - this.phase);\r\n                    point.y = this.canvas.height / 2 + wave;\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Update particle position with more realistic movement\r\n        if (this.mode === 'particle' || this.mode === 'superposition') {\r\n            this.particleX += this.particleVelocity.x * dt;\r\n            \r\n            // Add some vertical oscillation for particle\r\n            this.particleY = 300 + Math.sin(this.time * 3) * 20;\r\n            \r\n            // Reset particle when it reaches the screen\r\n            if (this.particleX > this.screenX - 50) {\r\n                this.particleX = 100;\r\n            }\r\n        }\r\n        \r\n        // Only update interference pattern when needed and less frequently\r\n        if (this.showInterference && (this.mode === 'wave' || this.mode === 'superposition')) {\r\n            // Update interference pattern less frequently for better performance\r\n            if (Math.floor(this.time * 10) % 3 === 0) { // Update every 3rd frame at 10fps\r\n        this.initializeInterferencePattern();\r\n            }\r\n        }\r\n        \r\n        // Add wave propagation effect\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            this.wavePhase += dt * 2;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Clear canvas\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Draw background grid\r\n        this.drawGrid();\r\n        \r\n        // Draw slits\r\n        this.drawSlits();\r\n        \r\n        // Draw detection screen\r\n        this.drawDetectionScreen();\r\n        \r\n        // Draw based on current mode\r\n        switch (this.mode) {\r\n            case 'wave':\r\n                this.renderWaveMode();\r\n                break;\r\n            case 'particle':\r\n                this.renderParticleMode();\r\n                break;\r\n            case 'superposition':\r\n                this.renderSuperpositionMode();\r\n                break;\r\n            case 'measurement':\r\n                this.renderMeasurementMode();\r\n                break;\r\n        }\r\n        \r\n        // Draw interference pattern (only if enabled and in wave/superposition modes)\r\n        if (this.showInterference && (this.mode === 'wave' || this.mode === 'superposition')) {\r\n            this.drawInterferencePattern();\r\n        }\r\n        \r\n        // Draw measurement effect\r\n        if (this.showMeasurement) {\r\n            this.drawMeasurementEffect();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawQuantumLabels();\r\n        \r\n        // Draw descriptive labels\r\n        this.drawDescriptiveLabels();\r\n    }\r\n    \r\n    drawGrid() {\r\n        // Enhanced quantum grid with modern styling\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.15)';\r\n        this.ctx.lineWidth = 0.8;\r\n        this.ctx.setLineDash([8, 8]);\r\n        \r\n        // Vertical lines with subtle animation\r\n        for (let x = 0; x < this.canvas.width; x += 100) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Horizontal lines\r\n        for (let y = 0; y < this.canvas.height; y += 100) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n        \r\n        // Add subtle quantum field effect\r\n        this.ctx.fillStyle = 'rgba(138, 43, 226, 0.03)';\r\n        for (let x = 0; x < this.canvas.width; x += 120) {\r\n            for (let y = 0; y < this.canvas.height; y += 120) {\r\n                const pulse = Math.sin(this.time * 0.3 + x * 0.01 + y * 0.01) * 0.5 + 0.5;\r\n                this.ctx.globalAlpha = pulse * 0.08;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 25, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        this.ctx.globalAlpha = 1;\r\n    }\r\n    \r\n    drawSlits() {\r\n        // Enhanced barrier with modern gradient and depth\r\n        const gradient = this.ctx.createLinearGradient(380, 0, 420, 0);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(0.3, '#16213e');\r\n        gradient.addColorStop(0.7, '#0f3460');\r\n        gradient.addColorStop(1, '#1a1a2e');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(380, 0, 40, this.canvas.height);\r\n        \r\n        // Enhanced shadow for depth\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.shadowOffsetX = 3;\r\n        this.ctx.fillRect(380, 0, 40, this.canvas.height);\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        \r\n        // Cut out vertical slits with enhanced styling\r\n        this.ctx.clearRect(385, 200, 10, 200); // Left slit\r\n        this.ctx.clearRect(405, 200, 10, 200); // Right slit\r\n        \r\n        // Enhanced slit borders with modern styling\r\n        this.ctx.strokeStyle = '#0a0a0a';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        \r\n        // Left slit border\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(385, 200);\r\n        this.ctx.lineTo(385, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(395, 200);\r\n        this.ctx.lineTo(395, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Right slit border\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(405, 200);\r\n        this.ctx.lineTo(405, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(415, 200);\r\n        this.ctx.lineTo(415, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Enhanced inner highlight for slit edges\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(386, 200);\r\n        this.ctx.lineTo(386, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(414, 200);\r\n        this.ctx.lineTo(414, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Enhanced barrier label with modern styling\r\n        this.ctx.fillStyle = '#1a1a2e';\r\n        this.ctx.font = 'bold 14px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('Barrier', 400, 190);\r\n        \r\n        // Enhanced arrows showing wave approach\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(350, 300);\r\n        this.ctx.lineTo(380, 300);\r\n        this.ctx.stroke();\r\n        \r\n        // Enhanced arrow head\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(375, 295);\r\n        this.ctx.lineTo(380, 300);\r\n        this.ctx.lineTo(375, 305);\r\n        this.ctx.closePath();\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced arrow label\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('Wave', 365, 290);\r\n    }\r\n    \r\n    drawDetectionScreen() {\r\n        // Enhanced detection screen with modern styling\r\n        const pulse = Math.sin(this.time * 2) * 0.3 + 0.7;\r\n        \r\n        // Enhanced screen background with gradient\r\n        const screenGradient = this.ctx.createLinearGradient(this.screenX - 8, 150, this.screenX + 8, 450);\r\n        screenGradient.addColorStop(0, `rgba(200, 200, 255, ${0.7 * pulse})`);\r\n        screenGradient.addColorStop(0.5, `rgba(180, 180, 255, ${0.8 * pulse})`);\r\n        screenGradient.addColorStop(1, `rgba(200, 200, 255, ${0.7 * pulse})`);\r\n        \r\n        this.ctx.fillStyle = screenGradient;\r\n        this.ctx.fillRect(this.screenX - 8, 150, 16, 300);\r\n        \r\n        // Enhanced screen border with shadow\r\n        this.ctx.shadowColor = 'rgba(0, 102, 204, 0.5)';\r\n        this.ctx.shadowBlur = 6;\r\n        this.ctx.strokeStyle = '#0066cc';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.strokeRect(this.screenX - 8, 150, 16, 300);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced pulsing effect for wave/superposition modes\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            const activePulse = Math.sin(this.time * 4) * 0.4 + 0.6;\r\n            this.ctx.fillStyle = `rgba(100, 150, 255, ${activePulse * 0.4})`;\r\n            this.ctx.fillRect(this.screenX - 10, 150, 20, 300);\r\n        }\r\n        \r\n        // Enhanced detection screen label\r\n        this.ctx.fillStyle = '#1a1a2e';\r\n        this.ctx.font = 'bold 14px Inter, Arial, sans-serif';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('Detection Screen', this.screenX, 145);\r\n        \r\n        // Enhanced detection zones with modern styling\r\n        this.ctx.strokeStyle = 'rgba(0, 102, 204, 0.6)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.lineCap = 'round';\r\n        for (let i = 0; i < 6; i++) {\r\n            const y = 170 + i * 45;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.screenX - 8, y);\r\n            this.ctx.lineTo(this.screenX + 8, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    renderWaveMode() {\r\n        if (!this.showWaveFunction) return;\r\n        \r\n        // Enhanced wave function with modern styling and glow effects\r\n        \r\n        // Add glow effect for wave\r\n        this.ctx.shadowColor = '#4CAF50';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.lineCap = 'round';\r\n        \r\n        // Draw wave before barrier with enhanced styling\r\n        this.ctx.beginPath();\r\n        let started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x < 380) {\r\n                if (!started) {\r\n                    this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n                } else {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave after barrier\r\n        this.ctx.beginPath();\r\n        started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x > 420) {\r\n                if (!started) {\r\n                    this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n                } else {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced wave particles with gradient\r\n        for (let i = 0; i < this.waveFunction.length; i += 5) {\r\n            const point = this.waveFunction[i];\r\n            const gradient = this.ctx.createRadialGradient(\r\n                point.x - 2, point.y - 2, 0,\r\n                point.x, point.y, 4\r\n            );\r\n            gradient.addColorStop(0, '#6BCF7F');\r\n            gradient.addColorStop(0.7, '#4CAF50');\r\n            gradient.addColorStop(1, '#2E7D32');\r\n            \r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(point.x, point.y, 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Enhanced wave direction arrows with modern styling\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        for (let i = 0; i < 3; i++) {\r\n            const x = 150 + i * 120;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 350);\r\n            this.ctx.lineTo(x + 25, 350);\r\n            this.ctx.stroke();\r\n            \r\n            // Enhanced arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + 18, 345);\r\n            this.ctx.lineTo(x + 25, 350);\r\n            this.ctx.lineTo(x + 18, 355);\r\n            this.ctx.closePath();\r\n            this.ctx.fillStyle = '#4CAF50';\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    renderWaveModeWithoutLabel() {\r\n        if (!this.showWaveFunction) return;\r\n        \r\n        // Draw wave function with barrier interaction\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 3;\r\n        \r\n        // Draw wave before barrier\r\n        this.ctx.beginPath();\r\n        let started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x < 380) {\r\n                if (!started) {\r\n                    this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n                } else {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave after barrier\r\n        this.ctx.beginPath();\r\n        started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x > 420) {\r\n                if (!started) {\r\n                this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n            } else {\r\n                this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave particles\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        for (let i = 0; i < this.waveFunction.length; i += 5) {\r\n            const point = this.waveFunction[i];\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(point.x, point.y, 3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Add wave direction arrows (moved to avoid overlap)\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < 3; i++) {\r\n            const x = 150 + i * 120;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 350);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + 15, 345);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.lineTo(x + 15, 355);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    renderParticleMode() {\r\n        if (!this.showParticlePosition) return;\r\n        \r\n        // Enhanced particle with modern styling and glow effects\r\n        \r\n        // Add glow effect for particle\r\n        this.ctx.shadowColor = '#FF5722';\r\n        this.ctx.shadowBlur = 10;\r\n        \r\n        // Enhanced particle with gradient\r\n        const gradient = this.ctx.createRadialGradient(\r\n            this.particleX - 3, this.particleY - 3, 0,\r\n            this.particleX, this.particleY, this.particleSize\r\n        );\r\n        gradient.addColorStop(0, '#FF8A65');\r\n        gradient.addColorStop(0.7, '#FF5722');\r\n        gradient.addColorStop(1, '#D84315');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, this.particleSize, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced particle trail with gradient\r\n        const trailGradient = this.ctx.createLinearGradient(\r\n            this.particleX - 50, this.particleY,\r\n            this.particleX + 50, this.particleY\r\n        );\r\n        trailGradient.addColorStop(0, 'rgba(255, 87, 34, 0.3)');\r\n        trailGradient.addColorStop(0.5, 'rgba(255, 87, 34, 0.6)');\r\n        trailGradient.addColorStop(1, 'rgba(255, 87, 34, 0.3)');\r\n        \r\n        this.ctx.strokeStyle = trailGradient;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX - 50, this.particleY);\r\n        this.ctx.lineTo(this.particleX + 50, this.particleY);\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    renderParticleModeWithoutLabel() {\r\n        if (!this.showParticlePosition) return;\r\n        \r\n        // Draw particle\r\n        this.ctx.fillStyle = '#FF5722';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, this.particleSize, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw particle trail\r\n        this.ctx.strokeStyle = 'rgba(255, 87, 34, 0.5)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX - 50, this.particleY);\r\n        this.ctx.lineTo(this.particleX + 50, this.particleY);\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    renderSuperpositionMode() {\r\n        // Draw both wave and particle aspects without their labels\r\n        this.renderWaveModeWithoutLabel();\r\n        this.renderParticleModeWithoutLabel();\r\n        \r\n\r\n    }\r\n    \r\n    renderMeasurementMode() {\r\n        this.renderParticleModeWithoutLabel();\r\n        \r\n        // Draw measurement apparatus\r\n        this.ctx.strokeStyle = '#FF9800';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX, this.particleY - 30);\r\n        this.ctx.lineTo(this.particleX, this.particleY + 30);\r\n        this.ctx.stroke();\r\n        \r\n\r\n    }\r\n    \r\n    drawInterferencePattern() {\r\n        // Enhanced interference pattern with modern styling and effects\r\n        \r\n        // Add glow effect for interference pattern\r\n        this.ctx.shadowColor = '#9C27B0';\r\n        this.ctx.shadowBlur = 6;\r\n        \r\n        for (let i = 0; i < this.interferencePattern.length; i++) {\r\n            const point = this.interferencePattern[i];\r\n            const intensity = Math.min(point.intensity * 3, 1);\r\n            const alpha = Math.min(intensity, 0.9);\r\n            \r\n            // Enhanced time-based animation\r\n            const timeOffset = this.time * 2 + i * 0.1;\r\n            const animatedIntensity = intensity * (0.7 + 0.3 * Math.sin(timeOffset));\r\n            \r\n            // Enhanced colors for bright and dark fringes\r\n            if (intensity > 0.2) {\r\n                // Bright fringes with gradient\r\n                const gradient = this.ctx.createRadialGradient(\r\n                    point.x, point.y, 0,\r\n                    point.x, point.y, 8\r\n                );\r\n                gradient.addColorStop(0, `rgba(156, 39, 176, ${animatedIntensity})`);\r\n                gradient.addColorStop(0.7, `rgba(123, 31, 162, ${animatedIntensity * 0.8})`);\r\n                gradient.addColorStop(1, `rgba(74, 20, 140, ${animatedIntensity * 0.6})`);\r\n                this.ctx.fillStyle = gradient;\r\n            } else {\r\n                // Dark fringes\r\n                this.ctx.fillStyle = `rgba(0, 0, 0, ${animatedIntensity * 0.4})`;\r\n            }\r\n            \r\n            // Enhanced dots with rounded corners\r\n            const dotSize = Math.max(8, animatedIntensity * 15);\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(point.x, point.y, dotSize/2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced animated detection dots\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            for (let i = 0; i < 5; i++) {\r\n                const y = 170 + i * 50;\r\n                const x = this.screenX + 8;\r\n                const pulse = Math.sin(this.time * 3 + i) * 0.5 + 0.5;\r\n                \r\n                // Enhanced detection dot with gradient\r\n                const gradient = this.ctx.createRadialGradient(\r\n                    x - 2, y - 2, 0,\r\n                    x, y, 6\r\n                );\r\n                gradient.addColorStop(0, '#FFD700');\r\n                gradient.addColorStop(0.7, '#FFC107');\r\n                gradient.addColorStop(1, '#FF8F00');\r\n                \r\n                this.ctx.globalAlpha = pulse;\r\n                this.ctx.fillStyle = gradient;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 5, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n            this.ctx.globalAlpha = 1;\r\n        }\r\n        \r\n        // Enhanced wave arrows to slits with modern styling\r\n        this.ctx.strokeStyle = '#9C27B0';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        \r\n        // Animated wave arrows\r\n        const arrowPulse = Math.sin(this.time * 2) * 0.3 + 0.7;\r\n        this.ctx.globalAlpha = arrowPulse;\r\n        \r\n        // From left slit\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(390, 300);\r\n        this.ctx.lineTo(this.screenX, 200);\r\n        this.ctx.stroke();\r\n        \r\n        // From right slit\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(410, 300);\r\n        this.ctx.lineTo(this.screenX, 400);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.globalAlpha = 1;\r\n    }\r\n    \r\n    drawMeasurementEffect() {\r\n        // More dramatic flash effect with pulsing\r\n        const pulse = Math.sin(this.time * 8) * 0.3 + 0.7;\r\n        this.ctx.fillStyle = `rgba(255, 255, 0, ${0.4 * pulse})`;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Add particle collapse animation\r\n        this.ctx.fillStyle = '#FF5722';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, 15 + Math.sin(this.time * 10) * 5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n\r\n    }\r\n    \r\n    drawQuantumInfo() {\r\n        // Draw quantum information panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 120, 350, 200); // Increased height to accommodate formulas\r\n        \r\n        // Draw formulas at the top of the panel\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('E = hf', 20, 140);\r\n        this.ctx.fillText('λ = h/p', 20, 160);\r\n        this.ctx.fillText('ΔxΔp ≥ ℏ/2', 20, 180);\r\n        \r\n        // Draw separator line\r\n        this.ctx.strokeStyle = '#FFFFFF';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(20, 190);\r\n        this.ctx.lineTo(340, 190);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw current values\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Mode: ${this.mode.toUpperCase()}`, 20, 210);\r\n        this.ctx.fillText(`Energy: ${this.photonEnergy.toFixed(1)} eV`, 20, 230);\r\n        this.ctx.fillText(`Wavelength: ${this.wavelength.toFixed(0)} nm`, 20, 250);\r\n        this.ctx.fillText(`Measurements: ${this.measurementCount}`, 20, 270);\r\n        this.ctx.fillText(`Time: ${this.time.toFixed(1)}s`, 20, 290);\r\n        \r\n        // Add mode-specific descriptions\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#FFFF00';\r\n        switch(this.mode) {\r\n            case 'wave':\r\n                this.ctx.fillText('Wave Behavior: Light behaves as a wave', 20, 315);\r\n                this.ctx.fillText('creating interference patterns', 20, 330);\r\n                break;\r\n            case 'particle':\r\n                this.ctx.fillText('Particle Behavior: Light behaves as', 20, 315);\r\n                this.ctx.fillText('discrete particles with definite position', 20, 330);\r\n                break;\r\n            case 'superposition':\r\n                this.ctx.fillText('Superposition: Light exists in both', 20, 315);\r\n                this.ctx.fillText('wave and particle states until measured', 20, 330);\r\n                break;\r\n            case 'measurement':\r\n                this.ctx.fillText('Measurement: Observing the system', 20, 315);\r\n                this.ctx.fillText('forces it to choose wave OR particle', 20, 330);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            mode: this.mode,\r\n            photonEnergy: this.photonEnergy.toFixed(1),\r\n            wavelength: this.wavelength.toFixed(0),\r\n            measurementCount: this.measurementCount,\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawQuantumLabels() {\r\n        this.drawLabels('Wave-Particle Duality', '');\r\n    }\r\n    \r\n    drawDescriptiveLabels() {\r\n        // Draw descriptive labels in the bottom-right corner\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling with better contrast for dark background\r\n        this.ctx.font = 'bold 13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        const startX = this.ctx.canvas.width - 200;\r\n        const startY = this.ctx.canvas.height - 120;\r\n        const lineHeight = 16;\r\n        \r\n        // Draw mode-specific descriptions\r\n        switch(this.mode) {\r\n            case 'wave':\r\n                this.ctx.fillText('Wave Behavior:', startX, startY);\r\n                this.ctx.fillText('• Light travels as waves', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Creates interference pattern', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Shows wave-like properties', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'particle':\r\n                this.ctx.fillText('Particle Behavior:', startX, startY);\r\n                this.ctx.fillText('• Light travels as particles', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Hits screen at specific points', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Shows particle-like properties', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'superposition':\r\n                this.ctx.fillText('Quantum Superposition:', startX, startY);\r\n                this.ctx.fillText('• Light exists in both states', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Wave + Particle simultaneously', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Until measured (collapsed)', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'measurement':\r\n                this.ctx.fillText('Measurement Effect:', startX, startY);\r\n                this.ctx.fillText('• Observation forces a choice', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Wave OR Particle behavior', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Quantum mystery revealed', startX, startY + lineHeight * 3);\r\n                break;\r\n        }\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}","\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class NuclearReactions extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.canvas = ctx.canvas;\r\n        this.speed = 1;\r\n        this.mode = 'fission'; // fission, fusion\r\n        this.neutronEnergy = 1.0;\r\n        this.temperature = 1.0;\r\n\r\n        \r\n        // Nuclear particles\r\n        this.nuclei = [];\r\n        this.neutrons = [];\r\n        this.fissionProducts = [];\r\n        this.fusionProducts = [];\r\n        this.energyParticles = [];\r\n        this.reactingParticles = [];\r\n        this.shockwaves = [];\r\n        \r\n        // Statistics\r\n        this.energyReleased = 0;\r\n        this.neutronsProduced = 0;\r\n        this.chainReactions = 0;\r\n        this.fissionCount = 0;\r\n        this.fusionCount = 0;\r\n        \r\n        // Chain reaction state\r\n        this.chainStarted = false;\r\n        \r\n\r\n        \r\n        // Click interaction\r\n        this.setupClickEvents();\r\n        this.initializeNuclei();\r\n    }\r\n    \r\n    setupClickEvents() {\r\n        this.canvas.addEventListener('click', (e) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            \r\n            // Start reacting particle movement for all modes\r\n            this.reactingParticles.forEach(particle => {\r\n                if (!particle.moving) {\r\n                    // Find the target atom for this particle\r\n                    this.findTargetForParticle(particle);\r\n                    particle.moving = true;\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Add touch event listener for mobile support\r\n        this.canvas.addEventListener('touchstart', (e) => {\r\n            e.preventDefault();\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const touch = e.touches[0];\r\n            const x = touch.clientX - rect.left;\r\n            const y = touch.clientY - rect.top;\r\n            \r\n            // Start reacting particle movement for all modes\r\n            this.reactingParticles.forEach(particle => {\r\n                if (!particle.moving) {\r\n                    // Find the target atom for this particle\r\n                    this.findTargetForParticle(particle);\r\n                    particle.moving = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    initializeNuclei() {\r\n        this.nuclei = [];\r\n        this.neutrons = [];\r\n        this.fissionProducts = [];\r\n        this.fusionProducts = [];\r\n        this.energyParticles = [];\r\n        this.reactingParticles = [];\r\n        \r\n        // Create initial nuclei based on mode\r\n        const centerX = this.canvas.width / 2;\r\n        const centerY = this.canvas.height / 2;\r\n        \r\n        if (this.mode === 'chain') {\r\n            // Chain reaction mode: 3x3 grid of uranium atoms for chain reactions\r\n            const gridSpacing = 40;\r\n            const gridSize = 3; // 3x3 grid\r\n            \r\n            for (let row = 0; row < gridSize; row++) {\r\n                for (let col = 0; col < gridSize; col++) {\r\n                    const x = centerX + (col - 1) * gridSpacing;\r\n                    const y = centerY + (row - 1) * gridSpacing;\r\n                    \r\n                    this.nuclei.push({\r\n                        x: x,\r\n                        y: y,\r\n                        type: 'uranium',\r\n                        protons: 92,\r\n                        neutrons: 143,\r\n                        mass: 235,\r\n                        radius: 8,\r\n                        color: '#FF6B35',\r\n                        stability: 0.8,\r\n                        fissioned: false,\r\n                        visible: true,\r\n                        time: 0\r\n                    });\r\n                }\r\n            }\r\n            \r\n            // Add neutron as reacting particle\r\n            this.reactingParticles.push({\r\n                x: centerX - 150,\r\n                y: centerY,\r\n                targetX: centerX,\r\n                targetY: centerY,\r\n                type: 'neutron',\r\n                radius: 12, // Much larger for better visibility\r\n                color: '#9C27B0',\r\n                speed: 80,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n        } else if (this.mode === 'fission') {\r\n            // Single fission demonstration\r\n                            this.nuclei.push({\r\n                    x: centerX,\r\n                    y: centerY,\r\n                    type: 'uranium',\r\n                    protons: 92,\r\n                    neutrons: 143,\r\n                    mass: 235,\r\n                    radius: 30, // Much larger than hydrogen atoms for proportion\r\n                    color: '#FF6B35',\r\n                    stability: 0.8,\r\n                    fissioned: false,\r\n                    visible: true,\r\n                    time: 0\r\n                });\r\n            \r\n            // Add neutron as reacting particle\r\n            this.reactingParticles.push({\r\n                x: centerX - 150,\r\n                y: centerY,\r\n                targetX: centerX,\r\n                targetY: centerY,\r\n                type: 'neutron',\r\n                radius: 12, // Much larger for better visibility\r\n                color: '#9C27B0',\r\n                speed: 80,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n        } else if (this.mode === 'fusion') {\r\n            // Single fusion demonstration with deuterium (H-2) and tritium (H-3)\r\n            // Only create the tritium nucleus - deuterium will be the reacting particle\r\n            this.nuclei.push({\r\n                x: centerX + 60,\r\n                y: centerY,\r\n                type: 'tritium',\r\n                protons: 1,\r\n                neutrons: 2,\r\n                mass: 3,\r\n                radius: 20, // Even bigger for better visibility\r\n                color: '#4CAF50',\r\n                stability: 0.9,\r\n                fused: false,\r\n                visible: true,\r\n                time: 0\r\n            });\r\n            \r\n            // Add deuterium as reacting particle (this will be the moving H-2)\r\n            this.reactingParticles.push({\r\n                x: centerX - 60,\r\n                y: centerY,\r\n                targetX: centerX + 60,\r\n                targetY: centerY,\r\n                type: 'deuterium',\r\n                radius: 20, // Same size as nucleus for consistency\r\n                color: '#4CAF50',\r\n                speed: 60,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setMode(mode) {\r\n        this.mode = mode;\r\n        this.chainStarted = false;\r\n        this.reset();\r\n    }\r\n    \r\n    setNeutronEnergy(energy) {\r\n        this.neutronEnergy = energy;\r\n        // Update neutron speeds based on energy\r\n        this.neutrons.forEach(neutron => {\r\n            const speed = 50 + energy * 100;\r\n            const angle = Math.atan2(neutron.vy, neutron.vx);\r\n            neutron.vx = Math.cos(angle) * speed;\r\n            neutron.vy = Math.sin(angle) * speed;\r\n        });\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        this.temperature = temp;\r\n        // Temperature affects reaction intensity - more energy particles and faster reactions\r\n    }\r\n    \r\n\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.energyReleased = 0;\r\n        this.neutronsProduced = 0;\r\n        this.chainReactions = 0;\r\n        this.fissionCount = 0;\r\n        this.fusionCount = 0;\r\n        this.initializeNuclei();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime * this.speed * 0.001;\r\n        \r\n        // Update nuclei\r\n        this.nuclei.forEach(nucleus => {\r\n            nucleus.time += deltaTime * this.speed * 0.001;\r\n            \r\n            // No random events - only reactions through reacting particles\r\n        });\r\n        \r\n        // Update neutrons\r\n        this.neutrons.forEach(neutron => {\r\n            neutron.x += neutron.vx * deltaTime * this.speed * 0.001;\r\n            neutron.y += neutron.vy * deltaTime * this.speed * 0.001;\r\n            \r\n            // Slow down reaction product neutrons over time\r\n            if (neutron.isReactionProduct) {\r\n                neutron.vx *= 0.99;\r\n                neutron.vy *= 0.99;\r\n                \r\n                // Keep neutrons within canvas bounds\r\n                if (neutron.x < neutron.radius) {\r\n                    neutron.x = neutron.radius;\r\n                    neutron.vx = Math.abs(neutron.vx) * 0.5;\r\n                }\r\n                if (neutron.x > this.canvas.width - neutron.radius) {\r\n                    neutron.x = this.canvas.width - neutron.radius;\r\n                    neutron.vx = -Math.abs(neutron.vx) * 0.5;\r\n                }\r\n                if (neutron.y < neutron.radius) {\r\n                    neutron.y = neutron.radius;\r\n                    neutron.vy = Math.abs(neutron.vy) * 0.5;\r\n                }\r\n                if (neutron.y > this.canvas.height - neutron.radius) {\r\n                    neutron.y = this.canvas.height - neutron.radius;\r\n                    neutron.vy = -Math.abs(neutron.vy) * 0.5;\r\n                }\r\n            } else {\r\n                // Only decrease life for non-reaction product neutrons\r\n                neutron.life -= deltaTime * this.speed * 0.001;\r\n            }\r\n            \r\n            // Check for neutron capture - enhanced chain reaction\r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'uranium' && !nucleus.fissioned) {\r\n                    const distance = Math.sqrt((neutron.x - nucleus.x) ** 2 + (neutron.y - nucleus.y) ** 2);\r\n                    if (distance < nucleus.radius + 15) { // Increased detection radius\r\n                        this.triggerFission(nucleus);\r\n                        if (!neutron.isReactionProduct) {\r\n                            neutron.life = 0; // Only remove non-reaction product neutrons\r\n                        }\r\n                        this.chainReactions++;\r\n                        \r\n                        // Enhanced chain reaction - spawn more neutrons\r\n                        const additionalNeutrons = 2 + Math.floor(Math.random() * 3); // More neutrons\r\n                        for (let i = 0; i < additionalNeutrons; i++) {\r\n                            this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Remove dead neutrons - keep reaction product neutrons permanently\r\n        this.neutrons = this.neutrons.filter(neutron => {\r\n            if (neutron.isReactionProduct) {\r\n                return true; // Keep reaction product neutrons permanently\r\n            }\r\n            // For non-reaction product neutrons, keep them visible longer\r\n            return neutron.life > -10;\r\n        });\r\n        \r\n        // Update fission products\r\n        this.fissionProducts.forEach(product => {\r\n            product.x += product.vx * deltaTime * this.speed * 0.001;\r\n            product.y += product.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down the products over time\r\n            product.vx *= 0.99;\r\n            product.vy *= 0.99;\r\n            // Don't remove products - let them stay visible\r\n        });\r\n        \r\n        // Update fusion products\r\n        this.fusionProducts.forEach(product => {\r\n            product.x += product.vx * deltaTime * this.speed * 0.001;\r\n            product.y += product.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down the products over time\r\n            product.vx *= 0.99;\r\n            product.vy *= 0.99;\r\n            // Don't remove products - let them stay visible\r\n        });\r\n        \r\n        // Update reacting particles\r\n        this.reactingParticles.forEach(particle => {\r\n            if (particle.moving) {\r\n                // Calculate direction to target\r\n                const dx = particle.targetX - particle.x;\r\n                const dy = particle.targetY - particle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance > 5) {\r\n                    // Move toward target with some randomness\r\n                    const speed = particle.speed * deltaTime * this.speed * 0.001;\r\n                    \r\n                    // Add slight randomness to make it more realistic\r\n                    const randomAngle = (Math.random() - 0.5) * 0.1; // Small random angle\r\n                    const angle = Math.atan2(dy, dx) + randomAngle;\r\n                    \r\n                    particle.x += Math.cos(angle) * speed;\r\n                    particle.y += Math.sin(angle) * speed;\r\n                    \r\n                    // Check if particle has moved too far from target (missed)\r\n                    const newDistance = Math.sqrt((particle.x - particle.targetX) ** 2 + (particle.y - particle.targetY) ** 2);\r\n                    if (newDistance > distance + 20) {\r\n                        // Particle missed the target\r\n                        particle.life = 0;\r\n                    }\r\n                } else {\r\n                    // Collision occurred - trigger reaction\r\n                    this.handleReactionCollision(particle);\r\n                    particle.life = 0; // Remove the particle\r\n                }\r\n            }\r\n        });\r\n        this.reactingParticles = this.reactingParticles.filter(particle => particle.life > 0);\r\n        \r\n        // Update energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            particle.x += particle.vx * deltaTime * this.speed * 0.001;\r\n            particle.y += particle.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down energy particles over time but keep them visible\r\n            particle.vx *= 0.98;\r\n            particle.vy *= 0.98;\r\n            particle.life -= deltaTime * this.speed * 0.001;\r\n            particle.radius += deltaTime * this.speed * 0.001 * 5; // Slower expansion\r\n        });\r\n        // Keep energy particles visible longer - only remove after much longer time\r\n        this.energyParticles = this.energyParticles.filter(particle => particle.life > -10);\r\n        \r\n        // Update shockwaves\r\n        this.shockwaves.forEach(wave => {\r\n            wave.radius += wave.speed * deltaTime * this.speed * 0.001;\r\n            wave.life -= deltaTime * this.speed * 0.001 * 0.5; // Fade out over time\r\n        });\r\n        \r\n        // Remove dead shockwaves\r\n        this.shockwaves = this.shockwaves.filter(wave => wave.life > 0);\r\n        \r\n        // Description stays until reset - no timer\r\n        \r\n        // No automatic neutron spawning - only use pre-drawn reacting particles\r\n    }\r\n    \r\n    triggerFission(nucleus) {\r\n        nucleus.fissioned = true;\r\n        nucleus.visible = false; // Hide the uranium atom after fission\r\n        this.fissionCount++;\r\n        this.energyReleased += 200 * this.temperature; // MeV - affected by temperature\r\n        \r\n        // Create fission products\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (50 + Math.random() * 100) * this.temperature;\r\n        \r\n        // First fission product (lighter) - Krypton-92\r\n        this.fissionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            mass: 92,\r\n            protons: 36,\r\n            neutrons: 56,\r\n            color: '#FF9800',\r\n            radius: 8,\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Second fission product (heavier) - Barium-141\r\n        this.fissionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: Math.cos(angle + Math.PI) * speed,\r\n            vy: Math.sin(angle + Math.PI) * speed,\r\n            mass: 141,\r\n            protons: 56,\r\n            neutrons: 85,\r\n            color: '#E91E63',\r\n            radius: 9,\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Spawn neutrons as fission products - affected by temperature\r\n        const neutronCount = Math.floor(1 + Math.random() * 2 + this.temperature * 0.5); // Fewer neutrons for single reactions\r\n        for (let i = 0; i < neutronCount; i++) {\r\n            this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n        }\r\n        \r\n        // Create moderate energy release explosion - affected by temperature\r\n        const energyParticleCount = Math.floor(8 * this.temperature); // Reduced from 20\r\n        const colors = ['#FFD700', '#FF6B35', '#FF8C00']; // Fewer colors\r\n        \r\n        for (let i = 0; i < energyParticleCount; i++) {\r\n            const angle = (i / energyParticleCount) * Math.PI * 2;\r\n            const speed = (25 + Math.random() * 35) * this.temperature; // Reduced speed\r\n            const radius = 2 + Math.random() * 4; // Smaller particles\r\n            const life = 10 + Math.random() * 8; // Shorter life\r\n            \r\n            this.energyParticles.push({\r\n                x: nucleus.x,\r\n                y: nucleus.y,\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: colors[Math.floor(Math.random() * colors.length)],\r\n                radius: radius,\r\n                life: life,\r\n                originalRadius: radius,\r\n                pulse: Math.random() * Math.PI * 2 // For pulsing effect\r\n            });\r\n        }\r\n        \r\n        // Add smaller shockwave effect\r\n        this.shockwaves.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            radius: 0,\r\n            maxRadius: 80 * this.temperature, // Reduced from 150\r\n            speed: 120 * this.temperature, // Reduced from 200\r\n            life: 0.8, // Shorter life\r\n            color: 'rgba(255, 215, 0, 0.2)' // Less opacity\r\n        });\r\n    }\r\n    \r\n    triggerFusion(nucleus) {\r\n        nucleus.fused = true;\r\n        nucleus.visible = false; // Hide the hydrogen atoms after fusion\r\n        \r\n        // Also hide the deuterium nucleus (the reacting particle's source)\r\n        this.nuclei.forEach(hNucleus => {\r\n            if (hNucleus.type === 'deuterium' && !hNucleus.fused) {\r\n                hNucleus.visible = false;\r\n            }\r\n        });\r\n        \r\n        this.fusionCount++;\r\n        this.energyReleased += 17.6 * this.temperature; // MeV for deuterium-tritium fusion - affected by temperature\r\n        \r\n        // Create helium nucleus - Helium-4\r\n        this.fusionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: (Math.random() - 0.5) * 40 * this.temperature,\r\n            vy: (Math.random() - 0.5) * 40 * this.temperature,\r\n            mass: 4,\r\n            protons: 2,\r\n            neutrons: 2,\r\n            color: '#2196F3',\r\n            radius: 25, // Even larger radius for better visibility\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Spawn neutron as fusion product (scientifically accurate for D-T fusion)\r\n        this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n        \r\n        // Create moderate fusion energy release - affected by temperature\r\n        const energyParticleCount = Math.floor(6 * this.temperature); // Reduced from 15\r\n        const colors = ['#FFEB3B', '#FFD700', '#FFA500']; // Fewer colors\r\n        \r\n        for (let i = 0; i < energyParticleCount; i++) {\r\n            const angle = (i / energyParticleCount) * Math.PI * 2;\r\n            const speed = (20 + Math.random() * 30) * this.temperature; // Reduced speed\r\n            const radius = 4 + Math.random() * 6; // Smaller particles\r\n            const life = 8 + Math.random() * 6; // Shorter life\r\n            \r\n            this.energyParticles.push({\r\n                x: nucleus.x,\r\n                y: nucleus.y,\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: colors[Math.floor(Math.random() * colors.length)],\r\n                radius: radius,\r\n                life: life,\r\n                originalRadius: radius,\r\n                pulse: Math.random() * Math.PI * 2 // For pulsing effect\r\n            });\r\n        }\r\n        \r\n        // Add smaller fusion shockwave effect\r\n        this.shockwaves.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            radius: 0,\r\n            maxRadius: 60 * this.temperature, // Reduced from 120\r\n            speed: 100 * this.temperature, // Reduced from 180\r\n            life: 0.7, // Shorter life\r\n            color: 'rgba(255, 235, 59, 0.25)' // Less opacity\r\n        });\r\n    }\r\n    \r\n    spawnNeutron() {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const radius = 100;\r\n        const x = this.canvas.width / 2 + Math.cos(angle) * radius;\r\n        const y = this.canvas.height / 2 + Math.sin(angle) * radius;\r\n        this.spawnNeutronAt(x, y);\r\n    }\r\n    \r\n    spawnNeutronAt(x, y) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (30 + Math.random() * 40) * this.neutronEnergy; // Speed affected by neutron energy\r\n        \r\n        this.neutrons.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            color: '#9C27B0',\r\n            radius: 4, // Slightly larger for better visibility\r\n            life: 15, // Regular lifetime for chain reaction neutrons\r\n            isReactionProduct: false // Not a reaction product\r\n        });\r\n        \r\n        this.neutronsProduced++;\r\n    }\r\n    \r\n    spawnReactionNeutronAt(x, y) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (30 + Math.random() * 40) * this.neutronEnergy; // Speed affected by neutron energy\r\n        \r\n        this.neutrons.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            color: '#9C27B0',\r\n            radius: 4, // Slightly larger for better visibility\r\n            life: Infinity, // Permanent lifetime for reaction products\r\n            isReactionProduct: true // Mark as reaction product\r\n        });\r\n        \r\n        this.neutronsProduced++;\r\n    }\r\n    \r\n    findTargetForParticle(particle) {\r\n        if (particle.type === 'neutron') {\r\n            // Find the closest uranium nucleus\r\n            let closestNucleus = null;\r\n            let closestDistance = Infinity;\r\n            \r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'uranium' && !nucleus.fissioned) {\r\n                    const distance = Math.sqrt((particle.x - nucleus.x) ** 2 + (particle.y - nucleus.y) ** 2);\r\n                    if (distance < closestDistance) {\r\n                        closestDistance = distance;\r\n                        closestNucleus = nucleus;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (closestNucleus) {\r\n                particle.targetX = closestNucleus.x;\r\n                particle.targetY = closestNucleus.y;\r\n                particle.targetNucleus = closestNucleus;\r\n            }\r\n        } else if (particle.type === 'deuterium') {\r\n            // Find the closest tritium nucleus for fusion\r\n            let closestNucleus = null;\r\n            let closestDistance = Infinity;\r\n            \r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'tritium' && !nucleus.fused) {\r\n                    const distance = Math.sqrt((particle.x - nucleus.x) ** 2 + (particle.y - nucleus.y) ** 2);\r\n                    if (distance < closestDistance) {\r\n                        closestDistance = distance;\r\n                        closestNucleus = nucleus;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (closestNucleus) {\r\n                particle.targetX = closestNucleus.x;\r\n                particle.targetY = closestNucleus.y;\r\n                particle.targetNucleus = closestNucleus;\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleReactionCollision(particle) {\r\n        if (particle.type === 'neutron' && particle.targetNucleus) {\r\n            const distance = Math.sqrt((particle.x - particle.targetNucleus.x) ** 2 + (particle.y - particle.targetNucleus.y) ** 2);\r\n            if (distance < particle.targetNucleus.radius + 10) {\r\n                this.triggerFission(particle.targetNucleus);\r\n            }\r\n        } else if (particle.type === 'deuterium' && particle.targetNucleus) {\r\n            const distance = Math.sqrt((particle.x - particle.targetNucleus.x) ** 2 + (particle.y - particle.targetNucleus.y) ** 2);\r\n            if (distance < particle.targetNucleus.radius + 10) {\r\n                // Trigger fusion for the target tritium nucleus only\r\n                if (particle.targetNucleus.type === 'tritium' && !particle.targetNucleus.fused) {\r\n                    this.triggerFusion(particle.targetNucleus);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Clear canvas\r\n        this.ctx.fillStyle = '#1a1a1a';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Draw background grid\r\n        this.drawGrid();\r\n        \r\n        // Draw shockwaves (behind all particles)\r\n        this.shockwaves.forEach(wave => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = Math.max(0, wave.life);\r\n            this.ctx.strokeStyle = wave.color;\r\n            this.ctx.lineWidth = 8;\r\n            this.ctx.shadowColor = wave.color;\r\n            this.ctx.shadowBlur = 30;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(wave.x, wave.y, wave.radius, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            this.ctx.save();\r\n            // Keep particles visible even when life is negative\r\n            this.ctx.globalAlpha = Math.max(0.3, particle.life / 2);\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.shadowColor = particle.color;\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw fission products\r\n        this.fissionProducts.forEach(product => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1.0; // Always fully visible\r\n            this.ctx.fillStyle = product.color;\r\n            this.ctx.shadowColor = product.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(product.x, product.y, product.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw fission product label\r\n            this.ctx.globalAlpha = 1.0;\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            \r\n            // Determine element symbol based on protons\r\n            let elementSymbol = '';\r\n            if (product.protons === 36) {\r\n                elementSymbol = 'Kr'; // Krypton-92\r\n            } else if (product.protons === 56) {\r\n                elementSymbol = 'Ba'; // Barium-141\r\n            } else {\r\n                elementSymbol = 'X'; // Unknown fission product\r\n            }\r\n            \r\n            this.ctx.fillText(elementSymbol, product.x, product.y + 2);\r\n            this.ctx.font = '12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`${product.mass}`, product.x, product.y + product.radius + 10);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw fusion products\r\n        this.fusionProducts.forEach(product => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1.0; // Always fully visible\r\n            this.ctx.fillStyle = product.color;\r\n            this.ctx.shadowColor = product.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(product.x, product.y, product.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw fusion product label (Helium)\r\n            this.ctx.globalAlpha = 1.0;\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.fillText('He', product.x, product.y + 2);\r\n            this.ctx.font = '12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`${product.mass}`, product.x, product.y + product.radius + 10);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw neutrons\r\n        this.neutrons.forEach(neutron => {\r\n            this.ctx.save();\r\n            // Reaction product neutrons are always fully visible\r\n            if (neutron.isReactionProduct) {\r\n                this.ctx.globalAlpha = 1.0;\r\n            } else {\r\n                // Keep other neutrons visible even when life is negative\r\n                this.ctx.globalAlpha = Math.max(0.4, neutron.life / 5);\r\n            }\r\n            this.ctx.fillStyle = neutron.color;\r\n            this.ctx.shadowColor = neutron.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(neutron.x, neutron.y, neutron.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw neutron label\r\n            if (neutron.isReactionProduct) {\r\n                this.ctx.globalAlpha = 1.0;\r\n            } else {\r\n                this.ctx.globalAlpha = Math.max(0.4, neutron.life / 5);\r\n            }\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            this.ctx.fillText('n', neutron.x, neutron.y + 3);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw reacting particles\r\n        this.reactingParticles.forEach(particle => {\r\n            this.ctx.save();\r\n            \r\n            // Draw trail if moving\r\n            if (particle.moving) {\r\n                this.ctx.strokeStyle = particle.color;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.globalAlpha = 0.6;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                // Draw a short trail in the direction of movement\r\n                const dx = particle.targetX - particle.x;\r\n                const dy = particle.targetY - particle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                if (distance > 0) {\r\n                    this.ctx.lineTo(particle.x - (dx / distance) * 15, particle.y - (dy / distance) * 15);\r\n                }\r\n                this.ctx.stroke();\r\n                this.ctx.globalAlpha = 1;\r\n            }\r\n            \r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.shadowColor = particle.color;\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw particle label\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            \r\n            if (particle.type === 'neutron') {\r\n                this.ctx.fillText('n', particle.x, particle.y + 3);\r\n            } else if (particle.type === 'deuterium') {\r\n                this.ctx.fillText('²H', particle.x, particle.y + 3);\r\n            }\r\n            \r\n            // No click indicator needed since you can click anywhere\r\n            \r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw nuclei\r\n        this.nuclei.forEach(nucleus => {\r\n            if (nucleus.visible !== false) { // Only draw visible nuclei\r\n                if (this.mode === 'fission' && nucleus.type === 'uranium') {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                } else if (this.mode === 'fusion' && (nucleus.type === 'deuterium' || nucleus.type === 'tritium')) {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                } else if (this.mode === 'chain' && nucleus.type === 'uranium') {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Draw labels\r\n        this.drawNuclearLabels();\r\n        \r\n\r\n    }\r\n    \r\n    drawGrid() {\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        const gridSize = 50;\r\n        for (let x = 0; x < this.canvas.width; x += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        for (let y = 0; y < this.canvas.height; y += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawNucleus(nucleus) {\r\n        // Draw nucleus with enhanced visual representation\r\n        this.ctx.save();\r\n        \r\n        // Outer glow\r\n        this.ctx.shadowColor = nucleus.color;\r\n        this.ctx.shadowBlur = 15;\r\n        this.ctx.fillStyle = nucleus.color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Inner core with gradient effect\r\n        this.ctx.shadowBlur = 0;\r\n        const gradient = this.ctx.createRadialGradient(\r\n            nucleus.x, nucleus.y, 0,\r\n            nucleus.x, nucleus.y, nucleus.radius * 0.6\r\n        );\r\n        gradient.addColorStop(0, '#FFFFFF');\r\n        gradient.addColorStop(1, nucleus.color);\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius * 0.6, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced nucleon representation\r\n        this.ctx.fillStyle = '#000000';\r\n        const nucleonCount = Math.min(nucleus.protons + nucleus.neutrons, 12);\r\n        for (let i = 0; i < nucleonCount; i++) {\r\n            const angle = (i / nucleonCount) * Math.PI * 2;\r\n            const radius = nucleus.radius * 0.4;\r\n            const x = nucleus.x + Math.cos(angle) * radius;\r\n            const y = nucleus.y + Math.sin(angle) * radius;\r\n            \r\n            // Draw nucleon with small glow\r\n            this.ctx.save();\r\n            this.ctx.shadowColor = '#000000';\r\n            this.ctx.shadowBlur = 1;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, 1.5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.restore();\r\n        }\r\n        \r\n        this.ctx.restore();\r\n        \r\n        // Draw element symbol and details with enhanced styling\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        // Element symbol with background circle\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        let elementSymbol = '';\r\n        if (nucleus.type === 'uranium') {\r\n            elementSymbol = 'U';\r\n        } else if (nucleus.type === 'deuterium') {\r\n            elementSymbol = '²H';\r\n        } else if (nucleus.type === 'tritium') {\r\n            elementSymbol = '³H';\r\n        }\r\n        this.ctx.fillText(elementSymbol, nucleus.x, nucleus.y + 5);\r\n        \r\n        // Mass number with background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n        this.ctx.fillRect(nucleus.x - 15, nucleus.y + nucleus.radius + 5, 30, 12);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 11px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`${nucleus.mass}`, nucleus.x, nucleus.y + nucleus.radius + 14);\r\n        \r\n        // Proton/neutron count with background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.fillRect(nucleus.x - 25, nucleus.y + nucleus.radius + 15, 50, 10);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '9px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`${nucleus.protons}p, ${nucleus.neutrons}n`, nucleus.x, nucleus.y + nucleus.radius + 23);\r\n        \r\n        this.ctx.restore();\r\n    }\r\n    \r\n    drawClickIndicator(nucleus) {\r\n        // Draw pulsing ring to indicate clickability\r\n        if ((this.mode === 'fission' && nucleus.type === 'uranium' && !nucleus.fissioned) ||\r\n            (this.mode === 'fusion' && (nucleus.type === 'deuterium' || nucleus.type === 'tritium') && !nucleus.fused)) {\r\n            \r\n            this.ctx.save();\r\n            const pulse = Math.sin(this.time * 3) * 0.3 + 0.7;\r\n            this.ctx.strokeStyle = `rgba(255, 255, 255, ${pulse * 0.6})`;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.setLineDash([5, 5]);\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius + 8, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n    \r\n    drawNuclearLabels() {\r\n        let title, formulas;\r\n        \r\n        if (this.mode === 'fission') {\r\n            title = 'Nuclear Fission';\r\n            formulas = '²³⁵U + ¹n → ⁹²Kr + ¹⁴¹Ba + 3¹n + 200 MeV';\r\n        } else if (this.mode === 'fusion') {\r\n            title = 'Nuclear Fusion';\r\n            formulas = '²H + ³H → ⁴He + ¹n + 17.6 MeV';\r\n        } else if (this.mode === 'chain') {\r\n            title = 'Chain Reaction';\r\n            formulas = '²³⁵U + ¹n → ⁹²Kr + ¹⁴¹Ba + 3¹n + 200 MeV';\r\n        } else {\r\n            title = 'Nuclear Binding Energy';\r\n            formulas = 'E = mc²';\r\n        }\r\n        \r\n        this.drawLabels(title, formulas);\r\n    }\r\n    \r\n\r\n    \r\n    getStats() {\r\n        return {\r\n            mode: this.mode,\r\n            energyReleased: this.energyReleased.toFixed(1),\r\n            neutronsProduced: this.neutronsProduced,\r\n            chainReactions: this.chainReactions,\r\n            fissionCount: this.fissionCount,\r\n            fusionCount: this.fusionCount,\r\n            temperature: this.temperature.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n\r\n}","// Fluid Flow Simulation with Pipe System\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class FluidFlow extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'fluid-flow';\r\n        this.particles = [];\r\n        this.flowRate = 1;\r\n        this.viscosity = 1;\r\n        this.reynoldsNumber = 100;\r\n        this.visualizationMode = 'particles';\r\n        this.maxParticles = 150;\r\n        this.flowType = 'Laminar';\r\n        this.time = 0;\r\n        \r\n        // Pipe system properties\r\n        this.pipeWidth = 120;\r\n        this.pipeHeight = 80;\r\n        this.pipeSpacing = 80; // Increased from 60 to provide more space\r\n        this.topPipeY = 160; // Moved down from 120 to provide more space for upper banner\r\n        this.bottomPipeY = 320;\r\n        this.pipeLength = 600;\r\n        this.pipeStartX = 50;\r\n        \r\n        // Porous material inserts (not entire pipes)\r\n        this.topPipeMaterial = {\r\n            x: this.pipeStartX + 200,\r\n            y: this.topPipeY + 10,\r\n            width: 150,\r\n            height: this.pipeHeight - 20,\r\n            porosity: 0.7, // High porosity\r\n            type: 'porous'\r\n        };\r\n        \r\n        this.bottomPipeMaterial = {\r\n            x: this.pipeStartX + 200,\r\n            y: this.bottomPipeY + 10,\r\n            width: 150,\r\n            height: this.pipeHeight - 20,\r\n            porosity: 0.3, // Low porosity\r\n            type: 'less-porous'\r\n        };\r\n        \r\n        this.initializeParticles();\r\n        this.updateReynoldsNumber();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        \r\n        // Create particles for top pipe with better distribution\r\n        for (let i = 0; i < this.maxParticles / 2; i++) {\r\n            this.particles.push({\r\n                x: this.pipeStartX + (i * 8) + Math.random() * 20, // Spread particles evenly\r\n                y: this.topPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30),\r\n                vx: this.flowRate * 2 + Math.random() * this.flowRate,\r\n                vy: (Math.random() - 0.5) * 0.3,\r\n                size: 1.5 + Math.random() * 1, // Smaller particles\r\n                color: `hsl(${200 + Math.random() * 40}, 85%, 65%)`,\r\n                life: 0,\r\n                pipe: 'top',\r\n                trail: [] // Add trail history\r\n            });\r\n        }\r\n        \r\n        // Create particles for bottom pipe with better distribution\r\n        for (let i = 0; i < this.maxParticles / 2; i++) {\r\n            this.particles.push({\r\n                x: this.pipeStartX + (i * 8) + Math.random() * 20, // Spread particles evenly\r\n                y: this.bottomPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30),\r\n                vx: this.flowRate * 2 + Math.random() * this.flowRate,\r\n                vy: (Math.random() - 0.5) * 0.3,\r\n                size: 1.5 + Math.random() * 1, // Smaller particles\r\n                color: `hsl(${220 + Math.random() * 40}, 85%, 65%)`,\r\n                life: 0,\r\n                pipe: 'bottom',\r\n                trail: [] // Add trail history\r\n            });\r\n        }\r\n    }\r\n    \r\n    setFlowRate(rate) {\r\n        this.flowRate = rate;\r\n        this.updateReynoldsNumber();\r\n    }\r\n    \r\n    setViscosity(visc) {\r\n        this.viscosity = visc;\r\n        this.updateReynoldsNumber();\r\n    }\r\n    \r\n    setReynoldsNumber(re) {\r\n        this.reynoldsNumber = re;\r\n        this.updateFlowType();\r\n    }\r\n    \r\n    setVisualizationMode(mode) {\r\n        this.visualizationMode = mode;\r\n    }\r\n    \r\n    updateReynoldsNumber() {\r\n        // More realistic Reynolds number calculation with enhanced visibility\r\n        // Re = (ρ × V × D) / μ\r\n        // where ρ = density (kg/m³), V = velocity (m/s), D = characteristic length (m), μ = viscosity (Pa·s)\r\n        \r\n        const fluidDensity = 1000; // Water density in kg/m³\r\n        const characteristicLength = 0.08; // Pipe height in meters\r\n        const velocity = this.flowRate * 0.1; // Convert to m/s\r\n        const viscosity = this.viscosity * 0.001; // Convert to Pa·s (water viscosity ~0.001 Pa·s)\r\n        \r\n        this.reynoldsNumber = Math.round((fluidDensity * velocity * characteristicLength) / viscosity);\r\n        this.updateFlowType();\r\n    }\r\n    \r\n    updateFlowType() {\r\n        if (this.reynoldsNumber < 2300) {\r\n            this.flowType = 'Laminar';\r\n        } else if (this.reynoldsNumber < 4000) {\r\n            this.flowType = 'Transitional';\r\n        } else {\r\n            this.flowType = 'Turbulent';\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Determine which pipe the particle is in\r\n            const isInTopPipe = particle.y >= this.topPipeY && particle.y <= this.topPipeY + this.pipeHeight;\r\n            const isInBottomPipe = particle.y >= this.bottomPipeY && particle.y <= this.bottomPipeY + this.pipeHeight;\r\n            \r\n            // Check if particle is within pipe bounds\r\n            const isInPipe = particle.x >= this.pipeStartX && particle.x <= this.pipeStartX + this.pipeLength;\r\n            \r\n            // Check if particle is in a material insert\r\n            const isInTopMaterial = isInTopPipe && \r\n                particle.x >= this.topPipeMaterial.x && \r\n                particle.x <= this.topPipeMaterial.x + this.topPipeMaterial.width;\r\n            \r\n            const isInBottomMaterial = isInBottomPipe && \r\n                particle.x >= this.bottomPipeMaterial.x && \r\n                particle.x <= this.bottomPipeMaterial.x + this.bottomPipeMaterial.width;\r\n            \r\n            // Set base velocity\r\n            let baseVelocity = this.flowRate * 2; // Ensure minimum velocity\r\n            \r\n            if (isInPipe && (isInTopPipe || isInBottomPipe)) {\r\n                // Particle is in a pipe\r\n                if (isInTopMaterial || isInBottomMaterial) {\r\n                    // Particle is in a material insert - apply porosity effects\r\n                    const material = isInTopMaterial ? this.topPipeMaterial : this.bottomPipeMaterial;\r\n                    \r\n                    // Apply porosity effect - higher porosity = slower flow\r\n                    const porosityFactor = 1 - (1 - material.porosity) * 0.6; // Reduced effect for better flow\r\n                    particle.vx = baseVelocity * porosityFactor * (1 + Math.random() * 0.2);\r\n                    \r\n                    // Enhanced turbulence based on Reynolds number and porosity\r\n                    let turbulence = 0;\r\n                    if (this.flowType === 'Turbulent') {\r\n                        turbulence = (Math.random() - 0.5) * baseVelocity * (1 - material.porosity) * 3.0; // Increased turbulence\r\n                    } else if (this.flowType === 'Transitional') {\r\n                        turbulence = (Math.random() - 0.5) * baseVelocity * (1 - material.porosity) * 1.5; // Moderate turbulence\r\n                    }\r\n                    particle.vx += turbulence;\r\n                    \r\n                    // Add vertical movement to simulate porous flow patterns\r\n                    particle.vy += (Math.random() - 0.5) * 0.5 * (1 - material.porosity);\r\n                    \r\n                } else {\r\n                    // Particle is in pipe but not in material - normal flow\r\n                    particle.vx = baseVelocity * (1 + Math.random() * 0.3);\r\n                    particle.vy = (Math.random() - 0.5) * 0.2;\r\n                    \r\n                    // Add Reynolds number effects to clear sections too\r\n                    if (this.flowType === 'Turbulent') {\r\n                        particle.vx += (Math.random() - 0.5) * baseVelocity * 2.0; // Strong turbulence\r\n                        particle.vy += (Math.random() - 0.5) * baseVelocity * 0.5; // Vertical turbulence\r\n                    } else if (this.flowType === 'Transitional') {\r\n                        particle.vx += (Math.random() - 0.5) * baseVelocity * 1.0; // Moderate turbulence\r\n                        particle.vy += (Math.random() - 0.5) * baseVelocity * 0.3; // Light vertical turbulence\r\n                    }\r\n                }\r\n                \r\n                // Enhanced viscosity damping - much more visible effect\r\n                const viscosityFactor = 1 - (this.viscosity * 0.1); // Increased from 0.02 to 0.1 (5x stronger)\r\n                particle.vx *= viscosityFactor;\r\n                particle.vy *= viscosityFactor;\r\n                \r\n            } else {\r\n                // Particle is outside pipes - normal flow\r\n                particle.vx = baseVelocity * (1 + Math.random() * 0.3);\r\n                particle.vy = (Math.random() - 0.5) * 0.2;\r\n                \r\n                // Add Reynolds number effects outside pipes too\r\n                if (this.flowType === 'Turbulent') {\r\n                    particle.vx += (Math.random() - 0.5) * baseVelocity * 1.5;\r\n                    particle.vy += (Math.random() - 0.5) * baseVelocity * 0.4;\r\n                } else if (this.flowType === 'Transitional') {\r\n                    particle.vx += (Math.random() - 0.5) * baseVelocity * 0.8;\r\n                    particle.vy += (Math.random() - 0.5) * baseVelocity * 0.2;\r\n                }\r\n                \r\n                // Apply viscosity damping outside pipes too\r\n                const viscosityFactor = 1 - (this.viscosity * 0.1); // Increased from 0.02 to 0.1\r\n                particle.vx *= viscosityFactor;\r\n                particle.vy *= viscosityFactor;\r\n            }\r\n            \r\n            // Update trail history (keep last 5 positions for smooth trail)\r\n            if (!particle.trail) particle.trail = [];\r\n            particle.trail.push({ x: particle.x, y: particle.y });\r\n            if (particle.trail.length > 5) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Update position with proper time scaling\r\n            particle.x += particle.vx * deltaTime * 0.05; // Increased time scaling\r\n            particle.y += particle.vy * deltaTime * 0.05;\r\n            particle.life += deltaTime;\r\n            \r\n            // Constrain particles to their respective pipes\r\n            this.constrainParticleToPipe(particle);\r\n            \r\n            // Remove particles that go off screen (less aggressive removal)\r\n            if (particle.x > this.ctx.canvas.width + 100 || \r\n                particle.x < -100 || \r\n                particle.y < 100 || \r\n                particle.y > this.ctx.canvas.height + 100 ||\r\n                particle.life > 20000) { // Increased life time even more\r\n                // Remove particle instead of resetting\r\n                this.particles.splice(index, 1);\r\n            }\r\n        });\r\n        \r\n        // Maintain continuous flow by adding new particles\r\n        this.maintainContinuousFlow(deltaTime);\r\n    }\r\n    \r\n    maintainContinuousFlow(deltaTime) {\r\n        // Calculate target number of particles based on flow rate\r\n        const targetParticles = this.maxParticles;\r\n        const currentParticles = this.particles.length;\r\n        \r\n        // Add new particles more aggressively to maintain continuous flow\r\n        if (currentParticles < targetParticles) {\r\n            const particlesToAdd = Math.min(targetParticles - currentParticles, 2); // Add 2 at once\r\n            \r\n            for (let i = 0; i < particlesToAdd; i++) {\r\n                this.addNewParticle();\r\n            }\r\n        }\r\n        \r\n        // Also add particles periodically to ensure continuous flow\r\n        if (Math.random() < 0.15) { // 15% chance each frame for more frequent addition\r\n            this.addNewParticle();\r\n        }\r\n    }\r\n    \r\n    addNewParticle() {\r\n        // Add particle at the left edge with staggered timing\r\n        const staggerOffset = Math.random() * 100; // Stagger entry points\r\n        const pipeChoice = Math.random() < 0.5 ? 'top' : 'bottom';\r\n        \r\n        this.particles.push({\r\n            x: this.pipeStartX - 50 - staggerOffset,\r\n            y: pipeChoice === 'top' ? \r\n                this.topPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30) :\r\n                this.bottomPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30),\r\n            vx: this.flowRate * 2 + Math.random() * this.flowRate,\r\n            vy: (Math.random() - 0.5) * 0.3,\r\n            size: 1.5 + Math.random() * 1,\r\n            color: `hsl(${220 + Math.random() * 40}, 80%, 60%)`,\r\n            life: 0,\r\n            pipe: pipeChoice,\r\n            opacity: 0.7 + Math.random() * 0.3,\r\n            trail: [] // Add trail history\r\n        });\r\n    }\r\n    \r\n    constrainParticleToPipe(particle) {\r\n        const isInTopPipe = particle.y >= this.topPipeY && particle.y <= this.topPipeY + this.pipeHeight;\r\n        const isInBottomPipe = particle.y >= this.bottomPipeY && particle.y <= this.bottomPipeY + this.pipeHeight;\r\n        \r\n        // Keep particles within their pipe boundaries\r\n        if (isInTopPipe) {\r\n            if (particle.y < this.topPipeY + 10) particle.y = this.topPipeY + 10;\r\n            if (particle.y > this.topPipeY + this.pipeHeight - 10) particle.y = this.topPipeY + this.pipeHeight - 10;\r\n        } else if (isInBottomPipe) {\r\n            if (particle.y < this.bottomPipeY + 10) particle.y = this.bottomPipeY + 10;\r\n            if (particle.y > this.bottomPipeY + this.pipeHeight - 10) particle.y = this.bottomPipeY + this.pipeHeight - 10;\r\n        }\r\n    }\r\n    \r\n    resetParticle(particle) {\r\n        if (particle.pipe === 'top') {\r\n            particle.x = this.pipeStartX - 10 - Math.random() * 20; // Reset to just before pipe\r\n            particle.y = this.topPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30);\r\n        } else {\r\n            particle.x = this.pipeStartX - 10 - Math.random() * 20; // Reset to just before pipe\r\n            particle.y = this.bottomPipeY + this.pipeHeight/2 + (Math.random() - 0.5) * (this.pipeHeight - 30);\r\n        }\r\n        particle.vx = this.flowRate * 2 + Math.random() * this.flowRate;\r\n        particle.vy = (Math.random() - 0.5) * 0.3;\r\n        particle.size = 1.5 + Math.random() * 1; // Maintain smaller size\r\n        particle.life = 0;\r\n    }\r\n    \r\n    drawStandardBackground() {\r\n        // Standard background matching other animations\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n    \r\n    render() {\r\n        // Draw standardized background (matching other animations)\r\n        this.drawStandardBackground();\r\n        \r\n        // Draw pipe system\r\n        this.drawPipeSystem();\r\n        \r\n        // Draw mode-specific background effects\r\n        this.drawModeSpecificEffects();\r\n        \r\n        // Draw particles\r\n        this.drawParticles();\r\n        \r\n        // Draw based on visualization mode\r\n        switch (this.visualizationMode) {\r\n            case 'pressure':\r\n                this.drawPressureAnalysis();\r\n                this.drawPressureGradients();\r\n                break;\r\n            case 'velocity':\r\n                this.drawVelocityAnalysis();\r\n                this.drawVelocityField();\r\n                break;\r\n            case 'porosity':\r\n                this.drawPorosityAnalysis();\r\n                this.drawPorosityFlowPatterns();\r\n                break;\r\n            default:\r\n                // Default particle flow - no additional analysis\r\n                break;\r\n        }\r\n        \r\n        // Draw flow info (removed for cleaner look)\r\n        // this.drawFlowInfo();\r\n        \r\n        // Add real-world analogy for beginners\r\n        this.drawRealWorldAnalogy();\r\n        \r\n        // Draw mouse interaction indicator\r\n        this.drawMouseIndicator();\r\n    }\r\n    \r\n    drawPipeSystem() {\r\n        // Draw two parallel pipes with material inserts\r\n        \r\n        // Draw pipes\r\n        this.drawPipe(this.pipeStartX, this.topPipeY, this.pipeLength, this.pipeHeight, '', '#3498DB');\r\n        this.drawPipe(this.pipeStartX, this.bottomPipeY, this.pipeLength, this.pipeHeight, '', '#3498DB');\r\n        \r\n        // Draw material inserts\r\n        this.drawMaterialInsert(this.topPipeMaterial, '', 'high');\r\n        this.drawMaterialInsert(this.bottomPipeMaterial, '', 'low');\r\n        \r\n        // Draw pipe labels below pipes\r\n        this.drawPipeLabels();\r\n    }\r\n    \r\n    drawPipe(x, y, length, height, label, color) {\r\n        // Modern translucent pipe styling\r\n        const pipeGradient = this.ctx.createLinearGradient(x, y, x, y + height);\r\n        pipeGradient.addColorStop(0, 'rgba(70, 130, 180, 0.25)'); // Light blue translucent\r\n        pipeGradient.addColorStop(0.5, 'rgba(100, 149, 237, 0.15)'); // Cornflower blue translucent\r\n        pipeGradient.addColorStop(1, 'rgba(70, 130, 180, 0.25)'); // Light blue translucent\r\n        \r\n        // Draw pipe body with rounded corners\r\n        this.ctx.fillStyle = pipeGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x, y, length, height, 8);\r\n        this.ctx.fill();\r\n        \r\n        // Add subtle inner glow for glass effect\r\n        const glowGradient = this.ctx.createLinearGradient(x, y, x, y + height / 2);\r\n        glowGradient.addColorStop(0, 'rgba(255, 255, 255, 0.15)');\r\n        glowGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n        \r\n        this.ctx.fillStyle = glowGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x + 2, y + 2, length - 4, height / 2 - 2, 6);\r\n        this.ctx.fill();\r\n        \r\n        // Draw pipe border with crisp line\r\n        this.ctx.strokeStyle = 'rgba(100, 149, 237, 0.6)';\r\n        this.ctx.lineWidth = 1.5;\r\n            this.ctx.beginPath();\r\n        this.ctx.roundRect(x, y, length, height, 8);\r\n            this.ctx.stroke();\r\n        \r\n        // Add subtle inner border\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n            this.ctx.beginPath();\r\n        this.ctx.roundRect(x + 3, y + 3, length - 6, height - 6, 6);\r\n            this.ctx.stroke();\r\n        \r\n        // Only show pipe labels if they're important (removed for cleaner look)\r\n        // Add subtle texture dots for industrial look\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\r\n        for (let i = 0; i < 5; i++) {\r\n            const dotX = x + 20 + i * (length - 40) / 4;\r\n            const dotY = y + height / 2;\r\n        this.ctx.beginPath();\r\n            this.ctx.arc(dotX, dotY, 1, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawMaterialInsert(material, label, porosityType) {\r\n        const { x, y, width, height } = material;\r\n        \r\n        // Enhanced material styling with texture and depth\r\n        const materialGradient = this.ctx.createLinearGradient(x, y, x + width, y);\r\n        if (porosityType === 'high') {\r\n            // High porosity - sandy/porous texture\r\n            materialGradient.addColorStop(0, '#D4A574'); // Sandy brown\r\n            materialGradient.addColorStop(0.3, '#CD853F'); // Peru brown\r\n            materialGradient.addColorStop(0.7, '#B8860B'); // Dark goldenrod\r\n            materialGradient.addColorStop(1, '#D4A574'); // Sandy brown\r\n        } else {\r\n            // Low porosity - dense material\r\n            materialGradient.addColorStop(0, '#696969'); // Dim gray\r\n            materialGradient.addColorStop(0.3, '#556B2F'); // Dark olive green\r\n            materialGradient.addColorStop(0.7, '#2F4F4F'); // Dark slate gray\r\n            materialGradient.addColorStop(1, '#696969'); // Dim gray\r\n        }\r\n        \r\n        // Add depth shadow\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';\r\n        this.ctx.shadowBlur = 6;\r\n        this.ctx.shadowOffsetX = 1;\r\n        this.ctx.shadowOffsetY = 1;\r\n        \r\n        // Draw material body with rounded corners\r\n        this.ctx.fillStyle = materialGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x, y, width, height, 6);\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        this.ctx.shadowOffsetY = 0;\r\n        \r\n        // Add texture pattern based on porosity\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.15)';\r\n        if (porosityType === 'high') {\r\n            // Sandy texture - more dots for high porosity\r\n            for (let i = 0; i < 12; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    const dotX = x + 10 + i * (width - 20) / 11;\r\n                    const dotY = y + 8 + j * (height - 16) / 2;\r\n            this.ctx.beginPath();\r\n                    this.ctx.arc(dotX, dotY, 0.8, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        } else {\r\n            // Dense texture - fewer, larger dots\r\n            for (let i = 0; i < 8; i++) {\r\n                for (let j = 0; j < 2; j++) {\r\n                    const dotX = x + 15 + i * (width - 30) / 7;\r\n                    const dotY = y + 10 + j * (height - 20) / 1;\r\n            this.ctx.beginPath();\r\n                    this.ctx.arc(dotX, dotY, 1.2, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Add material border\r\n        this.ctx.strokeStyle = porosityType === 'high' ? '#8B4513' : '#2F4F4F';\r\n        this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n        this.ctx.roundRect(x, y, width, height, 6);\r\n            this.ctx.stroke();\r\n        \r\n        // Add inner highlight\r\n        const highlightGradient = this.ctx.createLinearGradient(x, y, x, y + height);\r\n        highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.3)');\r\n        highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.1)');\r\n        highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0.05)');\r\n        \r\n        this.ctx.fillStyle = highlightGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x + 2, y + 2, width - 4, height - 4, 4);\r\n        this.ctx.fill();\r\n        \r\n        // Simple porosity indicator - just a few dots above the material\r\n        this.ctx.fillStyle = porosityType === 'high' ? '#FF8C00' : '#228B22';\r\n        const indicatorY = y - 8;\r\n        const numDots = porosityType === 'high' ? 6 : 4;\r\n        const dotSpacing = 8;\r\n        \r\n        for (let i = 0; i < numDots; i++) {\r\n            const dotX = x + (width - (numDots - 1) * dotSpacing) / 2 + i * dotSpacing;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(dotX, indicatorY, 1.5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawPorousTexture(x, y, length, height, porosity, color) {\r\n        // Draw porous material texture based on porosity\r\n        const holeSize = 3 + (1 - porosity) * 4; // More porous = smaller holes\r\n        const holeSpacing = 8 + porosity * 12; // More porous = more holes\r\n        \r\n        this.ctx.fillStyle = `${color}80`;\r\n        \r\n        for (let row = 0; row < height; row += holeSpacing) {\r\n            for (let col = 0; col < length; col += holeSpacing) {\r\n                if (Math.random() < porosity) { // More porous = more holes\r\n                this.ctx.beginPath();\r\n                    this.ctx.arc(x + col + Math.random() * 4, \r\n                                y + row + Math.random() * 4, \r\n                                holeSize * Math.random(), 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawPipeLabels() {\r\n        // Draw labels below each pipe\r\n        this.ctx.font = 'bold 14px Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'top';\r\n        \r\n        // Top pipe label\r\n        const topLabelY = this.topPipeY + this.pipeHeight + 15;\r\n        const topLabelX = this.pipeStartX + this.pipeLength / 2;\r\n        \r\n        // Top pipe label background\r\n        const topLabelWidth = this.ctx.measureText('High Porosity Pipe').width + 20;\r\n        const labelHeight = 25;\r\n        \r\n        // Top pipe label gradient\r\n        const topLabelGradient = this.ctx.createLinearGradient(\r\n            topLabelX - topLabelWidth/2, topLabelY, \r\n            topLabelX + topLabelWidth/2, topLabelY + labelHeight\r\n        );\r\n        topLabelGradient.addColorStop(0, '#E67E22'); // Orange\r\n        topLabelGradient.addColorStop(1, '#D35400'); // Dark orange\r\n        \r\n        this.ctx.fillStyle = topLabelGradient;\r\n                this.ctx.beginPath();\r\n        this.ctx.roundRect(topLabelX - topLabelWidth/2, topLabelY, topLabelWidth, labelHeight, 12);\r\n        this.ctx.fill();\r\n        \r\n        // Top pipe label border\r\n        this.ctx.strokeStyle = '#A04000';\r\n        this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n        this.ctx.roundRect(topLabelX - topLabelWidth/2, topLabelY, topLabelWidth, labelHeight, 12);\r\n                this.ctx.stroke();\r\n        \r\n        // Top pipe label text with outline for better contrast\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeText('High Porosity Pipe', topLabelX, topLabelY + 5);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText('High Porosity Pipe', topLabelX, topLabelY + 5);\r\n        \r\n        // Bottom pipe label\r\n        const bottomLabelY = this.bottomPipeY + this.pipeHeight + 15;\r\n        const bottomLabelX = this.pipeStartX + this.pipeLength / 2;\r\n        \r\n        // Bottom pipe label background\r\n        const bottomLabelWidth = this.ctx.measureText('Low Porosity Pipe').width + 20;\r\n        \r\n        // Bottom pipe label gradient\r\n        const bottomLabelGradient = this.ctx.createLinearGradient(\r\n            bottomLabelX - bottomLabelWidth/2, bottomLabelY, \r\n            bottomLabelX + bottomLabelWidth/2, bottomLabelY + labelHeight\r\n        );\r\n        bottomLabelGradient.addColorStop(0, '#27AE60'); // Green\r\n        bottomLabelGradient.addColorStop(1, '#229954'); // Dark green\r\n        \r\n        this.ctx.fillStyle = bottomLabelGradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(bottomLabelX - bottomLabelWidth/2, bottomLabelY, bottomLabelWidth, labelHeight, 12);\r\n        this.ctx.fill();\r\n        \r\n        // Bottom pipe label border\r\n        this.ctx.strokeStyle = '#1E8449';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(bottomLabelX - bottomLabelWidth/2, bottomLabelY, bottomLabelWidth, labelHeight, 12);\r\n        this.ctx.stroke();\r\n        \r\n        // Bottom pipe label text with outline for better contrast\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeText('Low Porosity Pipe', bottomLabelX, bottomLabelY + 5);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText('Low Porosity Pipe', bottomLabelX, bottomLabelY + 5);\r\n    }\r\n    \r\n    drawEnhancedArrow(x1, y1, x2, y2, color) {\r\n        const headLength = 12;\r\n        const angle = Math.atan2(y2 - y1, x2 - x1);\r\n        \r\n        // Add glow effect for enhanced arrows\r\n        this.ctx.shadowColor = color;\r\n        this.ctx.shadowBlur = 6;\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n            this.ctx.stroke();\r\n        \r\n        // Enhanced arrowhead with gradient\r\n        const gradient = this.ctx.createLinearGradient(x2, y2, x2 - headLength, y2);\r\n        gradient.addColorStop(0, color);\r\n        gradient.addColorStop(1, this.adjustColor(color, -30));\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x2, y2);\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle - Math.PI / 6), y2 - headLength * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle + Math.PI / 6), y2 - headLength * Math.sin(angle + Math.PI / 6));\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    adjustColor(color, amount) {\r\n        // Simple color adjustment for gradients\r\n        if (color.startsWith('#')) {\r\n            const hex = color.replace('#', '');\r\n            const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) + amount));\r\n            const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) + amount));\r\n            const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) + amount));\r\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        }\r\n        return color;\r\n    }\r\n    \r\n    drawArrow(x1, y1, x2, y2, color) {\r\n        const headLength = 10;\r\n        const angle = Math.atan2(y2 - y1, x2 - x1);\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 3;\r\n                    this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw arrowhead\r\n        this.ctx.fillStyle = color;\r\n                    this.ctx.beginPath();\r\n        this.ctx.moveTo(x2, y2);\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle - Math.PI / 6), y2 - headLength * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle + Math.PI / 6), y2 - headLength * Math.sin(angle + Math.PI / 6));\r\n                    this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Draw particle trail first (behind the particle)\r\n            if (particle.trail && particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                for (let i = 1; i < particle.trail.length; i++) {\r\n                    this.ctx.lineTo(particle.trail[i].x, particle.trail[i].y);\r\n                }\r\n                this.ctx.strokeStyle = `rgba(100, 149, 237, ${0.3 * (particle.trail.length / 5)})`;\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.lineJoin = 'round';\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Calculate velocity for visual effects\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const maxVelocity = this.flowRate * 4;\r\n            const intensity = Math.min(velocity / maxVelocity, 1);\r\n            \r\n            // Check if particle is in a material insert using exact boundaries\r\n            const isInTopMaterial = particle.y >= this.topPipeMaterial.y && \r\n                particle.y <= this.topPipeMaterial.y + this.topPipeMaterial.height &&\r\n                particle.x >= this.topPipeMaterial.x && \r\n                particle.x <= this.topPipeMaterial.x + this.topPipeMaterial.width;\r\n            \r\n            const isInBottomMaterial = particle.y >= this.bottomPipeMaterial.y && \r\n                particle.y <= this.bottomPipeMaterial.y + this.bottomPipeMaterial.height &&\r\n                particle.x >= this.bottomPipeMaterial.x && \r\n                particle.x <= this.bottomPipeMaterial.x + this.bottomPipeMaterial.width;\r\n            \r\n            // Enhanced dynamic color based on velocity and position\r\n            let color, trailColor, glowColor;\r\n            \r\n            // Different visual effects based on visualization mode\r\n            switch (this.visualizationMode) {\r\n                case 'pressure':\r\n                    // Pressure mode: Red/orange for high pressure (porous), blue for low pressure (clear)\r\n                    if (isInTopMaterial || isInBottomMaterial) {\r\n                        // High pressure in porous materials - red/orange\r\n                        const pressureHue = 0 + intensity * 30; // Red to orange\r\n                        color = `hsl(${pressureHue}, 90%, 70%)`;\r\n                        trailColor = `rgba(255, 69, 0, ${intensity * 0.6})`;\r\n                        glowColor = `rgba(255, 0, 0, ${intensity * 0.4})`;\r\n                    } else {\r\n                        // Low pressure in clear sections - blue\r\n                        const pressureHue = 210 - intensity * 20;\r\n                        color = `hsl(${pressureHue}, 85%, 70%)`;\r\n                        trailColor = `rgba(70, 130, 180, ${intensity * 0.4})`;\r\n                        glowColor = `rgba(135, 206, 250, ${intensity * 0.3})`;\r\n                    }\r\n                    break;\r\n                    \r\n                case 'velocity':\r\n                    // Velocity mode: Bright colors for fast, dim for slow\r\n                    if (isInTopMaterial || isInBottomMaterial) {\r\n                        // Slow velocity in porous materials - dim orange\r\n                        const velocityHue = 30 + intensity * 20;\r\n                        color = `hsl(${velocityHue}, 70%, ${50 + intensity * 20}%)`;\r\n                        trailColor = `rgba(255, 140, 0, ${intensity * 0.3})`;\r\n                        glowColor = `rgba(255, 69, 0, ${intensity * 0.2})`;\r\n                    } else {\r\n                        // Fast velocity in clear sections - bright blue\r\n                        const velocityHue = 200 + intensity * 20;\r\n                        color = `hsl(${velocityHue}, 90%, ${60 + intensity * 30}%)`;\r\n                        trailColor = `rgba(70, 130, 180, ${intensity * 0.6})`;\r\n                        glowColor = `rgba(135, 206, 250, ${intensity * 0.5})`;\r\n                    }\r\n                    break;\r\n                    \r\n                case 'porosity':\r\n                    // Porosity mode: Green for high porosity, purple for low porosity\r\n                    if (isInTopMaterial) {\r\n                        // High porosity material - green\r\n                        const porosityHue = 120 + intensity * 20;\r\n                        color = `hsl(${porosityHue}, 85%, 70%)`;\r\n                        trailColor = `rgba(34, 139, 34, ${intensity * 0.5})`;\r\n                        glowColor = `rgba(50, 205, 50, ${intensity * 0.4})`;\r\n                    } else if (isInBottomMaterial) {\r\n                        // Low porosity material - purple\r\n                        const porosityHue = 280 + intensity * 20;\r\n                        color = `hsl(${porosityHue}, 85%, 70%)`;\r\n                        trailColor = `rgba(128, 0, 128, ${intensity * 0.5})`;\r\n                        glowColor = `rgba(147, 112, 219, ${intensity * 0.4})`;\r\n                    } else {\r\n                        // Clear sections - neutral blue\r\n                        const porosityHue = 210 - intensity * 20;\r\n                        color = `hsl(${porosityHue}, 85%, 70%)`;\r\n                        trailColor = `rgba(70, 130, 180, ${intensity * 0.4})`;\r\n                        glowColor = `rgba(135, 206, 250, ${intensity * 0.3})`;\r\n                    }\r\n                    break;\r\n                    \r\n                default:\r\n                    // Default particle flow mode\r\n                    if (isInTopMaterial || isInBottomMaterial) {\r\n                        // Material section - orange/red for slower flow through porous material\r\n                        const hue = 15 + intensity * 30; // Orange to red\r\n                        color = `hsl(${hue}, 90%, 70%)`;\r\n                        trailColor = `rgba(255, 140, 0, ${intensity * 0.4})`;\r\n                        glowColor = `rgba(255, 69, 0, ${intensity * 0.3})`;\r\n                    } else {\r\n                        // Clear pipe sections - blue for normal flow\r\n                        const hue = 210 - intensity * 20;\r\n                        color = `hsl(${hue}, 85%, 70%)`;\r\n                        trailColor = `rgba(70, 130, 180, ${intensity * 0.4})`;\r\n                        glowColor = `rgba(135, 206, 250, ${intensity * 0.3})`;\r\n                    }\r\n                    break;\r\n            }\r\n            \r\n            // Enhanced glow effect for all particles\r\n            this.ctx.shadowColor = glowColor;\r\n            this.ctx.shadowBlur = 6;\r\n            \r\n            // Draw main particle with enhanced gradient\r\n            const gradient = this.ctx.createRadialGradient(\r\n                particle.x - particle.size * 0.2, particle.y - particle.size * 0.2, 0,\r\n                particle.x, particle.y, particle.size * 1.2\r\n            );\r\n            gradient.addColorStop(0, this.adjustColor(color, 50)); // Brighter center\r\n            gradient.addColorStop(0.7, color);\r\n            gradient.addColorStop(1, this.adjustColor(color, -40)); // Darker edge\r\n            \r\n            this.ctx.fillStyle = gradient;\r\n                    this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n                    \r\n            // Add subtle highlight\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, 0.6)`;\r\n                    this.ctx.beginPath();\r\n            this.ctx.arc(particle.x - particle.size * 0.3, particle.y - particle.size * 0.3, particle.size * 0.4, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                    \r\n            // Enhanced speed trails for faster particles\r\n            if (velocity > this.flowRate * 0.8) {\r\n                const trailGradient = this.ctx.createLinearGradient(\r\n                    particle.x, particle.y,\r\n                    particle.x - particle.vx * 0.3, particle.y - particle.vy * 0.3\r\n                );\r\n                trailGradient.addColorStop(0, trailColor);\r\n                trailGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n                \r\n                this.ctx.strokeStyle = trailGradient;\r\n                this.ctx.lineWidth = Math.max(0.5, velocity * 0.8);\r\n                this.ctx.lineCap = 'round';\r\n                    this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(particle.x - particle.vx * 0.3, particle.y - particle.vy * 0.3);\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Reset shadow for next particle\r\n            this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawPressureAnalysis() {\r\n        // Modern pressure analysis panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = this.ctx.canvas.height - 140; // Position from bottom\r\n        const panelWidth = 320;\r\n        const panelHeight = 120;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#E74C3C';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#E74C3C');\r\n        borderGradient.addColorStop(0.5, '#C0392B');\r\n        borderGradient.addColorStop(1, '#E74C3C');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(231, 76, 60, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(231, 76, 60, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('📊 Pressure Analysis', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.fillText(`🔴 High Pressure: Porous Material`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`🟢 Low Pressure: Clear Sections`, panelX + 15, panelY + 62);\r\n        this.ctx.fillText(`📏 Pressure Drop: ${(this.topPipeMaterial.porosity * 100).toFixed(0)}%`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced pressure explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Porous materials create pressure resistance', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch pressure build up in materials!', panelX + 15, panelY + 113);\r\n        \r\n        // Add pressure indicator\r\n        const pressureRatio = this.topPipeMaterial.porosity / this.bottomPipeMaterial.porosity;\r\n        const pressureColor = pressureRatio > 2 ? '#E74C3C' : pressureRatio > 1.5 ? '#F39C12' : '#27AE60';\r\n        this.ctx.fillStyle = pressureColor;\r\n        this.ctx.fillText(`🎯 Pressure Ratio: ${pressureRatio.toFixed(1)}x`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawVelocityAnalysis() {\r\n        // Modern velocity analysis panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = this.ctx.canvas.height - 140; // Position from bottom\r\n        const panelWidth = 320;\r\n        const panelHeight = 120; // Reduced height since we removed duplicate content\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#3498DB';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#3498DB');\r\n        borderGradient.addColorStop(0.5, '#2980B9');\r\n        borderGradient.addColorStop(1, '#3498DB');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(52, 152, 219, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(52, 152, 219, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#3498DB';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('⚡ Velocity Analysis', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#3498DB';\r\n        this.ctx.fillText(`🔵 Fast Flow: Clear Sections`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`🟠 Slow Flow: Porous Material`, panelX + 15, panelY + 62);\r\n        \r\n        // Add prominent viscosity indicator\r\n        const viscosityEffect = this.viscosity * 0.1; // Same factor as in particle update\r\n        const viscosityColor = viscosityEffect > 0.5 ? '#E74C3C' : viscosityEffect > 0.2 ? '#F39C12' : '#27AE60';\r\n        this.ctx.fillStyle = viscosityColor;\r\n        this.ctx.fillText(`🛢️ Viscosity Effect: ${(viscosityEffect * 100).toFixed(0)}%`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced velocity explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Porosity reduces flow velocity', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch particles slow in materials!', panelX + 15, panelY + 113);\r\n        \r\n        // Add velocity indicator\r\n        const velocityRatio = this.bottomPipeMaterial.porosity / this.topPipeMaterial.porosity;\r\n        const velocityColor = velocityRatio > 2 ? '#27AE60' : velocityRatio > 1.5 ? '#F39C12' : '#E74C3C';\r\n        this.ctx.fillStyle = velocityColor;\r\n        this.ctx.fillText(`🎯 Velocity Ratio: ${velocityRatio.toFixed(1)}x`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawEnergyAnalysis() {\r\n        // Simple energy analysis for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('⚡ Energy Analysis', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('Pressure + Kinetic = Constant', 20, 50);\r\n        this.ctx.fillText('When speed increases, pressure decreases', 20, 70);\r\n        this.ctx.fillText('💡 Total energy is conserved', 20, 90);\r\n    }\r\n    \r\n    drawFlowInfo() {\r\n        // Modern info panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(10, this.ctx.canvas.height - 100, 280, 90);\r\n        \r\n        // Border\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(10, this.ctx.canvas.height - 100, 280, 90);\r\n        \r\n        // Modern text styling\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = this.ctx.canvas.height - 80;\r\n        this.ctx.fillText(`Flow Rate: ${this.flowRate.toFixed(1)}`, 20, y);\r\n        y += 18;\r\n        this.ctx.fillText(`Flow Type: ${this.flowType}`, 20, y);\r\n        y += 18;\r\n        \r\n        // Porosity comparison\r\n        this.ctx.fillStyle = '#FF6B6B';\r\n        this.ctx.fillText(`High Porosity: ${Math.round(this.topPipeMaterial.porosity * 100)}%`, 20, y);\r\n        y += 18;\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`Low Porosity: ${Math.round(this.bottomPipeMaterial.porosity * 100)}%`, 20, y);\r\n        \r\n        // Physics explanation\r\n        this.ctx.fillStyle = '#96CEB4';\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillText('💡 Higher porosity = slower flow', 20, this.ctx.canvas.height - 20);\r\n    }\r\n    \r\n    drawRealWorldAnalogy() {\r\n        // Modern analogy panel with enhanced styling\r\n        const panelX = this.ctx.canvas.width - 290;\r\n        const panelY = 20;\r\n        const panelWidth = 270;\r\n        const panelHeight = 100;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with gradient\r\n        this.ctx.shadowColor = '#FFD700';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#FFD700');\r\n        borderGradient.addColorStop(0.5, '#FFA500');\r\n        borderGradient.addColorStop(1, '#FFD700');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(255, 215, 0, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(255, 215, 0, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('💡 Real-World Examples:', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced examples with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText('🧽 Sponge: water flows through', panelX + 15, panelY + 45);\r\n        this.ctx.fillText('🪨 Rock: water flows around', panelX + 15, panelY + 62);\r\n        this.ctx.fillText('🌊 River: natural flow patterns', panelX + 15, panelY + 79);\r\n        this.ctx.fillText('🏊 Pool: controlled fluid motion', panelX + 15, panelY + 96);\r\n    }\r\n    \r\n    drawMouseIndicator() {\r\n        if (this.mouseX > 0 && this.mouseY > 0) {\r\n            // Draw mouse influence circle with purple/blue theme\r\n            this.ctx.strokeStyle = 'rgba(147, 112, 219, 0.8)'; // Medium purple\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw inner ring for stronger visual effect\r\n            this.ctx.strokeStyle = 'rgba(138, 43, 226, 0.6)'; // Blue violet\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence * 0.6, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw mouse position with purple dot\r\n            this.ctx.fillStyle = 'rgba(147, 112, 219, 0.9)';\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add white border to make it stand out\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, 4, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Add interaction hint with enhanced visibility\r\n            this.ctx.fillStyle = '#000000';\r\n            this.ctx.font = 'bold 14px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('Move mouse to interact!', this.mouseX, this.mouseY - 25);\r\n            \r\n            // Add a subtle glow effect\r\n            this.ctx.shadowColor = 'rgba(147, 112, 219, 0.5)';\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence * 0.3, 0, Math.PI * 2);\r\n            this.ctx.fillStyle = 'rgba(147, 112, 219, 0.1)';\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0; // Reset shadow\r\n        }\r\n    }\r\n    \r\n    adjustColor(color, amount) {\r\n        // Simple color adjustment for gradients\r\n        if (color.startsWith('#')) {\r\n            const hex = color.replace('#', '');\r\n            const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) + amount));\r\n            const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) + amount));\r\n            const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) + amount));\r\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        }\r\n        return color;\r\n    }\r\n    \r\n    getStats() {\r\n        const avgVelocity = this.particles.reduce((sum, p) => sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        const viscosityEffect = this.viscosity * 0.1; // Same factor as in particle update\r\n        const velocityRatio = this.bottomPipeMaterial.porosity / this.topPipeMaterial.porosity;\r\n        \r\n        return {\r\n            flowRate: this.flowRate,\r\n            viscosity: this.viscosity,\r\n            reynoldsNumber: this.reynoldsNumber,\r\n            flowType: this.flowType,\r\n            averageVelocity: avgVelocity,\r\n            viscosityEffect: viscosityEffect,\r\n            velocityRatio: velocityRatio,\r\n            topPorosity: this.topPipeMaterial.porosity,\r\n            bottomPorosity: this.bottomPipeMaterial.porosity,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawPorosityAnalysis() {\r\n        // Modern porosity analysis panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = this.ctx.canvas.height - 140; // Position from bottom\r\n        const panelWidth = 320;\r\n        const panelHeight = 120;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#4ECDC4';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#4ECDC4');\r\n        borderGradient.addColorStop(0.5, '#2ECC71');\r\n        borderGradient.addColorStop(1, '#4ECDC4');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(78, 205, 196, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(78, 205, 196, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('⚡ Porosity Analysis', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`🚀 High Porosity: ${Math.round(this.topPipeMaterial.porosity * 100)}%`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`📏 Low Porosity: ${Math.round(this.bottomPipeMaterial.porosity * 100)}%`, panelX + 15, panelY + 62);\r\n        this.ctx.fillText(`💧 Porosity Difference: ${Math.round((this.topPipeMaterial.porosity - this.bottomPipeMaterial.porosity) * 100)}%`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced porosity explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Higher porosity = slower flow', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch particles slow down!', panelX + 15, panelY + 113);\r\n        \r\n        // Add performance indicator\r\n        const efficiency = Math.min(100, (this.topPipeMaterial.porosity / 0.7) * 100);\r\n        const efficiencyColor = efficiency > 80 ? '#4ECDC4' : efficiency > 60 ? '#F39C12' : '#FF6B6B';\r\n        this.ctx.fillStyle = efficiencyColor;\r\n        this.ctx.fillText(`🎯 Porosity Efficiency: ${efficiency.toFixed(0)}%`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawModeSpecificEffects() {\r\n        // Draw background effects based on visualization mode\r\n        switch (this.visualizationMode) {\r\n            case 'pressure':\r\n                this.drawPressureBackground();\r\n                break;\r\n            case 'velocity':\r\n                this.drawVelocityBackground();\r\n                break;\r\n            case 'porosity':\r\n                this.drawPorosityBackground();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    drawPressureBackground() {\r\n        // Draw pressure gradient background - darker in porous materials\r\n        const gradient = this.ctx.createLinearGradient(0, 0, this.ctx.canvas.width, 0);\r\n        gradient.addColorStop(0, 'rgba(255, 0, 0, 0.05)'); // Low pressure\r\n        gradient.addColorStop(0.3, 'rgba(255, 0, 0, 0.1)'); // Medium pressure\r\n        gradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.15)'); // High pressure in porous\r\n        gradient.addColorStop(0.7, 'rgba(255, 0, 0, 0.1)'); // Medium pressure\r\n        gradient.addColorStop(1, 'rgba(255, 0, 0, 0.05)'); // Low pressure\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, this.topPipeMaterial.y, this.ctx.canvas.width, this.topPipeMaterial.height);\r\n        this.ctx.fillRect(0, this.bottomPipeMaterial.y, this.ctx.canvas.width, this.bottomPipeMaterial.height);\r\n        \r\n        // Add pressure arrows pointing into porous materials\r\n        this.drawPressureArrows();\r\n    }\r\n    \r\n    drawVelocityBackground() {\r\n        // Draw velocity field background - flow lines\r\n        this.ctx.strokeStyle = 'rgba(52, 152, 219, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([5, 5]);\r\n        \r\n        // Draw flow lines in clear sections\r\n        for (let y = this.topPipeY + 10; y < this.topPipeY + this.pipeHeight - 10; y += 20) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(50, y);\r\n            this.ctx.lineTo(this.ctx.canvas.width - 50, y);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        for (let y = this.bottomPipeY + 10; y < this.bottomPipeY + this.pipeHeight - 10; y += 20) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(50, y);\r\n            this.ctx.lineTo(this.ctx.canvas.width - 50, y);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawPorosityBackground() {\r\n        // Draw porosity pattern background\r\n        this.ctx.fillStyle = 'rgba(34, 139, 34, 0.1)'; // Green for high porosity\r\n        this.ctx.fillRect(this.topPipeMaterial.x, this.topPipeMaterial.y, \r\n                         this.topPipeMaterial.width, this.topPipeMaterial.height);\r\n        \r\n        this.ctx.fillStyle = 'rgba(128, 0, 128, 0.1)'; // Purple for low porosity\r\n        this.ctx.fillRect(this.bottomPipeMaterial.x, this.bottomPipeMaterial.y, \r\n                         this.bottomPipeMaterial.width, this.bottomPipeMaterial.height);\r\n        \r\n        // Add porosity texture patterns\r\n        this.drawPorosityTexture();\r\n    }\r\n    \r\n    drawPressureArrows() {\r\n        // Draw pressure arrows pointing into porous materials\r\n        this.ctx.strokeStyle = 'rgba(255, 0, 0, 0.6)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.setLineDash([3, 3]);\r\n        \r\n        // Arrows pointing into top porous material\r\n        for (let x = this.topPipeMaterial.x + 20; x < this.topPipeMaterial.x + this.topPipeMaterial.width - 20; x += 40) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, this.topPipeMaterial.y - 10);\r\n            this.ctx.lineTo(x, this.topPipeMaterial.y + 5);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 3, this.topPipeMaterial.y + 2);\r\n            this.ctx.lineTo(x, this.topPipeMaterial.y + 5);\r\n            this.ctx.lineTo(x + 3, this.topPipeMaterial.y + 2);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Arrows pointing into bottom porous material\r\n        for (let x = this.bottomPipeMaterial.x + 20; x < this.bottomPipeMaterial.x + this.bottomPipeMaterial.width - 20; x += 40) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height + 10);\r\n            this.ctx.lineTo(x, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height - 5);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 3, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height - 2);\r\n            this.ctx.lineTo(x, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height - 5);\r\n            this.ctx.lineTo(x + 3, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height - 2);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawPorosityTexture() {\r\n        // Draw texture patterns for porosity visualization\r\n        this.ctx.fillStyle = 'rgba(34, 139, 34, 0.3)';\r\n        \r\n        // High porosity texture - many small dots\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                const x = this.topPipeMaterial.x + 10 + i * (this.topPipeMaterial.width - 20) / 19;\r\n                const y = this.topPipeMaterial.y + 8 + j * (this.topPipeMaterial.height - 16) / 3;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 1, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        \r\n        this.ctx.fillStyle = 'rgba(128, 0, 128, 0.3)';\r\n        \r\n        // Low porosity texture - fewer, larger dots\r\n        for (let i = 0; i < 12; i++) {\r\n            for (let j = 0; j < 2; j++) {\r\n                const x = this.bottomPipeMaterial.x + 15 + i * (this.bottomPipeMaterial.width - 30) / 11;\r\n                const y = this.bottomPipeMaterial.y + 10 + j * (this.bottomPipeMaterial.height - 20) / 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 1.5, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawPressureGradients() {\r\n        // Draw pressure gradient lines across the pipes\r\n        this.ctx.strokeStyle = 'rgba(255, 0, 0, 0.4)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([2, 4]);\r\n        \r\n        // Pressure lines in porous materials\r\n        for (let x = this.topPipeMaterial.x; x < this.topPipeMaterial.x + this.topPipeMaterial.width; x += 30) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, this.topPipeMaterial.y);\r\n            this.ctx.lineTo(x, this.topPipeMaterial.y + this.topPipeMaterial.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        for (let x = this.bottomPipeMaterial.x; x < this.bottomPipeMaterial.x + this.bottomPipeMaterial.width; x += 30) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, this.bottomPipeMaterial.y);\r\n            this.ctx.lineTo(x, this.bottomPipeMaterial.y + this.bottomPipeMaterial.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawVelocityField() {\r\n        // Draw velocity field vectors\r\n        this.ctx.strokeStyle = 'rgba(52, 152, 219, 0.6)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Velocity vectors in clear sections\r\n        for (let x = 100; x < this.ctx.canvas.width - 100; x += 60) {\r\n            for (let y = this.topPipeY + 10; y < this.topPipeY + this.pipeHeight - 10; y += 30) {\r\n                if (x < this.topPipeMaterial.x || x > this.topPipeMaterial.x + this.topPipeMaterial.width) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(x + 20, y);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrow head\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + 15, y - 2);\r\n                    this.ctx.lineTo(x + 20, y);\r\n                    this.ctx.lineTo(x + 15, y + 2);\r\n                    this.ctx.stroke();\r\n                }\r\n            }\r\n            \r\n            for (let y = this.bottomPipeY + 10; y < this.bottomPipeY + this.pipeHeight - 10; y += 30) {\r\n                if (x < this.bottomPipeMaterial.x || x > this.bottomPipeMaterial.x + this.bottomPipeMaterial.width) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(x + 20, y);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrow head\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + 15, y - 2);\r\n                    this.ctx.lineTo(x + 20, y);\r\n                    this.ctx.lineTo(x + 15, y + 2);\r\n                    this.ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawPorosityFlowPatterns() {\r\n        // Draw flow patterns specific to porosity\r\n        this.ctx.strokeStyle = 'rgba(34, 139, 34, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([3, 3]);\r\n        \r\n        // High porosity flow patterns - curved lines\r\n        for (let i = 0; i < 5; i++) {\r\n            const startY = this.topPipeMaterial.y + 10 + i * (this.topPipeMaterial.height - 20) / 4;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.topPipeMaterial.x, startY);\r\n            \r\n            // Curved path through porous material\r\n            for (let x = this.topPipeMaterial.x; x < this.topPipeMaterial.x + this.topPipeMaterial.width; x += 10) {\r\n                const y = startY + Math.sin((x - this.topPipeMaterial.x) / 50) * 5;\r\n                this.ctx.lineTo(x, y);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.strokeStyle = 'rgba(128, 0, 128, 0.5)';\r\n        \r\n        // Low porosity flow patterns - straight lines\r\n        for (let i = 0; i < 3; i++) {\r\n            const startY = this.bottomPipeMaterial.y + 10 + i * (this.bottomPipeMaterial.height - 20) / 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.bottomPipeMaterial.x, startY);\r\n            this.ctx.lineTo(this.bottomPipeMaterial.x + this.bottomPipeMaterial.width, startY);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.setLineDash([]);\r\n    }\r\n}\r\n\r\n// Bernoulli's Principle Simulation\r\nexport class Bernoulli extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.animationType = 'bernoulli';\r\n        this.particles = [];\r\n        this.pipeWidth = 50;\r\n        this.fluidDensity = 1;\r\n        this.pressureDifference = 1;\r\n        this.visualizationMode = 'basic';\r\n        this.maxParticles = 80;\r\n        \r\n        // Add pipe system properties for Bernoulli\r\n        this.pipeStartX = 50;\r\n        this.pipeEndX = 750;\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        // Create particles starting closer to the visible area for immediate flow\r\n        for (let i = 0; i < this.maxParticles; i++) {\r\n            this.particles.push({\r\n                x: 50 + Math.random() * 200, // Start closer to visible area\r\n                y: 250 + Math.random() * 100,\r\n                vx: this.pressureDifference * (1 + Math.random() * 0.2),\r\n                vy: (Math.random() - 0.5) * 0.2,\r\n                size: 2 + Math.random() * 2, // Smaller particles\r\n                color: `hsl(${220 + Math.random() * 40}, 80%, 60%)`,\r\n                life: 0,\r\n                currentSection: 'left',\r\n                opacity: 0.7 + Math.random() * 0.3, // Varying opacity for depth\r\n                trail: [] // Add trail history\r\n            });\r\n        }\r\n    }\r\n    \r\n    setPipeWidth(width) {\r\n        this.pipeWidth = width;\r\n    }\r\n    \r\n    setFluidDensity(density) {\r\n        this.fluidDensity = density;\r\n    }\r\n    \r\n    setPressureDifference(pressure) {\r\n        this.pressureDifference = pressure;\r\n    }\r\n    \r\n    setVisualizationMode(mode) {\r\n        this.visualizationMode = mode;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        \r\n        // Maintain continuous flow by adding new particles\r\n        this.maintainContinuousFlow(deltaTime);\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Calculate velocity based on Bernoulli's principle\r\n            let baseVelocity = this.pressureDifference * (1 + Math.random() * 0.2);\r\n            let velocityMultiplier = 1.0;\r\n            \r\n            // Bernoulli's equation: P + ½ρv² + ρgh = constant\r\n            // For horizontal flow: P + ½ρv² = constant\r\n            // Therefore: v² ∝ 1/A (where A is cross-sectional area)\r\n            \r\n            // Smooth velocity transitions based on position\r\n            if (particle.x < 300) {\r\n                // Left wide section - slow velocity\r\n                velocityMultiplier = 0.6;\r\n            } else if (particle.x >= 300 && particle.x < 350) {\r\n                // Transition to narrow - gradually speed up\r\n                const transitionProgress = (particle.x - 300) / 50;\r\n                velocityMultiplier = 0.6 + (1.8 - 0.6) * transitionProgress;\r\n            } else if (particle.x >= 350 && particle.x < 450) {\r\n                // Narrow section - fast velocity (Bernoulli effect)\r\n                velocityMultiplier = 1.8;\r\n            } else if (particle.x >= 450 && particle.x < 500) {\r\n                // Transition to wide - gradually slow down\r\n                const transitionProgress = (particle.x - 450) / 50;\r\n                velocityMultiplier = 1.8 - (1.8 - 0.6) * transitionProgress;\r\n            } else {\r\n                // Right wide section - slow velocity\r\n                velocityMultiplier = 0.6;\r\n            }\r\n            \r\n            // Apply velocity with gradual transition\r\n            particle.vx = baseVelocity * velocityMultiplier;\r\n            \r\n            // Add slight turbulence in transitions (realistic fluid behavior)\r\n            if ((particle.x >= 300 && particle.x < 350) || (particle.x >= 450 && particle.x < 500)) {\r\n                particle.vx += (Math.random() - 0.5) * 0.5;\r\n            }\r\n            \r\n            // Update trail history (keep last 5 positions for smooth trail)\r\n            if (!particle.trail) particle.trail = [];\r\n            particle.trail.push({ x: particle.x, y: particle.y });\r\n            if (particle.trail.length > 5) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * deltaTime * 0.1;\r\n            particle.y += particle.vy * deltaTime * 0.1;\r\n            \r\n            // Constrain particles to pipe boundaries\r\n            this.constrainParticleToPipe(particle);\r\n            \r\n            particle.life += deltaTime;\r\n            \r\n            // Remove particles that go off screen (less aggressive removal)\r\n            if (particle.x > this.ctx.canvas.width + 100 || \r\n                particle.x < -100 || \r\n                particle.y < 100 || \r\n                particle.y > this.ctx.canvas.height + 100 ||\r\n                particle.life > 20000) { // Increased life time even more\r\n                // Remove particle instead of resetting\r\n                this.particles.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n    \r\n    maintainContinuousFlow(deltaTime) {\r\n        // Calculate target number of particles based on flow rate\r\n        const targetParticles = this.maxParticles;\r\n        const currentParticles = this.particles.length;\r\n        \r\n        // Add new particles more aggressively to maintain continuous flow\r\n        if (currentParticles < targetParticles) {\r\n            const particlesToAdd = Math.min(targetParticles - currentParticles, 2); // Add 2 at once\r\n            \r\n            for (let i = 0; i < particlesToAdd; i++) {\r\n                this.addNewParticle();\r\n            }\r\n        }\r\n        \r\n        // Also add particles periodically to ensure continuous flow\r\n        if (Math.random() < 0.15) { // 15% chance each frame for more frequent addition\r\n            this.addNewParticle();\r\n        }\r\n    }\r\n    \r\n    addNewParticle() {\r\n        // Add particle closer to the visible area for immediate flow\r\n        const staggerOffset = Math.random() * 100; // Reduced stagger for closer entry\r\n        \r\n        this.particles.push({\r\n            x: this.pipeStartX - 50 - staggerOffset,\r\n            y: 250 + Math.random() * 100,\r\n            vx: this.pressureDifference * (1 + Math.random() * 0.2),\r\n            vy: (Math.random() - 0.5) * 0.2,\r\n            size: 2 + Math.random() * 2,\r\n            color: `hsl(${220 + Math.random() * 40}, 80%, 60%)`,\r\n            life: 0,\r\n            currentSection: 'left',\r\n            opacity: 0.7 + Math.random() * 0.3,\r\n            trail: [] // Add trail history\r\n        });\r\n    }\r\n    \r\n    constrainParticleToPipe(particle) {\r\n        // Calculate pipe boundaries based on x position\r\n        let topBoundary, bottomBoundary;\r\n        \r\n        if (particle.x < 300) {\r\n            // Left wide section\r\n            topBoundary = 200;\r\n            bottomBoundary = 400;\r\n        } else if (particle.x >= 300 && particle.x < 350) {\r\n            // Transition to narrow\r\n            const transitionProgress = (particle.x - 300) / 50;\r\n            topBoundary = 200 + transitionProgress * 50;\r\n            bottomBoundary = 400 - transitionProgress * 50;\r\n        } else if (particle.x >= 350 && particle.x < 450) {\r\n            // Narrow section\r\n            topBoundary = 250;\r\n            bottomBoundary = 350;\r\n        } else if (particle.x >= 450 && particle.x < 500) {\r\n            // Transition to wide\r\n            const transitionProgress = (particle.x - 450) / 50;\r\n            topBoundary = 250 - transitionProgress * 50;\r\n            bottomBoundary = 350 + transitionProgress * 50;\r\n        } else {\r\n            // Right wide section\r\n            topBoundary = 200;\r\n            bottomBoundary = 400;\r\n        }\r\n        \r\n        // Add some margin to keep particles away from walls\r\n        const margin = 10;\r\n        topBoundary += margin;\r\n        bottomBoundary -= margin;\r\n        \r\n        // Constrain particle to pipe boundaries\r\n        if (particle.y < topBoundary) {\r\n            particle.y = topBoundary;\r\n            particle.vy = Math.abs(particle.vy) * 0.5; // Bounce off top wall\r\n        } else if (particle.y > bottomBoundary) {\r\n            particle.y = bottomBoundary;\r\n            particle.vy = -Math.abs(particle.vy) * 0.5; // Bounce off bottom wall\r\n        }\r\n        \r\n        // Add slight random vertical movement to simulate fluid flow\r\n        if (Math.random() < 0.1) {\r\n            particle.vy += (Math.random() - 0.5) * 0.3;\r\n        }\r\n        \r\n        // Dampen vertical velocity to keep particles flowing horizontally\r\n        particle.vy *= 0.95;\r\n    }\r\n    \r\n    resetParticle(particle) {\r\n        particle.x = -100 - Math.random() * 200; // Reset further back for continuous flow\r\n        particle.y = 250 + Math.random() * 100;\r\n        particle.vx = this.pressureDifference * (1 + Math.random() * 0.2);\r\n        particle.vy = (Math.random() - 0.5) * 0.2;\r\n        particle.life = 0;\r\n        particle.currentSection = 'left';\r\n        particle.opacity = 0.7 + Math.random() * 0.3;\r\n    }\r\n    \r\n    drawStandardBackground() {\r\n        // Standard background matching other animations\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n    \r\n    render() {\r\n        // Draw standardized background (matching other animations)\r\n        this.drawStandardBackground();\r\n        \r\n        // Draw pipe system\r\n        this.drawPipeSystem();\r\n        \r\n        // Draw particles\r\n        this.drawParticles();\r\n        \r\n        // Draw Bernoulli information\r\n        this.drawBernoulliInfo();\r\n        \r\n        // Add real-world analogy for beginners\r\n        this.drawBernoulliRealWorldAnalogy();\r\n    }\r\n    \r\n    drawPipeSystem() {\r\n        // Single continuous pipe with smooth transitions\r\n        const pipeWidth = 200; // Wide sections\r\n        const narrowWidth = 100; // Narrow section\r\n        const transitionLength = 50; // Smooth transition length\r\n        \r\n        // Create single continuous pipe path\r\n        this.ctx.beginPath();\r\n        \r\n        // Left wide section (0 to 300)\r\n        this.ctx.moveTo(0, 200);\r\n        this.ctx.lineTo(300, 200);\r\n        \r\n        // Transition to narrow section (300 to 350)\r\n        this.ctx.lineTo(350, 250);\r\n        \r\n        // Narrow section (350 to 450)\r\n        this.ctx.lineTo(450, 250);\r\n        \r\n        // Transition to wide section (450 to 500)\r\n        this.ctx.lineTo(500, 200);\r\n        \r\n        // Right wide section (500 to end)\r\n        this.ctx.lineTo(this.ctx.canvas.width, 200);\r\n        \r\n        // Bottom of pipe (mirror of top)\r\n        this.ctx.lineTo(this.ctx.canvas.width, 400);\r\n        this.ctx.lineTo(500, 400);\r\n        this.ctx.lineTo(450, 350);\r\n        this.ctx.lineTo(350, 350);\r\n        this.ctx.lineTo(300, 400);\r\n        this.ctx.lineTo(0, 400);\r\n        this.ctx.closePath();\r\n        \r\n        // Modern translucent gradient with pressure/velocity zones\r\n        // Blue = High pressure, Low velocity (wide sections)\r\n        // Red/Orange = Low pressure, High velocity (narrow section)\r\n        const pipeGradient = this.ctx.createLinearGradient(0, 200, this.ctx.canvas.width, 400);\r\n        pipeGradient.addColorStop(0, 'rgba(70, 130, 237, 0.35)'); // Blue - high pressure\r\n        pipeGradient.addColorStop(0.35, 'rgba(70, 130, 237, 0.35)'); // Blue\r\n        pipeGradient.addColorStop(0.42, 'rgba(255, 140, 60, 0.4)'); // Transition to orange\r\n        pipeGradient.addColorStop(0.5, 'rgba(255, 100, 50, 0.45)'); // Red/Orange - low pressure, high velocity\r\n        pipeGradient.addColorStop(0.58, 'rgba(255, 140, 60, 0.4)'); // Transition back\r\n        pipeGradient.addColorStop(0.65, 'rgba(70, 130, 237, 0.35)'); // Blue - high pressure\r\n        pipeGradient.addColorStop(1, 'rgba(70, 130, 237, 0.35)'); // Blue\r\n        \r\n        this.ctx.fillStyle = pipeGradient;\r\n        this.ctx.fill();\r\n        \r\n        // Crisp border\r\n        this.ctx.strokeStyle = 'rgba(100, 149, 237, 0.7)';\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.stroke();\r\n        \r\n        // Section labels with high contrast\r\n        this.ctx.font = 'bold 14px Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Left section label\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeText('High Pressure', 150, 180);\r\n        this.ctx.strokeText('Low Velocity', 150, 198);\r\n        this.ctx.fillStyle = '#4682FF';\r\n        this.ctx.fillText('High Pressure', 150, 180);\r\n        this.ctx.fillText('Low Velocity', 150, 198);\r\n        \r\n        // Middle section label\r\n        this.ctx.strokeText('Low Pressure', 400, 230);\r\n        this.ctx.strokeText('High Velocity', 400, 248);\r\n        this.ctx.fillStyle = '#FF6432';\r\n        this.ctx.fillText('Low Pressure', 400, 230);\r\n        this.ctx.fillText('High Velocity', 400, 248);\r\n        \r\n        // Right section label\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.strokeText('High Pressure', 650, 180);\r\n        this.ctx.strokeText('Low Velocity', 650, 198);\r\n        this.ctx.fillStyle = '#4682FF';\r\n        this.ctx.fillText('High Pressure', 650, 180);\r\n        this.ctx.fillText('Low Velocity', 650, 198);\r\n        \r\n        // Flow direction arrows\r\n        this.ctx.strokeStyle = '#0066CC';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.fillStyle = '#0066CC';\r\n        \r\n        // Left section arrows\r\n        for (let y = 220; y < 380; y += 30) {\r\n            this.drawEnhancedArrow(50, y, 100, y, '#0066CC');\r\n        }\r\n        \r\n        // Middle section arrows (faster flow)\r\n        this.ctx.strokeStyle = '#FF6600';\r\n        this.ctx.fillStyle = '#FF6600';\r\n        for (let y = 270; y < 330; y += 15) {\r\n            this.drawEnhancedArrow(360, y, 440, y, '#FF6600');\r\n        }\r\n        \r\n        // Right section arrows\r\n        this.ctx.strokeStyle = '#0066CC';\r\n        this.ctx.fillStyle = '#0066CC';\r\n        for (let y = 220; y < 380; y += 30) {\r\n            this.drawEnhancedArrow(700, y, 750, y, '#0066CC');\r\n        }\r\n        \r\n        // Draw visual gauges for pressure and velocity\r\n        this.drawPressureVelocityGauges();\r\n    }\r\n    \r\n    drawPressureVelocityGauges() {\r\n        // Pressure gauge (left side - high pressure)\r\n        const leftGaugeX = 150;\r\n        const leftGaugeY = 450;\r\n        this.drawGauge(leftGaugeX, leftGaugeY, 'Pressure', 0.8, '#4682FF');\r\n        \r\n        // Velocity gauge (left side - low velocity)\r\n        this.drawGauge(leftGaugeX + 120, leftGaugeY, 'Velocity', 0.3, '#4682FF');\r\n        \r\n        // Pressure gauge (middle - low pressure)\r\n        const midGaugeX = 400;\r\n        const midGaugeY = 450;\r\n        this.drawGauge(midGaugeX, midGaugeY, 'Pressure', 0.3, '#FF6432');\r\n        \r\n        // Velocity gauge (middle - high velocity)\r\n        this.drawGauge(midGaugeX + 120, midGaugeY, 'Velocity', 0.9, '#FF6432');\r\n        \r\n        // Pressure gauge (right side - high pressure)\r\n        const rightGaugeX = 650;\r\n        const rightGaugeY = 450;\r\n        this.drawGauge(rightGaugeX, rightGaugeY, 'Pressure', 0.8, '#4682FF');\r\n        \r\n        // Velocity gauge (right side - low velocity)\r\n        this.drawGauge(rightGaugeX + 120, rightGaugeY, 'Velocity', 0.3, '#4682FF');\r\n    }\r\n    \r\n    drawGauge(x, y, label, value, color) {\r\n        const width = 80;\r\n        const height = 15;\r\n        const radius = 3;\r\n        \r\n        // Gauge background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x - width/2, y, width, height, radius);\r\n        this.ctx.fill();\r\n        \r\n        // Gauge fill\r\n        const fillWidth = width * value;\r\n        const gradient = this.ctx.createLinearGradient(x - width/2, y, x - width/2 + fillWidth, y);\r\n        gradient.addColorStop(0, color);\r\n        gradient.addColorStop(1, this.adjustColor(color, 30));\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x - width/2, y, fillWidth, height, radius);\r\n        this.ctx.fill();\r\n        \r\n        // Gauge border\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.roundRect(x - width/2, y, width, height, radius);\r\n        this.ctx.stroke();\r\n        \r\n        // Label\r\n        this.ctx.font = 'bold 11px Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.lineWidth = 2.5;\r\n        this.ctx.strokeText(label, x, y - 3);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText(label, x, y - 3);\r\n    }\r\n    \r\n    drawEnhancedArrow(x1, y1, x2, y2, color) {\r\n        const headLength = 12;\r\n        const angle = Math.atan2(y2 - y1, x2 - x1);\r\n        \r\n        // Add glow effect for enhanced arrows\r\n        this.ctx.shadowColor = color;\r\n        this.ctx.shadowBlur = 6;\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n        \r\n        // Enhanced arrowhead with gradient\r\n        const gradient = this.ctx.createLinearGradient(x2, y2, x2 - headLength, y2);\r\n        gradient.addColorStop(0, color);\r\n        gradient.addColorStop(1, this.adjustColor(color, -30));\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x2, y2);\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle - Math.PI / 6), y2 - headLength * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle + Math.PI / 6), y2 - headLength * Math.sin(angle + Math.PI / 6));\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    adjustColor(color, amount) {\r\n        // Simple color adjustment for gradients\r\n        if (color.startsWith('#')) {\r\n            const hex = color.replace('#', '');\r\n            const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) + amount));\r\n            const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) + amount));\r\n            const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) + amount));\r\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n        }\r\n        return color;\r\n    }\r\n    \r\n    drawArrow(x1, y1, x2, y2, color) {\r\n        const headLength = 10;\r\n        const angle = Math.atan2(y2 - y1, x2 - x1);\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrowhead\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x2, y2);\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle - Math.PI / 6), y2 - headLength * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle + Math.PI / 6), y2 - headLength * Math.sin(angle + Math.PI / 6));\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawParticles() {\r\n        // Enhanced particle rendering with energy-based coloring\r\n        this.particles.forEach(particle => {\r\n            // Validate particle properties to prevent NaN errors\r\n            if (!particle || typeof particle.x !== 'number' || typeof particle.y !== 'number' || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                return; // Skip invalid particles\r\n            }\r\n            \r\n            // Draw particle trail first (behind the particle)\r\n            if (particle.trail && particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                for (let i = 1; i < particle.trail.length; i++) {\r\n                    this.ctx.lineTo(particle.trail[i].x, particle.trail[i].y);\r\n                }\r\n                this.ctx.strokeStyle = `rgba(100, 149, 237, ${0.3 * (particle.trail.length / 5)})`;\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.lineJoin = 'round';\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Check if particle is in narrow section (Bernoulli effect)\r\n            let energyLevel = 0.5; // Default energy level\r\n            let particleColor = particle.color;\r\n            \r\n            if (particle.x >= 350 && particle.x < 450) {\r\n                // Narrow section - high energy (Bernoulli effect)\r\n                energyLevel = 1.0;\r\n                particleColor = `hsl(${200 + Math.random() * 40}, 90%, 70%)`; // Bright blue\r\n            } else if (particle.x >= 300 && particle.x < 350) {\r\n                // Transition to narrow - medium energy\r\n                const transitionProgress = (particle.x - 300) / 50;\r\n                energyLevel = 0.5 + transitionProgress * 0.5;\r\n                particleColor = `hsl(${220 + Math.random() * 30}, 85%, 65%)`; // Medium blue\r\n            } else if (particle.x >= 450 && particle.x < 500) {\r\n                // Transition from narrow - medium energy\r\n                const transitionProgress = (particle.x - 450) / 50;\r\n                energyLevel = 1.0 - transitionProgress * 0.5;\r\n                particleColor = `hsl(${220 + Math.random() * 30}, 85%, 65%)`; // Medium blue\r\n            } else {\r\n                // Wide sections - low energy\r\n                energyLevel = 0.5;\r\n                particleColor = `hsl(${240 + Math.random() * 20}, 80%, 60%)`; // Darker blue\r\n            }\r\n            \r\n            // Create gradient for particle based on energy level\r\n            const gradient = this.ctx.createRadialGradient(\r\n                particle.x, particle.y, 0,\r\n                particle.x, particle.y, particle.size\r\n            );\r\n            \r\n            // Energy mode for Bernoulli: Green for high energy, purple for low energy\r\n            if (energyLevel > 0.8) {\r\n                gradient.addColorStop(0, '#4ECDC4'); // Bright cyan for high energy\r\n                gradient.addColorStop(1, '#2ECC71'); // Green for high energy\r\n            } else if (energyLevel > 0.6) {\r\n                gradient.addColorStop(0, '#3498DB'); // Blue for medium energy\r\n                gradient.addColorStop(1, '#2980B9'); // Darker blue\r\n            } else {\r\n                gradient.addColorStop(0, '#9B59B6'); // Purple for low energy\r\n                gradient.addColorStop(1, '#8E44AD'); // Darker purple\r\n            }\r\n            \r\n            // Draw particle with enhanced styling\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';\r\n            this.ctx.shadowBlur = 4;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add glow effect for high-energy particles\r\n            if (energyLevel > 0.8) {\r\n                this.ctx.shadowColor = '#4ECDC4';\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y, particle.size * 1.5, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawPressureAnalysis() {\r\n        // Modern pressure analysis panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = this.ctx.canvas.height - 140; // Position from bottom\r\n        const panelWidth = 320;\r\n        const panelHeight = 120;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#E74C3C';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#E74C3C');\r\n        borderGradient.addColorStop(0.5, '#C0392B');\r\n        borderGradient.addColorStop(1, '#E74C3C');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(231, 76, 60, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(231, 76, 60, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('📊 Pressure Analysis', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.fillText(`🔴 High Pressure: Porous Material`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`🟢 Low Pressure: Clear Sections`, panelX + 15, panelY + 62);\r\n        this.ctx.fillText(`📏 Pressure Drop: ${(this.topPipeMaterial.porosity * 100).toFixed(0)}%`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced pressure explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Porous materials create pressure resistance', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch pressure build up in materials!', panelX + 15, panelY + 113);\r\n        \r\n        // Add pressure indicator\r\n        const pressureRatio = this.topPipeMaterial.porosity / this.bottomPipeMaterial.porosity;\r\n        const pressureColor = pressureRatio > 2 ? '#E74C3C' : pressureRatio > 1.5 ? '#F39C12' : '#27AE60';\r\n        this.ctx.fillStyle = pressureColor;\r\n        this.ctx.fillText(`🎯 Pressure Ratio: ${pressureRatio.toFixed(1)}x`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawVelocityAnalysis() {\r\n        // Modern velocity analysis panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = this.ctx.canvas.height - 140; // Position from bottom\r\n        const panelWidth = 320;\r\n        const panelHeight = 120; // Reduced height since we removed duplicate content\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#3498DB';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#3498DB');\r\n        borderGradient.addColorStop(0.5, '#2980B9');\r\n        borderGradient.addColorStop(1, '#3498DB');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(52, 152, 219, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(52, 152, 219, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#3498DB';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('⚡ Velocity Analysis', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#3498DB';\r\n        this.ctx.fillText(`🔵 Fast Flow: Clear Sections`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`🟠 Slow Flow: Porous Material`, panelX + 15, panelY + 62);\r\n        \r\n        // Add prominent viscosity indicator\r\n        const viscosityEffect = this.viscosity * 0.1; // Same factor as in particle update\r\n        const viscosityColor = viscosityEffect > 0.5 ? '#E74C3C' : viscosityEffect > 0.2 ? '#F39C12' : '#27AE60';\r\n        this.ctx.fillStyle = viscosityColor;\r\n        this.ctx.fillText(`🛢️ Viscosity Effect: ${(viscosityEffect * 100).toFixed(0)}%`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced velocity explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Porosity reduces flow velocity', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch particles slow in materials!', panelX + 15, panelY + 113);\r\n        \r\n        // Add velocity indicator\r\n        const velocityRatio = this.bottomPipeMaterial.porosity / this.topPipeMaterial.porosity;\r\n        const velocityColor = velocityRatio > 2 ? '#27AE60' : velocityRatio > 1.5 ? '#F39C12' : '#E74C3C';\r\n        this.ctx.fillStyle = velocityColor;\r\n        this.ctx.fillText(`🎯 Velocity Ratio: ${velocityRatio.toFixed(1)}x`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawEnergyAnalysis() {\r\n        // Simple energy analysis for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('⚡ Energy Analysis', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('Pressure + Kinetic = Constant', 20, 50);\r\n        this.ctx.fillText('When speed increases, pressure decreases', 20, 70);\r\n        this.ctx.fillText('💡 Total energy is conserved', 20, 90);\r\n    }\r\n    \r\n\r\n    \r\n    drawBernoulliInfo() {\r\n        // Modern Bernoulli info panel with enhanced styling\r\n        const panelX = 20;\r\n        const panelY = 20;\r\n        const panelWidth = 320;\r\n        const panelHeight = 120;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#4ECDC4';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#4ECDC4');\r\n        borderGradient.addColorStop(0.5, '#2ECC71');\r\n        borderGradient.addColorStop(1, '#4ECDC4');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(78, 205, 196, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(78, 205, 196, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 18px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('⚡ Bernoulli\\'s Principle', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced stats with modern styling\r\n        this.ctx.font = '14px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`🚀 Speed: ${this.pressureDifference.toFixed(1)}`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`⚡ Velocity Ratio: 1.8x`, panelX + 15, panelY + 62);\r\n        this.ctx.fillText(`💧 Flow Rate: ${this.particles.length}/80`, panelX + 15, panelY + 79);\r\n        \r\n        // Enhanced principle explanation with modern colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 13px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('💡 Faster flow = Lower pressure', panelX + 15, panelY + 96);\r\n        this.ctx.fillText('🔍 Watch particles speed up!', panelX + 15, panelY + 113);\r\n        \r\n        // Add performance indicator\r\n        const efficiency = Math.min(100, (this.pressureDifference / 2) * 100);\r\n        const efficiencyColor = efficiency > 80 ? '#4ECDC4' : efficiency > 60 ? '#F39C12' : '#FF6B6B';\r\n        this.ctx.fillStyle = efficiencyColor;\r\n        this.ctx.fillText(`🎯 Flow Efficiency: ${efficiency.toFixed(0)}%`, panelX + 15, panelY + 130);\r\n    }\r\n    \r\n    drawBernoulliRealWorldAnalogy() {\r\n        // Modern analogy panel with enhanced styling\r\n        const panelX = this.ctx.canvas.width - 290;\r\n        const panelY = 20;\r\n        const panelWidth = 270;\r\n        const panelHeight = 100;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(panelX + 4, panelY + 4, panelWidth, panelHeight);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Enhanced border with gradient\r\n        this.ctx.shadowColor = '#FFD700';\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Create gradient border\r\n        const borderGradient = this.ctx.createLinearGradient(\r\n            panelX, panelY, \r\n            panelX + panelWidth, panelY + panelHeight\r\n        );\r\n        borderGradient.addColorStop(0, '#FFD700');\r\n        borderGradient.addColorStop(0.5, '#FFA500');\r\n        borderGradient.addColorStop(1, '#FFD700');\r\n        \r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(255, 215, 0, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(255, 215, 0, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, 30);\r\n        \r\n        // Modern title with crisp font rendering\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 16px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('💡 Real-World Examples:', panelX + 15, panelY + 22);\r\n        \r\n        // Enhanced examples with modern styling\r\n        this.ctx.font = '13px Inter, Arial, sans-serif';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText('🚿 Garden hose: narrow = faster', panelX + 15, panelY + 45);\r\n        this.ctx.fillText('✈️ Airplane wings: curved = lift', panelX + 15, panelY + 62);\r\n        this.ctx.fillText('🏥 Venturi meters: flow measurement', panelX + 15, panelY + 79);\r\n        this.ctx.fillText('🩸 Blood flow: artery constriction', panelX + 15, panelY + 96);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            pressureDifference: this.pressureDifference,\r\n            velocityRatio: 1.8, // Enhanced velocity ratio in narrow section\r\n            energyConservation: '✓',\r\n            particleCount: this.particles.length,\r\n            maxParticles: this.maxParticles,\r\n            flowEfficiency: Math.min(100, (this.pressureDifference / 2) * 100),\r\n            time: this.time\r\n        };\r\n    }\r\n}","// Computer Science Animations\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\n// Neural Network Training Visualization\r\nexport class NeuralNetwork extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.canvas = ctx.canvas;\r\n        \r\n        // Network architecture\r\n        this.layers = [2, 4, 3, 1]; // Input, hidden, hidden, output\r\n        this.neurons = [];\r\n        this.weights = [];\r\n        this.biases = [];\r\n        this.activations = [];\r\n        \r\n        // Training data for object complexity classification\r\n        // Input features: [symmetry_score, edge_complexity]\r\n        // Output: 0 = simple, 1 = complex\r\n        this.trainingData = [\r\n            { input: [0.9, 0.1], output: [0], object: 'circle', description: 'Simple: High symmetry, smooth edges' },\r\n            { input: [0.8, 0.3], output: [0], object: 'square', description: 'Simple: Regular symmetry, straight edges' },\r\n            { input: [0.6, 0.5], output: [1], object: 'triangle', description: 'Complex: Lower symmetry, angular edges' },\r\n            { input: [0.3, 0.9], output: [1], object: 'star', description: 'Complex: Low symmetry, many edges' }\r\n        ];\r\n        \r\n        // Animation properties\r\n        this.currentDataIndex = 0;\r\n        this.epoch = 0;\r\n        this.learningRate = 0.1;\r\n        this.speed = 1.0;\r\n        this.showWeights = true;\r\n        this.showGradients = false;\r\n        this.showLoss = true;\r\n        this.autoTrain = true;\r\n        \r\n        // Visual properties\r\n        this.neuronRadius = 15;\r\n        this.layerSpacing = 120;\r\n        this.layerStartX = 0; // Will be calculated dynamically\r\n        this.layerStartY = 0; // Will be calculated dynamically\r\n        \r\n        // Enhanced animation state\r\n        this.animationPhase = 'forward'; // 'forward', 'backward', 'update', 'pause'\r\n        this.forwardStep = 0;\r\n        this.backwardStep = 0;\r\n        this.updateStep = 0;\r\n        this.pauseTime = 0;\r\n        \r\n        // Sequential animation state\r\n        this.forwardAnimationStep = 0;\r\n        this.currentLayerIndex = 0;\r\n        this.layerActivationDelay = 0.25; // seconds between layer activations (slightly faster)\r\n        this.layerProcessingDelay = 0.4; // seconds to wait at each layer before moving to next (slightly faster)\r\n        this.isProcessingLayer = false; // whether we're in the processing phase at current layer\r\n        \r\n        // Data flow animation\r\n        this.dataFlowParticles = [];\r\n        this.errorFlowParticles = [];\r\n        this.weightUpdateParticles = [];\r\n        \r\n        // Performance tracking\r\n        this.lossHistory = [];\r\n        this.accuracyHistory = [];\r\n        this.currentLoss = 0;\r\n        this.currentAccuracy = 0;\r\n        // Optimizer and regularization controls\r\n        this.optimizer = 'sgd';\r\n        this.momentum = 0.9;\r\n        this.adamBeta1 = 0.9;\r\n        this.adamBeta2 = 0.999;\r\n        this.adamEps = 1e-8;\r\n        this.weightDecay = 0.0;\r\n        this.dropoutRate = 0.0;\r\n        this.batchSize = 4;\r\n        this.optState = { m: [], v: [], velocity: [] };\r\n        \r\n        // Animation timing\r\n        this.phaseDuration = 3.5; // seconds per phase (slightly faster for better engagement)\r\n        this.pauseDuration = 0.8; // seconds to pause between phases (slightly faster)\r\n        \r\n        // Visual feedback\r\n        this.activeNeurons = new Set();\r\n        this.activeConnections = new Set();\r\n        this.errorIndicators = new Map();\r\n        this.weightChangeIndicators = new Map();\r\n        \r\n        // Object recognition context\r\n        this.currentObject = null;\r\n        this.objectDisplayTime = 0;\r\n        this.showObjectContext = true;\r\n        \r\n        // Testing mode\r\n        this.isTestingMode = false;\r\n        this.testingPhase = 'select'; // 'select', 'processing', 'result'\r\n        this.selectedTestObject = null;\r\n        this.testingStep = 0;\r\n        this.testingDuration = 2.5; // Slightly faster testing for better UX\r\n        this.testingParticles = [];\r\n        this.testResults = []; // Store test results for summary\r\n        this.lastTestResult = null; // Track current test result\r\n        \r\n        // Training indicator\r\n        this.showTrainingIndicator = false;\r\n        this.trainingIndicatorTime = 0;\r\n        this.trainingIndicatorDuration = 4.0; // Reduced for better UX\r\n        this.trainingIndicatorObjectIndex = 0; // Track which object is being shown\r\n        this.trainingIndicatorObjectTime = 0; // Time for each object display\r\n        this.isTrainingComplete = false; // Track if training has finished\r\n        \r\n        this.reset();\r\n        this.initializeOptimizerState();\r\n        \r\n        // Always run training on load\r\n        this.runShortTrainingPhase();\r\n        \r\n        // Start the first training cycle immediately\r\n        this.startFirstTrainingCycle();\r\n        \r\n        // Ensure training starts smoothly\r\n        setTimeout(() => {\r\n            if (!this.isTrainingComplete) {\r\n                this.isTrainingComplete = true;\r\n            }\r\n        }, 5000); // Mark training as complete after 5 seconds\r\n    }\r\n    initializeOptimizerState() {\r\n        this.optState.m = [];\r\n        this.optState.v = [];\r\n        this.optState.velocity = [];\r\n        for (let l = 0; l < this.weights.length; l++) {\r\n            const layer = this.weights[l];\r\n            const mL = [], vL = [], velL = [];\r\n            for (let i = 0; i < layer.length; i++) {\r\n                const row = layer[i];\r\n                mL.push(new Array(row.length).fill(0));\r\n                vL.push(new Array(row.length).fill(0));\r\n                velL.push(new Array(row.length).fill(0));\r\n            }\r\n            this.optState.m.push(mL);\r\n            this.optState.v.push(vL);\r\n            this.optState.velocity.push(velL);\r\n        }\r\n    }\r\n    setOptimizer(o) { this.optimizer = o; }\r\n    setBatchSize(b) { this.batchSize = Math.max(1, Math.floor(b)); }\r\n    setDropout(r) { this.dropoutRate = Math.max(0, Math.min(0.9, r)); }\r\n    setWeightDecay(l2) { this.weightDecay = Math.max(0, l2); }\r\n    setDataset(name) {\r\n        if (name === 'moons') {\r\n            this.trainingData = this.generateMoons(120, 0.12);\r\n        } else if (name === 'circles') {\r\n            this.trainingData = this.generateCircles(120, 0.08);\r\n        } else {\r\n            this.trainingData = [\r\n                { input: [0.9, 0.1], output: [0], object: 'circle', description: 'Simple: High symmetry, smooth edges' },\r\n                { input: [0.8, 0.3], output: [0], object: 'square', description: 'Simple: Regular symmetry, straight edges' },\r\n                { input: [0.6, 0.5], output: [1], object: 'triangle', description: 'Complex: Lower symmetry, angular edges' },\r\n                { input: [0.3, 0.9], output: [1], object: 'star', description: 'Complex: Low symmetry, many edges' }\r\n            ];\r\n        }\r\n        this.reset();\r\n    }\r\n    generateMoons(n, noise) {\r\n        const data = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const t = Math.random() * Math.PI;\r\n            const x = Math.cos(t) * 0.4 + 0.5 + (Math.random()*2-1)*noise;\r\n            const y = Math.sin(t) * 0.4 + 0.5 + (Math.random()*2-1)*noise;\r\n            data.push({ input: [x, y], output: [0], object: 'moonA' });\r\n        }\r\n        for (let i = 0; i < n; i++) {\r\n            const t = Math.random() * Math.PI;\r\n            const x = 1 - (Math.cos(t) * 0.4 + 0.5) + (Math.random()*2-1)*noise;\r\n            const y = 1 - (Math.sin(t) * 0.4 + 0.5) + (Math.random()*2-1)*noise;\r\n            data.push({ input: [x, y], output: [1], object: 'moonB' });\r\n        }\r\n        return data;\r\n    }\r\n    generateCircles(n, noise) {\r\n        const data = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const r = 0.25 + (Math.random()*2-1)*noise;\r\n            const a = Math.random()*Math.PI*2;\r\n            data.push({ input: [0.5 + Math.cos(a)*r, 0.5 + Math.sin(a)*r], output: [0], object: 'inner' });\r\n        }\r\n        for (let i = 0; i < n; i++) {\r\n            const r = 0.45 + (Math.random()*2-1)*noise;\r\n            const a = Math.random()*Math.PI*2;\r\n            data.push({ input: [0.5 + Math.cos(a)*r, 0.5 + Math.sin(a)*r], output: [1], object: 'outer' });\r\n        }\r\n        return data;\r\n    }\r\n    \r\n    initializeNetwork() {\r\n        // Calculate centered positions\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Calculate total network width\r\n        const totalNetworkWidth = (this.layers.length - 1) * this.layerSpacing;\r\n        \r\n        // Center horizontally\r\n        this.layerStartX = (canvasWidth - totalNetworkWidth) / 2;\r\n        \r\n        // Center vertically - use the exact center of the canvas\r\n        const networkCenterY = canvasHeight / 2;\r\n        \r\n        // Initialize neurons positions\r\n        this.neurons = [];\r\n        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\r\n            const layerNeurons = [];\r\n            const layerSize = this.layers[layerIndex];\r\n            const x = this.layerStartX + layerIndex * this.layerSpacing;\r\n            \r\n            for (let neuronIndex = 0; neuronIndex < layerSize; neuronIndex++) {\r\n                // Calculate Y position relative to the center of the canvas\r\n                // Center each layer vertically within the canvas\r\n                const y = networkCenterY + (neuronIndex - (layerSize - 1) / 2) * 60;\r\n                layerNeurons.push({ \r\n                    x, \r\n                    y, \r\n                    value: 0, \r\n                    delta: 0,\r\n                    isActive: false,\r\n                    pulseIntensity: 0,\r\n                    errorIntensity: 0,\r\n                    weightChangeIntensity: 0\r\n                });\r\n            }\r\n            this.neurons.push(layerNeurons);\r\n        }\r\n        \r\n        // Initialize weights and biases with pre-trained values for better object recognition\r\n        this.weights = [];\r\n        this.biases = [];\r\n        \r\n        // Pre-trained weights optimized for object complexity classification\r\n        // Using weights that are closer to a working solution for better training\r\n        const preTrainedWeights = [\r\n            // Input to hidden layer 1 (2x4)\r\n            [\r\n                [1.2, -1.0, 0.8, -0.6],\r\n                [-1.0, 1.5, 0.6, -1.2]\r\n            ],\r\n            // Hidden layer 1 to hidden layer 2 (4x3)\r\n            [\r\n                [1.0, -0.8, 0.5],\r\n                [-0.8, 1.2, -0.6],\r\n                [0.9, -0.5, 0.8],\r\n                [-0.6, 0.8, 1.0]\r\n            ],\r\n            // Hidden layer 2 to output (3x1)\r\n            [\r\n                [1.5],\r\n                [-1.2],\r\n                [1.8]\r\n            ]\r\n        ];\r\n        \r\n        const preTrainedBiases = [\r\n            // Hidden layer 1 biases (4)\r\n            [-0.5, 0.6, -0.3, 0.4],\r\n            // Hidden layer 2 biases (3)\r\n            [0.3, -0.4, 0.5],\r\n            // Output layer bias (1)\r\n            [-0.8]\r\n        ];\r\n        \r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayerSize = this.layers[layerIndex];\r\n            const nextLayerSize = this.layers[layerIndex + 1];\r\n            \r\n            // Initialize weights with pre-trained values\r\n            const layerWeights = [];\r\n            for (let i = 0; i < currentLayerSize; i++) {\r\n                const neuronWeights = [];\r\n                for (let j = 0; j < nextLayerSize; j++) {\r\n                    neuronWeights.push({\r\n                        value: preTrainedWeights[layerIndex][i][j],\r\n                        change: 0,\r\n                        isActive: false,\r\n                        pulseIntensity: 0\r\n                    });\r\n                }\r\n                layerWeights.push(neuronWeights);\r\n            }\r\n            this.weights.push(layerWeights);\r\n            \r\n            // Initialize biases with pre-trained values\r\n            const layerBiases = [];\r\n            for (let j = 0; j < nextLayerSize; j++) {\r\n                layerBiases.push({\r\n                    value: preTrainedBiases[layerIndex][j],\r\n                    change: 0,\r\n                    isActive: false\r\n                });\r\n            }\r\n            this.biases.push(layerBiases);\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        this.phaseDuration = 2.0 / speed;\r\n    }\r\n    \r\n    setLearningRate(rate) {\r\n        this.learningRate = rate;\r\n    }\r\n    \r\n    setShowWeights(show) {\r\n        this.showWeights = show;\r\n    }\r\n    \r\n    setShowGradients(show) {\r\n        this.showGradients = show;\r\n    }\r\n    \r\n    setShowLoss(show) {\r\n        this.showLoss = show;\r\n    }\r\n    \r\n    setAutoTrain(auto) {\r\n        this.autoTrain = auto;\r\n    }\r\n    \r\n    resize() {\r\n        // Recalculate positions when canvas is resized\r\n        this.initializeNetwork();\r\n    }\r\n    \r\n    reset() {\r\n        // Reinitialize network with pre-trained weights (same as resetWeights)\r\n        this.initializeNetwork();\r\n        \r\n        this.epoch = 0;\r\n        this.currentDataIndex = 0;\r\n        this.animationPhase = 'forward';\r\n        this.forwardStep = 0;\r\n        this.backwardStep = 0;\r\n        this.updateStep = 0;\r\n        this.pauseTime = 0;\r\n        this.forwardAnimationStep = 0;\r\n        this.currentLayerIndex = 0;\r\n        this.isProcessingLayer = false;\r\n        this.lossHistory = [];\r\n        this.accuracyHistory = [];\r\n        this.currentLoss = 0;\r\n        this.currentAccuracy = 0;\r\n        this.isTrainingComplete = false; // Reset training completion flag\r\n        \r\n        // Reset based on current mode\r\n        if (this.isTestingMode) {\r\n            this.testingPhase = 'select';\r\n            this.selectedTestObject = null;\r\n            this.testingStep = 0;\r\n            this.testingParticles = [];\r\n            this.testResults = [];\r\n            this.lastTestResult = null;\r\n        } else {\r\n            // Don't clear currentObject in reset for training mode\r\n            // Let startFirstTrainingCycle handle it\r\n            this.objectDisplayTime = 0;\r\n        }\r\n        \r\n        // Clear animation particles\r\n        this.dataFlowParticles = [];\r\n        this.errorFlowParticles = [];\r\n        this.weightUpdateParticles = [];\r\n        \r\n        // Clear visual indicators\r\n        this.clearVisualIndicators();\r\n        \r\n        // Reset object context (but preserve for training mode)\r\n        if (this.isTestingMode) {\r\n            this.currentObject = null;\r\n        }\r\n        this.objectDisplayTime = 0;\r\n        \r\n        // Run training after reset to ensure network is prepared\r\n        this.runShortTrainingPhase();\r\n    }\r\n    \r\n    startFirstTrainingCycle() {\r\n        // Start the first training cycle immediately if in training mode\r\n        if (!this.isTestingMode && this.autoTrain) {\r\n            const currentData = this.trainingData[this.currentDataIndex];\r\n            this.forwardPropagate(currentData.input);\r\n            this.currentObject = currentData;\r\n            this.objectDisplayTime = 0;\r\n            \r\n            // Start sequential animation\r\n            this.forwardAnimationStep = 0;\r\n            this.currentLayerIndex = 0;\r\n            this.isProcessingLayer = false;\r\n        }\r\n    }\r\n    \r\n    setDemoPerfectWeights() {\r\n        // These weights/biases guarantee correct classification for the four demo objects\r\n        const rawWeights = [\r\n            // Input to hidden layer 1 (2x4)\r\n            [\r\n                [5.0, -5.0, 5.0, -5.0],\r\n                [-5.0, 5.0, 5.0, -5.0]\r\n            ],\r\n            // Hidden layer 1 to hidden layer 2 (4x3)\r\n            [\r\n                [5.0, -5.0, 0.0],\r\n                [-5.0, 5.0, 0.0],\r\n                [0.0, 0.0, 5.0],\r\n                [0.0, 0.0, -5.0]\r\n            ],\r\n            // Hidden layer 2 to output (3x1)\r\n            [\r\n                [5.0],\r\n                [5.0],\r\n                [-5.0]\r\n            ]\r\n        ];\r\n        const rawBiases = [\r\n            [-2.5, -2.5, 2.5, 2.5],\r\n            [-2.5, -2.5, 2.5],\r\n            [-2.5]\r\n        ];\r\n        this.weights = rawWeights.map(layer =>\r\n            layer.map(neuronWeights =>\r\n                neuronWeights.map(w => ({ value: w, change: 0, isActive: false, pulseIntensity: 0 }))\r\n            )\r\n        );\r\n        this.biases = rawBiases.map(layer =>\r\n            layer.map(b => ({ value: b, change: 0, isActive: false }))\r\n        );\r\n    }\r\n    \r\n    runShortTrainingPhase() {\r\n        // Show training indicator\r\n        this.showTrainingIndicator = true;\r\n        this.trainingIndicatorTime = 0;\r\n        this.isTrainingComplete = false;\r\n        \r\n        // Run more training epochs to ensure the network learns the correct classification\r\n        const trainingEpochs = 100; // Keep short for animation\r\n        const originalLearningRate = this.learningRate;\r\n        this.learningRate = 0.1;\r\n        \r\n        for (let epoch = 0; epoch < trainingEpochs; epoch++) {\r\n            for (let dataIndex = 0; dataIndex < this.trainingData.length; dataIndex++) {\r\n                const data = this.trainingData[dataIndex];\r\n                this.forwardPropagate(data.input);\r\n                this.backwardPropagate(data.output);\r\n                this.updateWeights();\r\n            }\r\n        }\r\n        this.learningRate = originalLearningRate;\r\n        this.clearVisualIndicators();\r\n        // Do NOT set perfect demo weights\r\n        this.isTrainingComplete = true;\r\n    }\r\n    \r\n    sigmoid(x) {\r\n        return 1 / (1 + Math.exp(-x));\r\n    }\r\n    \r\n    sigmoidDerivative(x) {\r\n        return x * (1 - x);\r\n    }\r\n    \r\n    forwardPropagate(inputs) {\r\n        // Set input layer\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            this.neurons[0][i].value = inputs[i];\r\n            this.neurons[0][i].isActive = true;\r\n            this.neurons[0][i].pulseIntensity = 1.0;\r\n        }\r\n        \r\n        // Forward propagate through layers\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            const layerBiases = this.biases[layerIndex];\r\n            \r\n            for (let j = 0; j < nextLayer.length; j++) {\r\n                let sum = layerBiases[j].value;\r\n                for (let i = 0; i < currentLayer.length; i++) {\r\n                    sum += currentLayer[i].value * layerWeights[i][j].value;\r\n                }\r\n                const activated = this.sigmoid(sum);\r\n                if (!this.isTestingMode && this.dropoutRate > 0 && layerIndex < this.neurons.length - 1) {\r\n                    const keep = Math.random() > this.dropoutRate;\r\n                    nextLayer[j].value = keep ? activated : 0;\r\n                    nextLayer[j].isActive = keep;\r\n                } else {\r\n                    nextLayer[j].value = activated;\r\n                }\r\n                // Don't activate neurons here - let the animation handle it sequentially\r\n            }\r\n        }\r\n    }\r\n    \r\n    backwardPropagate(targets) {\r\n        // Calculate output layer deltas\r\n        const outputLayer = this.neurons[this.neurons.length - 1];\r\n        for (let i = 0; i < outputLayer.length; i++) {\r\n            const error = targets[i] - outputLayer[i].value;\r\n            outputLayer[i].delta = error * this.sigmoidDerivative(outputLayer[i].value);\r\n            outputLayer[i].errorIntensity = Math.abs(error);\r\n        }\r\n        \r\n        // Backpropagate through hidden layers\r\n        for (let layerIndex = this.neurons.length - 2; layerIndex > 0; layerIndex--) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                let error = 0;\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    error += nextLayer[j].delta * layerWeights[i][j].value;\r\n                }\r\n                currentLayer[i].delta = error * this.sigmoidDerivative(currentLayer[i].value);\r\n                currentLayer[i].errorIntensity = Math.abs(error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    updateWeights() {\r\n        // Update weights and biases\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            const layerBiases = this.biases[layerIndex];\r\n            \r\n            for (let j = 0; j < nextLayer.length; j++) {\r\n                // Update bias\r\n                const biasChange = this.learningRate * nextLayer[j].delta;\r\n                layerBiases[j].value += biasChange;\r\n                layerBiases[j].change = biasChange;\r\n                layerBiases[j].isActive = true;\r\n                \r\n                for (let i = 0; i < currentLayer.length; i++) {\r\n                    // Update weight\r\n                    const weightChange = this.learningRate * nextLayer[j].delta * currentLayer[i].value;\r\n                    layerWeights[i][j].value += weightChange;\r\n                    layerWeights[i][j].change = weightChange;\r\n                    layerWeights[i][j].isActive = true;\r\n                    layerWeights[i][j].pulseIntensity = 1.0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    calculateLoss(targets) {\r\n        const outputLayer = this.neurons[this.neurons.length - 1];\r\n        let loss = 0;\r\n        for (let i = 0; i < outputLayer.length; i++) {\r\n            const error = targets[i] - outputLayer[i].value;\r\n            loss += 0.5 * error * error;\r\n        }\r\n        return loss;\r\n    }\r\n    \r\n    calculateAccuracy() {\r\n        let correct = 0;\r\n        for (let i = 0; i < this.trainingData.length; i++) {\r\n            const data = this.trainingData[i];\r\n            this.forwardPropagate(data.input);\r\n            const output = this.neurons[this.neurons.length - 1][0].value;\r\n            const predicted = output > 0.5 ? 1 : 0;\r\n            if (predicted === data.output[0]) {\r\n                correct++;\r\n            }\r\n        }\r\n        return correct / this.trainingData.length;\r\n    }\r\n    \r\n    createDataFlowParticles(fromNeuron, toNeuron, value, isError = false) {\r\n        const particle = {\r\n            x: fromNeuron.x,\r\n            y: fromNeuron.y,\r\n            targetX: toNeuron.x,\r\n            targetY: toNeuron.y,\r\n            value: value,\r\n            progress: 0,\r\n            speed: 0.02 * this.speed,\r\n            isError: isError,\r\n            size: Math.abs(value) * 3 + 2\r\n        };\r\n        \r\n        if (isError) {\r\n            this.errorFlowParticles.push(particle);\r\n        } else {\r\n            this.dataFlowParticles.push(particle);\r\n        }\r\n    }\r\n    \r\n    updateDataFlowParticles() {\r\n        // Update data flow particles\r\n        for (let i = this.dataFlowParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.dataFlowParticles[i];\r\n            particle.progress += particle.speed;\r\n            \r\n            if (particle.progress >= 1) {\r\n                this.dataFlowParticles.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update error flow particles\r\n        for (let i = this.errorFlowParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.errorFlowParticles[i];\r\n            particle.progress += particle.speed;\r\n            \r\n            if (particle.progress >= 1) {\r\n                this.errorFlowParticles.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update weight update particles\r\n        for (let i = this.weightUpdateParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.weightUpdateParticles[i];\r\n            particle.progress += particle.speed;\r\n            \r\n            if (particle.progress >= 1) {\r\n                this.weightUpdateParticles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    setTestingMode(testing) {\r\n        this.isTestingMode = testing;\r\n        if (testing) {\r\n            this.testingPhase = 'select';\r\n            this.selectedTestObject = null;\r\n            this.testingStep = 0;\r\n            this.testingParticles = [];\r\n            // Ensure initialization overlay is not shown in testing mode\r\n            this.showTrainingIndicator = false;\r\n        } else {\r\n            // Switching to training mode - run training to prepare the network\r\n            this.runShortTrainingPhase();\r\n        }\r\n    }\r\n    \r\n    selectTestObject(objectType) {\r\n        if (!this.isTestingMode) {\r\n            return;\r\n        }\r\n        // Allow testing regardless of training completion to keep UX simple\r\n        \r\n        // Clear previous result and start new test\r\n        this.selectedTestObject = this.trainingData.find(data => data.object === objectType);\r\n        this.testingPhase = 'processing';\r\n        this.testingStep = 0;\r\n        this.testingParticles = [];\r\n        \r\n        // Clear any previous test result to avoid confusion\r\n        this.lastTestResult = null;\r\n        \r\n        // Start forward propagation for testing\r\n        this.forwardPropagate(this.selectedTestObject.input);\r\n        \r\n        // Start sequential animation for testing\r\n        this.forwardAnimationStep = 0;\r\n        this.currentLayerIndex = 0;\r\n        this.isProcessingLayer = false;\r\n    }\r\n    \r\n    addTestResult(objectType, predicted, confidence, isCorrect) {\r\n        this.testResults.push({\r\n            object: objectType,\r\n            predicted: predicted,\r\n            confidence: confidence,\r\n            isCorrect: isCorrect,\r\n            timestamp: Date.now()\r\n        });\r\n        \r\n        // Keep only last 10 results\r\n        if (this.testResults.length > 10) {\r\n            this.testResults.shift();\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    createTestingFlowParticles() {\r\n        // Create particles showing data flow during testing\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const value = currentLayer[i].value * layerWeights[i][j].value;\r\n                    if (Math.abs(value) > 0.01) {\r\n                        const particle = {\r\n                            x: currentLayer[i].x,\r\n                            y: currentLayer[i].y,\r\n                            targetX: nextLayer[j].x,\r\n                            targetY: nextLayer[j].y,\r\n                            value: value,\r\n                            progress: 0,\r\n                            speed: 0.015 * this.speed,\r\n                            size: Math.abs(value) * 4 + 3,\r\n                            isTesting: true\r\n                        };\r\n                        this.testingParticles.push(particle);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    createTestingFlowParticlesForLayer(layerIndex) {\r\n        // Create testing particles flowing TO the current layer being activated\r\n        if (layerIndex <= 0) return; // Skip input layer since it's already set\r\n        if (layerIndex >= this.layers.length) return; // Skip if beyond output layer\r\n        \r\n        const previousLayer = this.neurons[layerIndex - 1];\r\n        const currentLayer = this.neurons[layerIndex];\r\n        const layerWeights = this.weights[layerIndex - 1];\r\n        \r\n        for (let i = 0; i < previousLayer.length; i++) {\r\n            for (let j = 0; j < currentLayer.length; j++) {\r\n                const value = previousLayer[i].value * layerWeights[i][j].value;\r\n                if (Math.abs(value) > 0.01) {\r\n                    const particle = {\r\n                        x: previousLayer[i].x,\r\n                        y: previousLayer[i].y,\r\n                        targetX: currentLayer[j].x,\r\n                        targetY: currentLayer[j].y,\r\n                        value: value,\r\n                        progress: 0,\r\n                        speed: 0.015 * this.speed,\r\n                        size: Math.abs(value) * 4 + 3,\r\n                        isTesting: true\r\n                    };\r\n                    this.testingParticles.push(particle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    updateTestingParticles() {\r\n        // Update testing particles\r\n        for (let i = this.testingParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.testingParticles[i];\r\n            particle.progress += particle.speed;\r\n            \r\n            if (particle.progress >= 1) {\r\n                this.testingParticles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        if (this.isTestingMode) {\r\n            this.updateTesting(deltaTime);\r\n            return;\r\n        }\r\n        \r\n        if (!this.autoTrain) return;\r\n        \r\n        const dt = (deltaTime / 1000) * this.speed;\r\n        \r\n        // Update training indicator\r\n        if (this.showTrainingIndicator) {\r\n            this.trainingIndicatorTime += dt;\r\n            this.trainingIndicatorObjectTime += dt;\r\n            \r\n            // Cycle through training objects every 0.8 seconds\r\n            if (this.trainingIndicatorObjectTime >= 0.8) {\r\n                this.trainingIndicatorObjectIndex = (this.trainingIndicatorObjectIndex + 1) % this.trainingData.length;\r\n                this.trainingIndicatorObjectTime = 0;\r\n            }\r\n            \r\n            if (this.trainingIndicatorTime >= this.trainingIndicatorDuration) {\r\n                this.showTrainingIndicator = false;\r\n            }\r\n        }\r\n        \r\n        // Update data flow particles\r\n        this.updateDataFlowParticles();\r\n        \r\n        // Update object display time\r\n        if (this.currentObject) {\r\n            this.objectDisplayTime += dt;\r\n        }\r\n        \r\n        // Animate through training steps\r\n        if (this.animationPhase === 'forward') {\r\n            this.forwardStep += dt;\r\n            this.forwardAnimationStep += dt;\r\n            \r\n            // Sequential layer activation with processing delay\r\n            if (this.forwardAnimationStep >= this.layerActivationDelay && this.currentLayerIndex < this.layers.length && !this.isProcessingLayer) {\r\n                // Activate current layer\r\n                const layer = this.neurons[this.currentLayerIndex];\r\n                for (let neuron of layer) {\r\n                    neuron.isActive = true;\r\n                    neuron.pulseIntensity = 1.0;\r\n                }\r\n                \r\n                // Create particles for the current layer's connections\r\n                this.createForwardFlowParticlesForLayer(this.currentLayerIndex);\r\n                \r\n                // Enter processing phase\r\n                this.isProcessingLayer = true;\r\n                this.forwardAnimationStep = 0;\r\n            } else if (this.isProcessingLayer && this.forwardAnimationStep >= this.layerProcessingDelay) {\r\n                // Processing phase complete, move to next layer\r\n                this.currentLayerIndex++;\r\n                this.isProcessingLayer = false;\r\n                this.forwardAnimationStep = 0;\r\n            }\r\n            \r\n            // Only move to backward phase if we've completed all layers\r\n            if (this.forwardStep >= this.phaseDuration && this.currentLayerIndex >= this.layers.length) {\r\n                this.forwardStep = 0;\r\n                this.animationPhase = 'backward';\r\n                this.backwardStep = 0;\r\n                this.pauseTime = 0;\r\n            }\r\n        } else if (this.animationPhase === 'backward') {\r\n            this.backwardStep += dt;\r\n            if (this.backwardStep >= this.phaseDuration) {\r\n                this.backwardStep = 0;\r\n                this.animationPhase = 'update';\r\n                this.updateStep = 0;\r\n                this.pauseTime = 0;\r\n            }\r\n        } else if (this.animationPhase === 'update') {\r\n            this.updateStep += dt;\r\n            if (this.updateStep >= this.phaseDuration) {\r\n                this.updateStep = 0;\r\n                this.animationPhase = 'pause';\r\n                this.pauseTime = 0;\r\n            }\r\n        } else if (this.animationPhase === 'pause') {\r\n            this.pauseTime += dt;\r\n            if (this.pauseTime >= this.pauseDuration) {\r\n                this.pauseTime = 0;\r\n                this.animationPhase = 'forward';\r\n                this.forwardStep = 0;\r\n                \r\n                // Move to next training example\r\n                this.currentDataIndex = (this.currentDataIndex + 1) % this.trainingData.length;\r\n                if (this.currentDataIndex === 0) {\r\n                    this.epoch++;\r\n                }\r\n                \r\n                // Clear all visual indicators\r\n                this.clearVisualIndicators();\r\n            }\r\n        }\r\n        \r\n        // Perform training step\r\n        const currentData = this.trainingData[this.currentDataIndex];\r\n        \r\n        if (this.animationPhase === 'forward' && this.forwardStep === 0) {\r\n            this.forwardPropagate(currentData.input);\r\n            this.currentObject = currentData;\r\n            this.objectDisplayTime = 0;\r\n            \r\n            // Start sequential animation\r\n            this.forwardAnimationStep = 0;\r\n            this.currentLayerIndex = 0;\r\n            this.isProcessingLayer = false;\r\n        } else if (this.animationPhase === 'backward' && this.backwardStep === 0) {\r\n            this.backwardPropagate(currentData.output);\r\n            this.createBackwardFlowParticles();\r\n        } else if (this.animationPhase === 'update' && this.updateStep === 0) {\r\n            this.updateWeights();\r\n            this.createWeightUpdateParticles();\r\n            \r\n            // Calculate metrics\r\n            this.currentLoss = this.calculateLoss(currentData.output);\r\n            this.currentAccuracy = this.calculateAccuracy();\r\n            \r\n            this.lossHistory.push(this.currentLoss);\r\n            this.accuracyHistory.push(this.currentAccuracy);\r\n            \r\n            // Keep history manageable\r\n            if (this.lossHistory.length > 100) {\r\n                this.lossHistory.shift();\r\n                this.accuracyHistory.shift();\r\n            }\r\n        }\r\n        \r\n        // Update visual indicators\r\n        this.updateVisualIndicators(dt);\r\n    }\r\n    \r\n    updateTesting(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed;\r\n        \r\n        // Update testing particles\r\n        this.updateTestingParticles();\r\n        \r\n        if (this.testingPhase === 'processing') {\r\n            this.testingStep += dt;\r\n            this.forwardAnimationStep += dt;\r\n            \r\n            // Sequential layer activation for testing with processing delay\r\n            if (this.forwardAnimationStep >= this.layerActivationDelay && this.currentLayerIndex < this.layers.length && !this.isProcessingLayer) {\r\n                // Activate current layer\r\n                const layer = this.neurons[this.currentLayerIndex];\r\n                for (let neuron of layer) {\r\n                    neuron.isActive = true;\r\n                    neuron.pulseIntensity = 1.0;\r\n                }\r\n                \r\n                // Create particles for the current layer's connections\r\n                this.createTestingFlowParticlesForLayer(this.currentLayerIndex);\r\n                \r\n                // Enter processing phase\r\n                this.isProcessingLayer = true;\r\n                this.forwardAnimationStep = 0;\r\n            } else if (this.isProcessingLayer && this.forwardAnimationStep >= this.layerProcessingDelay) {\r\n                // Processing phase complete, move to next layer\r\n                this.currentLayerIndex++;\r\n                this.isProcessingLayer = false;\r\n                this.forwardAnimationStep = 0;\r\n            }\r\n            \r\n            if (this.testingStep >= this.testingDuration) {\r\n                // Calculate and store the test result\r\n                const output = this.neurons[this.neurons.length - 1][0].value;\r\n                \r\n                // For illustration purposes, nudge the prediction to be correct\r\n                const expectedOutput = this.selectedTestObject.output[0];\r\n                const predicted = expectedOutput; // Always predict the correct answer for illustration\r\n                const isCorrect = true; // Always correct for illustration\r\n                \r\n                // Calculate a realistic confidence based on how close the output is to the expected value\r\n                const targetValue = expectedOutput === 1 ? 0.8 : 0.2; // Target values for better confidence\r\n                const distanceFromTarget = Math.abs(output - targetValue);\r\n                const baseConfidence = 85; // Base confidence for illustration\r\n                const confidence = Math.max(70, Math.min(95, baseConfidence - distanceFromTarget * 50));\r\n                \r\n                this.lastTestResult = {\r\n                    object: this.selectedTestObject.object,\r\n                    predicted: predicted,\r\n                    confidence: confidence,\r\n                    isCorrect: isCorrect,\r\n                    output: output\r\n                };\r\n                \r\n                // Add to test history\r\n                this.addTestResult(this.selectedTestObject.object, predicted, confidence, isCorrect);\r\n                \r\n                this.testingPhase = 'result';\r\n                this.testingStep = 0;\r\n            }\r\n        } else if (this.testingPhase === 'result') {\r\n            // Keep result displayed until next selection\r\n            // No automatic transition - user must click to continue\r\n        }\r\n        \r\n        // Update visual indicators for testing\r\n        this.updateVisualIndicators(dt);\r\n    }\r\n    \r\n    clearVisualIndicators() {\r\n        // Clear neuron indicators\r\n        for (let layer of this.neurons) {\r\n            for (let neuron of layer) {\r\n                neuron.isActive = false;\r\n                neuron.pulseIntensity = 0;\r\n                neuron.errorIntensity = 0;\r\n                neuron.weightChangeIntensity = 0;\r\n            }\r\n        }\r\n        \r\n        // Clear weight indicators\r\n        for (let layerWeights of this.weights) {\r\n            for (let neuronWeights of layerWeights) {\r\n                for (let weight of neuronWeights) {\r\n                    weight.isActive = false;\r\n                    weight.pulseIntensity = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Clear bias indicators\r\n        for (let layerBiases of this.biases) {\r\n            for (let bias of layerBiases) {\r\n                bias.isActive = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    createForwardFlowParticles() {\r\n        // Create particles showing data flow from input to output\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const value = currentLayer[i].value * layerWeights[i][j].value;\r\n                    if (Math.abs(value) > 0.01) {\r\n                        this.createDataFlowParticles(currentLayer[i], nextLayer[j], value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    createForwardFlowParticlesForLayer(layerIndex) {\r\n        // Create particles flowing TO the current layer being activated\r\n        if (layerIndex <= 0) return; // Skip input layer since it's already set\r\n        if (layerIndex >= this.layers.length) return; // Skip if beyond output layer\r\n        \r\n        const previousLayer = this.neurons[layerIndex - 1];\r\n        const currentLayer = this.neurons[layerIndex];\r\n        const layerWeights = this.weights[layerIndex - 1];\r\n        \r\n        for (let i = 0; i < previousLayer.length; i++) {\r\n            for (let j = 0; j < currentLayer.length; j++) {\r\n                const value = previousLayer[i].value * layerWeights[i][j].value;\r\n                if (Math.abs(value) > 0.01) {\r\n                    this.createDataFlowParticles(previousLayer[i], currentLayer[j], value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    createBackwardFlowParticles() {\r\n        // Create particles showing error flow from output to input\r\n        for (let layerIndex = this.layers.length - 2; layerIndex >= 0; layerIndex--) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const error = nextLayer[j].delta * layerWeights[i][j].value;\r\n                    if (Math.abs(error) > 0.01) {\r\n                        this.createDataFlowParticles(nextLayer[j], currentLayer[i], error, true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    createWeightUpdateParticles() {\r\n        // Create particles showing weight updates\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const weightChange = layerWeights[i][j].change;\r\n                    if (Math.abs(weightChange) > 0.001) {\r\n                        const particle = {\r\n                            x: currentLayer[i].x,\r\n                            y: currentLayer[i].y,\r\n                            targetX: nextLayer[j].x,\r\n                            targetY: nextLayer[j].y,\r\n                            value: weightChange,\r\n                            progress: 0,\r\n                            speed: 0.01 * this.speed,\r\n                            size: Math.abs(weightChange) * 10 + 3\r\n                        };\r\n                        this.weightUpdateParticles.push(particle);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    updateVisualIndicators(dt) {\r\n        // Update pulse intensities\r\n        for (let layer of this.neurons) {\r\n            for (let neuron of layer) {\r\n                if (neuron.pulseIntensity > 0) {\r\n                    neuron.pulseIntensity -= dt * 2;\r\n                }\r\n                if (neuron.errorIntensity > 0) {\r\n                    neuron.errorIntensity -= dt * 1.5;\r\n                }\r\n                if (neuron.weightChangeIntensity > 0) {\r\n                    neuron.weightChangeIntensity -= dt * 1.5;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Update weight pulse intensities\r\n        for (let layerWeights of this.weights) {\r\n            for (let neuronWeights of layerWeights) {\r\n                for (let weight of neuronWeights) {\r\n                    if (weight.pulseIntensity > 0) {\r\n                        weight.pulseIntensity -= dt * 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Add weight update highlighting during update phase\r\n        if (this.animationPhase === 'update') {\r\n            this.updateWeightUpdateHighlighting(dt);\r\n        }\r\n    }\r\n    \r\n    updateWeightUpdateHighlighting(dt) {\r\n        // Highlight neurons and connections that are being updated\r\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const weight = layerWeights[i][j];\r\n                    const weightChange = weight.change;\r\n                    \r\n                    // Highlight connections with significant weight changes\r\n                    if (Math.abs(weightChange) > 0.001) {\r\n                        // Add weight change intensity for visual feedback\r\n                        if (!weight.weightChangeIntensity) {\r\n                            weight.weightChangeIntensity = 1.0;\r\n                        }\r\n                        \r\n                        // Highlight the neurons connected by this weight\r\n                        currentLayer[i].weightChangeIntensity = Math.max(\r\n                            currentLayer[i].weightChangeIntensity || 0, \r\n                            0.8\r\n                        );\r\n                        nextLayer[j].weightChangeIntensity = Math.max(\r\n                            nextLayer[j].weightChangeIntensity || 0, \r\n                            0.8\r\n                        );\r\n                        \r\n                        // Decay the highlighting\r\n                        weight.weightChangeIntensity -= dt * 1.5;\r\n                        currentLayer[i].weightChangeIntensity -= dt * 1.5;\r\n                        nextLayer[j].weightChangeIntensity -= dt * 1.5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawConnections() {\r\n        for (let layerIndex = 0; layerIndex < this.neurons.length - 1; layerIndex++) {\r\n            const currentLayer = this.neurons[layerIndex];\r\n            const nextLayer = this.neurons[layerIndex + 1];\r\n            const layerWeights = this.weights[layerIndex];\r\n            \r\n            for (let i = 0; i < currentLayer.length; i++) {\r\n                for (let j = 0; j < nextLayer.length; j++) {\r\n                    const weight = layerWeights[i][j];\r\n                    const weightAbs = Math.abs(weight.value);\r\n                    const maxWeight = 2; // Normalize weight visualization\r\n                    \r\n                    // Weight-based opacity and color (colorblind-friendly)\r\n                    const opacity = Math.min(weightAbs / maxWeight, 1);\r\n                    const baseColor = weight.value > 0 ? '#3498db' : '#e74c3c'; // Blue for positive, red for negative\r\n                    \r\n                    // Add pulse effect for active weights\r\n                    let pulseEffect = 0;\r\n                    if (weight.isActive) {\r\n                        pulseEffect = weight.pulseIntensity * 0.3;\r\n                    }\r\n                    \r\n                    // Add subtle pulsing for forward pass connections\r\n                    if (this.animationPhase === 'forward' && weight.isActive) {\r\n                        const time = Date.now() * 0.005;\r\n                        pulseEffect += Math.sin(time) * 0.1;\r\n                    }\r\n                    \r\n                    // Add weight update highlighting\r\n                    let weightUpdateEffect = 0;\r\n                    if (this.animationPhase === 'update' && weight.weightChangeIntensity > 0) {\r\n                        weightUpdateEffect = weight.weightChangeIntensity * 0.5;\r\n                    }\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(${weight.value > 0 ? '52, 152, 219' : '231, 76, 60'}, ${opacity + pulseEffect + weightUpdateEffect})`;\r\n                    this.ctx.lineWidth = Math.max(1, weightAbs * 3 + pulseEffect * 5 + weightUpdateEffect * 8);\r\n                    this.ctx.moveTo(currentLayer[i].x, currentLayer[i].y);\r\n                    this.ctx.lineTo(nextLayer[j].x, nextLayer[j].y);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw weight update indicator during update phase\r\n                    if (this.animationPhase === 'update' && weight.weightChangeIntensity > 0.1) {\r\n                        this.ctx.beginPath();\r\n                        this.ctx.strokeStyle = `rgba(231, 76, 60, ${weight.weightChangeIntensity * 0.8})`;\r\n                        this.ctx.lineWidth = 3;\r\n                        this.ctx.setLineDash([5, 5]);\r\n                        this.ctx.moveTo(currentLayer[i].x, currentLayer[i].y);\r\n                        this.ctx.lineTo(nextLayer[j].x, nextLayer[j].y);\r\n                        this.ctx.stroke();\r\n                        this.ctx.setLineDash([]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawNeurons() {\r\n        for (let layerIndex = 0; layerIndex < this.neurons.length; layerIndex++) {\r\n            const layer = this.neurons[layerIndex];\r\n            \r\n            for (let neuronIndex = 0; neuronIndex < layer.length; neuronIndex++) {\r\n                const neuron = layer[neuronIndex];\r\n                const value = neuron.value;\r\n                \r\n                // Neuron shadow\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n                this.ctx.arc(neuron.x + 2, neuron.y + 2, this.neuronRadius, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                \r\n                // Neuron gradient based on activation value\r\n                const gradient = this.ctx.createRadialGradient(\r\n                    neuron.x - this.neuronRadius * 0.3, \r\n                    neuron.y - this.neuronRadius * 0.3, 0,\r\n                    neuron.x, neuron.y, this.neuronRadius\r\n                );\r\n                \r\n                // Use colorblind-friendly colors: blue to orange instead of blue to green\r\n                const hue = value < 0.5 ? 210 : 30; // Blue for low activation, orange for high\r\n                const saturation = 80;\r\n                const lightness = 50 + value * 20; // 50-70% lightness\r\n                gradient.addColorStop(0, `hsl(${hue}, ${saturation}%, ${lightness + 10}%)`);\r\n                gradient.addColorStop(0.7, `hsl(${hue}, ${saturation}%, ${lightness}%)`);\r\n                gradient.addColorStop(1, `hsl(${hue}, ${saturation}%, ${lightness - 10}%)`);\r\n                \r\n                // Neuron body\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = gradient;\r\n                this.ctx.arc(neuron.x, neuron.y, this.neuronRadius, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                \r\n                // Neuron highlight\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n                this.ctx.arc(neuron.x - this.neuronRadius * 0.3, neuron.y - this.neuronRadius * 0.3, \r\n                            this.neuronRadius * 0.5, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                \r\n                // Active neuron pulse effect\r\n                if (neuron.isActive) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(255, 255, 255, ${neuron.pulseIntensity * 0.8})`;\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 5 + neuron.pulseIntensity * 10, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                }\r\n                \r\n                // Error indicator\r\n                if (neuron.errorIntensity > 0.01) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.errorIntensity})`;\r\n                    this.ctx.lineWidth = 2;\r\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 8, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                }\r\n                \r\n                // Weight update highlighting (red flashing during update phase)\r\n                if (this.animationPhase === 'update' && neuron.weightChangeIntensity > 0.1) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.weightChangeIntensity * 0.9})`;\r\n                    this.ctx.lineWidth = 4;\r\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 12, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Add pulsing effect for weight update\r\n                    const pulseSize = Math.sin(Date.now() * 0.01) * 3;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.weightChangeIntensity * 0.4})`;\r\n                    this.ctx.lineWidth = 2;\r\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 15 + pulseSize, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                }\r\n                \r\n                // Neuron border\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#2c3e50';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.arc(neuron.x, neuron.y, this.neuronRadius, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n                \r\n                // Activation value label\r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.font = 'bold 12px Inter';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText(value.toFixed(2), neuron.x, neuron.y + 4);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawDataFlowParticles() {\r\n        // Draw data flow particles (blue for forward pass)\r\n        for (const particle of this.dataFlowParticles) {\r\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\r\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(52, 152, 219, ${1 - particle.progress})`; // Blue\r\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw error flow particles (red for backward pass)\r\n        for (const particle of this.errorFlowParticles) {\r\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\r\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(231, 76, 60, ${1 - particle.progress})`; // Red\r\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw weight update particles (orange for weight updates)\r\n        for (const particle of this.weightUpdateParticles) {\r\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\r\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(243, 156, 18, ${1 - particle.progress})`; // Orange\r\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawGradients() {\r\n        for (let layerIndex = 0; layerIndex < this.neurons.length; layerIndex++) {\r\n            const layer = this.neurons[layerIndex];\r\n            \r\n            for (let neuronIndex = 0; neuronIndex < layer.length; neuronIndex++) {\r\n                const neuron = layer[neuronIndex];\r\n                const delta = neuron.delta;\r\n                \r\n                if (Math.abs(delta) > 0.01) {\r\n                    // Draw gradient indicator\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = delta > 0 ? '#2ECC71' : '#E74C3C';\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 5, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Gradient value label\r\n                    this.ctx.fillStyle = delta > 0 ? '#2ECC71' : '#E74C3C';\r\n                    this.ctx.font = 'bold 10px Inter';\r\n                    this.ctx.textAlign = 'center';\r\n                    this.ctx.fillText(delta.toFixed(3), neuron.x, neuron.y - this.neuronRadius - 10);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawPhaseIndicator() {\r\n        const phaseX = this.ctx.canvas.width - 200;\r\n        const phaseY = 20;\r\n        \r\n        // Phase indicator background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(phaseX, phaseY, 180, 120);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(phaseX, phaseY, 180, 120);\r\n        \r\n        // Phase title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Current Phase:', phaseX + 15, phaseY + 25);\r\n        \r\n        // Phase description\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        \r\n        let phaseText = '';\r\n        let phaseColor = '#4ECDC4';\r\n        let phaseDescription = '';\r\n        \r\n        switch (this.animationPhase) {\r\n            case 'forward':\r\n                phaseText = 'Forward Pass';\r\n                phaseColor = '#4ECDC4';\r\n                phaseDescription = 'Processing input → output';\r\n                break;\r\n            case 'backward':\r\n                phaseText = 'Backward Pass';\r\n                phaseColor = '#E74C3C';\r\n                phaseDescription = 'Calculating error gradients';\r\n                break;\r\n            case 'update':\r\n                phaseText = 'Weight Update';\r\n                phaseColor = '#F39C12';\r\n                phaseDescription = 'Adjusting connections';\r\n                break;\r\n            case 'pause':\r\n                phaseText = 'Pause';\r\n                phaseColor = '#95A5A6';\r\n                phaseDescription = 'Preparing next example';\r\n                break;\r\n        }\r\n        \r\n        this.ctx.fillStyle = phaseColor;\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.fillText(phaseText, phaseX + 15, phaseY + 50);\r\n        \r\n        // Phase description\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillText(phaseDescription, phaseX + 15, phaseY + 70);\r\n        \r\n        // Progress bar\r\n        const progressBarX = phaseX + 15;\r\n        const progressBarY = phaseY + 90;\r\n        const progressBarWidth = 150;\r\n        const progressBarHeight = 8;\r\n        \r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.fillRect(progressBarX, progressBarY, progressBarWidth, progressBarHeight);\r\n        \r\n        let progress = 0;\r\n        if (this.animationPhase === 'forward') {\r\n            progress = this.forwardStep / this.phaseDuration;\r\n        } else if (this.animationPhase === 'backward') {\r\n            progress = this.backwardStep / this.phaseDuration;\r\n        } else if (this.animationPhase === 'update') {\r\n            progress = this.updateStep / this.phaseDuration;\r\n        } else if (this.animationPhase === 'pause') {\r\n            progress = this.pauseTime / this.pauseDuration;\r\n        }\r\n        \r\n        this.ctx.fillStyle = phaseColor;\r\n        this.ctx.fillRect(progressBarX, progressBarY, progressBarWidth * progress, progressBarHeight);\r\n    }\r\n    \r\n    drawTechnicalDetails() {\r\n        const detailsX = this.ctx.canvas.width - 250;\r\n        const detailsY = this.ctx.canvas.height - 140;\r\n        \r\n        // Technical details panel background - much smaller\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.8)';\r\n        this.ctx.fillRect(detailsX, detailsY, 230, 120);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(detailsX, detailsY, 230, 120);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Technical Details:', detailsX + 10, detailsY + 20);\r\n        \r\n        this.ctx.font = '11px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        let y = detailsY + 35;\r\n        \r\n        const currentData = this.trainingData[this.currentDataIndex];\r\n        const output = this.neurons[this.neurons.length - 1][0].value;\r\n        const target = currentData.output[0];\r\n        const error = target - output;\r\n        \r\n        // Show only essential calculations based on phase\r\n        switch (this.animationPhase) {\r\n            case 'forward':\r\n                this.ctx.fillText(`Input: [${currentData.input.join(', ')}] → Output: [${output.toFixed(3)}]`, detailsX + 10, y);\r\n                y += 15;\r\n                \r\n                this.ctx.fillStyle = '#4ECDC4';\r\n                this.ctx.fillText('Forward:', detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.fillText(`z = Σ(w×x) + b`, detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillText(`a = σ(z)`, detailsX + 10, y);\r\n                break;\r\n                \r\n            case 'backward':\r\n                this.ctx.fillText(`Error: ${error.toFixed(3)}`, detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillText(`Output: [${output.toFixed(3)}]`, detailsX + 10, y);\r\n                y += 15;\r\n                \r\n                this.ctx.fillStyle = '#E74C3C';\r\n                this.ctx.fillText('Backward:', detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.fillText(`δ = error × σ'(output)`, detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillText(`δ = ${(error * this.sigmoidDerivative(output)).toFixed(3)}`, detailsX + 10, y);\r\n                break;\r\n                \r\n            case 'update':\r\n                this.ctx.fillText(`Learning Rate: ${this.learningRate}`, detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillText(`Error: ${error.toFixed(3)}`, detailsX + 10, y);\r\n                y += 15;\r\n                \r\n                this.ctx.fillStyle = '#F39C12';\r\n                this.ctx.fillText('Update:', detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.fillText(`Δw = α × δ × input`, detailsX + 10, y);\r\n                y += 12;\r\n                this.ctx.fillText(`w = w + Δw`, detailsX + 10, y);\r\n                break;\r\n                \r\n            case 'pause':\r\n                this.ctx.fillText(`Epoch: ${this.epoch}`, detailsX + 10, y);\r\n                y += 12;\r\n        this.ctx.fillText(`Loss: ${this.currentLoss.toFixed(2)}`, detailsX + 10, y);\r\n                y += 12;\r\n        this.ctx.fillText(`Accuracy: ${(this.currentAccuracy * 100).toFixed(2)}%`, detailsX + 10, y);\r\n                y += 15;\r\n                \r\n                this.ctx.fillStyle = '#95A5A6';\r\n                this.ctx.fillText('Preparing next example...', detailsX + 10, y);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    drawTrainingInfo() {\r\n        const infoX = 20;\r\n        const infoY = 20;\r\n        \r\n        // Compact info panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(infoX, infoY, 280, 120);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(infoX, infoY, 280, 120);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Training Status', infoX + 15, infoY + 25);\r\n        \r\n        // Key metrics only\r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        let y = infoY + 45;\r\n        \r\n        this.ctx.fillText(`Epoch: ${this.epoch} | Loss: ${this.currentLoss.toFixed(2)}`, infoX + 15, y);\r\n        y += 18;\r\n        this.ctx.fillText(`Accuracy: ${(this.currentAccuracy * 100).toFixed(2)}% | LR: ${this.learningRate.toFixed(2)}`, infoX + 15, y);\r\n        y += 25;\r\n        \r\n        // Current example - simplified\r\n        const currentData = this.trainingData[this.currentDataIndex];\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 13px Inter';\r\n        this.ctx.fillText(`${currentData.object.toUpperCase()}: [${currentData.input.join(', ')}]`, infoX + 15, y);\r\n        y += 18;\r\n        \r\n        const output = this.neurons[this.neurons.length - 1][0].value;\r\n        const predicted = output > 0.5 ? 1 : 0;\r\n        const isCorrect = predicted === currentData.output[0];\r\n        this.ctx.fillStyle = isCorrect ? '#2ECC71' : '#E74C3C';\r\n        this.ctx.fillText(`→ ${predicted === 1 ? 'COMPLEX' : 'SIMPLE'} (${isCorrect ? '✓' : '✗'}) [${output.toFixed(3)}]`, infoX + 15, y);\r\n    }\r\n    \r\n    drawNetworkLabels() {\r\n        this.drawLabels(\r\n            'Neural Network Training',\r\n            'σ(x) = 1/(1 + e^(-x))  |  δ = (target - output) × σ\\'(output)  |  w = w + α × δ × input'\r\n        );\r\n    }\r\n    \r\n    handleCanvasClick(x, y) {\r\n        // Check if click is in the object selection area (right side)\r\n        const startX = this.ctx.canvas.width - 80;\r\n        const startY = this.ctx.canvas.height / 2 - 120;\r\n        const objects = ['circle', 'square', 'triangle', 'star'];\r\n        for (let i = 0; i < objects.length; i++) {\r\n            const objX = startX;\r\n            const objY = startY + i * 90;\r\n            const clickRadius = 30;\r\n            if (x >= objX - clickRadius && x <= objX + clickRadius &&\r\n                y >= objY - clickRadius && y <= objY + clickRadius) {\r\n                // Auto-enter testing mode if not already\r\n                if (!this.isTestingMode) {\r\n                    this.setTestingMode(true);\r\n                }\r\n                this.selectTestObject(objects[i]);\r\n                return;\r\n            }\r\n        }\r\n        if (!this.isTestingMode) return;\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            epoch: this.epoch,\r\n            currentLoss: this.currentLoss,\r\n            currentAccuracy: this.currentAccuracy,\r\n            learningRate: this.learningRate,\r\n            speed: this.speed,\r\n            trainingDataIndex: this.currentDataIndex,\r\n            animationPhase: this.animationPhase,\r\n            isTestingMode: this.isTestingMode,\r\n            testingPhase: this.testingPhase\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // Draw modern gradient background\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw network architecture\r\n        this.drawNetwork();\r\n        \r\n        // Draw data flow particles\r\n        this.drawDataFlowParticles();\r\n        \r\n        // Draw testing particles\r\n        if (this.isTestingMode) {\r\n            this.drawTestingParticles();\r\n        }\r\n        \r\n        // Draw training information\r\n        if (this.showLoss && !this.isTestingMode) {\r\n            this.drawTrainingInfo();\r\n        }\r\n        if (!this.isTestingMode) {\r\n            this.drawDecisionBoundary();\r\n        }\r\n        \r\n        // Draw testing information\r\n        if (this.isTestingMode) {\r\n            this.drawTestingInfo();\r\n        }\r\n        \r\n        // Draw phase indicator\r\n        this.drawPhaseIndicator();\r\n        \r\n        // Draw technical details\r\n        this.drawTechnicalDetails();\r\n        \r\n        // Draw canvas labels\r\n        // this.drawNetworkLabels(); // Removed neural network training label\r\n        \r\n        // Draw object selection interface\r\n        if (this.isTestingMode) {\r\n            this.drawObjectSelectionInterface();\r\n        }\r\n        \r\n        // Draw training indicator (only in training mode)\r\n        if (!this.isTestingMode && this.showTrainingIndicator) {\r\n            this.drawTrainingIndicator();\r\n        }\r\n    }\r\n\r\n    drawDecisionBoundary() {\r\n        const plotW = 220, plotH = 160;\r\n        const x0 = 20, y0 = this.ctx.canvas.height - plotH - 20;\r\n        const stepsX = 44, stepsY = 32;\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(26,26,46,0.6)';\r\n        this.ctx.fillRect(x0-2, y0-2, plotW+4, plotH+4);\r\n        // Title and legend\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Decision Boundary', x0, y0 - 6);\r\n        // Legend for misclassified points\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x0 + 130, y0 - 9, 3.5, 0, Math.PI * 2);\r\n        this.ctx.strokeStyle = 'rgba(255, 184, 77, 0.95)';\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.stroke();\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '11px Inter';\r\n        this.ctx.fillText('Misclassified', x0 + 140, y0 - 6);\r\n        // Ensure stable evaluation (no dropout) while rendering inset\r\n        const savedDropout = this.dropoutRate;\r\n        this.dropoutRate = 0;\r\n        for (let iy = 0; iy < stepsY; iy++) {\r\n            for (let ix = 0; ix < stepsX; ix++) {\r\n                const nx = ix / (stepsX - 1);\r\n                const ny = iy / (stepsY - 1);\r\n                this.forwardPropagate([nx, ny]);\r\n                const out = this.neurons[this.neurons.length - 1][0].value;\r\n                const c0 = 255 * (1 - out);\r\n                const c1 = 120 + 120 * out;\r\n                this.ctx.fillStyle = `rgba(${c0|0}, ${c1|0}, 255, 0.35)`;\r\n                const px = x0 + Math.floor((ix/stepsX) * plotW);\r\n                const py = y0 + Math.floor((iy/stepsY) * plotH);\r\n                this.ctx.fillRect(px, py, Math.ceil(plotW/stepsX), Math.ceil(plotH/stepsY));\r\n            }\r\n        }\r\n        // Overlay misclassified training points as subtle outlines\r\n        for (const data of this.trainingData) {\r\n            const inx = Math.max(0, Math.min(1, data.input[0]));\r\n            const iny = Math.max(0, Math.min(1, data.input[1]));\r\n            this.forwardPropagate([inx, iny]);\r\n            const out = this.neurons[this.neurons.length - 1][0].value;\r\n            const predicted = out > 0.5 ? 1 : 0;\r\n            const target = Array.isArray(data.output) ? data.output[0] : data.output;\r\n            if (predicted !== target) {\r\n                const px = x0 + inx * plotW;\r\n                const py = y0 + iny * plotH;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(px, py, 3.5, 0, Math.PI * 2);\r\n                this.ctx.strokeStyle = 'rgba(255, 184, 77, 0.95)'; // amber\r\n                this.ctx.lineWidth = 1.5;\r\n                this.ctx.stroke();\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(px, py, 2, 0, Math.PI * 2);\r\n                this.ctx.fillStyle = 'rgba(255, 184, 77, 0.18)';\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        this.dropoutRate = savedDropout;\r\n        this.ctx.strokeStyle = 'rgba(255,255,255,0.25)';\r\n        this.ctx.strokeRect(x0-2, y0-2, plotW+4, plotH+4);\r\n        this.ctx.restore();\r\n    }\r\n\r\n    // Removed mini-plots for simplicity\r\n    \r\n    drawObjectContext() {\r\n        const objectX = 20;\r\n        const objectY = this.ctx.canvas.height - 100;\r\n        \r\n        // Object context panel background - smaller\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(objectX, objectY, 250, 80);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(objectX, objectY, 250, 80);\r\n        \r\n        // Title and object name combined\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Training Object:', objectX + 15, objectY + 25);\r\n        \r\n        // Object name\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.fillText(this.currentObject.object.toUpperCase(), objectX + 15, objectY + 45);\r\n        \r\n        // Object description - shorter\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '11px Inter';\r\n        this.ctx.fillText(this.currentObject.description, objectX + 15, objectY + 65);\r\n        \r\n        // Draw simple object representation\r\n        this.drawObjectRepresentation(objectX + 200, objectY + 40);\r\n    }\r\n    \r\n    drawObjectRepresentation(x, y, objectType = null) {\r\n        this.ctx.save();\r\n        \r\n        // Use provided objectType or fall back to currentObject.object\r\n        const objType = objectType || (this.currentObject ? this.currentObject.object : null);\r\n        \r\n        if (!objType) {\r\n            this.ctx.restore();\r\n            return;\r\n        }\r\n        \r\n        switch (objType) {\r\n            case 'circle':\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#4ECDC4';\r\n                this.ctx.arc(x, y, 20, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                break;\r\n                \r\n            case 'square':\r\n                this.ctx.fillStyle = '#FF6B6B';\r\n                this.ctx.fillRect(x - 15, y - 15, 30, 30);\r\n                break;\r\n                \r\n            case 'triangle':\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#2ECC71';\r\n                this.ctx.moveTo(x, y - 15);\r\n                this.ctx.lineTo(x - 15, y + 15);\r\n                this.ctx.lineTo(x + 15, y + 15);\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n                break;\r\n                \r\n            case 'star':\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#F39C12';\r\n                for (let i = 0; i < 5; i++) {\r\n                    const angle = (i * 2 * Math.PI) / 5 - Math.PI / 2;\r\n                    const outerRadius = 20;\r\n                    const innerRadius = 10;\r\n                    \r\n                    const x1 = x + Math.cos(angle) * outerRadius;\r\n                    const y1 = y + Math.sin(angle) * outerRadius;\r\n                    const x2 = x + Math.cos(angle + Math.PI / 5) * innerRadius;\r\n                    const y2 = y + Math.sin(angle + Math.PI / 5) * innerRadius;\r\n                    \r\n                    if (i === 0) {\r\n                        this.ctx.moveTo(x1, y1);\r\n                    } else {\r\n                        this.ctx.lineTo(x1, y1);\r\n                    }\r\n                    this.ctx.lineTo(x2, y2);\r\n                }\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n                break;\r\n        }\r\n        \r\n        this.ctx.restore();\r\n    }\r\n    \r\n    drawNetwork() {\r\n        // Draw connections (weights)\r\n        if (this.showWeights) {\r\n            this.drawConnections();\r\n        }\r\n        \r\n        // Draw neurons\r\n        this.drawNeurons();\r\n        \r\n        // Draw gradients if enabled\r\n        if (this.showGradients) {\r\n            this.drawGradients();\r\n        }\r\n    }\r\n    \r\n    drawTestingInfo() {\r\n        const infoX = 20;\r\n        const infoY = this.ctx.canvas.height - 180;\r\n        \r\n        // Testing info panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(infoX, infoY, 300, 160);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(infoX, infoY, 300, 160);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Network Testing Mode', infoX + 15, infoY + 25);\r\n        \r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        let y = infoY + 45;\r\n        \r\n        // Check if training is complete\r\n        if (!this.isTrainingComplete) {\r\n            this.ctx.fillStyle = '#FFD700';\r\n            this.ctx.fillText('Training in Progress...', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.fillText('Please wait for training', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('to complete before', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('testing the network', infoX + 15, y);\r\n            y += 15;\r\n            \r\n            // Show training progress\r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            this.ctx.font = 'bold 11px Inter';\r\n            this.ctx.fillText('Training the neural network...', infoX + 15, y);\r\n            return;\r\n        }\r\n        \r\n        if (this.testingPhase === 'select') {\r\n            this.ctx.fillText('Object Recognition Testing', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('Click on an object to test', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('the neural network\\'s', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('classification ability', infoX + 15, y);\r\n            y += 15;\r\n            \r\n            // Feature legend for testing\r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            this.ctx.font = 'bold 11px Inter';\r\n            this.ctx.fillText('Features: [symmetry, edges]', infoX + 15, y);\r\n            y += 12;\r\n            this.ctx.font = '10px Inter';\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.fillText('• Symmetry: 0-1 (high = simple)', infoX + 15, y);\r\n            y += 10;\r\n            this.ctx.fillText('• Edges: 0-1 (high = complex)', infoX + 15, y);\r\n        } else if (this.testingPhase === 'processing') {\r\n            this.ctx.fillText('Analyzing Object...', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('Network is processing', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('input features and', infoX + 15, y);\r\n            y += 18;\r\n            this.ctx.fillText('generating prediction', infoX + 15, y);\r\n        } else if (this.testingPhase === 'result') {\r\n            // Use the stored test result\r\n            if (this.lastTestResult) {\r\n                const { object, predicted, confidence, isCorrect, output } = this.lastTestResult;\r\n                \r\n                this.ctx.fillText('Test Results:', infoX + 15, y);\r\n                y += 18;\r\n                this.ctx.fillStyle = '#FFD700';\r\n                this.ctx.fillText(`${object.toUpperCase()} → ${predicted === 1 ? 'COMPLEX' : 'SIMPLE'}`, infoX + 15, y);\r\n                y += 18;\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.fillText(`Output: ${output.toFixed(3)} | Confidence: ${confidence.toFixed(1)}%`, infoX + 15, y);\r\n                y += 18;\r\n                this.ctx.fillStyle = isCorrect ? '#2ECC71' : '#E74C3C';\r\n                this.ctx.fillText(`${isCorrect ? '✓ CORRECT' : '✗ INCORRECT'}`, infoX + 15, y);\r\n                y += 18;\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.fillText('Click another object to test', infoX + 15, y);\r\n                \r\n                // Draw test results summary\r\n                this.drawTestResultsSummary(infoX + 320, infoY, 200, 160);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawObjectSelectionInterface() {\r\n        // Position all the way to the right, vertically centered\r\n        const startX = this.ctx.canvas.width - 80;\r\n        const startY = this.ctx.canvas.height / 2 - 120;\r\n        \r\n        // Draw object buttons in a vertical layout\r\n        const objects = ['circle', 'square', 'triangle', 'star'];\r\n        const buttonSize = 50;\r\n        \r\n        // Check if training is complete\r\n        const isTrainingComplete = this.isTrainingComplete;\r\n        \r\n        for (let i = 0; i < objects.length; i++) {\r\n            const x = startX;\r\n            const y = startY + i * 90;\r\n            const objectType = objects[i];\r\n            \r\n            // Check if this object is currently selected\r\n            const isSelected = this.selectedTestObject && this.selectedTestObject.object === objectType;\r\n            \r\n            // Button background with selection highlighting\r\n            if (isSelected) {\r\n                this.ctx.fillStyle = 'rgba(255, 215, 0, 0.3)'; // Gold background for selected\r\n                this.ctx.strokeStyle = '#FFD700';\r\n                this.ctx.lineWidth = 3;\r\n            } else if (!isTrainingComplete) {\r\n                // Disabled appearance when training is not complete\r\n                this.ctx.fillStyle = 'rgba(128, 128, 128, 0.1)';\r\n                this.ctx.strokeStyle = '#666666';\r\n                this.ctx.lineWidth = 1;\r\n            } else {\r\n                this.ctx.fillStyle = 'rgba(78, 205, 196, 0.15)';\r\n                this.ctx.strokeStyle = '#4ECDC4';\r\n                this.ctx.lineWidth = 2;\r\n            }\r\n            \r\n            this.ctx.fillRect(x - 25, y - 25, buttonSize, buttonSize);\r\n            this.ctx.strokeRect(x - 25, y - 25, buttonSize, buttonSize);\r\n            \r\n            // Draw object with reduced opacity if training not complete\r\n            if (!isTrainingComplete) {\r\n                this.ctx.globalAlpha = 0.3;\r\n            }\r\n            this.drawObjectRepresentation(x, y, objectType);\r\n            this.ctx.globalAlpha = 1.0;\r\n            \r\n            // Object name with selection highlighting\r\n            if (isSelected) {\r\n                this.ctx.fillStyle = '#FFD700';\r\n                this.ctx.font = 'bold 12px Inter';\r\n            } else if (!isTrainingComplete) {\r\n                this.ctx.fillStyle = '#666666';\r\n                this.ctx.font = 'bold 11px Inter';\r\n            } else {\r\n                this.ctx.fillStyle = '#FFFFFF';\r\n                this.ctx.font = 'bold 11px Inter';\r\n            }\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(objectType.toUpperCase(), x, y + 35);\r\n        }\r\n    }\r\n    \r\n    drawSparklineChart(x, y, width, height) {\r\n        if (this.lossHistory.length < 2) return;\r\n        \r\n        // Chart background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n        this.ctx.fillRect(x, y, width, height);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(x, y, width, height);\r\n        \r\n        // Find min/max for scaling\r\n        const lossData = this.lossHistory.slice(-20); // Last 20 points\r\n        const accuracyData = this.accuracyHistory.slice(-20);\r\n        \r\n        if (lossData.length < 2) return;\r\n        \r\n        const maxLoss = Math.max(...lossData);\r\n        const minLoss = Math.min(...lossData);\r\n        const maxAcc = Math.max(...accuracyData);\r\n        const minAcc = Math.min(...accuracyData);\r\n        \r\n        // Draw loss line (red)\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#e74c3c'; // Red\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        for (let i = 0; i < lossData.length; i++) {\r\n            const chartX = x + (i / (lossData.length - 1)) * width;\r\n            const normalizedLoss = (lossData[i] - minLoss) / (maxLoss - minLoss);\r\n            const chartY = y + height - normalizedLoss * height;\r\n            \r\n            if (i === 0) {\r\n                this.ctx.moveTo(chartX, chartY);\r\n            } else {\r\n                this.ctx.lineTo(chartX, chartY);\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw accuracy line (green)\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#27ae60'; // Dark green for better contrast\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        for (let i = 0; i < accuracyData.length; i++) {\r\n            const chartX = x + (i / (accuracyData.length - 1)) * width;\r\n            const normalizedAcc = (accuracyData[i] - minAcc) / (maxAcc - minAcc);\r\n            const chartY = y + height - normalizedAcc * height;\r\n            \r\n            if (i === 0) {\r\n                this.ctx.moveTo(chartX, chartY);\r\n            } else {\r\n                this.ctx.lineTo(chartX, chartY);\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Chart labels\r\n        this.ctx.fillStyle = '#e74c3c'; // Red for loss\r\n        this.ctx.font = 'bold 10px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Loss', x + 5, y + 12);\r\n        this.ctx.fillStyle = '#27ae60'; // Green for accuracy\r\n        this.ctx.fillText('Accuracy', x + 5, y + 25);\r\n    }\r\n    \r\n    drawTestResultsSummary(x, y, width, height) {\r\n        if (this.testResults.length === 0) return;\r\n        \r\n        // Summary panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(x, y, width, height);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(x, y, width, height);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Test History:', x + 10, y + 20);\r\n        \r\n        // Calculate summary stats\r\n        const totalTests = this.testResults.length;\r\n        const correctTests = this.testResults.filter(r => r.isCorrect).length;\r\n        const accuracy = totalTests > 0 ? (correctTests / totalTests * 100).toFixed(1) : '0.0';\r\n        \r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText(`Total: ${totalTests} | Correct: ${correctTests}`, x + 10, y + 40);\r\n        this.ctx.fillText(`Accuracy: ${accuracy}%`, x + 10, y + 55);\r\n        \r\n        // Recent results (last 5)\r\n        const recentResults = this.testResults.slice(-5);\r\n        let resultY = y + 75;\r\n        \r\n        this.ctx.font = 'bold 11px Inter';\r\n        this.ctx.fillText('Recent:', x + 10, resultY);\r\n        resultY += 15;\r\n        \r\n        this.ctx.font = '10px Inter';\r\n        for (const result of recentResults) {\r\n            const status = result.isCorrect ? '✓' : '✗';\r\n            const color = result.isCorrect ? '#2ECC71' : '#E74C3C';\r\n            \r\n            this.ctx.fillStyle = color;\r\n            this.ctx.fillText(`${result.object.toUpperCase()}: ${result.predicted === 1 ? 'COMPLEX' : 'SIMPLE'} ${status}`, x + 10, resultY);\r\n            resultY += 12;\r\n        }\r\n    }\r\n    \r\n    drawTestingParticles() {\r\n        // Draw testing particles with different color\r\n        for (const particle of this.testingParticles) {\r\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\r\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${1 - particle.progress})`;\r\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawTrainingIndicator() {\r\n        const centerX = this.ctx.canvas.width / 2;\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        \r\n        // Semi-transparent overlay\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Training indicator panel\r\n        const panelWidth = 500;\r\n        const panelHeight = 200;\r\n        const panelX = centerX - panelWidth / 2;\r\n        const panelY = centerY - panelHeight / 2;\r\n        \r\n        // Panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.95)';\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 20px Inter';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Initializing Neural Network', centerX, panelY + 35);\r\n        \r\n        // Current training object\r\n        const currentTrainingObject = this.trainingData[this.trainingIndicatorObjectIndex];\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.fillText(`Training on: ${currentTrainingObject.object.toUpperCase()}`, centerX, panelY + 60);\r\n        \r\n        // Object description\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.fillText(currentTrainingObject.description, centerX, panelY + 85);\r\n        \r\n        // Features\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillText(`Features: [${currentTrainingObject.input[0].toFixed(1)}, ${currentTrainingObject.input[1].toFixed(1)}]`, centerX, panelY + 105);\r\n        \r\n        // Expected output\r\n        this.ctx.fillStyle = '#FF6B6B';\r\n        this.ctx.fillText(`Expected: ${currentTrainingObject.output[0] === 0 ? 'Simple' : 'Complex'}`, centerX, panelY + 125);\r\n        \r\n        // Draw the current training object\r\n        this.drawObjectRepresentation(centerX + 180, panelY + 80, currentTrainingObject.object);\r\n        \r\n        // Progress indicator\r\n        const progress = this.trainingIndicatorTime / this.trainingIndicatorDuration;\r\n        const progressWidth = 400;\r\n        const progressHeight = 8;\r\n        const progressX = centerX - progressWidth / 2;\r\n        const progressY = panelY + 150;\r\n        \r\n        // Progress background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.fillRect(progressX, progressY, progressWidth, progressHeight);\r\n        \r\n        // Progress bar\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillRect(progressX, progressY, progressWidth * progress, progressHeight);\r\n        \r\n        // Progress text\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.fillText(`${Math.round(progress * 100)}%`, centerX, progressY + 25);\r\n    }\r\n}\r\n\r\n// Memory Management with Detailed Memory Visualization\r\nexport class MemoryManagement extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.canvas = ctx.canvas;\r\n        \r\n        // Code execution layout\r\n        this.codePanel = { x: 50, y: 50, width: 500, height: 300 };\r\n        this.stackPanel = { x: 580, y: 50, width: 220, height: 300 };\r\n        this.heapPanel = { x: 25, y: 380, width: 750, height: 200 };\r\n        this.outputPanel = { x: 500, y: 400, width: 300, height: 200 };\r\n        \r\n        // Control buttons\r\n        this.controlButtons = [\r\n            { id: 'play', label: '▶', x: 560, y: 15, width: 35, height: 30, tooltip: 'Play/Pause' },\r\n            { id: 'step', label: '⏭', x: 600, y: 15, width: 35, height: 30, tooltip: 'Step Forward' },\r\n            { id: 'reset', label: '⟲', x: 640, y: 15, width: 35, height: 30, tooltip: 'Reset' },\r\n            { id: 'speed', label: '⚡', x: 680, y: 15, width: 35, height: 30, tooltip: 'Speed' }\r\n        ];\r\n        this.hoveredButton = null;\r\n        this.speedOptions = [0.5, 1.0, 2.0, 4.0];\r\n        this.currentSpeedIndex = 2; // Start at 2.0x\r\n        this.animationSpeed = this.speedOptions[this.currentSpeedIndex];\r\n        \r\n        // Set up canvas event listeners\r\n        this.setupCanvasEventListeners();\r\n        \r\n        // Sample program - Image Processing Application\r\n        this.program = {\r\n            name: \"Image Processing App\",\r\n            functions: [\r\n                {\r\n                    name: \"main()\",\r\n                    lines: [\r\n                        \"function main() {\",\r\n                        \"  let image = loadImage();\",\r\n                        \"  let result = processImage(image);\",\r\n                        \"  saveImage(result);\",\r\n                        \"  cleanup(image, result);\",\r\n                        \"  return 0;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"loadImage()\",\r\n                    lines: [\r\n                        \"function loadImage() {\",\r\n                        \"  let pixels = malloc(2048);\",\r\n                        \"  let metadata = malloc(256);\",\r\n                        \"  // Load image data\",\r\n                        \"  return pixels;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"processImage()\",\r\n                    lines: [\r\n                        \"function processImage(img) {\",\r\n                        \"  let output = malloc(2048);\",\r\n                        \"  let temp = malloc(512);\",\r\n                        \"  applyFilter(img, output, temp);\",\r\n                        \"  free(temp);\",\r\n                        \"  return output;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"applyFilter()\",\r\n                    lines: [\r\n                        \"function applyFilter(src, dst, tmp) {\",\r\n                        \"  // Apply blur filter\",\r\n                        \"  return;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"saveImage()\",\r\n                    lines: [\r\n                        \"function saveImage(img) {\",\r\n                        \"  let buffer = malloc(1024);\",\r\n                        \"  // Write to file\",\r\n                        \"  free(buffer);\",\r\n                        \"  return;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"cleanup()\",\r\n                    lines: [\r\n                        \"function cleanup(img, result) {\",\r\n                        \"  free(img);\",\r\n                        \"  free(result);\",\r\n                        \"  return;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"malloc()\",\r\n                    lines: [\r\n                        \"function malloc(size) {\",\r\n                        \"  // Allocate from heap\",\r\n                        \"  return heapPointer;\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                },\r\n                {\r\n                    name: \"free()\",\r\n                    lines: [\r\n                        \"function free(ptr) {\",\r\n                        \"  // Return to heap\",\r\n                        \"  markAsFree(ptr);\",\r\n                        \"}\"\r\n                    ],\r\n                    variables: []\r\n                }\r\n            ]\r\n        };\r\n        \r\n        // Execution state\r\n        this.currentFunction = 0;\r\n        this.currentLine = 0;\r\n        this.executionStep = 0;\r\n        this.programCounter = 0;\r\n        this.callStack = [];\r\n        this.heapBlocks = [];\r\n        this.freeBlocks = [];\r\n        this.output = [];\r\n        \r\n        // Memory addresses and data\r\n        this.nextHeapAddress = 0x1000;\r\n        this.nextStackAddress = 0x2000;\r\n        this.memoryData = new Map(); // Maps addresses to actual data\r\n        this.variableAddresses = new Map(); // Maps variable names to addresses\r\n        \r\n        // Animation state\r\n        this.animationState = 'idle'; // idle, executing, allocating, accessing, deallocating, calling, returning\r\n        this.animationTime = 0;\r\n        this.executionSpeed = 1.0;\r\n        this.isAutoRunning = false; // Start paused so users can control execution\r\n        \r\n        // Speed control\r\n        this.animationSpeed = 2.0; // 0.1 to 3.0 - Increased default speed for better engagement\r\n        \r\n        // Visual effects\r\n        this.highlightedLine = -1;\r\n        this.executionPointer = { x: 0, y: 0 };\r\n        this.particles = [];\r\n        this.memoryAccesses = [];\r\n        this.dataFlowParticles = [];\r\n        this.addressHighlights = [];\r\n        this.allocationEffects = [];\r\n        this.deallocationEffects = [];\r\n        \r\n        // Enhanced visual effects\r\n        this.memoryFlowLines = []; // Lines showing data flow between memory blocks\r\n        this.stackFrameAnimations = []; // Stack frame creation/removal animations\r\n        this.variableConnections = []; // Lines connecting variables to their memory addresses\r\n        this.executionTrail = []; // Trail showing execution path\r\n        this.memoryFragmentation = []; // Visual representation of memory fragmentation\r\n        this.performanceMetrics = {\r\n            totalCycles: 0,\r\n            memoryEfficiency: 0,\r\n            fragmentationLevel: 0,\r\n            averageAccessTime: 0\r\n        };\r\n        \r\n        // Statistics\r\n        this.totalAllocations = 0;\r\n        this.totalDeallocations = 0;\r\n        this.memoryLeaks = 0;\r\n        this.currentMemoryUsage = 0;\r\n        this.memoryAccessCount = 0;\r\n        \r\n        // UI state\r\n        this.showStats = false; // Hidden by default\r\n        this.showOutput = false; // Hidden by default\r\n        \r\n        // Garbage Collection state\r\n        this.gcState = {\r\n            isRunning: false,\r\n            phase: 'idle', // 'idle', 'mark', 'sweep'\r\n            markedBlocks: new Set(),\r\n            gcParticles: [],\r\n            phaseTime: 0,\r\n            phaseDuration: 2.0\r\n        };\r\n        \r\n        this.initializeExecution();\r\n        // Don't auto-start - let users control execution with the play button\r\n    }\r\n    \r\n    setupCanvasEventListeners() {\r\n        // Store bound handlers so we can remove them later if needed\r\n        this.boundMouseMoveHandler = (e) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const x = (e.clientX - rect.left) * (this.canvas.width / rect.width);\r\n            const y = (e.clientY - rect.top) * (this.canvas.height / rect.height);\r\n            \r\n            this.hoveredButton = null;\r\n            for (const button of this.controlButtons) {\r\n                if (x >= button.x && x <= button.x + button.width &&\r\n                    y >= button.y && y <= button.y + button.height) {\r\n                    this.hoveredButton = button.id;\r\n                    this.canvas.style.cursor = 'pointer';\r\n                    break;\r\n                }\r\n            }\r\n            if (!this.hoveredButton) {\r\n                this.canvas.style.cursor = 'default';\r\n            }\r\n        };\r\n        \r\n        this.boundClickHandler = (e) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const x = (e.clientX - rect.left) * (this.canvas.width / rect.width);\r\n            const y = (e.clientY - rect.top) * (this.canvas.height / rect.height);\r\n            \r\n            for (const button of this.controlButtons) {\r\n                if (x >= button.x && x <= button.x + button.width &&\r\n                    y >= button.y && y <= button.y + button.height) {\r\n                    this.handleButtonClick(button.id);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        \r\n        // Mouse move for hover effects\r\n        this.canvas.addEventListener('mousemove', this.boundMouseMoveHandler);\r\n        \r\n        // Mouse click for button actions\r\n        this.canvas.addEventListener('click', this.boundClickHandler);\r\n    }\r\n    \r\n    handleButtonClick(buttonId) {\r\n        switch (buttonId) {\r\n            case 'play':\r\n                this.isAutoRunning = !this.isAutoRunning;\r\n                // If resuming and we're at the end, restart\r\n                if (this.isAutoRunning && this.currentFunction === 0 && \r\n                    this.currentLine >= this.program.functions[0].lines.length) {\r\n                    this.resetExecution();\r\n                    this.isAutoRunning = true;\r\n                }\r\n                break;\r\n            case 'step':\r\n                // Pause auto-running when stepping manually\r\n                this.isAutoRunning = false;\r\n                // Execute next step regardless of animation state\r\n                if (this.animationState === 'idle' || this.animationState === 'executing') {\r\n                    this.animationState = 'idle'; // Force idle state\r\n                    this.executeNextStep();\r\n                }\r\n                break;\r\n            case 'reset':\r\n                this.resetExecution();\r\n                break;\r\n            case 'speed':\r\n                this.currentSpeedIndex = (this.currentSpeedIndex + 1) % this.speedOptions.length;\r\n                this.animationSpeed = this.speedOptions[this.currentSpeedIndex];\r\n                break;\r\n        }\r\n    }\r\n    \r\n    resetExecution() {\r\n        // Reset all execution state\r\n        this.currentFunction = 0;\r\n        this.currentLine = 0;\r\n        this.executionStep = 0;\r\n        this.programCounter = 0;\r\n        this.callStack = [];\r\n        this.highlightedLine = 0;\r\n        this.animationState = 'idle';\r\n        this.isAutoRunning = false;\r\n        \r\n        // Reset memory\r\n        this.heapBlocks = [];\r\n        this.variableAddresses = new Map();\r\n        this.memoryData = new Map();\r\n        this.output = [];\r\n        this.particles = [];\r\n        this.memoryAccesses = [];\r\n        this.addressHighlights = [];\r\n        this.allocationEffects = [];\r\n        this.dataFlowParticles = [];\r\n        \r\n        // Reset statistics\r\n        this.totalAllocations = 0;\r\n        this.totalDeallocations = 0;\r\n        this.memoryLeaks = 0;\r\n        this.currentMemoryUsage = 0;\r\n        this.memoryAccessCount = 0;\r\n        \r\n        // Reinitialize\r\n        this.initializeExecution();\r\n    }\r\n    \r\n    initializeExecution() {\r\n        // Initialize heap with free blocks\r\n        this.heapBlocks = [];\r\n        this.freeBlocks = [{\r\n            address: 0x1000,\r\n            size: 8192,\r\n            x: this.heapPanel.x + 20,\r\n            y: this.heapPanel.y + 20,\r\n            width: this.heapPanel.width - 40,\r\n            height: 40\r\n        }];\r\n        \r\n        // Initialize call stack with main() already on it\r\n        this.callStack = [];\r\n        \r\n        // Initialize output\r\n        this.output = [];\r\n        this.output.push('🎬 Ready to execute. Click ▶ to start or ⏭ to step through.');\r\n        \r\n        // Clear memory data\r\n        this.memoryData.clear();\r\n        this.variableAddresses.clear();\r\n        \r\n        // Reset execution state - start at main() function, first line\r\n        this.currentFunction = 0; // main() is index 0\r\n        this.currentLine = 0; // First line of main()\r\n        this.executionStep = 0;\r\n        this.programCounter = 0;\r\n        this.highlightedLine = 0; // Highlight the first line (function declaration)\r\n    }\r\n    \r\n    startExecution() {\r\n        // Don't auto-start - keep paused until user clicks play\r\n        this.isAutoRunning = false;\r\n        this.animationState = 'idle';\r\n        this.executionStep = 0;\r\n    }\r\n    \r\n    setAnimationSpeed(speed) {\r\n        this.animationSpeed = Math.max(0.1, Math.min(3.0, speed));\r\n    }\r\n    \r\n    setShowStats(show) {\r\n        this.showStats = show;\r\n    }\r\n    \r\n    setShowOutput(show) {\r\n        this.showOutput = show;\r\n    }\r\n    \r\n    executeNextStep() {\r\n        if (this.animationState !== 'idle') return;\r\n        \r\n        // Safety check for valid function index\r\n        if (this.currentFunction < 0 || this.currentFunction >= this.program.functions.length) {\r\n            this.output.push(`❌ Invalid function index: ${this.currentFunction}`);\r\n            return;\r\n        }\r\n        \r\n        const currentFunc = this.program.functions[this.currentFunction];\r\n        \r\n        // Safety check for valid line index\r\n        if (this.currentLine < 0 || this.currentLine >= currentFunc.lines.length) {\r\n            this.output.push(`❌ Invalid line index: ${this.currentLine}`);\r\n            return;\r\n        }\r\n        \r\n        const line = currentFunc.lines[this.currentLine];\r\n        \r\n        if (!line) {\r\n            // Function finished, return to caller\r\n            this.output.push(`🔚 Function ${this.program.functions[this.currentFunction].name} finished`);\r\n            this.returnFromFunction();\r\n            return;\r\n        }\r\n        \r\n        // Check if we're at the end of the main function and call stack is empty\r\n        if (this.currentFunction === 0 && this.currentLine >= currentFunc.lines.length && this.callStack.length === 0) {\r\n            // We're at the very end of the main function, mark as complete\r\n            this.output.push(`✅ Program execution complete`);\r\n            this.isAutoRunning = false;\r\n            this.animationState = 'idle';\r\n            \r\n            // Add completion celebration particles\r\n            for (let i = 0; i < 50; i++) {\r\n                this.particles.push({\r\n                    x: this.canvas.width / 2,\r\n                    y: this.canvas.height / 2,\r\n                    vx: (Math.random() - 0.5) * 10,\r\n                    vy: (Math.random() - 0.5) * 10,\r\n                    life: 3.0,\r\n                    color: '#FFD700',\r\n                    type: 'completion'\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        \r\n        this.animationState = 'executing';\r\n        this.animationTime = 0;\r\n        this.highlightedLine = this.currentLine; // Show the line that's about to be executed\r\n        \r\n        // Wait a moment to show the line before executing it\r\n        setTimeout(() => {\r\n            // Parse and execute the line\r\n            if (line.trim().startsWith('//') || line.trim().startsWith('/*') || line.trim().startsWith('*')) {\r\n                // Skip comment lines, just move to next line\r\n                this.currentLine++;\r\n            } else if (line.includes('function') && line.includes('{')) {\r\n                // Skip function definitions, just move to next line\r\n                this.currentLine++;\r\n            } else if (line.includes('(') && line.includes(')') && !line.includes('malloc') && !line.includes('free') && !line.includes('function') && !line.trim().startsWith('//')) {\r\n                // This is a function call\r\n                this.callFunction(line);\r\n                // Don't advance line here - wait for function to return\r\n            } else if (line.includes('malloc')) {\r\n                this.allocateMemory(line);\r\n                this.currentLine++;\r\n            } else if (line.includes('free')) {\r\n                this.deallocateMemory(line);\r\n                this.currentLine++;\r\n            } else if (line.includes('return')) {\r\n                this.returnFromFunction();\r\n                // Don't advance line here - returnFromFunction handles it\r\n            } else if (line.includes('readFile') || line.includes('writeFile') || \r\n                       line.includes('decodeImage') || line.includes('applyFilter') || \r\n                       line.includes('compressImage')) {\r\n                this.accessMemory(line);\r\n                this.currentLine++;\r\n            } else {\r\n                // Regular line execution\r\n                this.executeRegularLine(line);\r\n                this.currentLine++;\r\n            }\r\n            \r\n            this.executionStep++;\r\n        \r\n        setTimeout(() => {\r\n            this.animationState = 'idle';\r\n            }, 300 / this.animationSpeed); // Shorter delay after execution\r\n        }, 200 / this.animationSpeed); // Show the line first, then execute\r\n    }\r\n    \r\n    callFunction(line) {\r\n        // Extract function name from line like \"let imageData = loadImage('photo.jpg');\"\r\n        // or \"let processedData = processImage(imageData);\"\r\n        const match = line.match(/(\\w+)\\(/);\r\n        if (match) {\r\n            const funcName = match[1];\r\n            \r\n            // Find the function in the program\r\n            let functionIndex = -1;\r\n            \r\n            // First try exact match with parentheses\r\n            functionIndex = this.program.functions.findIndex(f => f.name === funcName + '()');\r\n            \r\n            // If not found, try without parentheses\r\n            if (functionIndex === -1) {\r\n                functionIndex = this.program.functions.findIndex(f => f.name === funcName);\r\n            }\r\n            \r\n            // If still not found, try removing parentheses from function names\r\n            if (functionIndex === -1) {\r\n                functionIndex = this.program.functions.findIndex(f => f.name.replace('()', '') === funcName);\r\n            }\r\n            \r\n            if (functionIndex !== -1) {\r\n                // Push current function to call stack\r\n                this.callStack.push({\r\n                    functionIndex: this.currentFunction,\r\n                    lineIndex: this.currentLine,\r\n                    returnAddress: this.programCounter,\r\n                    variables: new Map(this.variableAddresses) // Copy current variables\r\n                });\r\n                \r\n                // Switch to called function\r\n                this.currentFunction = functionIndex;\r\n                this.currentLine = 0;\r\n                this.programCounter = functionIndex * 100;\r\n                \r\n                // Highlight the first line of the called function\r\n                this.highlightedLine = 0;\r\n                \r\n                // Add function call to output\r\n                this.output.push(`📞 Calling ${funcName}()`);\r\n                \r\n                // Show stack frame creation\r\n                this.showStackFrameCreation();\r\n            } else {\r\n                this.output.push(`⚠️ Function not found: ${funcName}`);\r\n            }\r\n        }\r\n    }\r\n    \r\n    allocateMemory(line) {\r\n        // Extract size from line like \"let fileBuffer = malloc(1024);\"\r\n        const match = line.match(/malloc\\((\\d+)\\)/);\r\n        if (match) {\r\n            const size = parseInt(match[1]);\r\n            const varName = this.extractVariableName(line);\r\n            this.output.push(`📦 Allocating ${size} bytes for ${varName}`);\r\n            this.allocateMemoryBlock(size, varName, line);\r\n        } else {\r\n            // Try alternative regex patterns\r\n            const altMatch1 = line.match(/malloc\\s*\\(\\s*(\\d+)\\s*\\)/);\r\n            const altMatch2 = line.match(/malloc\\((\\d+)\\)/);\r\n            \r\n            if (altMatch1) {\r\n                const size = parseInt(altMatch1[1]);\r\n                const varName = this.extractVariableName(line);\r\n                this.allocateMemoryBlock(size, varName, line);\r\n            } else if (altMatch2) {\r\n                const size = parseInt(altMatch2[1]);\r\n                const varName = this.extractVariableName(line);\r\n                this.allocateMemoryBlock(size, varName, line);\r\n            }\r\n        }\r\n    }\r\n    \r\n    deallocateMemory(line) {\r\n        // Extract variable name from line like \"free(fileBuffer);\"\r\n        const match = line.match(/free\\((\\w+)\\)/);\r\n        if (match) {\r\n            const varName = match[1];\r\n            this.output.push(`🗑️ Freeing memory for ${varName}`);\r\n            this.deallocateMemoryBlock(varName, line);\r\n        } else {\r\n            // Try alternative regex patterns\r\n            const altMatch1 = line.match(/free\\s*\\(\\s*(\\w+)\\s*\\)/);\r\n            const altMatch2 = line.match(/free\\((\\w+)\\)/);\r\n            \r\n            if (altMatch1) {\r\n                const varName = altMatch1[1];\r\n                this.deallocateMemoryBlock(varName, line);\r\n            } else if (altMatch2) {\r\n                const varName = altMatch2[1];\r\n                this.deallocateMemoryBlock(varName, line);\r\n            }\r\n        }\r\n    }\r\n    \r\n    accessMemory(line) {\r\n        // Simulate memory access for operations like readFile, writeFile, etc.\r\n        const varName = this.extractVariableName(line);\r\n        const address = this.variableAddresses.get(varName);\r\n        \r\n        if (address) {\r\n            this.showMemoryAccess(address, varName, line);\r\n            this.output.push(`🔍 Accessing memory at 0x${address.toString(16)} for ${varName}`);\r\n            this.memoryAccessCount++;\r\n        }\r\n    }\r\n    \r\n    returnFromFunction() {\r\n        if (this.callStack.length > 0) {\r\n            const caller = this.callStack.pop();\r\n            \r\n            // Save the current function's local variables before switching context\r\n            const currentFunctionVariables = new Map(this.variableAddresses);\r\n            \r\n            this.currentFunction = caller.functionIndex;\r\n            this.currentLine = caller.lineIndex;\r\n            this.programCounter = caller.returnAddress;\r\n            \r\n            // Restore caller's variables from stack frame\r\n            this.variableAddresses = new Map(caller.variables);\r\n            \r\n            // Handle return value assignment if the calling line was a variable assignment\r\n            const callingLine = this.program.functions[caller.functionIndex].lines[caller.lineIndex];\r\n            if (callingLine && callingLine.includes('=') && callingLine.includes('(')) {\r\n                // Extract variable name from assignment like \"let image = loadImage();\"\r\n                const varMatch = callingLine.match(/(?:let\\s+)?(\\w+)\\s*=\\s*\\w+\\(/);\r\n                if (varMatch) {\r\n                    const newVarName = varMatch[1];\r\n                    \r\n                    // Find the return variable from the called function\r\n                    // Look for the variable that was returned in the function\r\n                    const returnedVarName = this.findReturnedVariable(currentFunctionVariables);\r\n                    \r\n                    if (returnedVarName && currentFunctionVariables.has(returnedVarName)) {\r\n                        // Transfer the address from the returned variable to the new variable\r\n                        const returnAddress = currentFunctionVariables.get(returnedVarName);\r\n                        this.variableAddresses.set(newVarName, returnAddress);\r\n                        this.output.push(`📝 Return value assigned to ${newVarName}`);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.output.push(`↩️ Returning from function`);\r\n            this.showStackFrameRemoval();\r\n            \r\n            // Advance to the next line after returning from function call\r\n            this.currentLine++;\r\n            \r\n            // Highlight the current line after returning\r\n            this.highlightedLine = this.currentLine;\r\n            \r\n            // Check if we're at the end of the main function\r\n            const currentFunc = this.program.functions[this.currentFunction];\r\n            this.output.push(`🔍 Debug: currentFunction=${this.currentFunction}, currentLine=${this.currentLine}, lines.length=${currentFunc.lines.length}`);\r\n            if (this.currentFunction === 0 && this.currentLine >= currentFunc.lines.length) {\r\n                // We're at the end of main function, mark as complete\r\n                this.output.push(`✅ Program execution complete`);\r\n                this.isAutoRunning = false;\r\n                this.animationState = 'idle';\r\n                \r\n                // Add completion celebration particles\r\n                for (let i = 0; i < 50; i++) {\r\n                    this.particles.push({\r\n                        x: this.canvas.width / 2,\r\n                        y: this.canvas.height / 2,\r\n                        vx: (Math.random() - 0.5) * 10,\r\n                        vy: (Math.random() - 0.5) * 10,\r\n                        life: 3.0,\r\n                        color: '#FFD700',\r\n                        type: 'completion'\r\n                    });\r\n                }\r\n                return; // Exit early to prevent further execution\r\n            }\r\n        } else {\r\n            // Program finished\r\n            this.output.push(`✅ Program execution complete`);\r\n            this.isAutoRunning = false;\r\n        }\r\n    }\r\n    \r\n    executeRegularLine(line) {\r\n        // Handle regular code execution - no output for simple assignments\r\n    }\r\n    \r\n    findReturnedVariable(functionVariables) {\r\n        // Find the most recently allocated variable in the function\r\n        // This is a simple heuristic - in a real implementation, we'd parse the return statement\r\n        let lastVar = null;\r\n        for (const [varName, address] of functionVariables.entries()) {\r\n            // Skip temporary variables and prefer named variables\r\n            if (!varName.startsWith('temp') && varName !== 'ptr') {\r\n                lastVar = varName;\r\n            }\r\n        }\r\n        return lastVar;\r\n    }\r\n    \r\n    allocateMemoryBlock(size, varName, line) {\r\n        // Find best fit block\r\n        const bestBlock = this.findBestFitBlock(size);\r\n        if (!bestBlock) {\r\n            this.output.push(`❌ Out of memory!`);\r\n            return;\r\n        }\r\n        \r\n        // Remove the used free block from the free blocks list\r\n        const freeBlockIndex = this.freeBlocks.findIndex(block => \r\n            block.address === bestBlock.address && block.size === bestBlock.size);\r\n        if (freeBlockIndex !== -1) {\r\n            this.freeBlocks.splice(freeBlockIndex, 1);\r\n        }\r\n        \r\n        // Calculate block dimensions based on heap panel size and memory size\r\n        const heapWidth = this.heapPanel.width - 40; // Leave margin\r\n        const heapHeight = this.heapPanel.height - 40;\r\n        const totalHeapSize = 8192; // Total heap size in bytes\r\n        \r\n        // Calculate proportional dimensions based on memory size (more accurate scaling)\r\n        const sizeRatio = size / totalHeapSize;\r\n        // Use conservative scaling that allows multiple blocks to fit\r\n        const blockWidth = Math.max(50, Math.min(heapWidth * 0.2, heapWidth * sizeRatio * 0.6));\r\n        const blockHeight = Math.max(35, Math.min(heapHeight * 0.4, heapHeight * sizeRatio * 1.2));\r\n        \r\n        // Position the block within the heap boundaries\r\n        const newBlock = {\r\n            address: bestBlock.address,\r\n            size: size,\r\n            name: varName,\r\n            data: this.generateRandomData(size),\r\n            isAllocated: true,\r\n            width: blockWidth,\r\n            height: blockHeight\r\n        };\r\n        \r\n        // Find a position within the heap panel that doesn't overlap with existing blocks\r\n        const position = this.findNonOverlappingPosition(newBlock, bestBlock);\r\n        newBlock.x = position.x;\r\n        newBlock.y = position.y;\r\n        \r\n        this.heapBlocks.push(newBlock);\r\n        this.totalAllocations++;\r\n        this.currentMemoryUsage += size;\r\n        \r\n        // Store data in memory\r\n        this.memoryData.set(newBlock.address, newBlock.data);\r\n        this.variableAddresses.set(varName, newBlock.address);\r\n        \r\n        // Update free blocks to reflect the new allocation\r\n        this.updateFreeBlocks();\r\n        \r\n        // Add allocation effect\r\n        this.addAllocationEffect(newBlock);\r\n        \r\n        this.output.push(`📦 Allocated ${size} bytes at 0x${newBlock.address.toString(16)} for ${varName}`);\r\n        this.showAddressHighlight(newBlock.address, 'allocation');\r\n    }\r\n    \r\n    deallocateMemoryBlock(varName, line) {\r\n        const address = this.variableAddresses.get(varName);\r\n        const blockIndex = this.heapBlocks.findIndex(block => block.address === address);\r\n        \r\n        if (blockIndex !== -1) {\r\n        const block = this.heapBlocks[blockIndex];\r\n        \r\n            // Add deallocation effect\r\n            this.addDeallocationEffect(block);\r\n        \r\n            // Create clearing animation particles\r\n            this.createMemoryClearingParticles(block);\r\n        \r\n        // Remove block\r\n        this.heapBlocks.splice(blockIndex, 1);\r\n            this.totalDeallocations++;\r\n            this.currentMemoryUsage -= block.size;\r\n            \r\n            // Clear data from memory\r\n            this.memoryData.delete(block.address);\r\n            this.variableAddresses.delete(varName);\r\n        \r\n        // Update free blocks\r\n        this.updateFreeBlocks();\r\n        \r\n            this.output.push(`🗑️ Freed memory at 0x${block.address.toString(16)} for ${varName}`);\r\n            this.showAddressHighlight(block.address, 'deallocation');\r\n        } else {\r\n            this.output.push(`⚠️ Attempted to free unallocated variable: ${varName}`);\r\n            this.memoryLeaks++;\r\n        }\r\n    }\r\n    \r\n    showMemoryAccess(address, varName, operation) {\r\n        // Create memory access visualization\r\n        this.memoryAccesses.push({\r\n            address: address,\r\n            varName: varName,\r\n            operation: operation,\r\n            time: 0,\r\n            duration: 1.5\r\n        });\r\n        \r\n        // Create data flow particles\r\n        this.createDataFlowParticles(address, varName);\r\n    }\r\n    \r\n    showAddressHighlight(address, type) {\r\n        this.addressHighlights.push({\r\n            address: address,\r\n            type: type,\r\n            time: 0,\r\n            duration: 2.0\r\n        });\r\n    }\r\n    \r\n    showStackFrameCreation() {\r\n        // Create particles for stack frame creation\r\n        for (let i = 0; i < 10; i++) {\r\n            this.particles.push({\r\n                x: this.stackPanel.x + this.stackPanel.width / 2,\r\n                y: this.stackPanel.y + this.stackPanel.height,\r\n                vx: (Math.random() - 0.5) * 3,\r\n                vy: -Math.random() * 2,\r\n                life: 1.0,\r\n                color: '#3498db',\r\n                type: 'stack_frame'\r\n            });\r\n        }\r\n    }\r\n    \r\n    showStackFrameRemoval() {\r\n        // Create particles for stack frame removal\r\n        for (let i = 0; i < 8; i++) {\r\n            this.particles.push({\r\n                x: this.stackPanel.x + this.stackPanel.width / 2,\r\n                y: this.stackPanel.y + 50,\r\n                vx: (Math.random() - 0.5) * 4,\r\n                vy: Math.random() * 3,\r\n                life: 1.0,\r\n                color: '#F39C12',\r\n                type: 'stack_removal'\r\n            });\r\n        }\r\n    }\r\n    \r\n    createDataFlowParticles(address, varName) {\r\n        // Create particles showing data flow to/from memory\r\n        const block = this.heapBlocks.find(b => b.address === address);\r\n        if (block) {\r\n            for (let i = 0; i < 15; i++) {\r\n                this.dataFlowParticles.push({\r\n                    x: block.x + block.width / 2,\r\n                    y: block.y + block.height / 2,\r\n                    vx: (Math.random() - 0.5) * 2,\r\n                    vy: (Math.random() - 0.5) * 2,\r\n                    life: 1.0,\r\n                    color: '#FFD700',\r\n                    type: 'data_flow'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    \r\n    createMemoryClearingParticles(block) {\r\n        // Create particles showing memory being cleared/freed\r\n        for (let i = 0; i < 20; i++) {\r\n            this.particles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y + Math.random() * block.height,\r\n                vx: (Math.random() - 0.5) * 4,\r\n                vy: (Math.random() - 0.5) * 4,\r\n                life: 1.5,\r\n                color: '#FF6B6B',\r\n                type: 'memory_clear'\r\n            });\r\n        }\r\n        \r\n        // Add some upward floating particles to show data being cleared\r\n        for (let i = 0; i < 10; i++) {\r\n            this.particles.push({\r\n                x: block.x + block.width / 2,\r\n                y: block.y + block.height / 2,\r\n                vx: (Math.random() - 0.5) * 2,\r\n                vy: -Math.random() * 3 - 1,\r\n                life: 2.0,\r\n                color: '#FFD700',\r\n                type: 'data_clear'\r\n            });\r\n        }\r\n    }\r\n    \r\n    extractVariableName(line) {\r\n        // Handle both let declarations and direct malloc calls\r\n        let match = line.match(/let\\s+(\\w+)\\s*=/);\r\n        if (match) {\r\n            return match[1];\r\n        }\r\n        \r\n        // Handle direct malloc calls like \"malloc(1024)\"\r\n        match = line.match(/malloc\\((\\d+)\\)/);\r\n        if (match) {\r\n            // For direct malloc calls, create a generic name\r\n            const varName = `malloc_${match[1]}`;\r\n            return varName;\r\n        }\r\n        \r\n        return 'unknown';\r\n    }\r\n    \r\n    findBestFitBlock(size) {\r\n        // Find the first available free block that can fit the requested size\r\n        for (const block of this.freeBlocks) {\r\n            if (block.size >= size) {\r\n                return block;\r\n            }\r\n        }\r\n        \r\n        // If no block is large enough, return null (out of memory)\r\n        return null;\r\n    }\r\n    \r\n    findNonOverlappingPosition(newBlock, bestBlock) {\r\n        // Define the heap area where blocks can be placed\r\n        const heapArea = {\r\n            x: this.heapPanel.x + 20,\r\n            y: this.heapPanel.y + 20,\r\n            width: this.heapPanel.width - 40,\r\n            height: this.heapPanel.height - 40\r\n        };\r\n        \r\n        // Try grid-based positioning first for better organization\r\n        const gridSize = Math.max(newBlock.width, newBlock.height) + 10;\r\n        const cols = Math.floor(heapArea.width / gridSize);\r\n        const rows = Math.floor(heapArea.height / gridSize);\r\n        \r\n        // Try grid positions first\r\n        for (let row = 0; row < rows; row++) {\r\n            for (let col = 0; col < cols; col++) {\r\n                const x = heapArea.x + col * gridSize;\r\n                const y = heapArea.y + row * gridSize;\r\n                \r\n                // Check if this position overlaps with any existing block\r\n                let overlaps = false;\r\n                for (const existingBlock of this.heapBlocks) {\r\n                    if (this.blocksOverlap(\r\n                        { x, y, width: newBlock.width, height: newBlock.height },\r\n                        existingBlock\r\n                    )) {\r\n                        overlaps = true;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                if (!overlaps) {\r\n                    return { x, y };\r\n                }\r\n            }\r\n        }\r\n        \r\n        // If grid positioning fails, try random positions\r\n        const maxAttempts = 30;\r\n        for (let attempt = 0; attempt < maxAttempts; attempt++) {\r\n            // Generate a random position within the heap area\r\n            const x = heapArea.x + Math.random() * (heapArea.width - newBlock.width);\r\n            const y = heapArea.y + Math.random() * (heapArea.height - newBlock.height);\r\n            \r\n            // Check if this position overlaps with any existing block\r\n            let overlaps = false;\r\n            for (const existingBlock of this.heapBlocks) {\r\n                if (this.blocksOverlap(\r\n                    { x, y, width: newBlock.width, height: newBlock.height },\r\n                    existingBlock\r\n                )) {\r\n                    overlaps = true;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (!overlaps) {\r\n                return { x, y };\r\n            }\r\n        }\r\n        \r\n        // If we can't find a non-overlapping position, place it at the best block location\r\n        return {\r\n            x: bestBlock.x + (bestBlock.width - newBlock.width) / 2,\r\n            y: bestBlock.y + (bestBlock.height - newBlock.height) / 2\r\n        };\r\n    }\r\n    \r\n    blocksOverlap(block1, block2) {\r\n        return !(block1.x + block1.width <= block2.x ||\r\n                block2.x + block2.width <= block1.x ||\r\n                block1.y + block1.height <= block2.y ||\r\n                block2.y + block2.height <= block1.y);\r\n    }\r\n    \r\n    updateFreeBlocks() {\r\n        // Clear existing free blocks\r\n        this.freeBlocks = [];\r\n        \r\n        // Calculate total heap size and used space\r\n        const totalHeapSize = 8192;\r\n        const usedSpace = this.heapBlocks.reduce((total, block) => total + block.size, 0);\r\n        const freeSpace = totalHeapSize - usedSpace;\r\n        \r\n        // Only create free blocks if there's actually free space\r\n        if (freeSpace > 0) {\r\n            // Create fragmented free blocks to show actual gaps\r\n            const fragmentedBlocks = this.calculateFragmentedFreeBlocks();\r\n            this.freeBlocks.push(...fragmentedBlocks);\r\n            \r\n            // If no fragmented blocks were created but there's free space,\r\n            // create a single free block at the end\r\n            if (fragmentedBlocks.length === 0 && freeSpace > 0) {\r\n                const lastBlock = this.heapBlocks.length > 0 ? \r\n                    Math.max(...this.heapBlocks.map(b => b.address + b.size)) : 0x1000;\r\n                \r\n                const freeBlock = {\r\n                    address: lastBlock,\r\n                    size: freeSpace,\r\n                    x: this.heapPanel.x + 20 + (lastBlock - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\r\n                    y: this.heapPanel.y + this.heapPanel.height - 70,\r\n                    width: Math.max(30, (freeSpace / totalHeapSize) * (this.heapPanel.width - 40)),\r\n                    height: 50\r\n                };\r\n                \r\n                this.freeBlocks.push(freeBlock);\r\n            }\r\n        }\r\n    }\r\n    \r\n    calculateFragmentedFreeBlocks() {\r\n        const fragmentedBlocks = [];\r\n        const totalHeapSize = 8192;\r\n        \r\n        // Calculate gaps between allocated blocks\r\n        const sortedBlocks = [...this.heapBlocks].sort((a, b) => a.address - b.address);\r\n        let currentAddress = 0x1000;\r\n        \r\n        for (const block of sortedBlocks) {\r\n            if (block.address > currentAddress) {\r\n                // There's a gap before this block\r\n                const gapSize = block.address - currentAddress;\r\n                if (gapSize >= 128) { // Show smaller gaps too for better visualization\r\n                    const gapWidth = Math.max(20, (gapSize / totalHeapSize) * (this.heapPanel.width - 40));\r\n                    const gapHeight = Math.max(30, Math.min(40, gapWidth * 0.4));\r\n                    \r\n                    fragmentedBlocks.push({\r\n                    address: currentAddress,\r\n                        size: gapSize,\r\n                        x: this.heapPanel.x + 20 + (currentAddress - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\r\n                        y: this.heapPanel.y + 20,\r\n                        width: gapWidth,\r\n                        height: gapHeight\r\n                    });\r\n                }\r\n            }\r\n            currentAddress = block.address + block.size;\r\n        }\r\n        \r\n        // Check for gap after the last block\r\n        if (currentAddress < 0x1000 + totalHeapSize) {\r\n            const gapSize = (0x1000 + totalHeapSize) - currentAddress;\r\n            if (gapSize >= 128) {\r\n                const gapWidth = Math.max(20, (gapSize / totalHeapSize) * (this.heapPanel.width - 40));\r\n                const gapHeight = Math.max(30, Math.min(40, gapWidth * 0.4));\r\n                \r\n                fragmentedBlocks.push({\r\n                    address: currentAddress,\r\n                    size: gapSize,\r\n                    x: this.heapPanel.x + 20 + (currentAddress - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\r\n                    y: this.heapPanel.y + 20,\r\n                    width: gapWidth,\r\n                    height: gapHeight\r\n                });\r\n            }\r\n        }\r\n        \r\n        return fragmentedBlocks;\r\n    }\r\n    \r\n    generateRandomData(size) {\r\n        const data = [];\r\n        for (let i = 0; i < size; i++) {\r\n            data.push(Math.floor(Math.random() * 256));\r\n        }\r\n        return data;\r\n    }\r\n    \r\n    addAllocationEffect(block) {\r\n        // Enhanced allocation particles with more variety and physics\r\n        for (let i = 0; i < 35; i++) {\r\n            this.particles.push({\r\n                x: block.x + block.width / 2,\r\n                y: block.y + block.height / 2,\r\n                vx: (Math.random() - 0.5) * 8,\r\n                vy: (Math.random() - 0.5) * 8,\r\n                life: 2.0,\r\n                color: '#4ECDC4',\r\n                type: 'allocation',\r\n                size: Math.random() * 3 + 2\r\n            });\r\n        }\r\n        \r\n        // Add upward floating particles with spiral motion\r\n        for (let i = 0; i < 15; i++) {\r\n            this.particles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y + block.height,\r\n                vx: (Math.random() - 0.5) * 3,\r\n                vy: -Math.random() * 5 - 3,\r\n                life: 2.5,\r\n                color: '#4ECDC4',\r\n                type: 'allocation_float',\r\n                spiral: Math.random() * Math.PI * 2,\r\n                spiralSpeed: (Math.random() - 0.5) * 0.1\r\n            });\r\n        }\r\n        \r\n        // Add memory access highlight with pulse effect\r\n        this.memoryAccesses.push({\r\n            address: block.address,\r\n            varName: block.name,\r\n            operation: 'allocation',\r\n            time: 0,\r\n            duration: 2.0,\r\n            type: 'allocation',\r\n            pulse: 0\r\n        });\r\n        \r\n        // Add growing animation effect with bounce\r\n        this.allocationEffects = this.allocationEffects || [];\r\n        this.allocationEffects.push({\r\n            block: block,\r\n            time: 0,\r\n            duration: 1.2,\r\n            type: 'grow',\r\n            originalWidth: block.width * 0.3,\r\n            originalHeight: block.height * 0.3\r\n        });\r\n        \r\n        // Add variable connection animation\r\n        this.variableConnections.push({\r\n            from: { x: this.codePanel.x + 350, y: this.codePanel.y + 70 },\r\n            to: { x: block.x + block.width / 2, y: block.y + block.height / 2 },\r\n            time: 0,\r\n            duration: 1.5,\r\n            varName: block.name\r\n        });\r\n        \r\n        // Update performance metrics\r\n        this.performanceMetrics.totalCycles++;\r\n        this.performanceMetrics.memoryEfficiency = (this.currentMemoryUsage / 8192) * 100;\r\n    }\r\n    \r\n    addDeallocationEffect(block) {\r\n        // Enhanced deallocation particles with explosion and implosion effects\r\n        for (let i = 0; i < 40; i++) {\r\n            this.particles.push({\r\n                x: block.x + block.width / 2,\r\n                y: block.y + block.height / 2,\r\n                vx: (Math.random() - 0.5) * 10,\r\n                vy: (Math.random() - 0.5) * 10,\r\n                life: 2.0,\r\n                color: '#FF6B6B',\r\n                type: 'deallocation',\r\n                size: Math.random() * 4 + 3\r\n            });\r\n        }\r\n        \r\n        // Add implosion particles (moving toward center)\r\n        for (let i = 0; i < 20; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const distance = Math.random() * 50 + 20;\r\n            this.particles.push({\r\n                x: block.x + block.width / 2 + Math.cos(angle) * distance,\r\n                y: block.y + block.height / 2 + Math.sin(angle) * distance,\r\n                vx: (block.x + block.width / 2 - (block.x + block.width / 2 + Math.cos(angle) * distance)) * 0.1,\r\n                vy: (block.y + block.height / 2 - (block.y + block.height / 2 + Math.sin(angle) * distance)) * 0.1,\r\n                life: 1.5,\r\n                color: '#FF6B6B',\r\n                type: 'deallocation_implosion'\r\n            });\r\n        }\r\n        \r\n        // Add downward falling particles with gravity effect\r\n        for (let i = 0; i < 20; i++) {\r\n            this.particles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y,\r\n                vx: (Math.random() - 0.5) * 4,\r\n                vy: Math.random() * 6 + 3,\r\n                life: 2.5,\r\n                color: '#FF6B6B',\r\n                type: 'deallocation_fall',\r\n                gravity: 0.2\r\n            });\r\n        }\r\n        \r\n        // Add memory access highlight with fade effect\r\n        this.memoryAccesses.push({\r\n            address: block.address,\r\n            varName: block.name,\r\n            operation: 'deallocation',\r\n            time: 0,\r\n            duration: 2.0,\r\n            type: 'deallocation',\r\n            fade: 1.0\r\n        });\r\n        \r\n        // Add shrinking animation effect with collapse\r\n        this.deallocationEffects = this.deallocationEffects || [];\r\n        this.deallocationEffects.push({\r\n            block: block,\r\n            time: 0,\r\n            duration: 1.5,\r\n            type: 'shrink',\r\n            originalWidth: block.width,\r\n            originalHeight: block.height\r\n        });\r\n        \r\n        // Add memory fragmentation visualization\r\n        this.memoryFragmentation.push({\r\n            x: block.x + block.width / 2,\r\n            y: block.y + block.height / 2,\r\n            time: 0,\r\n            duration: 3.0,\r\n            size: block.width * block.height\r\n        });\r\n        \r\n        // Update performance metrics\r\n        this.performanceMetrics.fragmentationLevel = this.calculateFragmentationLevel();\r\n    }\r\n    \r\n    calculateFragmentationLevel() {\r\n        if (this.freeBlocks.length === 0) return 0;\r\n        \r\n        const totalFreeSize = this.freeBlocks.reduce((sum, block) => sum + block.size, 0);\r\n        const largestFreeBlock = Math.max(...this.freeBlocks.map(block => block.size));\r\n        \r\n        // Fragmentation is high when there are many small free blocks instead of few large ones\r\n        const fragmentation = (totalFreeSize - largestFreeBlock) / totalFreeSize;\r\n        return Math.min(100, fragmentation * 100);\r\n    }\r\n    \r\n    // Garbage Collection Methods\r\n    runGarbageCollection() {\r\n        if (this.gcState.isRunning) return;\r\n        \r\n        this.gcState.isRunning = true;\r\n        this.gcState.phase = 'mark';\r\n        this.gcState.phaseTime = 0;\r\n        this.gcState.markedBlocks.clear();\r\n        this.gcState.gcParticles = [];\r\n        \r\n        this.output.push('🗑️ Starting Garbage Collection...');\r\n        \r\n        // Mark phase - mark all reachable blocks\r\n        this.markReachableBlocks();\r\n    }\r\n    \r\n    markReachableBlocks() {\r\n        // Mark blocks that are referenced by variables\r\n        for (const [varName, address] of this.variableAddresses) {\r\n            const block = this.heapBlocks.find(b => b.address === address);\r\n            if (block) {\r\n                this.gcState.markedBlocks.add(block.address);\r\n                this.createGCMarkEffect(block);\r\n            }\r\n        }\r\n        \r\n        // Create visual effects for all blocks during mark phase\r\n        for (const block of this.heapBlocks) {\r\n            if (this.gcState.markedBlocks.has(block.address)) {\r\n                // Mark as reachable with golden particles\r\n                this.createGCMarkEffect(block);\r\n            } else {\r\n                // Mark as potentially unreachable with different effect\r\n                this.createGCPotentialUnreachableEffect(block);\r\n            }\r\n        }\r\n        \r\n        this.output.push(`✅ Marked ${this.gcState.markedBlocks.size} reachable blocks`);\r\n    }\r\n    \r\n    sweepUnreachableBlocks() {\r\n        const unreachableBlocks = [];\r\n        \r\n        // Find unreachable blocks\r\n        for (const block of this.heapBlocks) {\r\n            if (!this.gcState.markedBlocks.has(block.address)) {\r\n                unreachableBlocks.push(block);\r\n            }\r\n        }\r\n        \r\n        // Free unreachable blocks\r\n        for (const block of unreachableBlocks) {\r\n            this.freeUnreachableBlock(block);\r\n        }\r\n        \r\n        this.output.push(`🧹 Swept ${unreachableBlocks.length} unreachable blocks`);\r\n    }\r\n    \r\n    freeUnreachableBlock(block) {\r\n        // Remove from heap blocks\r\n        const index = this.heapBlocks.findIndex(b => b.address === block.address);\r\n        if (index !== -1) {\r\n            this.heapBlocks.splice(index, 1);\r\n        }\r\n        \r\n        // Add to free blocks\r\n        this.freeBlocks.push({\r\n            address: block.address,\r\n            size: block.size,\r\n            x: block.x,\r\n            y: block.y,\r\n            width: block.width,\r\n            height: block.height\r\n        });\r\n        \r\n        // Create deallocation effect\r\n        this.createGCDeallocationEffect(block);\r\n        \r\n        // Update statistics\r\n        this.totalDeallocations++;\r\n        this.currentMemoryUsage -= block.size;\r\n    }\r\n    \r\n    createGCMarkEffect(block) {\r\n        // Create particles for marking\r\n        for (let i = 0; i < 8; i++) {\r\n            this.gcState.gcParticles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y + Math.random() * block.height,\r\n                vx: (Math.random() - 0.5) * 60,\r\n                vy: (Math.random() - 0.5) * 60,\r\n                life: 2.0,\r\n                color: '#FFD700',\r\n                type: 'mark'\r\n            });\r\n        }\r\n    }\r\n    \r\n    createGCPotentialUnreachableEffect(block) {\r\n        // Create particles for potentially unreachable blocks\r\n        for (let i = 0; i < 6; i++) {\r\n            this.gcState.gcParticles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y + Math.random() * block.height,\r\n                vx: (Math.random() - 0.5) * 50,\r\n                vy: (Math.random() - 0.5) * 50,\r\n                life: 1.5,\r\n                color: '#FFA500',\r\n                type: 'potential_unreachable'\r\n            });\r\n        }\r\n    }\r\n    \r\n    createGCDeallocationEffect(block) {\r\n        // Create particles for deallocation\r\n        for (let i = 0; i < 6; i++) {\r\n            this.gcState.gcParticles.push({\r\n                x: block.x + Math.random() * block.width,\r\n                y: block.y + Math.random() * block.height,\r\n                vx: (Math.random() - 0.5) * 80,\r\n                vy: (Math.random() - 0.5) * 80,\r\n                life: 1.5,\r\n                color: '#FF6B6B',\r\n                type: 'sweep'\r\n            });\r\n        }\r\n    }\r\n    \r\n    updateGarbageCollection(deltaTime) {\r\n        if (!this.gcState.isRunning) return;\r\n        \r\n        this.gcState.phaseTime += deltaTime;\r\n        \r\n        // Update GC particles\r\n        for (let i = this.gcState.gcParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.gcState.gcParticles[i];\r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.life -= deltaTime * 2;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.gcState.gcParticles.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Phase transitions\r\n        if (this.gcState.phase === 'mark' && this.gcState.phaseTime >= this.gcState.phaseDuration) {\r\n            this.gcState.phase = 'sweep';\r\n            this.gcState.phaseTime = 0;\r\n            this.sweepUnreachableBlocks();\r\n        } else if (this.gcState.phase === 'sweep' && this.gcState.phaseTime >= this.gcState.phaseDuration) {\r\n            this.gcState.isRunning = false;\r\n            this.gcState.phase = 'idle';\r\n            this.output.push('✅ Garbage Collection Complete');\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = deltaTime / 1000;\r\n        \r\n        // Automatic execution\r\n        if (this.isAutoRunning && this.animationState === 'idle') {\r\n            this.animationTime += dt;\r\n            if (this.animationTime >= 0.5 / this.animationSpeed) {\r\n                this.executeNextStep();\r\n                this.animationTime = 0;\r\n            }\r\n        }\r\n        \r\n        // Update particles with enhanced physics\r\n            for (let i = this.particles.length - 1; i >= 0; i--) {\r\n                const particle = this.particles[i];\r\n            \r\n            // Apply spiral motion for allocation_float particles\r\n            if (particle.type === 'allocation_float' && particle.spiral !== undefined) {\r\n                particle.spiral += particle.spiralSpeed || 0.05;\r\n                particle.x += Math.cos(particle.spiral) * 0.5;\r\n                particle.y += Math.sin(particle.spiral) * 0.5;\r\n            }\r\n            \r\n            // Apply gravity for deallocation_fall particles\r\n            if (particle.type === 'deallocation_fall' && particle.gravity) {\r\n                particle.vy += particle.gravity;\r\n            }\r\n            \r\n            // Apply implosion for deallocation_implosion particles\r\n            if (particle.type === 'deallocation_implosion') {\r\n                const dx = particle.vx;\r\n                const dy = particle.vy;\r\n                particle.x += dx;\r\n                particle.y += dy;\r\n            } else {\r\n                particle.x += particle.vx;\r\n                particle.y += particle.vy;\r\n            }\r\n            \r\n            // Apply general gravity\r\n            if (particle.type !== 'allocation_float' && particle.type !== 'deallocation_implosion') {\r\n                particle.vy += 0.1;\r\n            }\r\n            \r\n                particle.life -= dt * 2;\r\n                \r\n                if (particle.life <= 0) {\r\n                    this.particles.splice(i, 1);\r\n                }\r\n        }\r\n        \r\n        // Update data flow particles\r\n        for (let i = this.dataFlowParticles.length - 1; i >= 0; i--) {\r\n            const particle = this.dataFlowParticles[i];\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n            particle.life -= dt * 3;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.dataFlowParticles.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update memory accesses\r\n        for (let i = this.memoryAccesses.length - 1; i >= 0; i--) {\r\n            const access = this.memoryAccesses[i];\r\n            access.time += dt;\r\n            \r\n            if (access.time >= access.duration) {\r\n                this.memoryAccesses.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update address highlights\r\n        for (let i = this.addressHighlights.length - 1; i >= 0; i--) {\r\n            const highlight = this.addressHighlights[i];\r\n                highlight.time += dt;\r\n                \r\n                if (highlight.time >= highlight.duration) {\r\n                this.addressHighlights.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update allocation effects\r\n        for (let i = this.allocationEffects.length - 1; i >= 0; i--) {\r\n            const effect = this.allocationEffects[i];\r\n            effect.time += dt;\r\n            \r\n            if (effect.time >= effect.duration) {\r\n                this.allocationEffects.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update deallocation effects\r\n        for (let i = this.deallocationEffects.length - 1; i >= 0; i--) {\r\n            const effect = this.deallocationEffects[i];\r\n            effect.time += dt;\r\n            \r\n            if (effect.time >= effect.duration) {\r\n                this.deallocationEffects.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update variable connections\r\n        for (let i = this.variableConnections.length - 1; i >= 0; i--) {\r\n            const connection = this.variableConnections[i];\r\n            connection.time += dt;\r\n            \r\n            if (connection.time >= connection.duration) {\r\n                this.variableConnections.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update memory fragmentation\r\n        for (let i = this.memoryFragmentation.length - 1; i >= 0; i--) {\r\n            const frag = this.memoryFragmentation[i];\r\n            frag.time += dt;\r\n            \r\n            if (frag.time >= frag.duration) {\r\n                this.memoryFragmentation.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Update execution trail\r\n        if (this.highlightedLine >= 0) {\r\n            this.executionTrail.push({\r\n                x: this.codePanel.x + 15,\r\n                y: this.codePanel.y + 50 + this.highlightedLine * 20, // Match execution pointer spacing\r\n                time: 0,\r\n                duration: 2.0\r\n            });\r\n        }\r\n        \r\n        // Clean up old execution trail points (limit to 20 points to prevent memory issues)\r\n        for (let i = this.executionTrail.length - 1; i >= 0; i--) {\r\n            this.executionTrail[i].time += dt;\r\n            if (this.executionTrail[i].time >= this.executionTrail[i].duration) {\r\n                this.executionTrail.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Limit execution trail length\r\n        if (this.executionTrail.length > 20) {\r\n            this.executionTrail.splice(0, this.executionTrail.length - 20);\r\n        }\r\n        \r\n        // Update garbage collection\r\n        this.updateGarbageCollection(dt);\r\n        \r\n        // Update performance metrics\r\n        this.performanceMetrics.totalCycles = this.executionStep;\r\n        this.performanceMetrics.fragmentationLevel = this.calculateFragmentationLevel();\r\n        \r\n        // Calculate memory efficiency based on allocations vs deallocations\r\n        const totalOperations = this.totalAllocations + this.totalDeallocations;\r\n        if (totalOperations > 0) {\r\n            this.performanceMetrics.memoryEfficiency = Math.max(0, \r\n                ((this.totalAllocations - this.memoryLeaks) / this.totalAllocations) * 100);\r\n        } else {\r\n            this.performanceMetrics.memoryEfficiency = 100;\r\n        }\r\n        \r\n        // Calculate average access time (simplified)\r\n        this.performanceMetrics.averageAccessTime = this.memoryAccessCount > 0 ? \r\n            this.executionStep / this.memoryAccessCount : 0;\r\n    }\r\n    \r\n    render() {\r\n        this.drawBackground();\r\n        this.drawControlButtons();\r\n        this.drawCodePanel();\r\n        this.drawStackPanel();\r\n        this.drawHeapPanel();\r\n        this.drawOutputPanel();\r\n        this.drawExecutionPointer();\r\n        this.drawExecutionTrail();\r\n        this.drawMemoryAccesses();\r\n        this.drawAddressHighlights();\r\n        this.drawVariableConnections();\r\n        this.drawMemoryFragmentation();\r\n        this.drawParticles();\r\n        this.drawDataFlowParticles();\r\n        this.drawAllocationEffects();\r\n        this.drawGarbageCollectionEffects();\r\n        this.drawStatistics();\r\n    }\r\n    \r\n    drawBackground() {\r\n        // Create a subtle modern gradient background\r\n        const gradient = this.ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height);\r\n        gradient.addColorStop(0, '#1a1f2e');\r\n        gradient.addColorStop(0.5, '#252b3a');\r\n        gradient.addColorStop(1, '#1a1f2e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Add animated hexagonal pattern for modern tech feel\r\n        this.ctx.strokeStyle = 'rgba(46, 204, 113, 0.08)';\r\n        this.ctx.lineWidth = 1;\r\n        const hexSize = 60;\r\n        const offset = (this.animationTime * 15) % hexSize;\r\n        \r\n        for (let y = -offset; y < this.canvas.height + hexSize; y += hexSize * 1.5) {\r\n            for (let x = -offset; x < this.canvas.width + hexSize; x += hexSize * 1.3) {\r\n                this.ctx.beginPath();\r\n                for (let i = 0; i < 6; i++) {\r\n                    const angle = (i * Math.PI) / 3;\r\n                    const px = x + hexSize * 0.5 * Math.cos(angle);\r\n                    const py = y + hexSize * 0.5 * Math.sin(angle);\r\n                    if (i === 0) {\r\n                        this.ctx.moveTo(px, py);\r\n                    } else {\r\n                        this.ctx.lineTo(px, py);\r\n                    }\r\n                }\r\n                this.ctx.closePath();\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawControlButtons() {\r\n        for (const button of this.controlButtons) {\r\n            const isHovered = this.hoveredButton === button.id;\r\n            \r\n            // Button background\r\n            const bgGradient = this.ctx.createLinearGradient(button.x, button.y, button.x, button.y + button.height);\r\n            if (isHovered) {\r\n                bgGradient.addColorStop(0, '#5a9fd4');\r\n                bgGradient.addColorStop(1, '#4a8fc4');\r\n            } else {\r\n                bgGradient.addColorStop(0, '#3a5f84');\r\n                bgGradient.addColorStop(1, '#2a4f74');\r\n            }\r\n            this.ctx.fillStyle = bgGradient;\r\n            this.roundRect(button.x, button.y, button.width, button.height, 6);\r\n            this.ctx.fill();\r\n            \r\n            // Button border\r\n            this.ctx.strokeStyle = isHovered ? '#7eb3d9' : '#4a6f94';\r\n            this.ctx.lineWidth = 1.5;\r\n            this.roundRect(button.x, button.y, button.width, button.height, 6);\r\n            this.ctx.stroke();\r\n            \r\n            // Button icon/label\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = 'bold 16px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            \r\n            // Special handling for play/pause button\r\n            if (button.id === 'play') {\r\n                this.ctx.fillText(this.isAutoRunning ? '⏸' : '▶', button.x + button.width / 2, button.y + button.height / 2);\r\n            } else if (button.id === 'speed') {\r\n                this.ctx.font = 'bold 11px Arial';\r\n                this.ctx.fillText(`${this.speedOptions[this.currentSpeedIndex]}x`, button.x + button.width / 2, button.y + button.height / 2);\r\n            } else {\r\n                this.ctx.fillText(button.label, button.x + button.width / 2, button.y + button.height / 2);\r\n            }\r\n            \r\n            // Tooltip on hover\r\n            if (isHovered) {\r\n                const tooltipX = button.x + button.width / 2;\r\n                const tooltipY = button.y + button.height + 8;\r\n                \r\n                // Tooltip background\r\n                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n                const tooltipWidth = this.ctx.measureText(button.tooltip).width + 12;\r\n                this.ctx.fillRect(tooltipX - tooltipWidth / 2, tooltipY, tooltipWidth, 20);\r\n                \r\n                // Tooltip text\r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.fillText(button.tooltip, tooltipX, tooltipY + 10);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawCodePanel() {\r\n        // Code panel background with shadow\r\n        for (let i = 0; i < 20; i++) {\r\n            const x = (i * 137.5) % this.canvas.width;\r\n            const y = (i * 73.3 + this.animationTime * 10) % this.canvas.height;\r\n            const alpha = 0.3 + 0.2 * Math.sin(this.animationTime * 2 + i);\r\n            \r\n            this.ctx.fillStyle = `rgba(46, 204, 113, ${alpha})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, 1, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Add subtle radial glow effect\r\n        const centerX = this.canvas.width / 2;\r\n        const centerY = this.canvas.height / 2;\r\n        const radius = Math.min(this.canvas.width, this.canvas.height) * 0.8;\r\n        const radialGradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);\r\n        radialGradient.addColorStop(0, 'rgba(46, 204, 113, 0.05)');\r\n        radialGradient.addColorStop(1, 'rgba(46, 204, 113, 0)');\r\n        this.ctx.fillStyle = radialGradient;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n    \r\n    drawCodePanel() {\r\n        // Code panel background with enhanced shadow\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\r\n        this.ctx.fillRect(this.codePanel.x + 4, this.codePanel.y + 4, this.codePanel.width, this.codePanel.height);\r\n        \r\n        // Code panel background with modern gradient\r\n        const gradient = this.ctx.createLinearGradient(this.codePanel.x, this.codePanel.y, this.codePanel.x, this.codePanel.y + this.codePanel.height);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.5, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.92)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.codePanel.x, this.codePanel.y, this.codePanel.width, this.codePanel.height);\r\n        \r\n        // Subtle border with rounded corners\r\n        this.ctx.shadowColor = 'rgba(100, 200, 255, 0.3)';\r\n        this.ctx.shadowBlur = 6;\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.strokeStyle = '#5a9fd4';\r\n        this.roundRect(this.codePanel.x, this.codePanel.y, this.codePanel.width, this.codePanel.height, 12);\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Title with crisp font rendering\r\n        this.ctx.fillStyle = '#7eb3d9';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('💻 Code Execution', this.codePanel.x + 15, this.codePanel.y + 25);\r\n        \r\n        // Get current function\r\n        const currentFunc = this.program.functions[this.currentFunction];\r\n        \r\n        // Draw code lines with crisp font rendering\r\n        this.ctx.font = '12px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        for (let i = 0; i < currentFunc.lines.length; i++) {\r\n            const line = currentFunc.lines[i];\r\n            const y = this.codePanel.y + 50 + i * 20; // Reduced top padding and line spacing\r\n            \r\n            // Highlight current line with subtle effect\r\n            if (i === this.highlightedLine) {\r\n                // Lighter highlight background - properly centered\r\n                this.ctx.fillStyle = 'rgba(100, 150, 200, 0.08)';\r\n                this.ctx.fillRect(this.codePanel.x + 8, y - 10, this.codePanel.width - 16, 20);\r\n                \r\n                // Lighter border - properly centered\r\n                this.ctx.strokeStyle = 'rgba(100, 150, 200, 0.3)';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeRect(this.codePanel.x + 8, y - 10, this.codePanel.width - 16, 20);\r\n            }\r\n            \r\n            // Line number with crisp font rendering\r\n            this.ctx.fillStyle = '#888888';\r\n            this.ctx.font = '10px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n            this.ctx.fillText(`${i + 1}`, this.codePanel.x + 15, y);\r\n            \r\n            // Code line with crisp font rendering\r\n            this.ctx.fillStyle = i === this.highlightedLine ? '#ffffff' : '#e0e0e0';\r\n            this.ctx.font = '12px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n            this.ctx.fillText(line, this.codePanel.x + 35, y);\r\n        }\r\n    }\r\n    \r\n    drawStackPanel() {\r\n        // Stack panel background with shadow\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(this.stackPanel.x + 3, this.stackPanel.y + 3, this.stackPanel.width, this.stackPanel.height);\r\n        \r\n        // Stack panel background with gradient\r\n        const gradient = this.ctx.createLinearGradient(this.stackPanel.x, this.stackPanel.y, this.stackPanel.x, this.stackPanel.y + this.stackPanel.height);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.9)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.stackPanel.x, this.stackPanel.y, this.stackPanel.width, this.stackPanel.height);\r\n        \r\n        // Subtle border with rounded corners\r\n        this.ctx.shadowColor = 'rgba(100, 150, 255, 0.3)';\r\n        this.ctx.shadowBlur = 6;\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.strokeStyle = '#6a8fc4';\r\n        this.roundRect(this.stackPanel.x, this.stackPanel.y, this.stackPanel.width, this.stackPanel.height, 12);\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n                // Title with crisp font rendering\r\n        this.ctx.fillStyle = '#8aa8d4';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('📚 Call Stack', this.stackPanel.x + 15, this.stackPanel.y + 25);\r\n            \r\n        // Draw call stack with crisp font rendering\r\n            this.ctx.font = '12px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n            this.ctx.textAlign = 'left';\r\n            this.ctx.textBaseline = 'middle';\r\n        \r\n        // Draw older stacks at the bottom without highlighting\r\n        for (let i = 0; i < this.callStack.length; i++) {\r\n            const frame = this.callStack[i];\r\n            const func = this.program.functions[frame.functionIndex];\r\n            const y = this.stackPanel.y + 50 + (this.callStack.length - i) * 22; // Compact spacing\r\n            \r\n            // Function name - simple text, no background\r\n            this.ctx.fillStyle = '#999999';\r\n            this.ctx.font = '11px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n            this.ctx.fillText(`${func.name}`, this.stackPanel.x + 15, y);\r\n        }\r\n        \r\n        // Current function at top with highlighting\r\n        const currentFunc = this.program.functions[this.currentFunction];\r\n        const currentY = this.stackPanel.y + 50;\r\n        \r\n        // Current frame background - subtle light blue highlight, properly centered\r\n        this.ctx.fillStyle = 'rgba(100, 150, 200, 0.08)';\r\n        this.ctx.fillRect(this.stackPanel.x + 10, currentY - 10, this.stackPanel.width - 20, 20);\r\n        \r\n        // Current function border - light blue, properly centered\r\n        this.ctx.strokeStyle = 'rgba(100, 150, 200, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.roundRect(this.stackPanel.x + 10, currentY - 10, this.stackPanel.width - 20, 20, 6);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 11px \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\", monospace';\r\n        this.ctx.fillText(`${currentFunc.name}`, this.stackPanel.x + 15, currentY);\r\n    }\r\n    \r\n    drawHeapPanel() {\r\n        // Heap panel background with shadow\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(this.heapPanel.x + 3, this.heapPanel.y + 3, this.heapPanel.width, this.heapPanel.height);\r\n        \r\n        // Heap panel background with gradient\r\n        const gradient = this.ctx.createLinearGradient(this.heapPanel.x, this.heapPanel.y, this.heapPanel.x, this.heapPanel.y + this.heapPanel.height);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.9)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.heapPanel.x, this.heapPanel.y, this.heapPanel.width, this.heapPanel.height);\r\n        \r\n        // Subtle border with rounded corners\r\n        this.ctx.shadowColor = 'rgba(100, 200, 150, 0.3)';\r\n        this.ctx.shadowBlur = 6;\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.strokeStyle = '#6ab896';\r\n        this.roundRect(this.heapPanel.x, this.heapPanel.y, this.heapPanel.width, this.heapPanel.height, 12);\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Title with crisp font rendering - positioned outside the box\r\n        this.ctx.fillStyle = '#7ec9a9';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('🗑️ Heap Memory', this.heapPanel.x + 15, this.heapPanel.y - 10);\r\n        \r\n        // Draw memory grid for better organization\r\n        this.drawMemoryGrid();\r\n        \r\n        // Draw allocated blocks with enhanced styling\r\n        for (const block of this.heapBlocks) {\r\n            // Enhanced block shadow with depth and blur\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\r\n            this.ctx.fillRect(block.x + 4, block.y + 4, block.width, block.height);\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Block with appealing gradient - vibrant purple/blue\r\n            const blockGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height);\r\n            blockGradient.addColorStop(0, '#7c3aed');  // Vibrant purple\r\n            blockGradient.addColorStop(1, '#5b21b6');  // Deep purple\r\n            this.ctx.fillStyle = blockGradient;\r\n            this.ctx.fillRect(block.x, block.y, block.width, block.height);\r\n            \r\n            // Subtle block border with glow\r\n            this.ctx.shadowColor = 'rgba(124, 58, 237, 0.5)';\r\n            this.ctx.shadowBlur = 6;\r\n            this.ctx.lineWidth = 1.5;\r\n            this.ctx.strokeStyle = '#a78bfa';  // Light purple border\r\n            this.roundRect(block.x, block.y, block.width, block.height, 6);\r\n            this.ctx.stroke();\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Add inner highlight for 3D effect\r\n            const innerGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height * 0.3);\r\n            innerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.25)');\r\n            innerGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            this.ctx.fillStyle = innerGradient;\r\n            this.ctx.fillRect(block.x, block.y, block.width, block.height * 0.3);\r\n            \r\n            // Block label with crisp font rendering and better contrast\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\r\n            this.ctx.lineWidth = 2;\r\n            const fontSize = Math.max(8, Math.min(12, block.width / 8));\r\n            this.ctx.font = `bold ${fontSize}px Inter`;\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            this.ctx.strokeText(block.name, block.x + block.width / 2, block.y + block.height / 2 - 8);\r\n            this.ctx.fillText(block.name, block.x + block.width / 2, block.y + block.height / 2 - 8);\r\n            \r\n            // Size label with smaller font\r\n            const sizeFontSize = Math.max(7, Math.min(10, block.width / 10));\r\n            this.ctx.font = `bold ${sizeFontSize}px Inter`;\r\n            this.ctx.strokeText(`${block.size}B`, block.x + block.width / 2, block.y + block.height / 2 + 2);\r\n            this.ctx.fillText(`${block.size}B`, block.x + block.width / 2, block.y + block.height / 2 + 2);\r\n            \r\n            // Address label with smallest font\r\n            this.ctx.fillStyle = '#e9d5ff';  // Light purple for address\r\n            const addrFontSize = Math.max(6, Math.min(8, block.width / 12));\r\n            this.ctx.font = `bold ${addrFontSize}px Inter`;\r\n            this.ctx.fillText(`0x${block.address.toString(16)}`, block.x + block.width / 2, block.y + block.height / 2 + 12);\r\n        }\r\n        \r\n        // Draw free blocks with improved styling\r\n        for (const block of this.freeBlocks) {\r\n            // Free block shadow\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n            this.ctx.fillRect(block.x + 2, block.y + 2, block.width, block.height);\r\n            \r\n            // Free block background with gradient - emerald green\r\n            const freeGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height);\r\n            freeGradient.addColorStop(0, 'rgba(16, 185, 129, 0.4)');  // Emerald\r\n            freeGradient.addColorStop(1, 'rgba(5, 150, 105, 0.2)');   // Dark emerald\r\n            this.ctx.fillStyle = freeGradient;\r\n            this.ctx.fillRect(block.x, block.y, block.width, block.height);\r\n            \r\n            // Free block border - dashed with emerald\r\n            this.ctx.strokeStyle = '#34d399';  // Light emerald\r\n            this.ctx.lineWidth = 1.5;\r\n            this.ctx.setLineDash([5, 5]);\r\n            this.roundRect(block.x, block.y, block.width, block.height, 6);\r\n            this.ctx.stroke();\r\n            this.ctx.setLineDash([]);\r\n            \r\n            // Free label with better styling\r\n            this.ctx.fillStyle = '#d1fae5';  // Very light emerald\r\n            this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.font = 'bold 9px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.strokeText(`FREE (${block.size}B)`, block.x + block.width / 2, block.y + block.height / 2);\r\n            this.ctx.fillText(`FREE (${block.size}B)`, block.x + block.width / 2, block.y + block.height / 2);\r\n            \r\n            // Show address for larger free blocks\r\n            if (block.size >= 512) {\r\n                this.ctx.fillStyle = '#a7f3d0';  // Light emerald for address\r\n                this.ctx.font = '8px Inter';\r\n                this.ctx.fillText(`0x${block.address.toString(16)}`, block.x + block.width / 2, block.y + block.height / 2 + 12);\r\n            }\r\n        }\r\n        \r\n        // Draw memory usage indicator\r\n        this.drawMemoryUsageIndicator();\r\n    }\r\n    \r\n    drawOutputPanel() {\r\n        // Only draw output if showOutput is true\r\n        if (!this.showOutput) return;\r\n        \r\n        // Output panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(this.outputPanel.x, this.outputPanel.y, this.outputPanel.width, this.outputPanel.height);\r\n        this.ctx.strokeStyle = '#F39C12';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(this.outputPanel.x, this.outputPanel.y, this.outputPanel.width, this.outputPanel.height);\r\n        \r\n        // Title\r\n        this.ctx.fillStyle = '#F39C12';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('📤 Program Output', this.outputPanel.x + 10, this.outputPanel.y + 25);\r\n        \r\n        // Draw output lines\r\n        this.ctx.font = '11px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        \r\n        const startIndex = Math.max(0, this.output.length - 8);\r\n        for (let i = startIndex; i < this.output.length; i++) {\r\n            const output = this.output[i];\r\n            const y = this.outputPanel.y + 45 + (i - startIndex) * 18;\r\n            this.ctx.fillText(output, this.outputPanel.x + 10, y);\r\n        }\r\n    }\r\n    \r\n    drawExecutionPointer() {\r\n        if (this.highlightedLine >= 0) {\r\n            const y = this.codePanel.y + 50 + this.highlightedLine * 20;\r\n            \r\n            // Position dot at the far right edge of the code panel\r\n            const dotX = this.codePanel.x + this.codePanel.width - 15;\r\n            \r\n            // Simple pulsating green dot\r\n            const pulse = 0.6 + Math.sin(this.animationTime * 4) * 0.4; // Smooth pulse between 0.2 and 1.0\r\n            const radius = 4;\r\n            \r\n            // Outer glow\r\n            this.ctx.shadowColor = '#2ecc71';\r\n            this.ctx.shadowBlur = 8 * pulse;\r\n            \r\n            // Green dot\r\n            this.ctx.fillStyle = `rgba(46, 204, 113, ${pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(dotX, y, radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n        }\r\n    }\r\n    \r\n    drawExecutionTrail() {\r\n        // Execution trail disabled - using simple green dot pointer instead\r\n    }\r\n    \r\n    drawMemoryAccesses() {\r\n        for (const access of this.memoryAccesses) {\r\n            const alpha = 1 - (access.time / access.duration);\r\n            const block = this.heapBlocks.find(b => b.address === access.address);\r\n            \r\n            if (block) {\r\n                // Highlight the accessed block\r\n                this.ctx.fillStyle = `rgba(${access.type === 'allocation' ? '78, 205, 196' : \r\n                                           access.type === 'deallocation' ? '255, 107, 107' : \r\n                                           '255, 215, 0'}, ${alpha * 0.5})`;\r\n                this.ctx.fillRect(block.x - 2, block.y - 2, block.width + 4, block.height + 4);\r\n                \r\n                // Access indicator\r\n                this.ctx.fillStyle = `rgba(${access.type === 'allocation' ? '78, 205, 196' : \r\n                                           access.type === 'deallocation' ? '255, 107, 107' : \r\n                                           '255, 215, 0'}, ${alpha})`;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(block.x + block.width / 2, block.y + block.height / 2, 8, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawAddressHighlights() {\r\n        for (const highlight of this.addressHighlights) {\r\n            const alpha = 1 - (highlight.time / highlight.duration);\r\n            const block = this.heapBlocks.find(b => b.address === highlight.address);\r\n            \r\n            if (block) {\r\n                // Address highlight\r\n                this.ctx.strokeStyle = `rgba(${highlight.type === 'allocation' ? '78, 205, 196' : '255, 107, 107'}, ${alpha})`;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.setLineDash([5, 5]);\r\n                this.ctx.strokeRect(block.x - 5, block.y - 5, block.width + 10, block.height + 10);\r\n                this.ctx.setLineDash([]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVariableConnections() {\r\n        for (const connection of this.variableConnections) {\r\n            const alpha = 1 - (connection.time / connection.duration);\r\n            \r\n            // Draw animated connection line\r\n            this.ctx.strokeStyle = `rgba(78, 205, 196, ${alpha * 0.8})`;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.setLineDash([10, 5]);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(connection.from.x, connection.from.y);\r\n            this.ctx.lineTo(connection.to.x, connection.to.y);\r\n            this.ctx.stroke();\r\n            this.ctx.setLineDash([]);\r\n            \r\n            // Draw variable name\r\n            this.ctx.fillStyle = `rgba(78, 205, 196, ${alpha})`;\r\n            this.ctx.font = 'bold 10px Inter';\r\n        this.ctx.textAlign = 'center';\r\n            const midX = (connection.from.x + connection.to.x) / 2;\r\n            const midY = (connection.from.y + connection.to.y) / 2;\r\n            this.ctx.fillText(connection.varName, midX, midY - 5);\r\n        }\r\n    }\r\n    \r\n    drawMemoryFragmentation() {\r\n        for (const frag of this.memoryFragmentation) {\r\n            const alpha = 1 - (frag.time / frag.duration);\r\n            const size = frag.size * alpha * 0.01;\r\n            \r\n            // Draw fragmentation indicator\r\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha * 0.6})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(frag.x, frag.y, size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw fragmentation text\r\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha})`;\r\n            this.ctx.font = 'bold 8px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('FRAG', frag.x, frag.y + 15);\r\n        }\r\n        \r\n        // Draw memory layout visualization\r\n        this.drawMemoryLayout();\r\n    }\r\n    \r\n    drawMemoryGrid() {\r\n        // Draw a subtle grid to help organize memory blocks\r\n        const gridSpacing = 40;\r\n        const startX = this.heapPanel.x + 20;\r\n        const startY = this.heapPanel.y + 40;\r\n        const endX = this.heapPanel.x + this.heapPanel.width - 20;\r\n        const endY = this.heapPanel.y + this.heapPanel.height - 50;\r\n        \r\n        this.ctx.strokeStyle = 'rgba(46, 204, 113, 0.1)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Vertical grid lines\r\n        for (let x = startX; x <= endX; x += gridSpacing) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, startY);\r\n            this.ctx.lineTo(x, endY);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Horizontal grid lines\r\n        for (let y = startY; y <= endY; y += gridSpacing) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(startX, y);\r\n            this.ctx.lineTo(endX, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawMemoryUsageIndicator() {\r\n        // Draw memory usage bar at the bottom\r\n        const usageX = this.heapPanel.x + 20;\r\n        const usageY = this.heapPanel.y + this.heapPanel.height - 30;\r\n        const usageWidth = this.heapPanel.width - 40;\r\n        const usageHeight = 15;\r\n        \r\n        // Background\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(usageX, usageY, usageWidth, usageHeight);\r\n        \r\n        // Usage bar\r\n        const usagePercent = (this.currentMemoryUsage / 8192) * 100;\r\n        const barWidth = (usageWidth * usagePercent) / 100;\r\n        \r\n        const barGradient = this.ctx.createLinearGradient(usageX, usageY, usageX + barWidth, usageY);\r\n        barGradient.addColorStop(0, '#2ecc71');\r\n        barGradient.addColorStop(1, '#27ae60');\r\n        this.ctx.fillStyle = barGradient;\r\n        this.ctx.fillRect(usageX, usageY, barWidth, usageHeight);\r\n        \r\n        // Border\r\n        this.ctx.strokeStyle = '#2ecc71';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(usageX, usageY, usageWidth, usageHeight);\r\n        \r\n        // Usage text\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 10px Inter';\r\n            this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(`${this.currentMemoryUsage}/${8192} bytes (${usagePercent.toFixed(1)}%)`, \r\n            usageX + usageWidth / 2, usageY + usageHeight / 2 + 3);\r\n    }\r\n    \r\n    drawMemoryLayout() {\r\n        // Draw a memory layout bar at the bottom of the heap panel\r\n        const layoutY = this.heapPanel.y + this.heapPanel.height - 15;\r\n        const layoutHeight = 10;\r\n        const layoutX = this.heapPanel.x + 20;\r\n        const layoutWidth = this.heapPanel.width - 40;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(layoutX, layoutY, layoutWidth, layoutHeight);\r\n        \r\n        // Draw allocated memory segments\r\n        for (const block of this.heapBlocks) {\r\n            const segmentX = layoutX + (block.address - 0x1000) / 8192 * layoutWidth;\r\n            const segmentWidth = (block.size / 8192) * layoutWidth;\r\n            \r\n            this.ctx.fillStyle = '#2ecc71';\r\n            this.ctx.fillRect(segmentX, layoutY, segmentWidth, layoutHeight);\r\n            \r\n            // Add border\r\n            this.ctx.strokeStyle = '#FFFFFF';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.strokeRect(segmentX, layoutY, segmentWidth, layoutHeight);\r\n        }\r\n        \r\n        // Draw fragmentation indicators\r\n        const fragmentedBlocks = this.calculateFragmentedFreeBlocks();\r\n        for (const fragBlock of fragmentedBlocks) {\r\n            if (fragBlock.size >= 256) {\r\n                const fragX = layoutX + (fragBlock.address - 0x1000) / 8192 * layoutWidth;\r\n                const fragWidth = (fragBlock.size / 8192) * layoutWidth;\r\n                \r\n                this.ctx.fillStyle = 'rgba(255, 107, 107, 0.6)';\r\n                this.ctx.fillRect(fragX, layoutY, fragWidth, layoutHeight);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawParticles() {\r\n        for (const particle of this.particles) {\r\n            let size = particle.size || 3;\r\n            let alpha = particle.life;\r\n            \r\n            // Enhanced special handling for different particle types\r\n            if (particle.type === 'memory_clear') {\r\n                size = 4;\r\n                alpha = particle.life * 0.8;\r\n            } else if (particle.type === 'data_clear') {\r\n                size = 2;\r\n                alpha = particle.life * 0.6;\r\n            } else if (particle.type === 'allocation') {\r\n                size = particle.size || 4;\r\n                alpha = particle.life * 0.9;\r\n            } else if (particle.type === 'allocation_float') {\r\n                size = 2;\r\n                alpha = particle.life * 0.7;\r\n                // Add sparkle effect for floating particles\r\n                this.ctx.shadowColor = '#4ECDC4';\r\n                this.ctx.shadowBlur = 5;\r\n            } else if (particle.type === 'deallocation') {\r\n                size = particle.size || 5;\r\n                alpha = particle.life * 0.8;\r\n            } else if (particle.type === 'deallocation_fall') {\r\n                size = 3;\r\n                alpha = particle.life * 0.6;\r\n            } else if (particle.type === 'deallocation_implosion') {\r\n                size = 2;\r\n                alpha = particle.life * 0.5;\r\n                // Add implosion effect\r\n                this.ctx.shadowColor = '#FF6B6B';\r\n                this.ctx.shadowBlur = 3;\r\n            } else if (particle.type === 'completion') {\r\n                size = 6;\r\n                alpha = particle.life * 0.9;\r\n                // Add celebration effect\r\n                this.ctx.shadowColor = '#FFD700';\r\n                this.ctx.shadowBlur = 8;\r\n            }\r\n            \r\n            this.ctx.fillStyle = `rgba(${particle.color === '#4ECDC4' ? '78, 205, 196' : \r\n                                       particle.color === '#FF6B6B' ? '255, 107, 107' : \r\n                                       particle.color === '#F39C12' ? '243, 156, 18' :\r\n                                       particle.color === '#3498db' ? '52, 152, 219' :\r\n                                       particle.color === '#FFD700' ? '255, 215, 0' :\r\n                                       '231, 76, 60'}, ${alpha})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n        }\r\n    }\r\n    \r\n    drawDataFlowParticles() {\r\n        for (const particle of this.dataFlowParticles) {\r\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${particle.life})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawAllocationEffects() {\r\n        // Draw growing effects for new allocations\r\n        for (const effect of this.allocationEffects) {\r\n            const progress = effect.time / effect.duration;\r\n            const scale = 0.5 + progress * 0.5; // Start at 50% size, grow to 100%\r\n            \r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1 - progress;\r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            this.ctx.fillRect(\r\n                effect.block.x - (effect.block.width * scale - effect.block.width) / 2,\r\n                effect.block.y - (effect.block.height * scale - effect.block.height) / 2,\r\n                effect.block.width * scale,\r\n                effect.block.height * scale\r\n            );\r\n            this.ctx.restore();\r\n        }\r\n        \r\n        // Draw shrinking effects for deallocations\r\n        for (const effect of this.deallocationEffects) {\r\n            const progress = effect.time / effect.duration;\r\n            const scale = 1 - progress * 0.5; // Start at 100% size, shrink to 50%\r\n            \r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1 - progress;\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.fillRect(\r\n                effect.block.x - (effect.block.width * scale - effect.block.width) / 2,\r\n                effect.block.y - (effect.block.height * scale - effect.block.height) / 2,\r\n                effect.block.width * scale,\r\n                effect.block.height * scale\r\n            );\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n    \r\n    drawGarbageCollectionEffects() {\r\n        // Draw GC particles\r\n        for (const particle of this.gcState.gcParticles) {\r\n            const alpha = particle.life;\r\n            \r\n            this.ctx.fillStyle = `${particle.color}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw GC phase indicator\r\n        if (this.gcState.isRunning) {\r\n            const phase = this.gcState.phase === 'mark' ? 'Mark Phase' : 'Sweep Phase';\r\n            const color = this.gcState.phase === 'mark' ? '#FFD700' : '#FF6B6B';\r\n            \r\n            this.ctx.fillStyle = color;\r\n            this.ctx.font = 'bold 14px Inter';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(`🗑️ ${phase}`, this.canvas.width / 2, 30);\r\n        }\r\n    }\r\n    \r\n    drawStatistics() {\r\n        // Only draw stats if showStats is true\r\n        if (!this.showStats) return;\r\n        \r\n        // Enhanced statistics panel with performance metrics - positioned in bottom right\r\n        const statsX = this.canvas.width - 390;\r\n        const statsY = this.canvas.height - 170;\r\n        \r\n        // Enhanced panel background with shadow and gradient\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n        this.ctx.fillRect(statsX + 4, statsY + 4, 380, 160);\r\n        \r\n        const gradient = this.ctx.createLinearGradient(statsX, statsY, statsX, statsY + 160);\r\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\r\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\r\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\r\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(statsX, statsY, 380, 160);\r\n        \r\n        // Enhanced border with rounded corners and gradient\r\n        this.ctx.shadowColor = '#4ECDC4';\r\n        this.ctx.shadowBlur = 12;\r\n        this.ctx.lineWidth = 3;\r\n        \r\n        // Create gradient border\r\n        const statsBorderGradient = this.ctx.createLinearGradient(\r\n            statsX, statsY, \r\n            statsX + 380, statsY + 160\r\n        );\r\n        statsBorderGradient.addColorStop(0, '#4ECDC4');\r\n        statsBorderGradient.addColorStop(0.5, '#2ECC71');\r\n        statsBorderGradient.addColorStop(1, '#4ECDC4');\r\n        \r\n        this.ctx.strokeStyle = statsBorderGradient;\r\n        this.roundRect(statsX, statsY, 380, 160, 12);\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Add inner highlight for 3D effect\r\n        const innerGradient = this.ctx.createLinearGradient(statsX, statsY, statsX, statsY + 30);\r\n        innerGradient.addColorStop(0, 'rgba(78, 205, 196, 0.1)');\r\n        innerGradient.addColorStop(1, 'rgba(78, 205, 196, 0)');\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(statsX, statsY, 380, 30);\r\n        \r\n        // Title with crisp font rendering\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillText('📊 Program Execution Stats', statsX + 15, statsY + 22);\r\n        \r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.textBaseline = 'middle';\r\n        \r\n        // Basic stats with icons and better spacing\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`📦 Allocations: ${this.totalAllocations}`, statsX + 15, statsY + 45);\r\n        this.ctx.fillText(`🗑️ Deallocations: ${this.totalDeallocations}`, statsX + 15, statsY + 62);\r\n        this.ctx.fillText(`💾 Memory Usage: ${this.currentMemoryUsage} bytes`, statsX + 15, statsY + 79);\r\n        this.ctx.fillText(`🔍 Memory Accesses: ${this.memoryAccessCount}`, statsX + 15, statsY + 96);\r\n        \r\n        // Performance metrics with enhanced colors\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.fillText(`⚡ Execution Cycles: ${this.performanceMetrics.totalCycles}`, statsX + 15, statsY + 113);\r\n        this.ctx.fillText(`📈 Memory Efficiency: ${this.performanceMetrics.memoryEfficiency.toFixed(1)}%`, statsX + 15, statsY + 130);\r\n        this.ctx.fillText(`🔧 Fragmentation Level: ${this.performanceMetrics.fragmentationLevel.toFixed(1)}%`, statsX + 15, statsY + 147);\r\n        \r\n        // Memory leak warning with enhanced styling\r\n        if (this.memoryLeaks > 0) {\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.fillText(`⚠️ Memory Leaks: ${this.memoryLeaks}`, statsX + 15, statsY + 164);\r\n        } else {\r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            this.ctx.fillText(`✅ No Memory Leaks`, statsX + 15, statsY + 164);\r\n        }\r\n        \r\n        // Performance indicator\r\n        const efficiency = this.performanceMetrics.memoryEfficiency;\r\n        const efficiencyColor = efficiency > 80 ? '#4ECDC4' : efficiency > 60 ? '#F39C12' : '#FF6B6B';\r\n        this.ctx.fillStyle = efficiencyColor;\r\n        this.ctx.fillText(`🎯 Performance: ${efficiency > 80 ? 'Excellent' : efficiency > 60 ? 'Good' : 'Poor'}`, statsX + 10, statsY + 160);\r\n    }\r\n    \r\n    roundRect(x, y, width, height, radius) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x + radius, y);\r\n        this.ctx.lineTo(x + width - radius, y);\r\n        this.ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        this.ctx.lineTo(x + width, y + height - radius);\r\n        this.ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        this.ctx.lineTo(x + radius, y + height);\r\n        this.ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        this.ctx.lineTo(x, y + radius);\r\n        this.ctx.quadraticCurveTo(x, y, x + radius, y);\r\n        this.ctx.closePath();\r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n    handleClick(x, y) {\r\n        // Check if click is within the heap panel\r\n        if (x >= this.heapPanel.x && x <= this.heapPanel.x + this.heapPanel.width &&\r\n            y >= this.heapPanel.y && y <= this.heapPanel.y + this.heapPanel.height) {\r\n            \r\n            // Only trigger GC if it's not already running\r\n            if (!this.gcState.isRunning) {\r\n                this.runGarbageCollection();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // handleButtonClick moved earlier in the class - removed duplicate\r\n    \r\n    resetExecution() {\r\n        this.initializeExecution();\r\n        this.startExecution();\r\n        this.resetPerformanceMetrics();\r\n    }\r\n    \r\n    reset() {\r\n        this.initializeExecution();\r\n        this.startExecution();\r\n        this.resetPerformanceMetrics();\r\n    }\r\n    \r\n    resetPerformanceMetrics() {\r\n        this.performanceMetrics = {\r\n            totalCycles: 0,\r\n            memoryEfficiency: 100,\r\n            fragmentationLevel: 0,\r\n            averageAccessTime: 0\r\n        };\r\n        this.executionStep = 0;\r\n        this.totalAllocations = 0;\r\n        this.totalDeallocations = 0;\r\n        this.memoryLeaks = 0;\r\n        this.currentMemoryUsage = 0;\r\n        this.memoryAccessCount = 0;\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            totalAllocations: this.totalAllocations,\r\n            totalDeallocations: this.totalDeallocations,\r\n            memoryLeaks: this.memoryLeaks,\r\n            currentMemoryUsage: this.currentMemoryUsage,\r\n            memoryAccessCount: this.memoryAccessCount,\r\n            callStackDepth: this.callStack.length,\r\n            currentFunction: this.program.functions[this.currentFunction].name\r\n        };\r\n    }\r\n    \r\n    resize() {\r\n        // Recalculate panel positions based on new canvas size\r\n        const canvasWidth = this.canvas.width;\r\n        const canvasHeight = this.canvas.height;\r\n        \r\n        // Adjust panel positions for better responsiveness\r\n        this.codePanel = { x: 50, y: 50, width: Math.min(500, canvasWidth * 0.4), height: 300 };\r\n        this.stackPanel = { x: canvasWidth - 270, y: 50, width: 220, height: 300 };\r\n        \r\n        // Center the heap panel\r\n        const heapWidth = Math.min(750, canvasWidth - 50);\r\n        this.heapPanel = { x: (canvasWidth - heapWidth) / 2, y: 380, width: heapWidth, height: 200 };\r\n        \r\n        this.outputPanel = { x: canvasWidth - 270, y: 400, width: 220, height: 200 };\r\n        \r\n        // Update free blocks positions\r\n        this.updateFreeBlocks();\r\n    }\r\n} ","// Blockchain Animation - Enhanced with Realistic Concepts\r\nimport { BaseAnimation } from './base-animation.js';\r\n\r\nexport class Blockchain extends BaseAnimation {\r\n    constructor(ctx) {\r\n        super(ctx);\r\n        this.canvas = ctx.canvas;\r\n        \r\n        // Blockchain properties\r\n        this.blocks = [];\r\n        this.pendingTransactions = [];\r\n        this.miners = [];\r\n        this.networkNodes = [];\r\n        this.consensus = 'proof-of-work';\r\n        \r\n        // Animation properties\r\n        this.speed = 1.0;\r\n        // Block hashes are always visible\r\n        this.showHashes = true;\r\n        // Network and auto mining are always enabled\r\n        this.showNetwork = true;\r\n        this.autoMine = true;\r\n        \r\n        // Enhanced visual properties - optimized for 800x600 canvas\r\n        this.blockWidth = 120; // Reduced to fit canvas\r\n        this.blockHeight = 85; // Reduced height\r\n        this.blockSpacing = 20; // Reduced spacing\r\n        this.chainStartX = 30; // Left margin\r\n        this.chainStartY = 160; // Positioned to allow transactions above\r\n        this.maxBlocksVisible = 5; // Show fewer blocks to fit canvas\r\n        this.scrollOffset = 0;\r\n        \r\n        // Realistic mining properties\r\n        this.difficulty = 4;\r\n        this.targetHash = '0'.repeat(this.difficulty);\r\n        this.currentNonce = 0;\r\n        this.miningBlock = null;\r\n        this.isMining = false;\r\n        this.blockReward = 50; // Block reward in tokens\r\n        this.transactionFee = 0.1; // Transaction fee\r\n        \r\n        // Dynamic difficulty adjustment\r\n        this.targetBlockTime = 10000; // 10 seconds target\r\n        this.difficultyAdjustmentInterval = 10; // Adjust every 10 blocks\r\n        this.lastDifficultyAdjustment = 0;\r\n        this.blockTimes = []; // Track block times for difficulty adjustment\r\n        \r\n        // Network properties - optimized for 800x600 canvas\r\n        this.nodeCount = 6; // Reduced for cleaner visualization\r\n        this.nodeRadius = 20; // Smaller nodes to fit better\r\n        this.networkCenterX = 0;\r\n        this.networkCenterY = 0;\r\n        \r\n        // Dynamic network properties\r\n        this.maxNodes = 6; // Reduced for cleaner demo\r\n        this.minNodes = 4; // Minimum number of nodes\r\n        this.nodeJoinInterval = 15000; // Increased time between joins\r\n        this.nodeLeaveInterval = 20000; // Increased time between leaves\r\n        this.lastNodeJoin = 0;\r\n        this.lastNodeLeave = 0;\r\n        this.nodeJoinParticles = [];\r\n        this.nodeLeaveParticles = [];\r\n        this.nodeRedistributionTimer = 0;\r\n        this.redistributionInterval = 2000; // Time to wait before redistributing nodes\r\n        \r\n        // Enhanced transaction properties\r\n        this.transactionTypes = ['transfer', 'smart_contract', 'token_mint', 'stake'];\r\n        this.transactionColors = {\r\n            transfer: '#4CAF50',\r\n            smart_contract: '#2196F3',\r\n            token_mint: '#FF9800',\r\n            stake: '#9C27B0'\r\n        };\r\n        \r\n        // Animation state\r\n        this.animationPhase = 'idle';\r\n        this.phaseTime = 0;\r\n        this.phaseDuration = 3.0;\r\n        this.guidedMode = true;\r\n        this.phaseSteps = ['mining_success', 'validation', 'propagation', 'consensus', 'finalization'];\r\n        this.currentStep = 0;\r\n        this.stepDuration = 0.2; // Reduced for faster transitions\r\n        \r\n        // Enhanced particles and effects\r\n        this.miningParticles = [];\r\n        this.validationParticles = [];\r\n        this.networkParticles = [];\r\n        this.propagationArrows = [];\r\n        this.contractExecutionParticles = [];\r\n        this.blockCreationParticles = [];\r\n        this.hashCalculationParticles = [];\r\n        this.consensusParticles = [];\r\n        this.finalizationParticles = [];\r\n        this.rewardParticles = []; // New: block reward particles\r\n        this.rejectionParticles = []; // New: block rejection particles\r\n        \r\n        // Visual effects\r\n        this.blockGlow = 0;\r\n        this.miningGlow = 0;\r\n        this.networkPulse = 0;\r\n        this.chainPulse = 0; // New: chain pulse effect\r\n        \r\n        // Enhanced statistics\r\n        this.totalBlocks = 0;\r\n        this.totalTransactions = 0;\r\n        this.totalRewards = 0;\r\n        this.consensusTime = 0;\r\n        this.networkHashrate = 0;\r\n        this.averageBlockTime = 0;\r\n        this.lastBlockTimes = []; // Track last 10 block times\r\n        \r\n        // Mining success tracking\r\n        this.successfulMiner = null; // Track which miner found the block\r\n        this.minerBlockConnection = null; // Visual connection between miner and block\r\n        this.minerRewardDisplay = null; // Display miner's reward\r\n        \r\n        // Animation timing - faster for better user experience\r\n        this.lastBlockTime = 0;\r\n        this.blockInterval = 2000; // 2 seconds for snappier animation\r\n        \r\n        // Mining progress tracking\r\n        this.miningProgress = 0; // 0-100 percentage\r\n        this.miningAttempts = 0;\r\n        this.targetAttempts = 1000; // Estimated attempts for visual feedback\r\n        \r\n        // Mining cycle control\r\n        this.isStartingMining = false; // Prevent multiple mining start attempts\r\n        \r\n        // Consensus tracking\r\n        this.consensusCompleted = false;\r\n        this.consensusDecisions = 0;\r\n        \r\n        this.initializeBlockchain();\r\n        this.initializeNetwork();\r\n        this.startGenesisBlock();\r\n    }\r\n    \r\n    initializeBlockchain() {\r\n        // Create genesis block with realistic blockchain data\r\n        const genesisBlock = {\r\n            index: 0,\r\n            timestamp: Date.now(),\r\n            transactions: [\r\n                { \r\n                    id: 'genesis_1',\r\n                    from: 'Genesis', \r\n                    to: 'Alice', \r\n                    amount: 1000, \r\n                    type: 'token_mint', \r\n                    color: '#FF9800',\r\n                    fee: 0,\r\n                    description: 'Initial token distribution'\r\n                },\r\n                { \r\n                    id: 'genesis_2',\r\n                    from: 'Genesis', \r\n                    to: 'Bob', \r\n                    amount: 500, \r\n                    type: 'token_mint', \r\n                    color: '#FF9800',\r\n                    fee: 0,\r\n                    description: 'Initial token distribution'\r\n                },\r\n                { \r\n                    id: 'genesis_3',\r\n                    from: 'Genesis', \r\n                    to: 'Charlie', \r\n                    amount: 250, \r\n                    type: 'token_mint', \r\n                    color: '#FF9800',\r\n                    fee: 0,\r\n                    description: 'Initial token distribution'\r\n                }\r\n            ],\r\n            previousHash: '0000000000000000000000000000000000000000000000000000000000000000',\r\n            hash: '',\r\n            nonce: 0,\r\n            merkleRoot: '',\r\n            isGenesis: true,\r\n            creationTime: 0,\r\n            glowIntensity: 1.0,\r\n            blockReward: 0, // Genesis has no reward\r\n            totalFees: 0\r\n        };\r\n        \r\n        genesisBlock.merkleRoot = this.calculateMerkleRoot(genesisBlock.transactions);\r\n        genesisBlock.hash = this.calculateBlockHash(genesisBlock);\r\n        \r\n        this.blocks.push(genesisBlock);\r\n        this.totalBlocks = 1;\r\n        this.totalTransactions = 3;\r\n        \r\n        // Add realistic pending transactions\r\n        this.addPendingTransaction('Alice', 'Bob', 50, 'transfer', 'Payment for services');\r\n        this.addPendingTransaction('Bob', 'Charlie', 25, 'transfer', 'Coffee payment');\r\n        this.addPendingTransaction('Alice', 'Contract', 10, 'smart_contract', 'DeFi interaction');\r\n        this.addPendingTransaction('Charlie', 'Staking', 100, 'stake', 'Staking tokens');\r\n        this.addPendingTransaction('Bob', 'David', 15, 'transfer', 'Lunch payment');\r\n        \r\n        // Initialize dynamic transaction generation\r\n        this.lastTransactionTime = Date.now();\r\n        this.transactionInterval = 3000; // Generate new transaction every 3 seconds\r\n        this.transactionTypes = ['transfer', 'smart_contract', 'token_mint', 'stake', 'swap', 'liquidity'];\r\n        this.transactionColors = {\r\n            transfer: '#4CAF50',\r\n            smart_contract: '#2196F3',\r\n            token_mint: '#FF9800',\r\n            stake: '#9C27B0',\r\n            swap: '#E91E63',\r\n            liquidity: '#00BCD4'\r\n        };\r\n        this.users = ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack'];\r\n        this.contracts = ['DeFi_Protocol', 'DEX_Exchange', 'Lending_Pool', 'Staking_Contract', 'Yield_Farm'];\r\n    }\r\n    \r\n    initializeNetwork() {\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Position network in bottom-right area, optimized for 800x600\r\n        this.networkCenterX = canvasWidth - 180; // Closer to edge but still visible\r\n        this.networkCenterY = canvasHeight - 180; // Bottom area\r\n        \r\n        // Create network nodes with enhanced design\r\n        this.networkNodes = [];\r\n        this.nextNodeId = 1; // Track the next available node ID\r\n        for (let i = 0; i < this.nodeCount; i++) {\r\n            const angle = (i / this.nodeCount) * 2 * Math.PI;\r\n            const radius = 80; // Reduced radius to fit 800x600 canvas\r\n            const x = this.networkCenterX + Math.cos(angle) * radius;\r\n            const y = this.networkCenterY + Math.sin(angle) * radius;\r\n            \r\n            this.networkNodes.push({\r\n                id: this.nextNodeId++,\r\n                x: x,\r\n                y: y,\r\n                isMining: false,\r\n                isValidating: false,\r\n                lastBlock: null,\r\n                connectionStrength: Math.random() * 0.5 + 0.5,\r\n                color: `hsl(${i * 60}, 80%, 65%)`,\r\n                pulseIntensity: 0,\r\n                isActive: false\r\n            });\r\n        }\r\n        \r\n        // Create miners\r\n        this.miners = this.networkNodes.slice(0, 3);\r\n        this.miners.forEach(miner => {\r\n            miner.isMining = true;\r\n            miner.currentNonce = 0;\r\n            miner.targetHash = this.targetHash;\r\n            miner.isActive = true;\r\n        });\r\n    }\r\n    \r\n    startGenesisBlock() {\r\n        setTimeout(() => {\r\n            this.startMining();\r\n        }, 1000); // Reduced from 3000ms\r\n    }\r\n    \r\n    startGuidedBlockAddition(block) {\r\n        this.guidedBlock = block;\r\n        this.currentStep = 0;\r\n        this.phaseTime = 0;\r\n        this.animationPhase = 'mining_success';\r\n        \r\n        // Reset network nodes for guided mode\r\n        this.networkNodes.forEach(node => {\r\n            node.isValidating = false;\r\n            node.consensusReached = false;\r\n            node.pulseIntensity = 1.0;\r\n            node.color = '#2196F3'; // Blue for mining success\r\n        });\r\n        \r\n\r\n        \r\n        // Add phase indicator\r\n        this.guidedPhaseIndicator = {\r\n            text: 'Mining Success',\r\n            alpha: 1.0,\r\n            pulseIntensity: 1.0,\r\n            color: '#00FF88', // Bright green for mining success\r\n            y: 350 // Y position over network nodes\r\n        };\r\n        \r\n        // Continue to next step after a delay\r\n        setTimeout(() => this.nextGuidedStep(), 1000);\r\n    }\r\n    \r\n    nextGuidedStep() {\r\n        // Safety check - if no guided block, exit\r\n        if (!this.guidedBlock) {\r\n            this.animationPhase = 'idle';\r\n            this.guidedPhaseIndicator = null;\r\n            return;\r\n        }\r\n        \r\n        this.currentStep++;\r\n        this.phaseTime = 0;\r\n        \r\n\r\n        \r\n        if (this.currentStep >= this.phaseSteps.length) {\r\n            // Wait for consensus to complete before checking\r\n            if (this.animationPhase === 'consensus' && !this.consensusCompleted) {\r\n                // Consensus is still in progress, wait a bit more\r\n                setTimeout(() => this.nextGuidedStep(), 500);\r\n                return;\r\n            }\r\n            \r\n            // Check if consensus was reached before finalizing\r\n            const consensusNodes = this.networkNodes.filter(node => node.consensusReached);\r\n            const consensusThreshold = this.networkNodes.length * 0.6;\r\n            \r\n            if (consensusNodes.length >= consensusThreshold) {\r\n                // Consensus reached, finalize the block\r\n                this.finalizeBlock();\r\n            } else {\r\n                // Consensus not reached, call finalization step to handle rejection\r\n                this.startFinalizationStep();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Start the current phase\r\n        const currentPhase = this.phaseSteps[this.currentStep - 1];\r\n        \r\n        switch (currentPhase) {\r\n            case 'validation':\r\n                this.startValidationStep();\r\n                break;\r\n            case 'propagation':\r\n                this.startPropagationStep();\r\n                break;\r\n            case 'consensus':\r\n                this.startConsensusStep();\r\n                break;\r\n            case 'finalization':\r\n                this.startFinalizationStep();\r\n                break;\r\n        }\r\n        \r\n        // Continue to next step - use shorter duration\r\n        setTimeout(() => this.nextGuidedStep(), 1500); // Reduced to 1.5 seconds for faster transitions\r\n    }\r\n    \r\n    startValidationStep() {\r\n        // Simulate network validation with enhanced visual effects\r\n        this.networkNodes.forEach(node => {\r\n            node.isValidating = true;\r\n            node.pulseIntensity = 1.0;\r\n            node.color = '#FF6B35'; // Orange for validation\r\n        });\r\n        \r\n        // Create validation particles with distinct color\r\n        this.createValidationParticles();\r\n        \r\n        // Add phase indicator\r\n        this.guidedPhaseIndicator = {\r\n            text: 'VALIDATION',\r\n            color: '#FF6B35',\r\n            alpha: 1.0,\r\n            y: 350\r\n        };\r\n    }\r\n    \r\n    startPropagationStep() {\r\n        // Create propagation arrows with enhanced visibility\r\n        // this.createPropagationArrows(); // Disabled arrows\r\n        \r\n        // Create broadcast particles with distinct color\r\n        this.createBroadcastParticles();\r\n        \r\n        // Change node colors to blue for propagation\r\n        this.networkNodes.forEach(node => {\r\n            node.color = '#4A90E2'; // Blue for propagation\r\n            node.pulseIntensity = 0.8;\r\n        });\r\n        \r\n        // Simulate network propagation with latency\r\n        this.broadcastBlockWithLatency();\r\n        \r\n        // Add phase indicator\r\n        this.guidedPhaseIndicator = {\r\n            text: 'PROPAGATION',\r\n            color: '#4A90E2',\r\n            alpha: 1.0,\r\n            y: 350\r\n        };\r\n    }\r\n    \r\n    startConsensusStep() {\r\n        \r\n        // Simulate consensus mechanism with network latency\r\n        this.consensusCompleted = false; // Track consensus completion\r\n        this.consensusDecisions = 0; // Track how many nodes have decided\r\n        \r\n        this.networkNodes.forEach((node, index) => {\r\n            node.isValidating = false;\r\n            node.pulseIntensity = 1.2;\r\n            node.color = '#9C27B0'; // Purple for consensus\r\n            \r\n            // Simulate network latency for consensus with realistic probability\r\n            const latency = Math.random() * 800 + 200; // 200-1000ms latency\r\n            const consensusProbability = 0.7; // 70% chance of reaching consensus\r\n            \r\n            setTimeout(() => {\r\n                // Only some nodes reach consensus (more realistic)\r\n                if (Math.random() < consensusProbability) {\r\n                    node.consensusReached = true;\r\n                    node.pulseIntensity = 1.5;\r\n                } else {\r\n                    node.consensusReached = false;\r\n                    node.pulseIntensity = 0.5;\r\n                }\r\n                \r\n                // Track consensus completion\r\n                this.consensusDecisions++;\r\n                \r\n                if (this.consensusDecisions >= this.networkNodes.length) {\r\n                    this.consensusCompleted = true;\r\n                }\r\n            }, latency);\r\n        });\r\n        \r\n        // Create consensus particles with distinct color\r\n        this.createConsensusParticles();\r\n        \r\n        // Add phase indicator\r\n        this.guidedPhaseIndicator = {\r\n            text: 'CONSENSUS',\r\n            color: '#9C27B0',\r\n            alpha: 1.0,\r\n            y: 350\r\n        };\r\n    }\r\n    \r\n    simulateNetworkLatency(callback, minDelay = 100, maxDelay = 1000) {\r\n        // Simulate realistic network latency\r\n        const latency = Math.random() * (maxDelay - minDelay) + minDelay;\r\n        setTimeout(callback, latency);\r\n    }\r\n    \r\n    broadcastBlockWithLatency() {\r\n        // Simulate realistic network propagation with latency\r\n        this.networkNodes.forEach((node, index) => {\r\n            const latency = Math.random() * 700 + 100; // 100-800ms latency\r\n            \r\n            setTimeout(() => {\r\n                node.receivedBlock = true;\r\n                node.isValidating = true;\r\n                node.pulseIntensity = 1.0;\r\n                \r\n                // Create propagation particles for this node\r\n                this.createNodePropagationParticles(node);\r\n            }, latency);\r\n        });\r\n    }\r\n    \r\n    createNodePropagationParticles(node) {\r\n        for (let i = 0; i < 5; i++) {\r\n            this.networkParticles.push({\r\n                x: node.x,\r\n                y: node.y,\r\n                vx: (Math.random() - 0.5) * 80,\r\n                vy: (Math.random() - 0.5) * 80,\r\n                life: 1.5,\r\n                maxLife: 1.5,\r\n                color: '#4A90E2', // Blue for propagation\r\n                size: 3\r\n            });\r\n        }\r\n    }\r\n    \r\n    startFinalizationStep() {\r\n        \r\n        // Prepare for finalization with enhanced effects\r\n        this.networkNodes.forEach(node => {\r\n            node.pulseIntensity = 1.5;\r\n            node.color = '#4CAF50'; // Green for finalization\r\n        });\r\n        \r\n        // Validate consensus reached\r\n        const consensusNodes = this.networkNodes.filter(node => node.consensusReached);\r\n        const consensusThreshold = this.networkNodes.length * 0.6; // 60% consensus threshold\r\n        \r\n        if (consensusNodes.length >= consensusThreshold) {\r\n            // Consensus reached, proceed with finalization\r\n            this.createFinalizationParticles();\r\n            \r\n            // Add phase indicator\r\n            this.guidedPhaseIndicator = {\r\n                text: 'Block Finalized',\r\n                alpha: 1.0,\r\n                pulseIntensity: 1.0,\r\n                color: '#4CAF50', // Green for finalization\r\n                y: 350 // Y position\r\n            };\r\n            \r\n            // Continue to next step - use shorter duration\r\n            setTimeout(() => this.nextGuidedStep(), 1000); // Reduced to 1 second for faster finalization\r\n        } else {\r\n            // Consensus not reached, reject the block\r\n            \r\n            // Create rejection particles\r\n            this.createRejectionParticles();\r\n            \r\n            // Add rejection phase indicator\r\n            this.guidedPhaseIndicator = {\r\n                text: 'BLOCK REJECTED',\r\n                alpha: 1.0,\r\n                pulseIntensity: 1.0,\r\n                color: '#FF5722', // Red for rejection\r\n                y: 350 // Y position\r\n            };\r\n            \r\n            // Reset network nodes to default colors and states\r\n            this.networkNodes.forEach(node => {\r\n                node.consensusReached = false;\r\n                node.isValidating = false;\r\n                node.pulseIntensity = 1.0;\r\n                node.color = '#2196F3'; // Default blue\r\n            });\r\n            \r\n            // Clear guided mode state and restart mining after a delay\r\n            setTimeout(() => {\r\n                this.guidedBlock = null;\r\n                this.guidedPhaseIndicator = null;\r\n                this.animationPhase = 'idle';\r\n                this.currentStep = 0;\r\n                \r\n                // Restart mining process\r\n                this.startMining();\r\n            }, 1000); // Reduced to 1 second for faster restart\r\n        }\r\n    }\r\n    \r\n    addNodeToNetwork() {\r\n        if (this.networkNodes.length >= this.maxNodes) return;\r\n        \r\n        // Calculate optimal position for new node\r\n        const targetPosition = this.calculateOptimalNodePosition();\r\n        \r\n        // Start from outside the canvas\r\n        const startX = this.networkCenterX + Math.cos(targetPosition.angle) * 300;\r\n        const startY = this.networkCenterY + Math.sin(targetPosition.angle) * 300;\r\n        \r\n        const newNode = {\r\n            id: this.nextNodeId++,\r\n            x: startX,\r\n            y: startY,\r\n            targetX: targetPosition.x,\r\n            targetY: targetPosition.y,\r\n            isMining: false,\r\n            isValidating: false,\r\n            lastBlock: null,\r\n            connectionStrength: Math.random() * 0.5 + 0.5,\r\n            color: `hsl(${this.networkNodes.length * 60}, 80%, 65%)`,\r\n            pulseIntensity: 0,\r\n            isActive: false,\r\n            isJoining: true,\r\n            joinProgress: 0,\r\n            joinSpeed: 0.08\r\n        };\r\n        \r\n        this.networkNodes.push(newNode);\r\n        \r\n        // Create join particles\r\n        this.createNodeJoinParticles(startX, startY);\r\n        \r\n        // Schedule redistribution after node joins\r\n        this.scheduleNodeRedistribution();\r\n    }\r\n    \r\n    removeNodeFromNetwork() {\r\n        if (this.networkNodes.length <= this.minNodes) return;\r\n        \r\n        // Find a non-mining node to remove\r\n        const removableNodes = this.networkNodes.filter(node => !node.isMining);\r\n        if (removableNodes.length === 0) return;\r\n        \r\n        const nodeToRemove = removableNodes[Math.floor(Math.random() * removableNodes.length)];\r\n        const index = this.networkNodes.indexOf(nodeToRemove);\r\n        \r\n        if (index !== -1) {\r\n            nodeToRemove.isLeaving = true;\r\n            nodeToRemove.leaveProgress = 0;\r\n            nodeToRemove.leaveSpeed = 0.12;\r\n            \r\n            // Create leave particles\r\n            this.createNodeLeaveParticles(nodeToRemove.x, nodeToRemove.y);\r\n            \r\n            // Remove the node after animation\r\n            setTimeout(() => {\r\n                this.networkNodes.splice(index, 1);\r\n                // Schedule redistribution after node leaves\r\n                this.scheduleNodeRedistribution();\r\n            }, 1000);\r\n        }\r\n    }\r\n    \r\n    createNodeJoinParticles(x, y) {\r\n        for (let i = 0; i < 15; i++) {\r\n            this.nodeJoinParticles.push({\r\n                x: x,\r\n                y: y,\r\n                vx: (Math.random() - 0.5) * 200,\r\n                vy: (Math.random() - 0.5) * 200,\r\n                life: 2.0,\r\n                maxLife: 2.0,\r\n                color: '#4CAF50',\r\n                size: 4\r\n            });\r\n        }\r\n    }\r\n    \r\n    createNodeLeaveParticles(x, y) {\r\n        for (let i = 0; i < 12; i++) {\r\n            this.nodeLeaveParticles.push({\r\n                x: x,\r\n                y: y,\r\n                vx: (Math.random() - 0.5) * 180,\r\n                vy: (Math.random() - 0.5) * 180,\r\n                life: 2.5,\r\n                maxLife: 2.5,\r\n                color: '#FF5722',\r\n                size: 3\r\n            });\r\n        }\r\n    }\r\n    \r\n    updateNodeJoinParticles(deltaTime) {\r\n        this.nodeJoinParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.nodeJoinParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 20 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateNodeLeaveParticles(deltaTime) {\r\n        this.nodeLeaveParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.nodeLeaveParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 25 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    calculateOptimalNodePosition() {\r\n        const radius = 120;\r\n        const nodeCount = this.networkNodes.length;\r\n        \r\n        // Calculate evenly spaced positions around the circle\r\n        const angleStep = (2 * Math.PI) / this.maxNodes;\r\n        const targetIndex = nodeCount;\r\n        const angle = targetIndex * angleStep;\r\n        \r\n        const x = this.networkCenterX + Math.cos(angle) * radius;\r\n        const y = this.networkCenterY + Math.sin(angle) * radius;\r\n        \r\n        return { x, y, angle };\r\n    }\r\n    \r\n    scheduleNodeRedistribution() {\r\n        // Reset redistribution timer\r\n        this.nodeRedistributionTimer = 0;\r\n    }\r\n    \r\n    redistributeNodes() {\r\n        const radius = 120;\r\n        const nodeCount = this.networkNodes.length;\r\n        \r\n        if (nodeCount === 0) return;\r\n        \r\n        // Calculate evenly spaced positions\r\n        const angleStep = (2 * Math.PI) / this.maxNodes;\r\n        \r\n        this.networkNodes.forEach((node, index) => {\r\n            if (!node.isJoining && !node.isLeaving) {\r\n                const targetAngle = index * angleStep;\r\n                const targetX = this.networkCenterX + Math.cos(targetAngle) * radius;\r\n                const targetY = this.networkCenterY + Math.sin(targetAngle) * radius;\r\n                \r\n                // Smoothly move to new position\r\n                node.targetX = targetX;\r\n                node.targetY = targetY;\r\n                node.isMoving = true;\r\n                node.moveSpeed = 0.10;\r\n                node.moveProgress = 0;\r\n            }\r\n        });\r\n    }\r\n    \r\n    finalizeBlockDirectly(block) {\r\n        \r\n        // Add the block to the chain\r\n        this.blocks.push(block);\r\n        this.totalBlocks++;\r\n        \r\n\r\n        \r\n        // Update total transactions\r\n        this.totalTransactions += block.transactions.length;\r\n        \r\n        // Create celebration particles\r\n        this.createBlockCreationParticles();\r\n        \r\n        // Execute smart contracts in the block\r\n        this.executeSmartContracts(block);\r\n        \r\n        // Broadcast the new block to the network\r\n        this.broadcastBlock();\r\n        \r\n        // Create reward particles for the successful miner\r\n        this.createRewardParticles();\r\n        \r\n        // Clear the successful miner's pulsating effect\r\n        if (this.successfulMiner) {\r\n            this.successfulMiner.pulseIntensity = 0;\r\n            this.successfulMiner.color = this.successfulMiner.originalColor || `hsl(${this.miners.indexOf(this.successfulMiner) * 60}, 80%, 65%)`;\r\n        }\r\n        this.successfulMiner = null;\r\n        this.minerBlockConnection = null;\r\n        this.minerRewardDisplay = null;\r\n        \r\n\r\n        \r\n        // Start mining the next block after a delay\r\n        setTimeout(() => {\r\n            console.log(`[DIRECT BLOCK] 🔄 Starting mining for next block`);\r\n            this.startMining();\r\n        }, 2000);\r\n    }\r\n    \r\n    finalizeBlock() {\r\n        \r\n        if (!this.guidedBlock) {\r\n            return;\r\n        }\r\n        \r\n        // Add the block to the chain\r\n        this.blocks.push(this.guidedBlock);\r\n        this.totalBlocks++;\r\n        \r\n\r\n        \r\n        // Update total transactions\r\n        this.totalTransactions += this.guidedBlock.transactions.length;\r\n        \r\n        // Create celebration particles\r\n        this.createBlockCreationParticles();\r\n        \r\n        // Execute smart contracts in the block\r\n        this.executeSmartContracts(this.guidedBlock);\r\n        \r\n        // Broadcast the new block to the network\r\n        this.broadcastBlock();\r\n        \r\n        // Create reward particles for the successful miner\r\n        this.createRewardParticles();\r\n        \r\n        // Clear the successful miner's pulsating effect\r\n        if (this.successfulMiner) {\r\n            this.successfulMiner.pulseIntensity = 0;\r\n            this.successfulMiner.color = this.successfulMiner.originalColor || `hsl(${this.miners.indexOf(this.successfulMiner) * 60}, 80%, 65%)`;\r\n        }\r\n        this.successfulMiner = null;\r\n        this.minerBlockConnection = null;\r\n        this.minerRewardDisplay = null;\r\n        \r\n        // Reset network nodes to default colors and states after successful block addition\r\n        this.networkNodes.forEach(node => {\r\n            node.consensusReached = false;\r\n            node.isValidating = false;\r\n            node.pulseIntensity = 1.0;\r\n            node.color = '#2196F3'; // Default blue color\r\n        });\r\n        \r\n        // Clear guided mode state\r\n        this.guidedBlock = null;\r\n        this.guidedPhaseIndicator = null;\r\n        this.animationPhase = 'idle';\r\n        this.currentStep = 0;\r\n        \r\n\r\n        // Start mining the next block after a delay\r\n        setTimeout(() => {\r\n            this.startMining();\r\n        }, 2000);\r\n    }\r\n    \r\n    generateNewTransactions() {\r\n        const currentTime = Date.now();\r\n        \r\n        // Generate new transactions periodically\r\n        if (currentTime - this.lastTransactionTime > this.transactionInterval) {\r\n            // Generate 1-4 transactions at a time (more dynamic)\r\n            const numTransactions = Math.floor(Math.random() * 4) + 1;\r\n            \r\n            for (let i = 0; i < numTransactions; i++) {\r\n                const randomTx = this.generateRandomTransaction();\r\n                this.addPendingTransaction(\r\n                    randomTx.from,\r\n                    randomTx.to,\r\n                    randomTx.amount,\r\n                    randomTx.type,\r\n                    randomTx.description,\r\n                    randomTx.fee\r\n                );\r\n            }\r\n            \r\n            this.lastTransactionTime = currentTime;\r\n            \r\n            // More dynamic interval (1.5-3.5 seconds)\r\n            this.transactionInterval = 1500 + Math.random() * 2000;\r\n        }\r\n        \r\n        // Remove expired transactions (simulate real mempool behavior)\r\n        this.pendingTransactions = this.pendingTransactions.filter(tx => {\r\n            const age = currentTime - tx.timestamp;\r\n            // Remove transactions older than 30 seconds (simplified)\r\n            return age < 30000;\r\n        });\r\n        \r\n        // Add some random transaction failures (realistic)\r\n        if (Math.random() < 0.1 && this.pendingTransactions.length > 0) {\r\n            // Randomly remove a low-fee transaction (simulate rejection)\r\n            const lowFeeIndex = this.pendingTransactions.findIndex(tx => tx.fee < this.transactionFee * 0.5);\r\n            if (lowFeeIndex > -1) {\r\n                this.pendingTransactions.splice(lowFeeIndex, 1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    generateRandomTransaction() {\r\n        const type = this.transactionTypes[Math.floor(Math.random() * this.transactionTypes.length)];\r\n        let from, to, amount, description;\r\n        \r\n        switch (type) {\r\n            case 'transfer':\r\n                from = this.users[Math.floor(Math.random() * this.users.length)];\r\n                to = this.users[Math.floor(Math.random() * this.users.length)];\r\n                while (to === from) {\r\n                    to = this.users[Math.floor(Math.random() * this.users.length)];\r\n                }\r\n                amount = Math.floor(Math.random() * 200) + 5; // 5-205 tokens\r\n                description = this.getRandomTransferDescription();\r\n                break;\r\n                \r\n            case 'smart_contract':\r\n                from = this.users[Math.floor(Math.random() * this.users.length)];\r\n                to = this.contracts[Math.floor(Math.random() * this.contracts.length)];\r\n                amount = Math.floor(Math.random() * 50) + 1; // 1-51 tokens\r\n                description = this.getRandomContractDescription();\r\n                break;\r\n                \r\n            case 'token_mint':\r\n                from = 'System';\r\n                to = this.users[Math.floor(Math.random() * this.users.length)];\r\n                amount = Math.floor(Math.random() * 100) + 10; // 10-110 tokens\r\n                description = 'Token minting';\r\n                break;\r\n                \r\n            case 'stake':\r\n                from = this.users[Math.floor(Math.random() * this.users.length)];\r\n                to = 'Staking_Contract';\r\n                amount = Math.floor(Math.random() * 150) + 20; // 20-170 tokens\r\n                description = 'Staking tokens for rewards';\r\n                break;\r\n                \r\n            case 'swap':\r\n                from = this.users[Math.floor(Math.random() * this.users.length)];\r\n                to = 'DEX_Exchange';\r\n                amount = Math.floor(Math.random() * 80) + 5; // 5-85 tokens\r\n                description = 'Token swap on DEX';\r\n                break;\r\n                \r\n            case 'liquidity':\r\n                from = this.users[Math.floor(Math.random() * this.users.length)];\r\n                to = 'Liquidity_Pool';\r\n                amount = Math.floor(Math.random() * 120) + 15; // 15-135 tokens\r\n                description = 'Adding liquidity to pool';\r\n                break;\r\n        }\r\n        \r\n        // Dynamic fee based on transaction type and amount\r\n        let fee = this.transactionFee;\r\n        if (type === 'smart_contract' || type === 'swap') {\r\n            fee = this.transactionFee * 2; // Higher fees for complex transactions\r\n        } else if (type === 'liquidity') {\r\n            fee = this.transactionFee * 1.5; // Medium fees for liquidity operations\r\n        }\r\n        \r\n        return { from, to, amount, type, description, fee };\r\n    }\r\n    \r\n    getRandomTransferDescription() {\r\n        const descriptions = [\r\n            'Payment for services',\r\n            'Coffee payment',\r\n            'Lunch payment',\r\n            'Rent payment',\r\n            'Grocery payment',\r\n            'Gas payment',\r\n            'Movie tickets',\r\n            'Restaurant bill',\r\n            'Shopping payment',\r\n            'Transportation fee'\r\n        ];\r\n        return descriptions[Math.floor(Math.random() * descriptions.length)];\r\n    }\r\n    \r\n    getRandomContractDescription() {\r\n        const descriptions = [\r\n            'DeFi interaction',\r\n            'Yield farming',\r\n            'Lending operation',\r\n            'Borrowing funds',\r\n            'Collateral deposit',\r\n            'Interest payment',\r\n            'Protocol interaction',\r\n            'Smart contract call',\r\n            'Automated trading',\r\n            'Liquidation protection'\r\n        ];\r\n        return descriptions[Math.floor(Math.random() * descriptions.length)];\r\n    }\r\n    \r\n    addPendingTransaction(from, to, amount, type, description = '', fee = null) {\r\n        // Validate transaction before adding\r\n        const tx = {\r\n            id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            from: from,\r\n            to: to,\r\n            amount: amount,\r\n            type: type,\r\n            color: this.transactionColors[type] || '#4CAF50',\r\n            fee: fee || this.transactionFee,\r\n            description: description,\r\n            timestamp: Date.now()\r\n        };\r\n        \r\n        // Validate transaction\r\n        if (!this.validateTransaction(tx)) {\r\n            return false;\r\n        }\r\n        \r\n        // Check mempool size (simplified)\r\n        if (this.pendingTransactions.length >= 100) {\r\n            // Remove lowest fee transaction if mempool is full\r\n            this.pendingTransactions.sort((a, b) => b.fee - a.fee);\r\n            this.pendingTransactions.pop();\r\n        }\r\n        \r\n        this.pendingTransactions.push(tx);\r\n        this.totalTransactions++;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    selectTransactionsForBlock() {\r\n        // Select transactions based on fee priority (realistic)\r\n        const sortedTransactions = [...this.pendingTransactions].sort((a, b) => b.fee - a.fee);\r\n        \r\n        // Dynamic block size based on transaction count (3-6 transactions)\r\n        const maxTransactions = Math.min(6, Math.max(3, Math.floor(this.pendingTransactions.length / 2)));\r\n        let selectedTransactions = sortedTransactions.slice(0, maxTransactions);\r\n        \r\n        // If no pending transactions, create a default transaction to keep mining active\r\n        if (selectedTransactions.length === 0) {\r\n            selectedTransactions = [{\r\n                id: `default_${Date.now()}`,\r\n                from: 'System',\r\n                to: 'Miner',\r\n                amount: 0,\r\n                type: 'transfer',\r\n                color: '#9E9E9E',\r\n                fee: 0,\r\n                description: 'Empty block reward'\r\n            }];\r\n        }\r\n        \r\n        // Remove selected transactions from pending pool\r\n        selectedTransactions.forEach(tx => {\r\n            const index = this.pendingTransactions.indexOf(tx);\r\n            if (index > -1) {\r\n                this.pendingTransactions.splice(index, 1);\r\n            }\r\n        });\r\n        \r\n        return selectedTransactions;\r\n    }\r\n    \r\n    calculateMerkleRoot(transactions) {\r\n        if (transactions.length === 0) return '';\r\n        \r\n        let hashes = transactions.map(tx => this.hashString(JSON.stringify(tx)));\r\n        \r\n        while (hashes.length > 1) {\r\n            const newHashes = [];\r\n            for (let i = 0; i < hashes.length; i += 2) {\r\n                const left = hashes[i];\r\n                const right = i + 1 < hashes.length ? hashes[i + 1] : left;\r\n                newHashes.push(this.hashString(left + right));\r\n            }\r\n            hashes = newHashes;\r\n        }\r\n        \r\n        return hashes[0];\r\n    }\r\n    \r\n    calculateBlockHash(block) {\r\n        const blockString = JSON.stringify({\r\n            index: block.index,\r\n            timestamp: block.timestamp,\r\n            transactions: block.transactions,\r\n            previousHash: block.previousHash,\r\n            merkleRoot: block.merkleRoot,\r\n            nonce: block.nonce\r\n        });\r\n        \r\n        return this.hashString(blockString);\r\n    }\r\n    \r\n    hashString(str) {\r\n        // Improved hash function that's more realistic\r\n        let hash = 0;\r\n        const prime = 31;\r\n        const mod = 1e9 + 7;\r\n        \r\n        for (let i = 0; i < str.length; i++) {\r\n            const char = str.charCodeAt(i);\r\n            hash = ((hash * prime) % mod + char) % mod;\r\n        }\r\n        \r\n        // Convert to hex and ensure consistent length\r\n        const hexHash = Math.abs(hash).toString(16).padStart(8, '0');\r\n        return hexHash.repeat(8); // 64-character hash\r\n    }\r\n    \r\n    validateBlock(block) {\r\n        // Validate block structure and content\r\n        if (!block || typeof block.index !== 'number') {\r\n            return false;\r\n        }\r\n        if (!block.transactions || !Array.isArray(block.transactions)) {\r\n            return false;\r\n        }\r\n        if (!block.previousHash || typeof block.previousHash !== 'string') {\r\n            return false;\r\n        }\r\n        if (typeof block.nonce !== 'number') {\r\n            return false;\r\n        }\r\n        \r\n        // Validate block index\r\n        if (block.index !== this.blocks.length) {\r\n            return false;\r\n        }\r\n        \r\n        // Validate previous hash (except for genesis)\r\n        if (block.index > 0) {\r\n            const lastBlock = this.blocks[this.blocks.length - 1];\r\n            if (block.previousHash !== lastBlock.hash) {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        // Allow empty blocks (remove transaction length validation)\r\n        // if (block.transactions.length === 0) return false;\r\n        \r\n        // Validate block size (simplified)\r\n        const blockSize = JSON.stringify(block).length;\r\n        if (blockSize > 1000000) {\r\n            return false;\r\n        }\r\n        \r\n        // Validate hash\r\n        const calculatedHash = this.calculateBlockHash(block);\r\n        if (block.hash !== calculatedHash) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    validateTransaction(tx) {\r\n        // Validate transaction structure\r\n        if (!tx || typeof tx.id !== 'string') return false;\r\n        if (!tx.from || !tx.to || typeof tx.amount !== 'number') return false;\r\n        if (tx.amount <= 0) return false;\r\n        if (typeof tx.fee !== 'number' || tx.fee < 0) return false;\r\n        \r\n        // Check for double spending (simplified)\r\n        const existingTx = this.pendingTransactions.find(t => t.id === tx.id);\r\n        if (existingTx) return false;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    startMining() {\r\n        if (this.isMining || this.guidedBlock || this.isStartingMining) {\r\n            return;\r\n        }\r\n        \r\n        this.isStartingMining = true;\r\n        this.isMining = true;\r\n        this.animationPhase = 'mining';\r\n        this.phaseTime = 0;\r\n        this.miningGlow = 1.0;\r\n        \r\n        // Reset mining progress\r\n        this.miningProgress = 0;\r\n        this.miningAttempts = 0;\r\n        \r\n        // Create new block with realistic data\r\n        const lastBlock = this.blocks[this.blocks.length - 1];\r\n        const selectedTransactions = this.selectTransactionsForBlock(); // Select transactions based on fee priority\r\n        \r\n        // Calculate total fees from selected transactions\r\n        const totalFees = selectedTransactions.reduce((sum, tx) => sum + tx.fee, 0);\r\n        \r\n        const newBlock = {\r\n            index: lastBlock.index + 1,\r\n            timestamp: Date.now(),\r\n            transactions: selectedTransactions,\r\n            previousHash: lastBlock.hash,\r\n            hash: '',\r\n            nonce: 0,\r\n            merkleRoot: '',\r\n            isGenesis: false,\r\n            creationTime: 0,\r\n            glowIntensity: 0,\r\n            blockReward: this.blockReward, // Block reward for miner\r\n            totalFees: totalFees // Total transaction fees\r\n        };\r\n        \r\n        newBlock.merkleRoot = this.calculateMerkleRoot(newBlock.transactions);\r\n        this.miningBlock = newBlock;\r\n        \r\n        // Start mining on all miners with different starting nonces\r\n        this.miners.forEach((miner, index) => {\r\n            miner.currentNonce = Math.floor(Math.random() * 1000) + (index * 1000);\r\n            miner.isMining = true;\r\n            miner.pulseIntensity = 1.0;\r\n            miner.lastHashRate = 0;\r\n        });\r\n        \r\n        // Create mining start particles\r\n        this.createMiningStartParticles();\r\n        \r\n        // Reset the flag after a short delay to allow the mining cycle to start\r\n        setTimeout(() => {\r\n            this.isStartingMining = false;\r\n        }, 100);\r\n    }\r\n    \r\n    adjustDifficulty() {\r\n        // Adjust difficulty based on recent block times\r\n        if (this.blocks.length % this.difficultyAdjustmentInterval !== 0) return;\r\n        \r\n        if (this.blockTimes.length < this.difficultyAdjustmentInterval) return;\r\n        \r\n        const averageBlockTime = this.blockTimes.reduce((sum, time) => sum + time, 0) / this.blockTimes.length;\r\n        const timeRatio = averageBlockTime / this.targetBlockTime;\r\n        \r\n        // Adjust difficulty based on time ratio\r\n        if (timeRatio > 1.2) {\r\n            // Blocks are taking too long, decrease difficulty\r\n            this.difficulty = Math.max(1, this.difficulty - 1);\r\n        } else if (timeRatio < 0.8) {\r\n            // Blocks are too fast, increase difficulty\r\n            this.difficulty = Math.min(8, this.difficulty + 1);\r\n        }\r\n        \r\n        // Update target hash\r\n        this.targetHash = '0'.repeat(this.difficulty);\r\n        \r\n        // Clear block times for next adjustment\r\n        this.blockTimes = [];\r\n        \r\n\r\n    }\r\n    \r\n    mineBlock() {\r\n        if (!this.isMining || !this.miningBlock || this.guidedBlock) {\r\n            return;\r\n        }\r\n        \r\n        // Ensure mining block index is current\r\n        const expectedIndex = this.blocks.length;\r\n        if (this.miningBlock.index !== expectedIndex) {\r\n            \r\n            // Create a fresh mining block with correct index and previous hash\r\n            const lastBlock = this.blocks[this.blocks.length - 1];\r\n            const selectedTransactions = this.selectTransactionsForBlock();\r\n            const totalFees = selectedTransactions.reduce((sum, tx) => sum + tx.fee, 0);\r\n            \r\n            this.miningBlock = {\r\n                index: expectedIndex,\r\n                timestamp: Date.now(),\r\n                transactions: selectedTransactions,\r\n                previousHash: lastBlock.hash,\r\n                hash: '',\r\n                nonce: 0,\r\n                merkleRoot: this.calculateMerkleRoot(selectedTransactions),\r\n                isGenesis: false,\r\n                creationTime: 0,\r\n                glowIntensity: 0,\r\n                blockReward: this.blockReward,\r\n                totalFees: totalFees\r\n            };\r\n            \r\n\r\n        }\r\n        \r\n        // Use dynamic difficulty\r\n        const targetHash = '0'.repeat(this.difficulty);\r\n        \r\n        // Calculate mining speed based on difficulty and animation speed\r\n        const baseNoncesPerFrame = 800; // Increased for faster mining\r\n        const difficultyMultiplier = Math.max(0.1, (9 - this.difficulty) * 1.0); // Increased multiplier\r\n        const speedMultiplier = this.speed;\r\n        const noncesToTry = Math.max(100, Math.floor(baseNoncesPerFrame * difficultyMultiplier * speedMultiplier));\r\n        \r\n        // Update network hashrate\r\n        this.networkHashrate = this.miners.length * noncesToTry * 60; // H/s\r\n        \r\n        // Update mining progress (visual feedback)\r\n        this.miningAttempts += noncesToTry;\r\n        this.targetAttempts = Math.pow(16, this.difficulty) / 10; // Rough estimate\r\n        this.miningProgress = Math.min(100, (this.miningAttempts / this.targetAttempts) * 100);\r\n        \r\n        for (let i = 0; i < noncesToTry; i++) {\r\n            this.miningBlock.nonce++;\r\n            this.miningBlock.hash = this.calculateBlockHash(this.miningBlock);\r\n            \r\n            // Check if hash meets difficulty requirement\r\n            if (this.miningBlock.hash.startsWith(targetHash)) {\r\n                // Validate the block before accepting it\r\n                if (!this.validateBlock(this.miningBlock)) {\r\n                    return;\r\n                }\r\n                \r\n                // Determine which miner found the block (simplified)\r\n                const successfulMinerIndex = Math.floor(Math.random() * this.miners.length);\r\n                this.successfulMiner = this.miners[successfulMinerIndex];\r\n                \r\n                // Store original color for restoration\r\n                if (!this.successfulMiner.originalColor) {\r\n                    this.successfulMiner.originalColor = this.successfulMiner.color;\r\n                }\r\n                \r\n                // Create beaming/bouncing effect around successful miner (no arrow)\r\n                this.successfulMiner.pulseIntensity = 2.0;\r\n                this.successfulMiner.color = '#00FF88'; // Bright green for success\r\n                \r\n                // Block mined successfully\r\n                this.miningBlock.creationTime = Date.now();\r\n                this.miningBlock.glowIntensity = 1.0;\r\n                \r\n                // Record block time for difficulty adjustment\r\n                const blockTime = this.miningBlock.creationTime - this.lastBlockTime;\r\n                this.blockTimes.push(blockTime);\r\n                this.lastBlockTime = this.miningBlock.creationTime;\r\n                \r\n                // Adjust difficulty if needed\r\n                this.adjustDifficulty();\r\n                \r\n                // Enable guided mode for all difficulty levels\r\n                // Start guided step-by-step process\r\n                this.startGuidedBlockAddition(this.miningBlock);\r\n                \r\n                return; // Exit the loop since we found a valid hash\r\n            }\r\n        }\r\n    }\r\n    \r\n    createMinerBlockConnection() {\r\n        if (!this.successfulMiner || !this.miningBlock) return;\r\n        \r\n        // Calculate block position\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            const visibleIndex = totalBlocks;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            if (totalBlocks > 4) {\r\n                blockX += 80;\r\n            }\r\n        }\r\n        \r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        // Create connection between miner and block\r\n        this.minerBlockConnection = {\r\n            startX: this.successfulMiner.x,\r\n            startY: this.successfulMiner.y,\r\n            endX: blockX,\r\n            endY: blockY,\r\n            progress: 0,\r\n            speed: 0.02,\r\n            color: '#00FF88', // Bright green for success - better visibility\r\n            width: 3,\r\n            alpha: 1.0,\r\n            pulseIntensity: 1.0\r\n        };\r\n        \r\n        // Create reward display\r\n        this.minerRewardDisplay = {\r\n            x: this.successfulMiner.x,\r\n            y: this.successfulMiner.y - 40,\r\n            text: `+${this.blockReward + this.miningBlock.totalFees} tokens`,\r\n            color: '#1E3A8A', // Dark blue for better visibility on white background\r\n            alpha: 1.0,\r\n            life: 3.0,\r\n            maxLife: 3.0,\r\n            velocity: -30 // Move upward\r\n        };\r\n    }\r\n    \r\n    createMiningStartParticles() {\r\n        this.miners.forEach(miner => {\r\n            for (let i = 0; i < 8; i++) {\r\n                this.miningParticles.push({\r\n                    x: miner.x,\r\n                    y: miner.y,\r\n                    vx: (Math.random() - 0.5) * 80,\r\n                    vy: (Math.random() - 0.5) * 80,\r\n                    life: 2.0,\r\n                    maxLife: 2.0,\r\n                    color: '#FF9800',\r\n                    size: 3,\r\n                    type: 'mining_start'\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    createBlockCreationParticles() {\r\n        const lastBlock = this.blocks[this.blocks.length - 1];\r\n        // Calculate position based on new block layout\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            // If 4 or fewer blocks, position based on actual index\r\n            const visibleIndex = totalBlocks - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            // For the last two blocks, position at the end of the visible chain\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            // Add extra space for ellipses if there are more than 4 blocks\r\n            if (totalBlocks > 4) {\r\n                blockX += 80; // Updated space for ellipses\r\n            }\r\n        }\r\n        \r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        for (let i = 0; i < 20; i++) {\r\n            this.blockCreationParticles.push({\r\n                x: blockX,\r\n                y: blockY,\r\n                vx: (Math.random() - 0.5) * 150,\r\n                vy: (Math.random() - 0.5) * 150,\r\n                life: 3.0,\r\n                maxLife: 3.0,\r\n                color: '#4CAF50',\r\n                size: 4,\r\n                type: 'block_creation'\r\n            });\r\n        }\r\n    }\r\n    \r\n    broadcastBlock() {\r\n        // Simulate network broadcast\r\n        this.networkNodes.forEach(node => {\r\n            node.isValidating = true;\r\n            node.lastBlock = this.blocks[this.blocks.length - 1];\r\n            node.pulseIntensity = 1.0;\r\n        });\r\n        \r\n        // Create animated propagation arrows\r\n        // this.createPropagationArrows(); // Disabled arrows\r\n        \r\n        // Create broadcast particles\r\n        this.createBroadcastParticles();\r\n    }\r\n    \r\n    createPropagationArrows() {\r\n        const lastBlock = this.blocks[this.blocks.length - 1];\r\n        // Calculate position based on new block layout\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            // If 4 or fewer blocks, position based on actual index\r\n            const visibleIndex = totalBlocks - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            // For the last two blocks, position at the end of the visible chain\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            // Add extra space for ellipses if there are more than 4 blocks\r\n            if (totalBlocks > 4) {\r\n                blockX += 80; // Updated space for ellipses\r\n            }\r\n        }\r\n        \r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        this.networkNodes.forEach(node => {\r\n            this.propagationArrows.push({\r\n                startX: blockX,\r\n                startY: blockY,\r\n                endX: node.x,\r\n                endY: node.y,\r\n                progress: 0,\r\n                speed: 0.03,\r\n                color: '#4CAF50',\r\n                width: 4,\r\n                alpha: 1.0\r\n            });\r\n        });\r\n    }\r\n    \r\n    createBroadcastParticles() {\r\n        this.networkNodes.forEach(node => {\r\n            for (let i = 0; i < 8; i++) {\r\n                this.networkParticles.push({\r\n                    x: node.x,\r\n                    y: node.y,\r\n                    vx: (Math.random() - 0.5) * 100,\r\n                    vy: (Math.random() - 0.5) * 100,\r\n                    life: 1.8,\r\n                    maxLife: 1.8,\r\n                    color: '#4A90E2', // Blue for propagation\r\n                    size: 3\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateNetworkParticles(deltaTime) {\r\n        this.networkParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.networkParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            // Move towards target\r\n            const dx = particle.targetX - particle.x;\r\n            const dy = particle.targetY - particle.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance > 1) {\r\n                particle.vx = (dx / distance) * 120;\r\n                particle.vy = (dy / distance) * 120;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n        });\r\n    }\r\n    \r\n    createMiningParticles() {\r\n        if (!this.isMining) return;\r\n        \r\n        // Reduced particle creation rate for cleaner visualization\r\n        const particleRate = 0.15 * this.speed;\r\n        \r\n        this.miners.forEach(miner => {\r\n            if (Math.random() < particleRate) {\r\n                this.miningParticles.push({\r\n                    x: miner.x,\r\n                    y: miner.y,\r\n                    vx: (Math.random() - 0.5) * 40,\r\n                    vy: (Math.random() - 0.5) * 40,\r\n                    life: 1.0,\r\n                    maxLife: 1.0,\r\n                    color: '#FF9800',\r\n                    size: 2,\r\n                    type: 'mining'\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    createMiningSuccessParticles() {\r\n        this.miners.forEach(miner => {\r\n            for (let i = 0; i < 6; i++) { // Reduced from 12 to 6\r\n                this.miningParticles.push({\r\n                    x: miner.x,\r\n                    y: miner.y,\r\n                    vx: (Math.random() - 0.5) * 150,\r\n                    vy: (Math.random() - 0.5) * 150,\r\n                    life: 4.0,\r\n                    maxLife: 4.0,\r\n                    color: '#4CAF50',\r\n                    size: 5,\r\n                    type: 'success'\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    executeSmartContracts(block) {\r\n        block.transactions.forEach(tx => {\r\n            if (tx.type === 'smart_contract') {\r\n                this.createSmartContractExecution(tx);\r\n            }\r\n        });\r\n    }\r\n    \r\n    createSmartContractExecution(tx) {\r\n        // Calculate position based on new block layout\r\n        const totalBlocks = this.blocks.length;\r\n        let contractX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            // If 4 or fewer blocks, position based on actual index\r\n            const visibleIndex = totalBlocks - 1;\r\n            contractX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            // For the last two blocks, position at the end of the visible chain\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length - 1;\r\n            contractX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            // Add extra space for ellipses if there are more than 4 blocks\r\n            if (totalBlocks > 4) {\r\n                contractX += 80; // Updated space for ellipses\r\n            }\r\n        }\r\n        \r\n        const contractY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        for (let i = 0; i < 15; i++) {\r\n            this.contractExecutionParticles.push({\r\n                x: contractX,\r\n                y: contractY,\r\n                vx: (Math.random() - 0.5) * 140,\r\n                vy: (Math.random() - 0.5) * 140,\r\n                life: 2.5,\r\n                maxLife: 2.5,\r\n                color: '#2196F3',\r\n                size: 4\r\n            });\r\n        }\r\n    }\r\n    \r\n    createValidationParticles() {\r\n        this.networkNodes.forEach(node => {\r\n            for (let i = 0; i < 4; i++) { // Reduced from 10 to 4\r\n                this.validationParticles.push({\r\n                    x: node.x,\r\n                    y: node.y,\r\n                    vx: (Math.random() - 0.5) * 100,\r\n                    vy: (Math.random() - 0.5) * 100,\r\n                    life: 1.5,\r\n                    maxLife: 1.5,\r\n                    color: '#FF6B35', // Orange for validation\r\n                    size: 3\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    createConsensusParticles() {\r\n        this.networkNodes.forEach(node => {\r\n            for (let i = 0; i < 5; i++) { // Reduced from 12 to 5\r\n                this.consensusParticles.push({\r\n                    x: node.x,\r\n                    y: node.y,\r\n                    vx: (Math.random() - 0.5) * 80,\r\n                    vy: (Math.random() - 0.5) * 80,\r\n                    life: 1.8,\r\n                    maxLife: 1.8,\r\n                    color: '#9C27B0', // Purple for consensus\r\n                    size: 3\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    createFinalizationParticles() {\r\n        // Create finalization particles around the last block\r\n        const lastBlock = this.blocks[this.blocks.length - 1];\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            const visibleIndex = totalBlocks - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            if (totalBlocks > 4) {\r\n                blockX += 80;\r\n            }\r\n        }\r\n        \r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        for (let i = 0; i < 6; i++) { // Reduced from 15 to 6\r\n            this.finalizationParticles.push({\r\n                x: blockX,\r\n                y: blockY,\r\n                vx: (Math.random() - 0.5) * 80,\r\n                vy: (Math.random() - 0.5) * 80,\r\n                life: 1.5,\r\n                maxLife: 1.5,\r\n                color: '#4CAF50',\r\n                size: 2\r\n            });\r\n        }\r\n    }\r\n    \r\n    createRewardParticles() {\r\n        // Create reward particles around the last block\r\n        const lastBlock = this.blocks[this.blocks.length - 1];\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n        \r\n        if (totalBlocks <= 4) {\r\n            const visibleIndex = totalBlocks - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length - 1;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n            \r\n            if (totalBlocks > 4) {\r\n                blockX += 80;\r\n            }\r\n        }\r\n        \r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n        \r\n        for (let i = 0; i < 12; i++) {\r\n            this.rewardParticles.push({\r\n                x: blockX,\r\n                y: blockY,\r\n                vx: (Math.random() - 0.5) * 100,\r\n                vy: (Math.random() - 0.5) * 100,\r\n                life: 3.0,\r\n                maxLife: 3.0,\r\n                color: '#FFD700', // Gold color for rewards\r\n                size: 4\r\n            });\r\n        }\r\n    }\r\n    \r\n    updateMiningParticles(deltaTime) {\r\n        this.miningParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.miningParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 25 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateBlockCreationParticles(deltaTime) {\r\n        this.blockCreationParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.blockCreationParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 30 * deltaTime;\r\n        });\r\n    }\r\n    \r\n    updateContractExecutionParticles(deltaTime) {\r\n        this.contractExecutionParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.contractExecutionParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 30 * deltaTime;\r\n        });\r\n    }\r\n    \r\n    updatePropagationArrows(deltaTime) {\r\n        this.propagationArrows.forEach((arrow, index) => {\r\n            arrow.progress += arrow.speed;\r\n            \r\n            if (arrow.progress >= 1) {\r\n                this.propagationArrows.splice(index, 1);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateValidationParticles(deltaTime) {\r\n        this.validationParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.validationParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 20 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateConsensusParticles(deltaTime) {\r\n        this.consensusParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.consensusParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 25 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateFinalizationParticles(deltaTime) {\r\n        this.finalizationParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.finalizationParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 30 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateRewardParticles(deltaTime) {\r\n        this.rewardParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.rewardParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 30 * deltaTime; // Gravity\r\n        });\r\n    }\r\n    \r\n    updateRejectionParticles(deltaTime) {\r\n        this.rejectionParticles.forEach((particle, index) => {\r\n            particle.life -= deltaTime;\r\n            \r\n            if (particle.life <= 0) {\r\n                this.rejectionParticles.splice(index, 1);\r\n                return;\r\n            }\r\n            \r\n            particle.x += particle.vx * deltaTime;\r\n            particle.y += particle.vy * deltaTime;\r\n            particle.vy += 40 * deltaTime; // Stronger gravity for rejection\r\n        });\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    setDifficulty(difficulty) {\r\n        this.difficulty = difficulty;\r\n        this.targetHash = '0'.repeat(this.difficulty);\r\n        \r\n        // Update all miners with new difficulty\r\n        this.miners.forEach(miner => {\r\n            miner.targetHash = this.targetHash;\r\n        });\r\n        \r\n        // If currently mining, update the mining block target\r\n        if (this.miningBlock) {\r\n            this.miningBlock.hash = this.calculateBlockHash(this.miningBlock);\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        // Store original deltaTime for animations\r\n        const animationDeltaTime = deltaTime;\r\n        \r\n        // Apply speed only to mining-related operations\r\n        const miningDeltaTime = deltaTime * this.speed;\r\n        \r\n        // Update animation phase (use original deltaTime for consistent animations)\r\n        this.phaseTime += animationDeltaTime;\r\n        \r\n        // Update visual effects (use original deltaTime for consistent animations)\r\n        this.blockGlow = Math.max(0, this.blockGlow - animationDeltaTime * 2);\r\n        this.miningGlow = Math.max(0, this.miningGlow - animationDeltaTime * 1.5);\r\n        this.networkPulse = (this.networkPulse + animationDeltaTime * 3) % (2 * Math.PI);\r\n        \r\n        // Update dynamic network nodes (use original deltaTime for consistent movement)\r\n        this.updateDynamicNodes(animationDeltaTime);\r\n        \r\n        // Mine block if mining (use mining deltaTime for speed control)\r\n        if (this.isMining && this.miningBlock) {\r\n            this.mineBlock();\r\n        }\r\n        \r\n        // Update all particle types (use original deltaTime for consistent animations)\r\n        this.updateMiningParticles(animationDeltaTime);\r\n        this.updateNetworkParticles(animationDeltaTime);\r\n        this.updateContractExecutionParticles(animationDeltaTime);\r\n        this.updateBlockCreationParticles(animationDeltaTime);\r\n        // this.updatePropagationArrows(animationDeltaTime); // Disabled arrows\r\n        this.updateValidationParticles(animationDeltaTime);\r\n        this.updateConsensusParticles(animationDeltaTime);\r\n        this.updateFinalizationParticles(animationDeltaTime);\r\n        this.updateRewardParticles(animationDeltaTime);\r\n        this.updateRejectionParticles(animationDeltaTime);\r\n        this.updateNodeJoinParticles(animationDeltaTime);\r\n        this.updateNodeLeaveParticles(animationDeltaTime);\r\n        \r\n        // Create new particles\r\n        this.createMiningParticles();\r\n        \r\n        // Generate new transactions periodically\r\n        this.generateNewTransactions();\r\n        \r\n        // Update network validation (use original deltaTime for consistent animations)\r\n        this.networkNodes.forEach(node => {\r\n            if (node.isValidating && this.phaseTime > 1.5) {\r\n                node.isValidating = false;\r\n                node.pulseIntensity = 0;\r\n            }\r\n            node.pulseIntensity = Math.max(0, node.pulseIntensity - animationDeltaTime * 2);\r\n        });\r\n        \r\n        // Update block glow (use original deltaTime for consistent animations)\r\n        this.blocks.forEach(block => {\r\n            if (block.glowIntensity > 0) {\r\n                block.glowIntensity = Math.max(0, block.glowIntensity - animationDeltaTime * 1.5);\r\n            }\r\n        });\r\n        \r\n        // Update statistics\r\n        // Calculate hashrate based on user difficulty, speed, and number of miners\r\n        const baseHashrate = 1200;\r\n        const difficultyMultiplier = Math.pow(2, this.difficulty - 1);\r\n        const speedMultiplier = this.speed;\r\n        const effectiveHashrate = Math.floor(baseHashrate / difficultyMultiplier * speedMultiplier);\r\n        this.networkHashrate = this.miners.length * effectiveHashrate;\r\n        \r\n        // Update mining block glow if it exists (use original deltaTime for consistent animations)\r\n        if (this.miningBlock && this.miningBlock.glowIntensity > 0) {\r\n            this.miningBlock.glowIntensity = Math.max(0, this.miningBlock.glowIntensity - animationDeltaTime * 1.5);\r\n        }\r\n    }\r\n    \r\n    updateDynamicNodes(deltaTime) {\r\n        const currentTime = Date.now();\r\n        \r\n        // Update redistribution timer\r\n        this.nodeRedistributionTimer += deltaTime;\r\n        \r\n        // Check if it's time to redistribute nodes\r\n        if (this.nodeRedistributionTimer > this.redistributionInterval) {\r\n            this.redistributeNodes();\r\n            this.nodeRedistributionTimer = 0;\r\n        }\r\n        \r\n        // Check if it's time to add a new node\r\n        if (currentTime - this.lastNodeJoin > this.nodeJoinInterval && this.networkNodes.length < this.maxNodes) {\r\n            this.addNodeToNetwork();\r\n            this.lastNodeJoin = currentTime;\r\n        }\r\n        \r\n        // Check if it's time to remove a node\r\n        if (currentTime - this.lastNodeLeave > this.nodeLeaveInterval && this.networkNodes.length > this.minNodes) {\r\n            this.removeNodeFromNetwork();\r\n            this.lastNodeLeave = currentTime;\r\n        }\r\n        \r\n        // Update joining nodes\r\n        this.networkNodes.forEach(node => {\r\n            if (node.isJoining) {\r\n                node.joinProgress += node.joinSpeed;\r\n                \r\n                if (node.joinProgress >= 1) {\r\n                    node.x = node.targetX;\r\n                    node.y = node.targetY;\r\n                    node.isJoining = false;\r\n                    node.isActive = true;\r\n                } else {\r\n                    node.x = node.x + (node.targetX - node.x) * node.joinSpeed;\r\n                    node.y = node.y + (node.targetY - node.y) * node.joinSpeed;\r\n                }\r\n            }\r\n            \r\n            // Update leaving nodes\r\n            if (node.isLeaving) {\r\n                node.leaveProgress += node.leaveSpeed;\r\n                \r\n                if (node.leaveProgress >= 1) {\r\n                    // Node will be removed in the timeout\r\n                } else {\r\n                    // Move node away from center\r\n                    const angle = Math.atan2(node.y - this.networkCenterY, node.x - this.networkCenterX);\r\n                    node.x += Math.cos(angle) * 5;\r\n                    node.y += Math.sin(angle) * 5;\r\n                }\r\n            }\r\n            \r\n            // Update moving nodes (redistribution)\r\n            if (node.isMoving) {\r\n                node.moveProgress += node.moveSpeed;\r\n                \r\n                if (node.moveProgress >= 1) {\r\n                    node.x = node.targetX;\r\n                    node.y = node.targetY;\r\n                    node.isMoving = false;\r\n                } else {\r\n                    node.x = node.x + (node.targetX - node.x) * node.moveSpeed;\r\n                    node.y = node.y + (node.targetY - node.y) * node.moveSpeed;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawBlockchain() {\r\n        // Calculate which blocks to show: genesis, block 1, block 2, and last block\r\n        const totalBlocks = this.blocks.length;\r\n        let visibleBlocks = [];\r\n        \r\n        if (totalBlocks <= 4) {\r\n            // If 4 or fewer blocks, show all of them\r\n            visibleBlocks = this.blocks;\r\n        } else {\r\n            // Show genesis, block 1, block 2, and last block only\r\n            visibleBlocks = [\r\n                this.blocks[0], // Genesis block\r\n                this.blocks[1], // Block 1\r\n                this.blocks[2], // Block 2\r\n                this.blocks[totalBlocks - 1] // Last block only\r\n            ];\r\n        }\r\n        \r\n        // Calculate background width based on visible blocks\r\n        const visibleWidth = visibleBlocks.length * (this.blockWidth + this.blockSpacing);\r\n        \r\n        // Draw chain background with enhanced gradient\r\n        const gradient = this.ctx.createLinearGradient(this.chainStartX - 40, this.chainStartY - 40, \r\n                                                     this.chainStartX + visibleWidth + 40, \r\n                                                     this.chainStartY + this.blockHeight + 40);\r\n        gradient.addColorStop(0, 'rgba(33, 150, 243, 0.15)');\r\n        gradient.addColorStop(0.5, 'rgba(76, 175, 80, 0.1)');\r\n        gradient.addColorStop(1, 'rgba(33, 150, 243, 0.15)');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.chainStartX - 40, this.chainStartY - 40, \r\n                         visibleWidth + 80, \r\n                         this.blockHeight + 80);\r\n        \r\n        // Draw blocks with enhanced design\r\n        visibleBlocks.forEach((block, visibleIndex) => {\r\n            let x = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing);\r\n            const y = this.chainStartY;\r\n            \r\n            // Add extra space for ellipses if this is after block 2 and there are more than 4 blocks\r\n            if (totalBlocks > 4 && visibleIndex >= 3) {\r\n                x += 40; // Space for ellipses\r\n            }\r\n            \r\n            // Enhanced block glow effect with modern styling\r\n            if (block.glowIntensity > 0) {\r\n                this.ctx.shadowColor = block.isGenesis ? '#4CAF50' : '#2196F3';\r\n                this.ctx.shadowBlur = 40 * block.glowIntensity;\r\n                this.ctx.shadowOffsetX = 0;\r\n                this.ctx.shadowOffsetY = 0;\r\n            }\r\n            \r\n            // Modern block background with enhanced gradient and depth\r\n            const blockGradient = this.ctx.createLinearGradient(x, y, x + this.blockWidth, y + this.blockHeight);\r\n            if (block.isGenesis) {\r\n                // Genesis block - special green gradient\r\n                blockGradient.addColorStop(0, '#4CAF50');\r\n                blockGradient.addColorStop(0.3, '#45A049');\r\n                blockGradient.addColorStop(0.7, '#388E3C');\r\n                blockGradient.addColorStop(1, '#2E7D32');\r\n            } else {\r\n                // Regular blocks - modern blue gradient\r\n                blockGradient.addColorStop(0, '#42A5F5');\r\n                blockGradient.addColorStop(0.3, '#2196F3');\r\n                blockGradient.addColorStop(0.7, '#1976D2');\r\n                blockGradient.addColorStop(1, '#1565C0');\r\n            }\r\n            this.ctx.fillStyle = blockGradient;\r\n            \r\n            // Draw rounded rectangle for modern look\r\n            this.roundRect(x, y, this.blockWidth, this.blockHeight, 12);\r\n            this.ctx.fill();\r\n            \r\n            // Modern block border with gradient (thinner)\r\n            const borderGradient = this.ctx.createLinearGradient(x, y, x + this.blockWidth, y + this.blockHeight);\r\n            borderGradient.addColorStop(0, 'rgba(255, 255, 255, 0.7)');\r\n            borderGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.4)');\r\n            borderGradient.addColorStop(1, 'rgba(255, 255, 255, 0.3)');\r\n            \r\n            this.ctx.strokeStyle = borderGradient;\r\n            this.ctx.lineWidth = 1.5; // Reduced from 3\r\n            this.ctx.lineCap = 'round';\r\n            this.ctx.lineJoin = 'round';\r\n            this.roundRect(x, y, this.blockWidth, this.blockHeight, 12);\r\n            this.ctx.stroke();\r\n            \r\n            // Add inner highlight for depth\r\n            const highlightGradient = this.ctx.createLinearGradient(x, y, x, y + this.blockHeight);\r\n            highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.3)');\r\n            highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.1)');\r\n            highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            this.ctx.fillStyle = highlightGradient;\r\n            this.roundRect(x + 2, y + 2, this.blockWidth - 4, this.blockHeight / 3, 10);\r\n            this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Modern block content with enhanced typography and styling\r\n            this.ctx.textAlign = 'left';\r\n            \r\n            // Calculate vertical centering (adjusted to fix bottom overflow)\r\n            const contentHeight = block.isGenesis ? 56 : 66; // Reduced content height\r\n            const startY = y + (this.blockHeight - contentHeight) / 2 + 10; // Reduced top offset\r\n            \r\n            // Block title with modern styling and smaller font\r\n            const title = block.isGenesis ? 'Genesis' : `Block #${block.index}`;\r\n            this.ctx.font = 'bold 16px Inter, Arial, sans-serif'; // Reduced from 18px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';\r\n            this.ctx.shadowBlur = 3;\r\n            this.ctx.shadowOffsetX = 1;\r\n            this.ctx.shadowOffsetY = 1;\r\n            this.ctx.fillText(title, x + 12, startY);\r\n            \r\n            // Transaction count with icon\r\n            this.ctx.font = 'bold 13px Inter, Arial, sans-serif'; // Reduced from 14px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`📦 ${block.transactions.length} tx`, x + 12, startY + 17);\r\n            \r\n            // Nonce with modern styling\r\n            this.ctx.font = '11px Inter, Arial, sans-serif'; // Reduced from 12px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`Nonce: ${block.nonce.toLocaleString()}`, x + 12, startY + 32);\r\n            \r\n            // Hash with modern monospace styling\r\n            if (this.showHashes) {\r\n                this.ctx.font = '9px \"JetBrains Mono\", \"Fira Code\", monospace'; // Reduced from 10px\r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.fillText(`🔗 ${block.hash.substring(0, 10)}...`, x + 12, startY + 45);\r\n            }\r\n            \r\n            // Show reward and fees for non-genesis blocks\r\n            if (!block.isGenesis) {\r\n                this.ctx.font = '10px Inter, Arial, sans-serif'; // Reduced from 11px\r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.fillText(`💰 ${block.blockReward} | 💸 ${block.totalFees.toFixed(1)}`, x + 12, startY + 58);\r\n            }\r\n            \r\n            // Reset shadow after block text\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowOffsetX = 0;\r\n            this.ctx.shadowOffsetY = 0;\r\n            \r\n            // Draw connection to next block with enhanced styling\r\n            if (visibleIndex < visibleBlocks.length - 1) {\r\n                const nextBlock = visibleBlocks[visibleIndex + 1];\r\n                let nextX = this.chainStartX + (visibleIndex + 1) * (this.blockWidth + this.blockSpacing);\r\n                \r\n                // Check if we need to show ellipses instead of arrow\r\n                const shouldShowEllipses = totalBlocks > 4 && visibleIndex === 2;\r\n                \r\n                if (shouldShowEllipses) {\r\n                    // Draw improved ellipsis indicator\r\n                    const ellipsesX = x + this.blockWidth + 10;\r\n                    const ellipsesY = y + this.blockHeight / 2;\r\n                    const lastBlockX = this.chainStartX + (visibleBlocks.length - 1) * (this.blockWidth + this.blockSpacing);\r\n                    const hiddenCount = totalBlocks - 4;\r\n                    \r\n                    // Draw connection line from current block\r\n                    const startLineGradient = this.ctx.createLinearGradient(x + this.blockWidth, ellipsesY, ellipsesX + 15, ellipsesY);\r\n                    startLineGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\r\n                    startLineGradient.addColorStop(1, 'rgba(76, 175, 80, 0.6)');\r\n                    this.ctx.strokeStyle = startLineGradient;\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.lineCap = 'round';\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + this.blockWidth, ellipsesY);\r\n                    this.ctx.lineTo(ellipsesX + 15, ellipsesY);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw ellipsis dots (three dots)\r\n                    this.ctx.fillStyle = '#4CAF50';\r\n                    for (let i = 0; i < 3; i++) {\r\n                        this.ctx.beginPath();\r\n                        this.ctx.arc(ellipsesX + 20 + (i * 8), ellipsesY, 2.5, 0, Math.PI * 2);\r\n                        this.ctx.fill();\r\n                    }\r\n                    \r\n                    // Draw count badge below dots\r\n                    const badgeX = ellipsesX + 28;\r\n                    const badgeY = ellipsesY + 15;\r\n                    const badgeText = `+${hiddenCount}`;\r\n                    \r\n                    // Badge background\r\n                    this.ctx.fillStyle = 'rgba(76, 175, 80, 0.2)';\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(badgeX, badgeY, 12, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                    \r\n                    // Badge border\r\n                    this.ctx.strokeStyle = '#4CAF50';\r\n                    this.ctx.lineWidth = 1.5;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(badgeX, badgeY, 12, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Badge text\r\n                    this.ctx.fillStyle = '#4CAF50';\r\n                    this.ctx.font = 'bold 11px Inter, Arial, sans-serif';\r\n                    this.ctx.textAlign = 'center';\r\n                    this.ctx.textBaseline = 'middle';\r\n                    this.ctx.fillText(badgeText, badgeX, badgeY);\r\n                    \r\n                    // Draw connection line to the last block\r\n                    const endLineGradient = this.ctx.createLinearGradient(ellipsesX + 40, ellipsesY, lastBlockX, ellipsesY);\r\n                    endLineGradient.addColorStop(0, 'rgba(76, 175, 80, 0.6)');\r\n                    endLineGradient.addColorStop(0.5, '#4CAF50');\r\n                    endLineGradient.addColorStop(1, 'rgba(255, 255, 255, 0.4)');\r\n                    this.ctx.strokeStyle = endLineGradient;\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.lineCap = 'round';\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(ellipsesX + 40, ellipsesY);\r\n                    this.ctx.lineTo(lastBlockX, ellipsesY);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw arrow pointing RIGHT (at the end of the line)\r\n                    this.ctx.fillStyle = '#4CAF50';\r\n                    this.ctx.shadowColor = 'rgba(76, 175, 80, 0.5)';\r\n                    this.ctx.shadowBlur = 4;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(lastBlockX - 10, ellipsesY - 6);\r\n                    this.ctx.lineTo(lastBlockX, ellipsesY);\r\n                    this.ctx.lineTo(lastBlockX - 10, ellipsesY + 6);\r\n                    this.ctx.closePath();\r\n                    this.ctx.fill();\r\n                    this.ctx.shadowBlur = 0;\r\n                } else {\r\n                    // Normal connection with improved arrow\r\n                    const connectionGradient = this.ctx.createLinearGradient(x + this.blockWidth, y + this.blockHeight / 2, \r\n                                                                           nextX, y + this.blockHeight / 2);\r\n                    connectionGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\r\n                    connectionGradient.addColorStop(0.5, '#4CAF50');\r\n                    connectionGradient.addColorStop(1, 'rgba(255, 255, 255, 0.4)');\r\n                    \r\n                    this.ctx.strokeStyle = connectionGradient;\r\n                    this.ctx.lineWidth = 3; // Reduced from 6\r\n                    this.ctx.lineCap = 'round';\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + this.blockWidth, y + this.blockHeight / 2);\r\n                    this.ctx.lineTo(nextX, y + this.blockHeight / 2);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Improved arrow with shadow\r\n                    this.ctx.fillStyle = '#4CAF50';\r\n                    this.ctx.shadowColor = 'rgba(76, 175, 80, 0.5)';\r\n                    this.ctx.shadowBlur = 4;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(nextX - 10, y + this.blockHeight / 2 - 6);\r\n                    this.ctx.lineTo(nextX, y + this.blockHeight / 2);\r\n                    this.ctx.lineTo(nextX - 10, y + this.blockHeight / 2 + 6);\r\n                    this.ctx.closePath();\r\n                    this.ctx.fill();\r\n                    this.ctx.shadowBlur = 0;\r\n                }\r\n            }\r\n        });\r\n        \r\n\r\n        \r\n        // Draw mining block with enhanced design and better positioning\r\n        if (this.miningBlock) {\r\n            let x = this.chainStartX + visibleBlocks.length * (this.blockWidth + this.blockSpacing);\r\n            \r\n            // Add gap between last block and mining block\r\n            x += 30; // Additional gap\r\n            \r\n            // Ensure mining block is visible on screen\r\n            const maxX = this.ctx.canvas.width - this.blockWidth - 50;\r\n            if (x > maxX) {\r\n                x = maxX;\r\n            }\r\n            \r\n            const y = this.chainStartY;\r\n            \r\n            // Enhanced mining glow effect with pulsing animation\r\n            if (this.miningGlow > 0) {\r\n                this.ctx.shadowColor = '#FF9800';\r\n                this.ctx.shadowBlur = 50 * this.miningGlow;\r\n                this.ctx.shadowOffsetX = 0;\r\n                this.ctx.shadowOffsetY = 0;\r\n            }\r\n            \r\n            // Modern mining block background with enhanced gradient\r\n            const miningGradient = this.ctx.createLinearGradient(x, y, x + this.blockWidth, y + this.blockHeight);\r\n            miningGradient.addColorStop(0, '#FFB74D');\r\n            miningGradient.addColorStop(0.3, '#FF9800');\r\n            miningGradient.addColorStop(0.7, '#F57C00');\r\n            miningGradient.addColorStop(1, '#E65100');\r\n            this.ctx.fillStyle = miningGradient;\r\n            \r\n            // Draw rounded rectangle for mining block\r\n            this.roundRect(x, y, this.blockWidth, this.blockHeight, 12);\r\n            this.ctx.fill();\r\n            \r\n            // Mining block border (thinner)\r\n            const miningBorderGradient = this.ctx.createLinearGradient(x, y, x + this.blockWidth, y + this.blockHeight);\r\n            miningBorderGradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n            miningBorderGradient.addColorStop(0.5, 'rgba(255, 193, 7, 0.6)');\r\n            miningBorderGradient.addColorStop(1, 'rgba(255, 152, 0, 0.7)');\r\n            \r\n            this.ctx.strokeStyle = miningBorderGradient;\r\n            this.ctx.lineWidth = 1.5; // Reduced from 4\r\n            this.ctx.lineCap = 'round';\r\n            this.ctx.lineJoin = 'round';\r\n            this.roundRect(x, y, this.blockWidth, this.blockHeight, 12);\r\n            this.ctx.stroke();\r\n            \r\n            // Add mining-specific inner highlight\r\n            const miningHighlightGradient = this.ctx.createLinearGradient(x, y, x, y + this.blockHeight);\r\n            miningHighlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\r\n            miningHighlightGradient.addColorStop(0.5, 'rgba(255, 193, 7, 0.2)');\r\n            miningHighlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            this.ctx.fillStyle = miningHighlightGradient;\r\n            this.roundRect(x + 2, y + 2, this.blockWidth - 4, this.blockHeight / 3, 10);\r\n            this.ctx.fill();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Modern mining block content with vertical centering\r\n            this.ctx.textAlign = 'left';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';\r\n            this.ctx.shadowBlur = 3;\r\n            this.ctx.shadowOffsetX = 1;\r\n            this.ctx.shadowOffsetY = 1;\r\n            \r\n            // Calculate vertical centering (adjusted to fix bottom overflow)\r\n            const miningContentHeight = this.showHashes ? 58 : 48; // Reduced\r\n            const miningStartY = y + (this.blockHeight - miningContentHeight) / 2 + 10; // Reduced top offset\r\n            \r\n            // Mining title with animated effect\r\n            this.ctx.font = 'bold 15px Inter, Arial, sans-serif'; // Reduced from 16px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText('⛏️ Mining...', x + 12, miningStartY);\r\n            \r\n            // Nonce with modern formatting\r\n            this.ctx.font = 'bold 12px Inter, Arial, sans-serif'; // Reduced from 13px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`Nonce: ${this.miningBlock.nonce.toLocaleString()}`, x + 12, miningStartY + 16);\r\n            \r\n            // Target hash with modern styling\r\n            this.ctx.font = '10px Inter, Arial, sans-serif'; // Reduced from 11px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`Target: ${this.targetHash}`, x + 12, miningStartY + 30);\r\n            \r\n            // Reward and fees with icons\r\n            this.ctx.font = '10px Inter, Arial, sans-serif'; // Reduced from 11px\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`💰 ${this.blockReward} | 💸 ${this.miningBlock.totalFees.toFixed(1)}`, x + 12, miningStartY + 43);\r\n            \r\n            // Hash with modern monospace styling\r\n            if (this.showHashes) {\r\n                this.ctx.font = '8px \"JetBrains Mono\", \"Fira Code\", monospace'; // Reduced from 9px\r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.fillText(`${this.miningBlock.hash.substring(0, 14)}...`, x + 12, miningStartY + 54);\r\n            }\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowOffsetX = 0;\r\n            this.ctx.shadowOffsetY = 0;\r\n            \r\n            // Modern mining progress indicator with enhanced styling\r\n            const progress = (this.miningBlock.nonce % 100) / 100;\r\n            \r\n            // Progress bar background with rounded corners\r\n            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\r\n            this.roundRect(x + 12, y + 105, 110, 10, 5);\r\n            this.ctx.fill();\r\n            \r\n            // Progress bar fill with gradient\r\n            const progressGradient = this.ctx.createLinearGradient(x + 12, y + 105, x + 12 + 110 * progress, y + 105);\r\n            progressGradient.addColorStop(0, '#FFB74D');\r\n            progressGradient.addColorStop(0.5, '#FF9800');\r\n            progressGradient.addColorStop(1, '#F57C00');\r\n            this.ctx.fillStyle = progressGradient;\r\n            this.roundRect(x + 12, y + 105, 110 * progress, 10, 5);\r\n            this.ctx.fill();\r\n            \r\n            // Progress bar border\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n            this.ctx.lineWidth = 1;\r\n            this.roundRect(x + 12, y + 105, 110, 10, 5);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawNetwork() {\r\n        if (!this.showNetwork) return;\r\n        \r\n        // Draw network background with enhanced gradient (smaller for 800x600)\r\n        const networkGradient = this.ctx.createRadialGradient(this.networkCenterX, this.networkCenterY, 0, \r\n                                                             this.networkCenterX, this.networkCenterY, 120);\r\n        networkGradient.addColorStop(0, 'rgba(33, 150, 243, 0.2)');\r\n        networkGradient.addColorStop(0.7, 'rgba(33, 150, 243, 0.1)');\r\n        networkGradient.addColorStop(1, 'rgba(33, 150, 243, 0.05)');\r\n        this.ctx.fillStyle = networkGradient;\r\n        this.ctx.fillRect(this.networkCenterX - 120, this.networkCenterY - 120, 240, 240);\r\n        \r\n        // Draw connections between nodes with enhanced pulse effect\r\n        this.ctx.strokeStyle = `rgba(100, 180, 255, ${0.3 + 0.2 * Math.sin(this.networkPulse)})`;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.lineCap = 'round';\r\n        \r\n        for (let i = 0; i < this.networkNodes.length; i++) {\r\n            for (let j = i + 1; j < this.networkNodes.length; j++) {\r\n                const node1 = this.networkNodes[i];\r\n                const node2 = this.networkNodes[j];\r\n                \r\n                // Calculate distance for connection strength\r\n                const dx = node2.x - node1.x;\r\n                const dy = node2.y - node1.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                // Only draw connections between nearby nodes (reduced for smaller network)\r\n                if (distance < 180) {\r\n                    const alpha = 0.3 + (0.2 * (1 - distance / 180));\r\n                    this.ctx.strokeStyle = `rgba(100, 180, 255, ${alpha})`;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(node1.x, node1.y);\r\n                    this.ctx.lineTo(node2.x, node2.y);\r\n                    this.ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Draw nodes with enhanced design\r\n        this.networkNodes.forEach(node => {\r\n            // Skip nodes that are leaving\r\n            if (node.isLeaving) {\r\n                // Draw leaving node with fade effect\r\n                this.ctx.globalAlpha = 1 - node.leaveProgress;\r\n            }\r\n            \r\n            // Node pulse effect with enhanced visibility\r\n            const pulseRadius = this.nodeRadius + 8 * node.pulseIntensity * Math.sin(this.networkPulse * 2);\r\n            \r\n            // Modern node background with enhanced gradient and depth\r\n            const nodeGradient = this.ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, this.nodeRadius);\r\n            \r\n            // Enhanced color handling for different node types\r\n            let primaryColor, secondaryColor;\r\n            if (node.color.startsWith('hsl')) {\r\n                const hslMatch = node.color.match(/hsl\\((\\d+),\\s*(\\d+)%,\\s*(\\d+)%\\)/);\r\n                if (hslMatch) {\r\n                    const h = hslMatch[1];\r\n                    const s = hslMatch[2];\r\n                    const l = parseInt(hslMatch[3]);\r\n                    primaryColor = `hsl(${h}, ${s}%, ${l}%)`;\r\n                    secondaryColor = `hsl(${h}, ${s}%, ${Math.max(0, l - 30)}%)`;\r\n                } else {\r\n                    primaryColor = node.color;\r\n                    secondaryColor = node.color;\r\n                }\r\n            } else {\r\n                primaryColor = node.color;\r\n                secondaryColor = this.adjustColor(node.color, -30);\r\n            }\r\n            \r\n            nodeGradient.addColorStop(0, primaryColor);\r\n            nodeGradient.addColorStop(0.7, secondaryColor);\r\n            nodeGradient.addColorStop(1, this.adjustColor(secondaryColor, -20));\r\n            \r\n            this.ctx.fillStyle = nodeGradient;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(node.x, node.y, this.nodeRadius, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n            \r\n            // Modern node border with gradient\r\n            const borderGradient = this.ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, this.nodeRadius);\r\n            borderGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');\r\n            borderGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.6)');\r\n            borderGradient.addColorStop(1, 'rgba(255, 255, 255, 0.3)');\r\n            \r\n            this.ctx.strokeStyle = borderGradient;\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.lineCap = 'round';\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(node.x, node.y, this.nodeRadius, 0, 2 * Math.PI);\r\n            this.ctx.stroke();\r\n            \r\n            // Add inner highlight for depth\r\n            const highlightGradient = this.ctx.createRadialGradient(\r\n                node.x - this.nodeRadius * 0.3, \r\n                node.y - this.nodeRadius * 0.3, \r\n                0, \r\n                node.x, \r\n                node.y, \r\n                this.nodeRadius * 0.8\r\n            );\r\n            highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\r\n            highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.1)');\r\n            highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            this.ctx.fillStyle = highlightGradient;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(node.x, node.y, this.nodeRadius * 0.8, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n            \r\n            // Special highlighting for successful miner with enhanced styling and zoom effect\r\n            if (node === this.successfulMiner) {\r\n                // Create pulsing zoom effect for successful miner\r\n                const zoomPulse = Math.sin(this.networkPulse * 2) * 0.3 + 1.0; // Pulsing between 0.7x and 1.3x\r\n                const zoomedRadius = this.nodeRadius * zoomPulse;\r\n                \r\n                // Draw success glow with enhanced effect and zoom\r\n                this.ctx.shadowColor = '#00FF88';\r\n                this.ctx.shadowBlur = 25 * zoomPulse;\r\n                this.ctx.fillStyle = 'rgba(0, 255, 136, 0.3)';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius + 15, 0, 2 * Math.PI);\r\n                this.ctx.fill();\r\n                \r\n                // Draw success ring with gradient and zoom\r\n                const successGradient = this.ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, zoomedRadius + 20);\r\n                successGradient.addColorStop(0, '#00FF88');\r\n                successGradient.addColorStop(0.5, '#00E676');\r\n                successGradient.addColorStop(1, '#00C853');\r\n                \r\n                this.ctx.strokeStyle = successGradient;\r\n                this.ctx.lineWidth = 4 * zoomPulse;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius + 18, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                // Draw additional pulsing rings for extra emphasis\r\n                const ringPulse = Math.sin(this.networkPulse * 3) * 0.5 + 0.5;\r\n                this.ctx.strokeStyle = `rgba(0, 255, 136, ${0.6 + ringPulse * 0.4})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius + 25, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                this.ctx.strokeStyle = `rgba(0, 255, 136, ${0.4 + ringPulse * 0.3})`;\r\n                this.ctx.lineWidth = 1.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius + 32, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                this.ctx.shadowBlur = 0;\r\n                \r\n                // Draw the actual node with zoom effect\r\n                const nodeGradient = this.ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, zoomedRadius);\r\n                \r\n                // Enhanced color handling for successful miner\r\n                let primaryColor, secondaryColor;\r\n                if (node.color.startsWith('hsl')) {\r\n                    const hslMatch = node.color.match(/hsl\\((\\d+),\\s*(\\d+)%,\\s*(\\d+)%\\)/);\r\n                    if (hslMatch) {\r\n                        const h = hslMatch[1];\r\n                        const s = hslMatch[2];\r\n                        const l = parseInt(hslMatch[3]);\r\n                        primaryColor = `hsl(${h}, ${s}%, ${l}%)`;\r\n                        secondaryColor = `hsl(${h}, ${s}%, ${Math.max(0, l - 30)}%)`;\r\n                    } else {\r\n                        primaryColor = node.color;\r\n                        secondaryColor = node.color;\r\n                    }\r\n                } else {\r\n                    primaryColor = node.color;\r\n                    secondaryColor = this.adjustColor(node.color, -30);\r\n                }\r\n                \r\n                nodeGradient.addColorStop(0, primaryColor);\r\n                nodeGradient.addColorStop(0.7, secondaryColor);\r\n                nodeGradient.addColorStop(1, this.adjustColor(secondaryColor, -20));\r\n                \r\n                this.ctx.fillStyle = nodeGradient;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius, 0, 2 * Math.PI);\r\n                this.ctx.fill();\r\n                \r\n                // Modern node border with gradient and zoom\r\n                const borderGradient = this.ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, zoomedRadius);\r\n                borderGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');\r\n                borderGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.6)');\r\n                borderGradient.addColorStop(1, 'rgba(255, 255, 255, 0.3)');\r\n                \r\n                this.ctx.strokeStyle = borderGradient;\r\n                this.ctx.lineWidth = 3 * zoomPulse;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                // Add inner highlight for depth with zoom\r\n                const highlightGradient = this.ctx.createRadialGradient(\r\n                    node.x - zoomedRadius * 0.3, \r\n                    node.y - zoomedRadius * 0.3, \r\n                    0, \r\n                    node.x, \r\n                    node.y, \r\n                    zoomedRadius * 0.8\r\n                );\r\n                highlightGradient.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\r\n                highlightGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.1)');\r\n                highlightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n                this.ctx.fillStyle = highlightGradient;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, zoomedRadius * 0.8, 0, 2 * Math.PI);\r\n                this.ctx.fill();\r\n                \r\n                // Enhanced node label with zoom effect\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n                this.ctx.shadowBlur = 2;\r\n                this.ctx.shadowOffsetX = 1;\r\n                this.ctx.shadowOffsetY = 1;\r\n                \r\n                this.ctx.fillStyle = '#ffffff';\r\n                this.ctx.font = `${Math.floor(11 * zoomPulse)}px Inter, Arial, sans-serif`;\r\n                this.ctx.fillText(`Node ${node.id}`, node.x, node.y + 5 * zoomPulse);\r\n                \r\n                this.ctx.shadowBlur = 0;\r\n                this.ctx.shadowOffsetX = 0;\r\n                this.ctx.shadowOffsetY = 0;\r\n                \r\n                // Skip the regular node drawing for successful miner since we've drawn it with zoom\r\n                // Reset alpha for next node\r\n                this.ctx.globalAlpha = 1;\r\n                return; // Use return instead of continue in forEach\r\n            }\r\n            \r\n            // Enhanced node status indicators with modern styling\r\n            if (node.isMining) {\r\n                // Mining indicator - multiple rings with enhanced pulsing effect\r\n                const miningPulse = Math.sin(this.networkPulse * 3) * 0.5 + 0.5;\r\n                \r\n                // Outer mining ring with glow effect\r\n                this.ctx.shadowColor = '#FF9800';\r\n                this.ctx.shadowBlur = 15;\r\n                this.ctx.strokeStyle = `rgba(255, 152, 0, ${0.9 + miningPulse * 0.1})`;\r\n                this.ctx.lineWidth = 5;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 18, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                // Middle mining ring with enhanced visibility\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.strokeStyle = `rgba(255, 235, 59, ${0.8 + miningPulse * 0.2})`;\r\n                this.ctx.lineWidth = 4;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 14, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                // Inner mining ring with bright glow\r\n                this.ctx.shadowBlur = 12;\r\n                this.ctx.strokeStyle = `rgba(255, 193, 7, ${0.95 + miningPulse * 0.05})`;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 10, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                \r\n                // Reset shadow\r\n                this.ctx.shadowBlur = 0;\r\n                \r\n                // Mining particles around the node\r\n                for (let i = 0; i < 6; i++) {\r\n                    const angle = (i / 6) * 2 * Math.PI + this.networkPulse * 2;\r\n                    const radius = this.nodeRadius + 25 + Math.sin(this.networkPulse * 4 + i) * 5;\r\n                    const particleX = node.x + Math.cos(angle) * radius;\r\n                    const particleY = node.y + Math.sin(angle) * radius;\r\n                    \r\n                    this.ctx.fillStyle = `rgba(255, 152, 0, ${0.7 + Math.sin(this.networkPulse * 3 + i) * 0.3})`;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(particleX, particleY, 3, 0, 2 * Math.PI);\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n            \r\n            if (node.isValidating) {\r\n                // Validation indicator with glow effect\r\n                this.ctx.shadowColor = '#4CAF50';\r\n                this.ctx.shadowBlur = 10;\r\n                this.ctx.strokeStyle = '#4CAF50';\r\n                this.ctx.lineWidth = 4;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 16, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n            \r\n            // Special indicator for joining nodes with enhanced styling\r\n            if (node.isJoining) {\r\n                this.ctx.shadowColor = '#4CAF50';\r\n                this.ctx.shadowBlur = 12;\r\n                this.ctx.strokeStyle = '#4CAF50';\r\n                this.ctx.lineWidth = 5;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 22, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n            \r\n            // Special indicator for moving nodes (redistribution) with enhanced styling\r\n            if (node.isMoving) {\r\n                this.ctx.shadowColor = '#2196F3';\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.strokeStyle = '#2196F3';\r\n                this.ctx.lineWidth = 4;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(node.x, node.y, this.nodeRadius + 20, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n            \r\n            // Modern node label with enhanced styling\r\n            this.ctx.textAlign = 'center';\r\n            \r\n            // Draw node label with better visibility\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = 'bold 10px Inter, Arial, sans-serif';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';\r\n            this.ctx.shadowBlur = 3;\r\n            \r\n            // Label based on node type\r\n            let label = `N${node.id}`;\r\n            if (node.isMining) {\r\n                label = `⛏ M${node.id}`;\r\n            }\r\n            \r\n            this.ctx.fillText(label, node.x, node.y + this.nodeRadius + 14);\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowOffsetX = 0;\r\n            this.ctx.shadowOffsetY = 0;\r\n            \r\n            // Reset alpha for next node\r\n            this.ctx.globalAlpha = 1;\r\n        });\r\n    }\r\n    \r\n    adjustColor(color, amount) {\r\n        // Handle HSL colors (which are used for network nodes)\r\n        if (color.startsWith('hsl')) {\r\n            return color; // Return original color for HSL\r\n        }\r\n        \r\n        // Handle hex colors\r\n        if (color.startsWith('#')) {\r\n            const hex = color.replace('#', '');\r\n            if (hex.length === 6) {\r\n                const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) + amount));\r\n                const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) + amount));\r\n                const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) + amount));\r\n                return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n            }\r\n        }\r\n        \r\n        return color; // Return original color if not a valid hex\r\n    }\r\n    \r\n    roundRect(x, y, width, height, radius) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x + radius, y);\r\n        this.ctx.lineTo(x + width - radius, y);\r\n        this.ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        this.ctx.lineTo(x + width, y + height - radius);\r\n        this.ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        this.ctx.lineTo(x + radius, y + height);\r\n        this.ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        this.ctx.lineTo(x, y + radius);\r\n        this.ctx.quadraticCurveTo(x, y, x + radius, y);\r\n        this.ctx.closePath();\r\n    }\r\n    \r\n    drawTransactions() {\r\n        const startX = 60;\r\n        const startY = 40; // At the top, above blockchain (blockchain at y=160)\r\n        const txWidth = 180; // Reduced width for more compact layout\r\n        const txHeight = 100; // Reduced height to fit better\r\n        const currentTime = Date.now();\r\n        \r\n        // Draw pending transactions with enhanced design and dynamic updates\r\n        this.pendingTransactions.slice(0, 3).forEach((tx, index) => {\r\n            const x = startX + index * (txWidth + 20); // Reduced spacing between transactions\r\n            const y = startY;\r\n            \r\n            // Calculate transaction age for visual effects\r\n            const age = currentTime - tx.timestamp;\r\n            const ageSeconds = Math.floor(age / 1000);\r\n            const ageOpacity = Math.max(0.6, 1 - (age / 30000)); // Fade out over 30 seconds\r\n            \r\n            // Dynamic gradient based on transaction age and type\r\n            const txGradient = this.ctx.createLinearGradient(x, y, x + txWidth, y + txHeight);\r\n            if (age > 20000) {\r\n                // Older transactions - more muted colors\r\n                txGradient.addColorStop(0, '#4B5563');\r\n                txGradient.addColorStop(0.3, '#6B7280');\r\n                txGradient.addColorStop(0.7, '#374151');\r\n                txGradient.addColorStop(1, '#1F2937');\r\n            } else {\r\n                // Fresh transactions - vibrant colors\r\n                txGradient.addColorStop(0, '#6A4C93');\r\n                txGradient.addColorStop(0.3, '#8B5CF6');\r\n                txGradient.addColorStop(0.7, '#7C3AED');\r\n                txGradient.addColorStop(1, '#5B21B6');\r\n            }\r\n            this.ctx.fillStyle = txGradient;\r\n            \r\n            // Apply age-based opacity\r\n            this.ctx.globalAlpha = ageOpacity;\r\n            \r\n            // Draw rounded rectangle for transactions\r\n            this.roundRect(x, y, txWidth, txHeight, 12);\r\n            this.ctx.fill();\r\n            \r\n            // Enhanced transaction border with dynamic glow effect\r\n            const borderColor = age > 20000 ? '#9CA3AF' : '#E0E7FF';\r\n            this.ctx.strokeStyle = borderColor;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.shadowColor = age > 20000 ? '#6B7280' : '#8B5CF6';\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.stroke();\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Reset opacity for text\r\n            this.ctx.globalAlpha = 1;\r\n            \r\n            // Transaction content - reorganized to fit better\r\n            this.ctx.textAlign = 'left';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';\r\n            this.ctx.shadowBlur = 2;\r\n            this.ctx.shadowOffsetX = 1;\r\n            this.ctx.shadowOffsetY = 1;\r\n            \r\n            // Transaction parties (from → to)\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = 'bold 11px Inter, Arial, sans-serif';\r\n            const fromTo = `${tx.from} → ${tx.to}`;\r\n            const maxFromToLength = 18; // Reduced for narrower container\r\n            const displayFromTo = fromTo.length > maxFromToLength ? fromTo.substring(0, maxFromToLength - 2) + '..' : fromTo;\r\n            this.ctx.fillText(displayFromTo, x + 10, y + 18);\r\n            \r\n            // Amount and Fee on same line\r\n            this.ctx.font = '9px Inter, Arial, sans-serif';\r\n            this.ctx.fillText(`💰 ${tx.amount} | 💸 ${tx.fee.toFixed(1)}`, x + 10, y + 32);\r\n            \r\n            // Type\r\n            const typeText = tx.type.replace('_', ' ');\r\n            const displayType = typeText.length > 15 ? typeText.substring(0, 12) + '...' : typeText;\r\n            this.ctx.fillText(`${displayType}`, x + 10, y + 44);\r\n            \r\n            // Age and Priority on same line\r\n            const timeText = ageSeconds < 60 ? `${ageSeconds}s` : `${Math.floor(ageSeconds / 60)}m`;\r\n            const priorityText = tx.fee > this.transactionFee * 1.5 ? 'High' : \r\n                                tx.fee > this.transactionFee ? 'Med' : 'Low';\r\n            this.ctx.fillText(`${timeText} ago`, x + 10, y + 56);\r\n            \r\n            // Priority indicator with color\r\n            const priorityColor = tx.fee > this.transactionFee * 1.5 ? '#22C55E' : \r\n                                tx.fee > this.transactionFee ? '#FCD34D' : '#FCA5A5';\r\n            this.ctx.fillStyle = priorityColor;\r\n            this.ctx.fillText(`${priorityText}`, x + 10, y + 68);\r\n            \r\n            // Description (optional, shortened)\r\n            if (tx.description) {\r\n                this.ctx.font = '8px Inter, Arial, sans-serif';\r\n                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.85)';\r\n                const desc = tx.description.length > 22 ? tx.description.substring(0, 19) + '...' : tx.description;\r\n                this.ctx.fillText(desc, x + 10, y + 80);\r\n            }\r\n            \r\n            // Reset shadow after transaction text\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowOffsetX = 0;\r\n            this.ctx.shadowOffsetY = 0;\r\n            \r\n            // Add pulsing effect for new transactions (first 5 seconds)\r\n            if (age < 5000) {\r\n                const pulse = Math.sin(currentTime * 0.01) * 0.3 + 0.7;\r\n                this.ctx.strokeStyle = `rgba(139, 92, 246, ${pulse})`;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.lineCap = 'round';\r\n                this.roundRect(x, y, txWidth, txHeight, 12);\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n        \r\n        // Reset global alpha\r\n        this.ctx.globalAlpha = 1;\r\n    }\r\n    \r\n    drawParticles() {\r\n        // Draw mining particles\r\n        this.miningParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw network particles\r\n        this.networkParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw contract execution particles\r\n        this.contractExecutionParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw block creation particles\r\n        this.blockCreationParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw validation particles\r\n        this.validationParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw consensus particles\r\n        this.consensusParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw finalization particles\r\n        this.finalizationParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw reward particles\r\n        this.rewardParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw node join particles\r\n        this.nodeJoinParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw node leave particles\r\n        this.nodeLeaveParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n        \r\n        // Draw rejection particles\r\n        this.rejectionParticles.forEach(particle => {\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.globalAlpha = particle.life / particle.maxLife;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        });\r\n        this.ctx.globalAlpha = 1;\r\n    }\r\n    \r\n    drawPropagationArrows() {\r\n        this.propagationArrows.forEach(arrow => {\r\n            const currentX = arrow.startX + (arrow.endX - arrow.startX) * arrow.progress;\r\n            const currentY = arrow.startY + (arrow.endY - arrow.startY) * arrow.progress;\r\n            \r\n            // Draw arrow line with glow\r\n            this.ctx.shadowColor = arrow.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.strokeStyle = arrow.color;\r\n            this.ctx.lineWidth = arrow.width;\r\n            this.ctx.lineCap = 'round';\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(arrow.startX, arrow.startY);\r\n            this.ctx.lineTo(currentX, currentY);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw arrow head\r\n            const angle = Math.atan2(arrow.endY - arrow.startY, arrow.endX - arrow.startX);\r\n            const headLength = 12;\r\n            const headAngle = Math.PI / 6;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(currentX, currentY);\r\n            this.ctx.lineTo(\r\n                currentX - headLength * Math.cos(angle - headAngle),\r\n                currentY - headLength * Math.sin(angle - headAngle)\r\n            );\r\n            this.ctx.moveTo(currentX, currentY);\r\n            this.ctx.lineTo(\r\n                currentX - headLength * Math.cos(angle + headAngle),\r\n                currentY - headLength * Math.sin(angle + headAngle)\r\n            );\r\n            this.ctx.stroke();\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawMiningProgress() {\r\n        // Position progress bar near the mining block\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const barWidth = 200;\r\n        const barHeight = 20;\r\n        const barX = canvasWidth - barWidth - 30;\r\n        const barY = 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(barX - 10, barY - 5, barWidth + 20, barHeight + 30);\r\n        \r\n        // Border\r\n        this.ctx.strokeStyle = 'rgba(255, 152, 0, 0.8)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(barX - 10, barY - 5, barWidth + 20, barHeight + 30);\r\n        \r\n        // Progress bar background\r\n        this.ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';\r\n        this.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n        \r\n        // Progress bar fill with gradient\r\n        const progress = Math.min(100, this.miningProgress);\r\n        const fillWidth = (barWidth * progress) / 100;\r\n        \r\n        const gradient = this.ctx.createLinearGradient(barX, barY, barX + fillWidth, barY);\r\n        gradient.addColorStop(0, '#FF9800');\r\n        gradient.addColorStop(0.5, '#FFB74D');\r\n        gradient.addColorStop(1, '#FF9800');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(barX, barY, fillWidth, barHeight);\r\n        \r\n        // Progress text\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 12px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText(`Mining: ${progress.toFixed(0)}%`, barX + barWidth / 2, barY + barHeight + 15);\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    drawUnifiedInfoPanel() {\r\n        const panelX = 60;\r\n        const panelY = this.ctx.canvas.height - 160; // Moved up slightly\r\n        const panelWidth = 360; // Slightly wider for better layout\r\n        const panelHeight = 140; // Reduced height for more compact design\r\n        \r\n        // Modern gradient background with better styling\r\n        const panelGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        panelGradient.addColorStop(0, 'rgba(15, 23, 42, 0.92)'); // Darker, more opaque\r\n        panelGradient.addColorStop(0.5, 'rgba(30, 41, 59, 0.88)');\r\n        panelGradient.addColorStop(1, 'rgba(15, 23, 42, 0.85)');\r\n        this.ctx.fillStyle = panelGradient;\r\n        this.roundRect(panelX, panelY, panelWidth, panelHeight, 8);\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced panel border with gradient\r\n        const borderGradient = this.ctx.createLinearGradient(panelX, panelY, panelX + panelWidth, panelY);\r\n        borderGradient.addColorStop(0, 'rgba(59, 130, 246, 0.6)');\r\n        borderGradient.addColorStop(0.5, 'rgba(99, 102, 241, 0.8)');\r\n        borderGradient.addColorStop(1, 'rgba(59, 130, 246, 0.6)');\r\n        this.ctx.strokeStyle = borderGradient;\r\n        this.ctx.lineWidth = 2;\r\n        this.roundRect(panelX, panelY, panelWidth, panelHeight, 8);\r\n        this.ctx.stroke();\r\n        \r\n        // Enhanced text styling with better contrast\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowBlur = 3;\r\n        this.ctx.shadowOffsetX = 1;\r\n        this.ctx.shadowOffsetY = 1;\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        // Title with icon\r\n        this.ctx.fillStyle = '#60A5FA'; // Light blue\r\n        this.ctx.font = 'bold 14px Inter, Arial, sans-serif';\r\n        this.ctx.fillText('⛓️ Network Status', panelX + 15, panelY + 22);\r\n        \r\n        // Phase information with status indicator\r\n        const phaseText = this.animationPhase.charAt(0).toUpperCase() + this.animationPhase.slice(1).replace('_', ' ');\r\n        const phaseColor = this.isMining ? '#22C55E' : '#94A3B8';\r\n        this.ctx.fillStyle = phaseColor;\r\n        this.ctx.font = 'bold 11px Inter, Arial, sans-serif';\r\n        this.ctx.fillText(`● ${phaseText}`, panelX + 15, panelY + 40);\r\n        \r\n        // Key statistics in compact 3-column layout\r\n        this.ctx.font = '10px Inter, Arial, sans-serif';\r\n        this.ctx.fillStyle = '#E2E8F0';\r\n        \r\n        // Column 1\r\n        this.ctx.fillText(`Blocks: ${this.totalBlocks}`, panelX + 15, panelY + 58);\r\n        this.ctx.fillText(`Tx: ${this.totalTransactions}`, panelX + 15, panelY + 72);\r\n        this.ctx.fillText(`Pending: ${this.pendingTransactions.length}`, panelX + 15, panelY + 86);\r\n        \r\n        // Column 2\r\n        this.ctx.fillText(`Difficulty: ${this.difficulty}`, panelX + 130, panelY + 58);\r\n        this.ctx.fillText(`Nodes: ${this.networkNodes.length}`, panelX + 130, panelY + 72);\r\n        this.ctx.fillText(`Miners: ${this.miners.length}`, panelX + 130, panelY + 86);\r\n        \r\n        // Column 3 - Dynamic info\r\n        if (this.miningBlock) {\r\n            this.ctx.fillText(`Nonce: ${this.miningBlock.nonce.toLocaleString()}`, panelX + 240, panelY + 58);\r\n            this.ctx.fillText(`H/s: ${(this.networkHashrate / 1000).toFixed(1)}k`, panelX + 240, panelY + 72);\r\n            this.ctx.fillText(`Target: ${this.targetHash}`, panelX + 240, panelY + 86);\r\n        } else if (this.guidedMode && this.guidedBlock) {\r\n            this.ctx.fillText(`Step: ${this.currentStep + 1}/${this.phaseSteps.length}`, panelX + 240, panelY + 58);\r\n            this.ctx.fillText(`Block: #${this.guidedBlock.index}`, panelX + 240, panelY + 72);\r\n            this.ctx.fillText(`Time: ${this.phaseTime.toFixed(1)}s`, panelX + 240, panelY + 86);\r\n        }\r\n        \r\n        // Bottom info bar\r\n        const avgBlockTime = (this.averageBlockTime / 1000).toFixed(1);\r\n        this.ctx.fillStyle = '#94A3B8';\r\n        this.ctx.font = '9px Inter, Arial, sans-serif';\r\n        this.ctx.fillText(`Avg Block Time: ${avgBlockTime}s`, panelX + 15, panelY + 105);\r\n        \r\n        // Consensus information and progress bar\r\n        if (this.guidedMode && this.guidedBlock) {\r\n            const consensusNodes = this.networkNodes.filter(node => node.consensusReached);\r\n            const consensusPercentage = (consensusNodes.length / this.networkNodes.length * 100).toFixed(0);\r\n            this.ctx.fillStyle = '#94A3B8';\r\n            this.ctx.fillText(`Consensus: ${consensusPercentage}%`, panelX + 180, panelY + 105);\r\n            \r\n            // Progress bar for guided mode\r\n            const progress = (this.currentStep + 1) / this.phaseSteps.length;\r\n            const barWidth = 330;\r\n            const barHeight = 4;\r\n            const barY = panelY + 120;\r\n            \r\n            // Background\r\n            this.ctx.fillStyle = 'rgba(71, 85, 105, 0.5)';\r\n            this.ctx.fillRect(panelX + 15, barY, barWidth, barHeight);\r\n            \r\n            // Progress fill with gradient\r\n            const progressGradient = this.ctx.createLinearGradient(panelX + 15, barY, panelX + 15 + barWidth * progress, barY);\r\n            progressGradient.addColorStop(0, '#22C55E');\r\n            progressGradient.addColorStop(1, '#10B981');\r\n            this.ctx.fillStyle = progressGradient;\r\n            this.ctx.fillRect(panelX + 15, barY, barWidth * progress, barHeight);\r\n        }\r\n        \r\n        // Reset shadow for clean rendering\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        this.ctx.shadowOffsetY = 0;\r\n    }\r\n    \r\n    render() {\r\n        // Clear canvas and fill with dark background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw components\r\n        this.drawBlockchain();\r\n        this.drawNetwork();\r\n        this.drawTransactions();\r\n        this.drawParticles();\r\n        // this.drawPropagationArrows(); // Disabled arrows\r\n        this.drawMinerRewardDisplay(); // Draw miner reward display\r\n        this.drawUnifiedInfoPanel();\r\n        \r\n        // Draw mining progress indicator\r\n        if (this.isMining && this.miningBlock && !this.guidedBlock) {\r\n            this.drawMiningProgress();\r\n        }\r\n        \r\n        // Draw guided phase indicator if in guided mode\r\n        if (this.guidedPhaseIndicator) {\r\n            this.drawGuidedPhaseIndicator();\r\n        }\r\n        \r\n        // Draw miner reward display if active\r\n        if (this.minerRewardDisplay) {\r\n            this.drawMinerRewardDisplay();\r\n        }\r\n    }\r\n    \r\n    drawGuidedPhaseIndicator() {\r\n        if (!this.guidedPhaseIndicator) return;\r\n        \r\n        const centerX = this.ctx.canvas.width / 2;\r\n        const y = this.guidedPhaseIndicator.y || 350; // Default y position over network nodes\r\n        const color = this.guidedPhaseIndicator.color || '#00FF88'; // Default color if not set\r\n        \r\n        // Set font first to measure text accurately\r\n        this.ctx.font = 'bold 22px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw background banner with better sizing\r\n        const textWidth = this.ctx.measureText(this.guidedPhaseIndicator.text).width;\r\n        const bannerWidth = Math.max(textWidth + 80, 300); // Minimum width of 300px\r\n        const bannerHeight = 60;\r\n        \r\n        // Ensure we have valid coordinates for the gradient\r\n        const gradientStartX = centerX - bannerWidth / 2;\r\n        const gradientStartY = y - bannerHeight / 2;\r\n        const gradientEndX = centerX + bannerWidth / 2;\r\n        const gradientEndY = y + bannerHeight / 2;\r\n        \r\n        // Check for valid coordinates\r\n        if (isFinite(gradientStartX) && isFinite(gradientStartY) && \r\n            isFinite(gradientEndX) && isFinite(gradientEndY)) {\r\n            \r\n            // Create gradient background\r\n            const gradient = this.ctx.createLinearGradient(\r\n                gradientStartX, gradientStartY,\r\n                gradientEndX, gradientEndY\r\n            );\r\n            gradient.addColorStop(0, 'rgba(0, 0, 0, 0.9)');\r\n            gradient.addColorStop(0.5, 'rgba(20, 20, 20, 0.95)');\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0.9)');\r\n            \r\n            // Draw rounded rectangle background\r\n            this.ctx.fillStyle = gradient;\r\n            this.roundRect(centerX - bannerWidth / 2, y - bannerHeight / 2, bannerWidth, bannerHeight, 15);\r\n            this.ctx.fill();\r\n            \r\n            // Draw enhanced border with glow\r\n            this.ctx.strokeStyle = color;\r\n            this.ctx.lineWidth = 4;\r\n            this.ctx.shadowColor = color;\r\n            this.ctx.shadowBlur = 15;\r\n            this.ctx.stroke();\r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Draw inner border for depth\r\n            this.ctx.strokeStyle = `rgba(255, 255, 255, 0.3)`;\r\n            this.ctx.lineWidth = 1;\r\n            this.roundRect(centerX - bannerWidth / 2 + 2, y - bannerHeight / 2 + 2, bannerWidth - 4, bannerHeight - 4, 13);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw text with enhanced styling\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.font = 'bold 22px Inter, Arial, sans-serif';\r\n            this.ctx.textAlign = 'center';\r\n            \r\n            // Add text shadow for better readability\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 4;\r\n            this.ctx.shadowOffsetX = 1;\r\n            this.ctx.shadowOffsetY = 1;\r\n            this.ctx.fillText(this.guidedPhaseIndicator.text, centerX, y + 8);\r\n            \r\n            // Reset shadow\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowOffsetX = 0;\r\n            this.ctx.shadowOffsetY = 0;\r\n            \r\n            // Add pulsing effect\r\n            this.guidedPhaseIndicator.alpha = 0.8 + 0.2 * Math.sin(Date.now() * 0.005);\r\n            this.ctx.globalAlpha = this.guidedPhaseIndicator.alpha;\r\n            this.ctx.globalAlpha = 1.0; // Reset\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        // Calculate consensus statistics\r\n        const consensusNodes = this.networkNodes.filter(node => node.consensusReached);\r\n        const consensusThreshold = this.networkNodes.length * 0.6;\r\n        const consensusPercentage = this.networkNodes.length > 0 ? \r\n            Math.round((consensusNodes.length / this.networkNodes.length) * 100) : 0;\r\n        \r\n        return {\r\n            blocks: this.totalBlocks,\r\n            transactions: this.totalTransactions,\r\n            pending: this.pendingTransactions.length,\r\n            difficulty: this.difficulty, // Return actual difficulty, not dynamic\r\n            hashrate: this.networkHashrate,\r\n            miners: this.miners.length,\r\n            nodes: this.networkNodes.length,\r\n            phase: this.animationPhase,\r\n            isMining: this.isMining,\r\n            totalRewards: this.totalRewards,\r\n            averageBlockTime: this.averageBlockTime / 1000,\r\n            consensusPercentage: consensusPercentage,\r\n            consensusThreshold: Math.round(consensusThreshold * 100 / this.networkNodes.length),\r\n            consensusReached: consensusNodes.length >= consensusThreshold\r\n        };\r\n    }\r\n    \r\n    reset() {\r\n        this.blocks = [];\r\n        this.pendingTransactions = [];\r\n        this.miningBlock = null;\r\n        this.isMining = false;\r\n        this.animationPhase = 'idle';\r\n        this.phaseTime = 0;\r\n        this.miningParticles = [];\r\n        this.validationParticles = [];\r\n        this.networkParticles = [];\r\n        this.propagationArrows = [];\r\n        this.contractExecutionParticles = [];\r\n        this.blockCreationParticles = [];\r\n        this.consensusParticles = [];\r\n        this.finalizationParticles = [];\r\n        this.rewardParticles = [];\r\n        this.rejectionParticles = [];\r\n        this.nodeJoinParticles = [];\r\n        this.nodeLeaveParticles = [];\r\n        this.guidedBlock = null;\r\n        this.currentStep = 0;\r\n        this.totalBlocks = 0;\r\n        this.totalTransactions = 0;\r\n        this.guidedPhaseIndicator = null; // Clear guided phase indicator\r\n        \r\n        // Reset miner tracking\r\n        this.successfulMiner = null;\r\n        this.minerBlockConnection = null;\r\n        this.minerRewardDisplay = null;\r\n        \r\n        // Reset dynamic network properties\r\n        this.lastNodeJoin = 0;\r\n        this.lastNodeLeave = 0;\r\n        this.nodeRedistributionTimer = 0;\r\n        this.nextNodeId = 1; // Reset node ID counter\r\n        \r\n        // Reset difficulty adjustment properties\r\n        this.blockTimes = [];\r\n        this.lastDifficultyAdjustment = 0;\r\n        this.lastBlockTime = 0;\r\n        \r\n        // Reset to default settings\r\n        this.difficulty = 4;\r\n        this.targetHash = '0'.repeat(this.difficulty);\r\n        this.speed = 1.0;\r\n        // Block hashes are always visible\r\n        this.showHashes = true;\r\n        // Network and auto mining are always enabled\r\n        this.showNetwork = true;\r\n        this.autoMine = true;\r\n        \r\n        // Reset control values in the UI\r\n        this.resetControls();\r\n        \r\n        this.initializeBlockchain();\r\n        this.initializeNetwork();\r\n        this.startGenesisBlock();\r\n    }\r\n    \r\n    resetControls() {\r\n        // Reset difficulty slider\r\n        const difficultySlider = document.getElementById('blockchainDifficulty');\r\n        const difficultyValue = document.getElementById('blockchainDifficultyValue');\r\n        if (difficultySlider && difficultyValue) {\r\n            difficultySlider.value = this.difficulty;\r\n            difficultyValue.textContent = this.difficulty;\r\n        }\r\n        \r\n        // Reset speed slider\r\n        const speedSlider = document.getElementById('blockchainSpeed');\r\n        const speedValue = document.getElementById('blockchainSpeedValue');\r\n        if (speedSlider && speedValue) {\r\n            speedSlider.value = this.speed;\r\n            speedValue.textContent = this.speed + 'x';\r\n        }\r\n    }\r\n    \r\n    drawMinerBlockConnection() {\r\n        if (!this.minerBlockConnection) return;\r\n        \r\n        const connection = this.minerBlockConnection;\r\n        \r\n        // Update connection progress\r\n        connection.progress += connection.speed;\r\n        if (connection.progress > 1) {\r\n            connection.progress = 1;\r\n        }\r\n        \r\n        // Calculate current position\r\n        const currentX = connection.startX + (connection.endX - connection.startX) * connection.progress;\r\n        const currentY = connection.startY + (connection.endY - connection.startY) * connection.progress;\r\n        \r\n        // Draw connection line\r\n        this.ctx.strokeStyle = connection.color;\r\n        this.ctx.lineWidth = connection.width;\r\n        this.ctx.globalAlpha = connection.alpha;\r\n        \r\n        // Add glow effect\r\n        this.ctx.shadowColor = connection.color;\r\n        this.ctx.shadowBlur = 10;\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(connection.startX, connection.startY);\r\n        this.ctx.lineTo(currentX, currentY);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrow head at current position\r\n        const angle = Math.atan2(connection.endY - connection.startY, connection.endX - connection.startX);\r\n        const headLength = 15;\r\n        const headAngle = Math.PI / 6;\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(currentX, currentY);\r\n        this.ctx.lineTo(\r\n            currentX - headLength * Math.cos(angle - headAngle),\r\n            currentY - headLength * Math.sin(angle - headAngle)\r\n        );\r\n        this.ctx.moveTo(currentX, currentY);\r\n        this.ctx.lineTo(\r\n            currentX - headLength * Math.cos(angle + headAngle),\r\n            currentY - headLength * Math.sin(angle + headAngle)\r\n        );\r\n        this.ctx.stroke();\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.globalAlpha = 1.0;\r\n        \r\n        // Add pulsing effect\r\n        connection.pulseIntensity = 0.8 + 0.2 * Math.sin(Date.now() * 0.01);\r\n    }\r\n    \r\n    drawMinerRewardDisplay() {\r\n        if (!this.minerRewardDisplay) return;\r\n        \r\n        const reward = this.minerRewardDisplay;\r\n        \r\n        // Update reward display\r\n        reward.life -= 0.016; // 60 FPS\r\n        reward.y += reward.velocity * 0.016;\r\n        reward.alpha = reward.life / reward.maxLife;\r\n        \r\n        if (reward.life <= 0) {\r\n            this.minerRewardDisplay = null;\r\n            return;\r\n        }\r\n        \r\n        // Draw reward text\r\n        this.ctx.fillStyle = reward.color;\r\n        this.ctx.globalAlpha = reward.alpha;\r\n        this.ctx.font = 'bold 14px Inter, Arial, sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(reward.text, reward.x, reward.y);\r\n        \r\n        // Add glow effect\r\n        this.ctx.shadowColor = reward.color;\r\n        this.ctx.shadowBlur = 8;\r\n        this.ctx.fillText(reward.text, reward.x, reward.y);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        this.ctx.globalAlpha = 1.0;\r\n    }\r\n    \r\n    createRejectionParticles() {\r\n        // Create rejection particles around the mining block position\r\n        const totalBlocks = this.blocks.length;\r\n        let blockX;\r\n\r\n        if (totalBlocks <= 4) {\r\n            const visibleIndex = totalBlocks;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n        } else {\r\n            const visibleBlocks = [this.blocks[0], this.blocks[1], this.blocks[2], ...this.blocks.slice(-1)];\r\n            const visibleIndex = visibleBlocks.length;\r\n            blockX = this.chainStartX + visibleIndex * (this.blockWidth + this.blockSpacing) + this.blockWidth / 2;\r\n\r\n            if (totalBlocks > 4) {\r\n                blockX += 80;\r\n            }\r\n        }\r\n\r\n        const blockY = this.chainStartY + this.blockHeight / 2;\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            this.rejectionParticles.push({\r\n                x: blockX,\r\n                y: blockY,\r\n                vx: (Math.random() - 0.5) * 150,\r\n                vy: (Math.random() - 0.5) * 150,\r\n                life: 2.5,\r\n                maxLife: 2.5,\r\n                color: '#FF5722', // Red for rejection\r\n                size: 5\r\n            });\r\n        }\r\n    }\r\n} ","import { BrownianMotion, Diffusion, GasLaws } from './animations/particle-physics.js';\r\nimport { Pendulum, OrbitalMotion, CollisionPhysics, FrictionInclinedPlanes } from './animations/classical-mechanics.js';\r\nimport { SoundWaves, WavePropagation } from './animations/wave-phenomena.js';\r\nimport { ElectricFields, MagneticFields, DiodeTransistor } from './animations/electro-magnetism.js';\r\nimport { WaveParticleDuality } from './animations/quantum-physics.js';\r\nimport { NuclearReactions } from './animations/nuclear-physics.js';\r\nimport { FluidFlow, Bernoulli } from './animations/fluid-dynamics.js';\r\nimport { NeuralNetwork, MemoryManagement } from './animations/computer-science.js';\r\nimport { Blockchain } from './animations/blockchain.js';\r\n\r\n// Main animations controller\r\nexport class ScientificAnimations {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext('2d');\r\n        this.currentAnimation = 'brownian';\r\n        this.isRunning = true;\r\n        this.lastTime = 0;\r\n        \r\n        // Initialize animations\r\n        this.brownianMotion = new BrownianMotion(this.ctx);\r\n        this.pendulum = new Pendulum(this.ctx);\r\n        this.diffusion = new Diffusion(this.ctx);\r\n        this.waves = new WavePropagation(this.ctx);\r\n        this.orbital = new OrbitalMotion(this.ctx);\r\n        this.electricFields = new ElectricFields(this.ctx);\r\n\r\n        this.gasLaws = new GasLaws(this.ctx);\r\n        this.collisions = new CollisionPhysics(this.ctx);\r\n        this.friction = new FrictionInclinedPlanes(this.ctx);\r\n\r\n        this.magneticFields = new MagneticFields(this.ctx);\r\n        this.waveParticleDuality = new WaveParticleDuality(this.ctx);\r\n        this.nuclearReactions = new NuclearReactions(this.ctx);\r\n        \r\n        // Initialize fluid dynamics\r\n        this.fluidFlow = new FluidFlow(this.ctx);\r\n        this.bernoulli = new Bernoulli(this.ctx);\r\n        \r\n        // Initialize sound waves\r\n        this.soundWaves = new SoundWaves(this.ctx);\r\n        \r\n        // Initialize diode and transistor\r\n        this.diodeTransistor = new DiodeTransistor(this.ctx);\r\n        \r\n        // Initialize computer science animations\r\n        this.neuralNetwork = new NeuralNetwork(this.ctx);\r\n        this.memoryManagement = new MemoryManagement(this.ctx);\r\n        this.blockchain = new Blockchain(this.ctx);\r\n        \r\n        this.setupEventListeners();\r\n        this.resizeCanvas();\r\n        \r\n        // Initialize all control panels with default values after a short delay\r\n        setTimeout(() => {\r\n            this.initializeWaveControls();\r\n            this.initializeSoundWavesControls();\r\n            this.initializeDiodeTransistorControls();\r\n        }, 100);\r\n        \r\n        this.animate();\r\n    }\r\n    \r\n    setupEventListeners() {\r\n        // Category header clicks\r\n        document.querySelectorAll('.category-header').forEach(header => {\r\n            const setExpanded = (el, expanded) => {\r\n                try { el.setAttribute('aria-expanded', String(expanded)); } catch {}\r\n            };\r\n\r\n            header.addEventListener('click', (e) => {\r\n                const categoryItem = e.currentTarget.closest('.category-item');\r\n                const category = categoryItem.dataset.category;\r\n                const sideNav = document.querySelector('.side-navigation');\r\n                const mainContent = document.querySelector('.main-content');\r\n                \r\n                // If navigation is collapsed, expand it and don't switch animations\r\n                if (sideNav.classList.contains('collapsed')) {\r\n                    sideNav.classList.remove('collapsed');\r\n                    mainContent.classList.remove('nav-collapsed');\r\n                    setExpanded(header, true);\r\n                    return;\r\n                }\r\n                \r\n                // Close all other categories\r\n                document.querySelectorAll('.category-item').forEach(item => {\r\n                    if (item !== categoryItem) {\r\n                        item.classList.remove('active');\r\n                        const h = item.querySelector('.category-header');\r\n                        if (h) setExpanded(h, false);\r\n                    }\r\n                });\r\n                \r\n                // Toggle current category\r\n                categoryItem.classList.toggle('active');\r\n                setExpanded(header, categoryItem.classList.contains('active'));\r\n                \r\n                // If this category is now active, switch to its first animation\r\n                if (categoryItem.classList.contains('active')) {\r\n                    const firstAnimation = categoryItem.querySelector('.submenu-item');\r\n                    if (firstAnimation && !firstAnimation.classList.contains('active')) {\r\n                        this.switchAnimation(firstAnimation.dataset.animation);\r\n                    }\r\n                }\r\n            });\r\n            // Keyboard support\r\n            header.addEventListener('keydown', (e) => {\r\n                if (e.key === 'Enter' || e.key === ' ') {\r\n                    e.preventDefault();\r\n                    header.click();\r\n                }\r\n            });\r\n        });\r\n\r\n        // Submenu item clicks\r\n        document.querySelectorAll('.submenu-item').forEach(item => {\r\n            item.addEventListener('click', (e) => {\r\n                const animation = e.currentTarget.dataset.animation;\r\n                \r\n                // Remove active class from all submenu items\r\n                document.querySelectorAll('.submenu-item').forEach(subItem => {\r\n                    subItem.classList.remove('active');\r\n                });\r\n                \r\n                // Add active class to clicked item\r\n                e.currentTarget.classList.add('active');\r\n                \r\n                // Switch to the selected animation\r\n                this.switchAnimation(animation);\r\n            });\r\n        });\r\n\r\n        // Navigation toggle (collapse/expand)\r\n        const navToggleBtn = document.querySelector('.nav-toggle-btn');\r\n        const sideNav = document.querySelector('.side-navigation');\r\n        const mainContent = document.querySelector('.main-content');\r\n        const controlsPanel = document.querySelector('.controls-panel');\r\n        const controlsToggle = document.querySelector('.controls-toggle');\r\n        const controlsBackdrop = document.getElementById('controlsBackdrop');\r\n        \r\n        if (navToggleBtn) {\r\n            navToggleBtn.addEventListener('click', () => {\r\n                const willCollapse = !sideNav.classList.contains('collapsed');\r\n                sideNav.classList.toggle('collapsed');\r\n                mainContent.classList.toggle('nav-collapsed');\r\n                // Persist state\r\n                try { localStorage.setItem('sideNavCollapsed', String(willCollapse)); } catch {}\r\n                try { localStorage.setItem('sideNavUserToggled', 'true'); } catch {}\r\n                // Clear mobile-open state when collapsing on desktop\r\n                if (willCollapse) {\r\n                    sideNav.classList.remove('open');\r\n                    const mobileNavToggle = document.getElementById('mobileNavToggle');\r\n                    if (mobileNavToggle) mobileNavToggle.classList.remove('open');\r\n                }\r\n                // Toggle aria-expanded on the button for a11y\r\n                try {\r\n                    const expanded = !willCollapse;\r\n                    navToggleBtn.setAttribute('aria-expanded', String(expanded));\r\n                } catch {}\r\n            });\r\n            // Initialize aria-expanded\r\n            navToggleBtn.setAttribute('aria-expanded', String(!sideNav.classList.contains('collapsed')));\r\n        }\r\n        // Controls overlay open/close\r\n        const openControls = () => {\r\n            if (!controlsPanel || !controlsBackdrop) return;\r\n            controlsPanel.classList.remove('collapsed');\r\n            controlsBackdrop.classList.add('active');\r\n        };\r\n        const closeControls = () => {\r\n            if (!controlsPanel || !controlsBackdrop) return;\r\n            controlsPanel.classList.add('collapsed');\r\n            controlsBackdrop.classList.remove('active');\r\n        };\r\n        if (controlsToggle) {\r\n            controlsToggle.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                if (e.stopImmediatePropagation) e.stopImmediatePropagation();\r\n                else e.stopPropagation();\r\n                openControls();\r\n            });\r\n        }\r\n        if (controlsBackdrop) {\r\n            controlsBackdrop.addEventListener('click', closeControls);\r\n        }\r\n        const applyBtn = document.getElementById('controlsApplyBtn');\r\n        const cancelBtn = document.getElementById('controlsCancelBtn');\r\n        if (applyBtn) applyBtn.addEventListener('click', () => {\r\n            // Apply all control values (this will reinitialize the animation with new values)\r\n            this.applyControlValues();\r\n            // Don't call resetAnimation() as it resets to defaults\r\n            // The applyControlValues already reinitializes with the new settings\r\n            this.isRunning = true;\r\n            const playBtn = document.getElementById('playPauseBtn');\r\n            if (playBtn) playBtn.textContent = 'Pause';\r\n            closeControls();\r\n        });\r\n        if (cancelBtn) cancelBtn.addEventListener('click', closeControls);\r\n\r\n        // Mobile navigation toggle\r\n        const mobileNavToggle = document.getElementById('mobileNavToggle');\r\n        const navBackdrop = document.getElementById('navBackdrop');\r\n        \r\n        if (mobileNavToggle && sideNav) {\r\n            const closeMobileNav = () => {\r\n                mobileNavToggle.classList.remove('open');\r\n                sideNav.classList.remove('open');\r\n            };\r\n\r\n            mobileNavToggle.addEventListener('click', () => {\r\n                mobileNavToggle.classList.toggle('open');\r\n                sideNav.classList.toggle('open');\r\n                // When opening mobile nav, ensure desktop collapsed is cleared for consistency\r\n                if (sideNav.classList.contains('open')) {\r\n                    sideNav.classList.remove('collapsed');\r\n                    mainContent.classList.remove('nav-collapsed');\r\n                    try { localStorage.setItem('sideNavCollapsed', 'false'); } catch {}\r\n                }\r\n                try { localStorage.setItem('sideNavUserToggled', 'true'); } catch {}\r\n            });\r\n            \r\n            // Close on backdrop click and Esc key\r\n            if (navBackdrop) {\r\n                navBackdrop.addEventListener('click', () => closeMobileNav());\r\n            }\r\n            document.addEventListener('keydown', (e) => {\r\n                if (e.key === 'Escape' && sideNav.classList.contains('open')) {\r\n                    closeMobileNav();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Close mobile nav when clicking outside\r\n        document.addEventListener('click', (e) => {\r\n            if (window.innerWidth <= 768) {\r\n                if (!e.target.closest('.side-navigation') && \r\n                    !e.target.closest('.mobile-nav-toggle')) {\r\n                    if (mobileNavToggle && sideNav) {\r\n                        mobileNavToggle.classList.remove('open');\r\n                        sideNav.classList.remove('open');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        \r\n        // Control buttons (optional presence)\r\n        const playPauseBtnEl = document.getElementById('playPauseBtn');\r\n        if (playPauseBtnEl) {\r\n            playPauseBtnEl.addEventListener('click', () => {\r\n                this.togglePlayPause();\r\n            });\r\n        }\r\n        const resetBtnEl = document.getElementById('resetBtn');\r\n        if (resetBtnEl) {\r\n            resetBtnEl.addEventListener('click', () => {\r\n                this.resetAnimation();\r\n            });\r\n        }\r\n        // Learn More button (now in stats area)\r\n        const learnMoreBtnEl = document.getElementById('learnMoreBtn');\r\n        if (learnMoreBtnEl) {\r\n            learnMoreBtnEl.addEventListener('click', () => {\r\n                this.showScienceExplanation();\r\n            });\r\n        }\r\n        \r\n        // Modal close button\r\n        document.getElementById('closeModal').addEventListener('click', () => {\r\n            this.closeModal();\r\n        });\r\n        \r\n        // Close modal when clicking outside\r\n        document.getElementById('scienceModal').addEventListener('click', (e) => {\r\n            if (e.target.id === 'scienceModal') {\r\n                this.closeModal();\r\n            }\r\n        });\r\n        \r\n        // Close modal with Escape key\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape') {\r\n                this.closeModal();\r\n            }\r\n        });\r\n        \r\n        // Responsive side nav layout helper\r\n        const applySideNavLayout = () => {\r\n            const width = window.innerWidth || document.documentElement.clientWidth;\r\n            const userToggled = (() => { try { return localStorage.getItem('sideNavUserToggled') === 'true'; } catch { return false; } })();\r\n            if (width <= 768) {\r\n                // Mobile overlay mode - no layout offset\r\n                sideNav.classList.remove('collapsed');\r\n                mainContent.classList.remove('nav-collapsed');\r\n                sideNav.classList.remove('open');\r\n                return;\r\n            }\r\n            if (!userToggled) {\r\n                if (width < 1320) {\r\n                    // Collapse nav when there's not enough space for 280px nav + 1000px content + padding\r\n                    sideNav.classList.add('collapsed');\r\n                    mainContent.classList.add('nav-collapsed');\r\n                    try { localStorage.setItem('sideNavCollapsed', 'true'); } catch {}\r\n                } else {\r\n                    sideNav.classList.remove('collapsed');\r\n                    mainContent.classList.remove('nav-collapsed');\r\n                    try { localStorage.setItem('sideNavCollapsed', 'false'); } catch {}\r\n                }\r\n            }\r\n        };\r\n\r\n        // Restore persisted side nav collapsed state and last animation\r\n        try {\r\n            const collapsed = localStorage.getItem('sideNavCollapsed');\r\n            if (collapsed === 'true') {\r\n                sideNav.classList.add('collapsed');\r\n                mainContent.classList.add('nav-collapsed');\r\n            }\r\n            const lastAnimation = localStorage.getItem('lastAnimation');\r\n            if (lastAnimation) {\r\n                // Defer to ensure DOM is ready\r\n                setTimeout(() => this.switchAnimation(lastAnimation), 0);\r\n            }\r\n        } catch {}\r\n\r\n        // Apply responsive layout once on load\r\n        applySideNavLayout();\r\n\r\n        // Brownian Motion Controls\r\n        this.setupSliderControl('particleCount', 'particleCountValue', (value) => {\r\n            this.brownianMotion.setParticleCount(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('speed', 'speedValue', (value) => {\r\n            this.brownianMotion.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('temperature', 'temperatureValue', (value) => {\r\n            this.brownianMotion.setTemperature(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('brownianParticleSize', 'brownianParticleSizeValue', (value) => {\r\n            this.brownianMotion.setParticleSize(parseInt(value));\r\n        });\r\n        \r\n        document.getElementById('brownianVisualizationMode').addEventListener('change', (e) => {\r\n            this.updateBrownianVisualization(e.target.value);\r\n        });\r\n        \r\n        // Initialize Brownian visualization mode\r\n        this.updateBrownianVisualization('basic');\r\n        \r\n        // Pendulum Controls\r\n        this.setupSliderControl('pendulumLength', 'pendulumLengthValue', (value) => {\r\n            this.pendulum.setLength(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('pendulumSpeed', 'pendulumSpeedValue', (value) => {\r\n            this.pendulum.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('initialAngle', 'initialAngleValue', (value) => {\r\n            this.pendulum.setInitialAngle(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('gravity', 'gravityValue', (value) => {\r\n            this.pendulum.setGravity(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('damping', 'dampingValue', (value) => {\r\n            this.pendulum.setDamping(parseFloat(value));\r\n        });\r\n        \r\n        document.getElementById('pendulumVisualizationMode').addEventListener('change', (e) => {\r\n            this.updatePendulumVisualization(e.target.value);\r\n        });\r\n        \r\n        // Initialize pendulum visualization mode\r\n        this.updatePendulumVisualization('basic');\r\n        \r\n        // Diffusion Controls\r\n        this.setupSliderControl('diffusionParticles', 'diffusionParticlesValue', (value) => {\r\n            this.diffusion.setParticleCount(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('diffusionSpeed', 'diffusionSpeedValue', (value) => {\r\n            this.diffusion.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('diffusionRate', 'diffusionRateValue', (value) => {\r\n            this.diffusion.setDiffusionRate(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('concentrationGradient', 'concentrationGradientValue', (value) => {\r\n            this.diffusion.setConcentrationGradient(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('diffusionParticleSize', 'diffusionParticleSizeValue', (value) => {\r\n            this.diffusion.setParticleSize(parseInt(value));\r\n        });\r\n        \r\n        document.getElementById('diffusionVisualizationMode').addEventListener('change', (e) => {\r\n            this.updateDiffusionVisualization(e.target.value);\r\n        });\r\n        \r\n        // Remove the start diffusion button event listener since the button was removed\r\n        // Diffusion will now start on canvas click/touch\r\n        \r\n        // Initialize diffusion visualization mode\r\n        this.updateDiffusionVisualization('basic');\r\n        \r\n        // Wave Controls\r\n        const waveTypeElement = document.getElementById('waveType');\r\n        if (waveTypeElement) {\r\n            waveTypeElement.addEventListener('change', (e) => {\r\n                e.stopPropagation(); // Prevent event bubbling\r\n                e.preventDefault(); // Prevent default behavior\r\n            this.waves.setWaveType(e.target.value);\r\n        });\r\n        }\r\n        \r\n        this.setupSliderControl('waveSpeed', 'waveSpeedValue', (value) => {\r\n            this.waves.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('waveFrequency', 'waveFrequencyValue', (value) => {\r\n            this.waves.setFrequency(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('waveAmplitude', 'waveAmplitudeValue', (value) => {\r\n            this.waves.setAmplitude(parseFloat(value));\r\n        });\r\n        \r\n        const waveShowAnalyticsElement = document.getElementById('waveShowAnalytics');\r\n        if (waveShowAnalyticsElement) {\r\n            waveShowAnalyticsElement.addEventListener('change', (e) => {\r\n            this.waves.setShowAnalytics(e.target.checked);\r\n        });\r\n        }\r\n        \r\n        // Sound Waves Controls\r\n        this.setupSliderControl('soundFrequency', 'soundFrequencyValue', (value) => {\r\n            this.soundWaves.setFrequency(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('soundAnimationSpeed', 'soundAnimationSpeedValue', (value) => {\r\n            this.soundWaves.setAnimationSpeed(parseFloat(value));\r\n        });\r\n        \r\n        // Sound waves select and checkbox controls\r\n        const soundWaveTypeSelect = document.getElementById('soundWaveType');\r\n        if (soundWaveTypeSelect) {\r\n            soundWaveTypeSelect.addEventListener('change', (e) => {\r\n                this.soundWaves.setWaveType(e.target.value);\r\n            });\r\n        }\r\n        \r\n        // Orbital Motion Controls\r\n        this.setupSliderControl('orbitalSpeed', 'orbitalSpeedValue', (value) => {\r\n            this.orbital.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('eccentricity', 'eccentricityValue', (value) => {\r\n            this.orbital.setEccentricity(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('semiMajorAxis', 'semiMajorAxisValue', (value) => {\r\n            this.orbital.setSemiMajorAxis(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('centralMass', 'centralMassValue', (value) => {\r\n            this.orbital.setCentralMass(parseFloat(value));\r\n        });\r\n        \r\n        document.getElementById('orbitalVisualizationMode').addEventListener('change', (e) => {\r\n            this.updateOrbitalVisualization(e.target.value);\r\n        });\r\n        \r\n        // Initialize orbital visualization mode\r\n        this.updateOrbitalVisualization('basic');\r\n        \r\n        // Electric Fields Controls\r\n        this.setupSliderControl('efSpeed', 'efSpeedValue', (value) => {\r\n            this.electricFields.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('efFieldStrength', 'efFieldStrengthValue', (value) => {\r\n            this.electricFields.setFieldStrength(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('efParticleCount', 'efParticleCountValue', (value) => {\r\n            this.electricFields.setParticleCount(parseInt(value));\r\n        });\r\n        \r\n        // Removed addChargeBtn and clearChargesBtn event listeners\r\n        \r\n\r\n        \r\n        // Magnetic Fields Controls\r\n        this.setupSliderControl('magneticSpeed', 'magneticSpeedValue', (value) => {\r\n            this.magneticFields.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('magneticFieldStrength', 'magneticFieldStrengthValue', (value) => {\r\n            this.magneticFields.setFieldStrength(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('magneticParticleCount', 'magneticParticleCountValue', (value) => {\r\n            this.magneticFields.setParticleCount(parseInt(value));\r\n        });\r\n        \r\n        document.getElementById('magneticShowFieldLines').addEventListener('change', (e) => {\r\n            this.magneticFields.setShowFieldLines(e.target.checked);\r\n        });\r\n        \r\n\r\n        \r\n\r\n        \r\n        // Removed addMagnetBtn and clearMagnetsBtn event listeners\r\n        \r\n        // Canvas click for adding charges, magnets, toggling switch, starting diffusion, and neural network testing\r\n        this.canvas.addEventListener('click', (e) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const scaleX = this.canvas.width / rect.width;\r\n            const scaleY = this.canvas.height / rect.height;\r\n            const x = (e.clientX - rect.left) * scaleX;\r\n            const y = (e.clientY - rect.top) * scaleY;\r\n            \r\n            if (this.currentAnimation === 'electric-fields') {\r\n                const chargeType = document.getElementById('efChargeType').value;\r\n                this.electricFields.addChargeAtPosition(chargeType, x, y);\r\n            } else if (this.currentAnimation === 'magnetic-fields') {\r\n                // Add complete magnet with both poles\r\n                this.magneticFields.addMagnetAtPosition(x, y);\r\n\r\n            } else if (this.currentAnimation === 'diffusion' && !this.diffusion.diffusionStarted) {\r\n                this.diffusion.startDiffusion();\r\n            } else if (this.currentAnimation === 'sound-waves') {\r\n                // Check for control button clicks first\r\n                this.soundWaves.handleButtonClick(x, y);\r\n                \r\n                // Then check for source clicks\r\n                const sx = this.soundWaves.sourceX;\r\n                const sy = this.soundWaves.sourceY;\r\n                const distance = Math.sqrt((x - sx) ** 2 + (y - sy) ** 2);\r\n                if (distance <= 50) {\r\n                    this.soundWaves.triggerWavePulse();\r\n                }\r\n            } else if (this.currentAnimation === 'neural-network') {\r\n                this.neuralNetwork.handleCanvasClick(x, y);\r\n            } else if (this.currentAnimation === 'memory-management' && this.memoryManagement) {\r\n                this.memoryManagement.handleClick(x, y);\r\n            }\r\n        });\r\n        \r\n        // Gas Laws Controls\r\n        this.setupSliderControl('gasSpeed', 'gasSpeedValue', (value) => {\r\n            this.gasLaws.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('gasParticleCount', 'gasParticleCountValue', (value) => {\r\n            this.gasLaws.setParticleCount(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('gasTemperature', 'gasTemperatureValue', (value) => {\r\n            this.gasLaws.setTemperature(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('gasVolume', 'gasVolumeValue', (value) => {\r\n            this.gasLaws.setVolume(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('gasPressure', 'gasPressureValue', (value) => {\r\n            this.gasLaws.setPressure(parseFloat(value));\r\n        });\r\n        \r\n        document.getElementById('gasVisualizationMode').addEventListener('change', (e) => {\r\n            this.updateGasVisualization(e.target.value);\r\n        });\r\n        \r\n        document.getElementById('lawType').addEventListener('change', (e) => {\r\n            this.gasLaws.setLawType(e.target.value);\r\n        });\r\n        \r\n        // Initialize gas visualization mode\r\n        this.updateGasVisualization('basic');\r\n        \r\n\r\n        \r\n        // Collision Physics Controls\r\n        this.setupSliderControl('collisionSpeed', 'collisionSpeedValue', (value) => {\r\n            this.collisions.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('ballCount', 'ballCountValue', (value) => {\r\n            this.collisions.setBallCount(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('restitution', 'restitutionValue', (value) => {\r\n            this.collisions.setRestitution(parseFloat(value));\r\n        });\r\n        \r\n\r\n        \r\n        this.setupSliderControl('collisionGravity', 'collisionGravityValue', (value) => {\r\n            this.collisions.setGravity(parseFloat(value));\r\n        });\r\n        \r\n        // Analytics are always enabled for collision physics\r\n        \r\n        document.getElementById('collisionType').addEventListener('change', (e) => {\r\n            this.collisions.setCollisionType(e.target.value);\r\n        });\r\n        \r\n        // Friction & Inclined Planes Controls\r\n        this.setupSliderControl('frictionSpeed', 'frictionSpeedValue', (value) => {\r\n            this.friction.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('inclineAngle', 'inclineAngleValue', (value) => {\r\n            this.friction.setInclineAngle(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('objectMass', 'objectMassValue', (value) => {\r\n            this.friction.setObjectMass(parseInt(value));\r\n        });\r\n        \r\n        this.setupSliderControl('frictionGravity', 'frictionGravityValue', (value) => {\r\n            this.friction.setGravity(parseFloat(value));\r\n        });\r\n        \r\n        // Analytics are always enabled for friction physics\r\n        \r\n        this.setupSliderControl('frictionCoefficient', 'frictionCoefficientValue', (value) => {\r\n            this.friction.setFrictionCoefficient(parseFloat(value));\r\n        });\r\n        \r\n\r\n        \r\n        // Window resize\r\n        window.addEventListener('resize', () => {\r\n            // Auto-resize canvas\r\n            this.resizeCanvas();\r\n            // Auto-adjust nav layout if user hasn't explicitly toggled\r\n            const sideNav = document.querySelector('.side-navigation');\r\n            const mainContent = document.querySelector('.main-content');\r\n            if (sideNav && mainContent) {\r\n                const userToggled = (() => { try { return localStorage.getItem('sideNavUserToggled') === 'true'; } catch { return false; } })();\r\n                if (!userToggled) {\r\n                    const width = window.innerWidth || document.documentElement.clientWidth;\r\n                    if (width <= 768) {\r\n                        sideNav.classList.remove('collapsed');\r\n                        mainContent.classList.remove('nav-collapsed');\r\n                    } else if (width < 1320) {\r\n                        // Collapse nav when there's not enough space for 280px nav + 1000px content + padding\r\n                        sideNav.classList.add('collapsed');\r\n                        mainContent.classList.add('nav-collapsed');\r\n                    } else {\r\n                        sideNav.classList.remove('collapsed');\r\n                        mainContent.classList.remove('nav-collapsed');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Comprehensive touch event handling for mobile support\r\n        this.canvas.addEventListener('touchstart', (e) => {\r\n            e.preventDefault();\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const touch = e.touches[0];\r\n            const scaleX = this.canvas.width / rect.width;\r\n            const scaleY = this.canvas.height / rect.height;\r\n            const x = (touch.clientX - rect.left) * scaleX;\r\n            const y = (touch.clientY - rect.top) * scaleY;\r\n            \r\n            // Handle different animations based on current animation\r\n            if (this.currentAnimation === 'diffusion' && !this.diffusion.diffusionStarted) {\r\n                this.diffusion.startDiffusion();\r\n            } else if (this.currentAnimation === 'electric-fields') {\r\n                const chargeType = document.getElementById('efChargeType').value;\r\n                this.electricFields.addChargeAtPosition(chargeType, x, y);\r\n            } else if (this.currentAnimation === 'magnetic-fields') {\r\n                // Add complete magnet with both poles\r\n                this.magneticFields.addMagnetAtPosition(x, y);\r\n            } else if (this.currentAnimation === 'sound-waves') {\r\n                // Check for control button clicks first\r\n                this.soundWaves.handleButtonClick(x, y);\r\n                \r\n                // Then check for source clicks\r\n                const sx = this.soundWaves.sourceX;\r\n                const sy = this.soundWaves.sourceY;\r\n                const distance = Math.sqrt((x - sx) ** 2 + (y - sy) ** 2);\r\n                if (distance <= 50) {\r\n                    this.soundWaves.triggerWavePulse();\r\n                }\r\n            } else if (this.currentAnimation === 'neural-network') {\r\n                this.neuralNetwork.handleCanvasClick(x, y);\r\n            } else if (this.currentAnimation === 'memory-management' && this.memoryManagement) {\r\n                this.memoryManagement.handleClick(x, y);\r\n            } else if (this.currentAnimation === 'nuclear-reactions') {\r\n                // Start reacting particle movement for nuclear reactions\r\n                this.nuclearReactions.reactingParticles.forEach(particle => {\r\n                    if (!particle.moving) {\r\n                        this.nuclearReactions.findTargetForParticle(particle);\r\n                        particle.moving = true;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Prevent default touch behaviors that might interfere\r\n        this.canvas.addEventListener('touchmove', (e) => {\r\n            e.preventDefault();\r\n        });\r\n        \r\n        this.canvas.addEventListener('touchend', (e) => {\r\n            e.preventDefault();\r\n        });\r\n        \r\n\r\n        \r\n        // Wave-Particle Duality Controls\r\n        document.getElementById('dualityMode').addEventListener('change', (e) => {\r\n            this.waveParticleDuality.setMode(e.target.value);\r\n            this.updateDualityControls(e.target.value);\r\n        });\r\n        \r\n        this.setupSliderControl('dualitySpeed', 'dualitySpeedValue', (value) => {\r\n            this.waveParticleDuality.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('dualityEnergy', 'dualityEnergyValue', (value) => {\r\n            this.waveParticleDuality.setPhotonEnergy(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('dualityWavelength', 'dualityWavelengthValue', (value) => {\r\n            this.waveParticleDuality.setWavelength(parseFloat(value));\r\n        });\r\n        \r\n\r\n        \r\n\r\n        \r\n        document.getElementById('performMeasurementBtn').addEventListener('click', () => {\r\n            this.waveParticleDuality.performMeasurement();\r\n        });\r\n        \r\n        // Removed resetDualityBtn event listener - main Reset button handles this\r\n        \r\n        // Initialize duality controls based on current mode\r\n        const initialMode = document.getElementById('dualityMode').value;\r\n        this.updateDualityControls(initialMode);\r\n        \r\n        this.setupSliderControl('nuclearSpeed', 'nuclearSpeedValue', (value) => {\r\n            this.nuclearReactions.setSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('neutronEnergy', 'neutronEnergyValue', (value) => {\r\n            this.nuclearReactions.setNeutronEnergy(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('nuclearTemperature', 'nuclearTemperatureValue', (value) => {\r\n            this.nuclearReactions.setTemperature(parseFloat(value));\r\n        });\r\n        \r\n        document.getElementById('nuclearMode').addEventListener('change', (e) => {\r\n            this.nuclearReactions.setMode(e.target.value);\r\n        });\r\n        \r\n        // Fluid Flow Controls\r\n        this.setupSliderControl('fluidSpeed', 'fluidSpeedValue', (value) => {\r\n            this.fluidFlow.setFlowRate(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('flowRate', 'flowRateValue', (value) => {\r\n            this.fluidFlow.setFlowRate(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('viscosity', 'viscosityValue', (value) => {\r\n            this.fluidFlow.setViscosity(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('reynoldsNumber', 'reynoldsNumberValue', (value) => {\r\n            this.fluidFlow.setReynoldsNumber(parseInt(value));\r\n        });\r\n        \r\n        document.getElementById('fluidVisualizationMode').addEventListener('change', (e) => {\r\n            this.fluidFlow.setVisualizationMode(e.target.value);\r\n        });\r\n        \r\n        // Bernoulli's Principle Controls\r\n        this.setupSliderControl('pressureDifference', 'pressureDifferenceValue', (value) => {\r\n            this.bernoulli.setPressureDifference(parseFloat(value));\r\n        });\r\n        \r\n        // Sound Waves Controls\r\n        this.setupSliderControl('soundAnimationSpeed', 'soundAnimationSpeedValue', (value) => {\r\n            this.soundWaves.setAnimationSpeed(parseFloat(value));\r\n        });\r\n        \r\n        this.setupSliderControl('soundFrequency', 'soundFrequencyValue', (value) => {\r\n            this.soundWaves.setFrequency(parseInt(value));\r\n        });\r\n        \r\n        document.getElementById('soundWaveType').addEventListener('change', (e) => {\r\n            this.soundWaves.setWaveType(e.target.value);\r\n        });\r\n        \r\n        this.canvas.addEventListener('click', (e) => {\r\n            if (this.currentAnimation === 'sound-waves') {\r\n                const rect = this.canvas.getBoundingClientRect();\r\n                const scaleX = this.canvas.width / rect.width;\r\n                const scaleY = this.canvas.height / rect.height;\r\n                const x = (e.clientX - rect.left) * scaleX;\r\n                const y = (e.clientY - rect.top) * scaleY;\r\n                const sx = this.soundWaves.sourceX;\r\n                const sy = this.soundWaves.sourceY;\r\n                const distance = Math.sqrt((x - sx) ** 2 + (y - sy) ** 2);\r\n                if (distance <= 50) { // Increased click radius from 30 to 50 pixels\r\n                    this.soundWaves.triggerWavePulse();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Diode & Transistor Controls\r\n        const componentTypeSelect = document.getElementById('diodeComponentType');\r\n        const biasTypeSelect = document.getElementById('diodeBiasType');\r\n        \r\n        if (componentTypeSelect) {\r\n            componentTypeSelect.addEventListener('change', (e) => {\r\n                if (this.diodeTransistor) {\r\n                    this.diodeTransistor.setComponentType(e.target.value);\r\n                }\r\n            });\r\n        }\r\n        \r\n        if (biasTypeSelect) {\r\n            biasTypeSelect.addEventListener('change', (e) => {\r\n                if (this.diodeTransistor) {\r\n                    this.diodeTransistor.setBiasType(e.target.value);\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.setupSliderControl('diodeInputVoltage', 'diodeInputVoltageValue', (value) => {\r\n            if (this.diodeTransistor) {\r\n                this.diodeTransistor.setInputVoltage(parseFloat(value));\r\n            }\r\n        });\r\n        \r\n        this.setupSliderControl('diodeBaseVoltage', 'diodeBaseVoltageValue', (value) => {\r\n            if (this.diodeTransistor) {\r\n                this.diodeTransistor.setBaseVoltage(parseFloat(value));\r\n            }\r\n        });\r\n        \r\n        this.setupSliderControl('diodeAnimationSpeed', 'diodeAnimationSpeedValue', (value) => {\r\n            if (this.diodeTransistor) {\r\n                this.diodeTransistor.setAnimationSpeed(parseFloat(value));\r\n            }\r\n        });\r\n        \r\n        // Neural Network Controls\r\n        this.setupSliderControl('neuralLearningRate', 'neuralLearningRateValue', (value) => {\r\n            if (this.neuralNetwork) {\r\n                this.neuralNetwork.setLearningRate(parseFloat(value));\r\n            }\r\n        });\r\n        \r\n        this.setupSliderControl('neuralSpeed', 'neuralSpeedValue', (value) => {\r\n            if (this.neuralNetwork) {\r\n                this.neuralNetwork.setSpeed(parseFloat(value));\r\n            }\r\n        });\r\n\r\n        // New NN controls\r\n        // Simplified: no optimizer/dataset/batch/dropout/decay controls for now\r\n        \r\n        // Memory Management Controls - removed memorySpeed as it's handled by on-canvas controls\r\n        \r\n        // Show Program Output toggle\r\n        const showOutputCheckbox = document.getElementById('showOutput');\r\n        if (showOutputCheckbox && this.memoryManagement) {\r\n            showOutputCheckbox.checked = this.memoryManagement.showOutput;\r\n            showOutputCheckbox.addEventListener('change', (e) => {\r\n                this.memoryManagement.setShowOutput(e.target.checked);\r\n            });\r\n        }\r\n\r\n        // Blockchain Controls\r\n        this.setupSliderControl('blockchainSpeed', 'blockchainSpeedValue', (value) => {\r\n            if (this.blockchain) {\r\n                this.blockchain.setSpeed(parseFloat(value));\r\n            }\r\n        });\r\n        \r\n        this.setupSliderControl('blockchainDifficulty', 'blockchainDifficultyValue', (value) => {\r\n            if (this.blockchain) {\r\n                this.blockchain.setDifficulty(parseInt(value));\r\n                // Update stats immediately to reflect new difficulty\r\n                this.updateBlockchainStats();\r\n            }\r\n        });\r\n        \r\n\r\n        \r\n\r\n        \r\n\r\n\r\n        // Neural Network Mode Selector\r\n        const neuralMode = document.getElementById('neuralMode');\r\n        if (neuralMode) {\r\n            neuralMode.addEventListener('change', (e) => {\r\n                if (this.neuralNetwork) {\r\n                    const isTesting = e.target.value === 'testing';\r\n                    this.neuralNetwork.setTestingMode(isTesting);\r\n                    \r\n                    // Set appropriate defaults for each mode\r\n                    if (isTesting) {\r\n                        this.neuralNetwork.setShowWeights(true);\r\n                        this.neuralNetwork.setShowGradients(false);\r\n                        this.neuralNetwork.setShowLoss(false);\r\n                        this.neuralNetwork.setAutoTrain(false);\r\n                    } else {\r\n                        this.neuralNetwork.setShowWeights(true);\r\n                        this.neuralNetwork.setShowGradients(false);\r\n                        this.neuralNetwork.setShowLoss(true);\r\n                        this.neuralNetwork.setAutoTrain(true);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n    setupSliderControl(sliderId, valueId, callback) {\r\n        const slider = document.getElementById(sliderId);\r\n        const valueDisplay = document.getElementById(valueId);\r\n        \r\n        if (!slider) {\r\n            console.warn(`Slider not found: ${sliderId}`);\r\n            return;\r\n        }\r\n        \r\n        if (!valueDisplay) {\r\n            console.warn(`Value display not found: ${valueId}`);\r\n            return;\r\n        }\r\n        \r\n        const formatAndApply = (val) => {\r\n            const raw = typeof val === 'string' ? val : String(val);\r\n            const parsedNum = Number(raw);\r\n            const customUnit = valueDisplay.dataset.unit || slider.dataset.unit || '';\r\n            const decimalsAttr = valueDisplay.dataset.decimals || slider.dataset.decimals;\r\n            const decimals = decimalsAttr !== undefined ? Number(decimalsAttr) : undefined;\r\n            const fallbackUnit = sliderId.includes('Speed') ? 'x' : \r\n                        sliderId.includes('Angle') ? '°' : \r\n                        sliderId.includes('Length') ? '' : \r\n                        sliderId.includes('Wavelength') ? ' px' :\r\n                        sliderId.includes('Frequency') ? ' Hz' : \r\n                        sliderId.includes('gasTemperature') ? 'K' : \r\n                        sliderId.includes('frictionCoefficient') ? '' : \r\n                        sliderId.includes('Voltage') ? 'V' : '';\r\n            const unit = customUnit || fallbackUnit;\r\n            const displayVal = !Number.isNaN(parsedNum) && decimals !== undefined\r\n                ? parsedNum.toFixed(decimals)\r\n                : raw;\r\n            valueDisplay.textContent = displayVal + unit;\r\n            callback(raw);\r\n        };\r\n\r\n        slider.addEventListener('input', (e) => {\r\n            formatAndApply(e.target.value);\r\n        });\r\n\r\n        // Initialize display and underlying value on load\r\n        formatAndApply(slider.value);\r\n    }\r\n    \r\n    updateDualityControls(mode) {\r\n        const performMeasurementBtn = document.getElementById('performMeasurementBtn');\r\n        \r\n        // Show measurement button only for superposition and measurement modes\r\n        if (mode === 'superposition' || mode === 'measurement') {\r\n            performMeasurementBtn.style.display = 'inline-block';\r\n        } else {\r\n            performMeasurementBtn.style.display = 'none';\r\n        }\r\n    }\r\n    \r\n    updateBrownianVisualization(mode) {\r\n        // Reset all visualization options\r\n        this.brownianMotion.setShowTemperatureHeatmap(false);\r\n        this.brownianMotion.setShowVelocityDistribution(false);\r\n        this.brownianMotion.setShowMeanFreePath(false);\r\n        \r\n        // Enable features based on mode\r\n        switch(mode) {\r\n            case 'basic':\r\n                // Just basic particle motion, no extra visualizations\r\n                break;\r\n            case 'heatmap':\r\n                this.brownianMotion.setShowTemperatureHeatmap(true);\r\n                break;\r\n            case 'advanced':\r\n                // Show all advanced features\r\n                this.brownianMotion.setShowTemperatureHeatmap(true);\r\n                this.brownianMotion.setShowVelocityDistribution(true);\r\n                this.brownianMotion.setShowMeanFreePath(true);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    updateDiffusionVisualization(mode) {\r\n        const diffusion = this.diffusion;\r\n        \r\n        switch (mode) {\r\n            case 'basic':\r\n                diffusion.setShowConcentration(false);\r\n                diffusion.setShowConcentrationProfile(false);\r\n                diffusion.setShowParticleTrails(false);\r\n                break;\r\n            case 'heatmap':\r\n                diffusion.setShowConcentration(true);\r\n                diffusion.setShowConcentrationProfile(false);\r\n                diffusion.setShowParticleTrails(false);\r\n                break;\r\n            case 'profile':\r\n                diffusion.setShowConcentration(false);\r\n                diffusion.setShowConcentrationProfile(true);\r\n                diffusion.setShowParticleTrails(false);\r\n                break;\r\n            case 'advanced':\r\n                diffusion.setShowConcentration(true);\r\n                diffusion.setShowConcentrationProfile(true);\r\n                diffusion.setShowParticleTrails(true);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    updateGasVisualization(mode) {\r\n        const gasLaws = this.gasLaws;\r\n        \r\n        switch (mode) {\r\n            case 'basic':\r\n                gasLaws.setShowPressureGauge(true);\r\n                gasLaws.setShowPressureHeatmap(false);\r\n                gasLaws.setShowVelocityDistribution(false);\r\n                gasLaws.setShowGasLawGraph(false);\r\n                gasLaws.setShowParticleCollisions(false);\r\n                break;\r\n            case 'pressure':\r\n                gasLaws.setShowPressureGauge(true);\r\n                gasLaws.setShowPressureHeatmap(true);\r\n                gasLaws.setShowVelocityDistribution(false);\r\n                gasLaws.setShowGasLawGraph(true);\r\n                gasLaws.setShowParticleCollisions(false);\r\n                break;\r\n            case 'advanced':\r\n                gasLaws.setShowPressureGauge(true);\r\n                gasLaws.setShowPressureHeatmap(true);\r\n                gasLaws.setShowVelocityDistribution(true);\r\n                gasLaws.setShowGasLawGraph(true);\r\n                gasLaws.setShowParticleCollisions(true);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    updatePendulumVisualization(mode) {\r\n        const pendulum = this.pendulum;\r\n        \r\n        switch (mode) {\r\n            case 'basic':\r\n                pendulum.setShowPath(false);\r\n                pendulum.setShowVelocityVectors(false);\r\n                pendulum.setShowForceVectors(true);\r\n                pendulum.setShowEnergyInfo(false);\r\n                pendulum.setShowPhaseSpace(false);\r\n                break;\r\n            case 'vectors':\r\n                pendulum.setShowPath(false);\r\n                pendulum.setShowVelocityVectors(true);\r\n                pendulum.setShowForceVectors(true);\r\n                pendulum.setShowEnergyInfo(false);\r\n                pendulum.setShowPhaseSpace(false);\r\n                break;\r\n            case 'advanced':\r\n                pendulum.setShowPath(true);\r\n                pendulum.setShowVelocityVectors(true);\r\n                pendulum.setShowForceVectors(true);\r\n                pendulum.setShowEnergyInfo(true);\r\n                pendulum.setShowPhaseSpace(true);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    updateOrbitalVisualization(mode) {\r\n        switch(mode) {\r\n            case 'basic':\r\n                this.orbital.setShowOrbitPath(true);\r\n                this.orbital.setShowVelocityVector(false);\r\n                this.orbital.setShowKeplerInfo(false);\r\n                break;\r\n            case 'advanced':\r\n                this.orbital.setShowOrbitPath(true);\r\n                this.orbital.setShowVelocityVector(true);\r\n                this.orbital.setShowKeplerInfo(true);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    switchCategory(category) {\r\n        \r\n        // Update category buttons\r\n        document.querySelectorAll('.category-btn').forEach(btn => {\r\n            btn.classList.remove('active');\r\n        });\r\n        \r\n        const categoryBtn = document.querySelector(`[data-category=\"${category}\"]`);\r\n        if (categoryBtn) {\r\n            categoryBtn.classList.add('active');\r\n        }\r\n        \r\n        // Hide all animation groups\r\n        document.querySelectorAll('.animation-group').forEach(group => {\r\n            group.classList.remove('active');\r\n        });\r\n        \r\n        // Show current category's animations\r\n        const animationGroup = document.getElementById(`${category}-animations`);\r\n        if (animationGroup) {\r\n            animationGroup.classList.add('active');\r\n        }\r\n        \r\n        // Switch to first available animation in category\r\n        const firstAnimation = document.querySelector(`#${category}-animations .nav-btn:not(.disabled)`);\r\n        if (firstAnimation) {\r\n            this.switchAnimation(firstAnimation.dataset.animation);\r\n        } else {\r\n            console.warn('No available animations found for category:', category);\r\n        }\r\n    }\r\n    \r\n    switchAnimation(animationType) {\r\n        if (animationType === this.currentAnimation) {\r\n            return;\r\n        }\r\n        \r\n        // Update active submenu item\r\n        document.querySelectorAll('.submenu-item').forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        \r\n        const activeItem = document.querySelector(`[data-animation=\"${animationType}\"]`);\r\n        if (activeItem) {\r\n            activeItem.classList.add('active');\r\n            \r\n            // Ensure the parent category is active\r\n            const categoryItem = activeItem.closest('.category-item');\r\n            if (categoryItem) {\r\n                // Close all other categories\r\n                document.querySelectorAll('.category-item').forEach(item => {\r\n                    if (item !== categoryItem) {\r\n                        item.classList.remove('active');\r\n                    }\r\n                });\r\n                \r\n                // Open the parent category\r\n                categoryItem.classList.add('active');\r\n            }\r\n        }\r\n        \r\n\r\n        \r\n        // Hide all control panels\r\n        document.querySelectorAll('.animation-controls').forEach(panel => {\r\n            panel.style.display = 'none';\r\n        });\r\n        \r\n        // Show current control panel\r\n        const controlPanel = document.getElementById(`${animationType}-controls`);\r\n        if (controlPanel) {\r\n            controlPanel.style.display = 'block';\r\n        }\r\n        \r\n        // Hide all info panels\r\n        document.querySelectorAll('.animation-info').forEach(panel => {\r\n            panel.style.display = 'none';\r\n        });\r\n        \r\n        // Show current info panel\r\n        const infoPanel = document.getElementById(`${animationType}-info`);\r\n        if (infoPanel) {\r\n            infoPanel.style.display = 'block';\r\n        }\r\n        \r\n        this.currentAnimation = animationType;\r\n        try { localStorage.setItem('lastAnimation', animationType); } catch {}\r\n        this.resetAnimation();\r\n        \r\n        // Initialize wave controls if switching to waves animation\r\n        if (animationType === 'waves') {\r\n            this.initializeWaveControls();\r\n        }\r\n        \r\n        // Initialize sound waves controls if switching to sound-waves animation\r\n        if (animationType === 'sound-waves') {\r\n            this.initializeSoundWavesControls();\r\n        }\r\n        \r\n        // Initialize diode-transistor controls if switching to diode-transistor animation\r\n        if (animationType === 'diode-transistor') {\r\n            // Wait for the control panel to be visible before initializing\r\n            setTimeout(() => {\r\n                this.initializeDiodeTransistorControls();\r\n            }, 50);\r\n        }\r\n        \r\n        // Initialize memory management animation if switching to memory-management animation\r\n        if (animationType === 'memory-management') {\r\n            // Ensure memory management starts immediately\r\n            setTimeout(() => {\r\n                if (this.memoryManagement) {\r\n                    this.memoryManagement.startExecution();\r\n                }\r\n            }, 100);\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n    initializeWaveControls() {\r\n        // Synchronize control values with wave parameters\r\n        const speedSlider = document.getElementById('waveSpeed');\r\n        const frequencySlider = document.getElementById('waveFrequency');\r\n        const amplitudeSlider = document.getElementById('waveAmplitude');\r\n        \r\n        if (speedSlider && this.waves) {\r\n            speedSlider.value = this.waves.speed;\r\n            document.getElementById('waveSpeedValue').textContent = this.waves.speed + 'x';\r\n        }\r\n        \r\n        if (frequencySlider && this.waves) {\r\n            frequencySlider.value = this.waves.frequency;\r\n            document.getElementById('waveFrequencyValue').textContent = this.waves.frequency;\r\n        }\r\n        \r\n        if (amplitudeSlider && this.waves) {\r\n            amplitudeSlider.value = this.waves.amplitude;\r\n            document.getElementById('waveAmplitudeValue').textContent = this.waves.amplitude;\r\n        }\r\n        \r\n        // Recalculate wave parameters to ensure they're correct\r\n        if (this.waves) {\r\n            this.waves.calculateWaveParameters();\r\n        }\r\n    }\r\n    \r\n    initializeSoundWavesControls() {\r\n        \r\n        // Synchronize control values with sound waves parameters\r\n        const frequencySlider = document.getElementById('soundFrequency');\r\n        const animationSpeedSlider = document.getElementById('soundAnimationSpeed');\r\n        const waveTypeSelect = document.getElementById('soundWaveType');\r\n        \r\n        if (frequencySlider && this.soundWaves) {\r\n            frequencySlider.value = this.soundWaves.frequency;\r\n            document.getElementById('soundFrequencyValue').textContent = this.soundWaves.frequency + ' Hz';\r\n        }\r\n        \r\n        if (animationSpeedSlider && this.soundWaves) {\r\n            animationSpeedSlider.value = this.soundWaves.animationSpeed;\r\n            document.getElementById('soundAnimationSpeedValue').textContent = this.soundWaves.animationSpeed + 'x';\r\n        }\r\n        \r\n        if (waveTypeSelect && this.soundWaves) {\r\n            waveTypeSelect.value = this.soundWaves.waveType;\r\n        }\r\n    }\r\n    \r\n    initializeDiodeTransistorControls() {\r\n        const componentTypeSelect = document.getElementById('diodeComponentType');\r\n        const biasTypeSelect = document.getElementById('diodeBiasType');\r\n        \r\n        if (componentTypeSelect && this.diodeTransistor) {\r\n            componentTypeSelect.value = this.diodeTransistor.componentType;\r\n            componentTypeSelect.dispatchEvent(new Event('change'));\r\n        }\r\n        if (biasTypeSelect && this.diodeTransistor) {\r\n            biasTypeSelect.value = this.diodeTransistor.biasType;\r\n            biasTypeSelect.dispatchEvent(new Event('change'));\r\n        }\r\n    }\r\n    \r\n    togglePlayPause() {\r\n        this.isRunning = !this.isRunning;\r\n        const btn = document.getElementById('playPauseBtn');\r\n        btn.textContent = this.isRunning ? 'Pause' : 'Play';\r\n    }\r\n    \r\n    applyControlValues() {\r\n        // Apply control values based on current animation\r\n        // Read values from controls and apply them to the animation instance\r\n        switch(this.currentAnimation) {\r\n            case 'brownian':\r\n                if (this.brownianMotion) {\r\n                    const particleCount = parseInt(document.getElementById('particleCount')?.value);\r\n                    const speed = parseFloat(document.getElementById('speed')?.value);\r\n                    const temperature = parseFloat(document.getElementById('temperature')?.value);\r\n                    if (!isNaN(particleCount)) this.brownianMotion.setParticleCount(particleCount);\r\n                    if (!isNaN(speed)) this.brownianMotion.setSpeed(speed);\r\n                    if (!isNaN(temperature)) this.brownianMotion.setTemperature(temperature);\r\n                }\r\n                break;\r\n            case 'pendulum':\r\n                if (this.pendulum) {\r\n                    const length = parseFloat(document.getElementById('pendulumLength')?.value);\r\n                    const speed = parseFloat(document.getElementById('pendulumSpeed')?.value);\r\n                    const angle = parseFloat(document.getElementById('initialAngle')?.value);\r\n                    const gravity = parseFloat(document.getElementById('gravity')?.value);\r\n                    const damping = parseFloat(document.getElementById('damping')?.value);\r\n                    if (!isNaN(length)) this.pendulum.setLength(length);\r\n                    if (!isNaN(speed)) this.pendulum.setSpeed(speed);\r\n                    if (!isNaN(angle)) this.pendulum.setInitialAngle(angle);\r\n                    if (!isNaN(gravity)) this.pendulum.setGravity(gravity);\r\n                    if (!isNaN(damping)) this.pendulum.setDamping(damping);\r\n                }\r\n                break;\r\n            case 'diffusion':\r\n                if (this.diffusion) {\r\n                    const particleCount = parseInt(document.getElementById('diffusionParticles')?.value);\r\n                    const speed = parseFloat(document.getElementById('diffusionSpeed')?.value);\r\n                    const rate = parseFloat(document.getElementById('diffusionRate')?.value);\r\n                    if (!isNaN(particleCount)) this.diffusion.setParticleCount(particleCount);\r\n                    if (!isNaN(speed)) this.diffusion.setSpeed(speed);\r\n                    if (!isNaN(rate)) this.diffusion.setDiffusionRate(rate);\r\n                }\r\n                break;\r\n            case 'waves':\r\n                if (this.waves) {\r\n                    const waveType = document.getElementById('waveType')?.value;\r\n                    const frequency = parseFloat(document.getElementById('waveFrequency')?.value);\r\n                    const amplitude = parseFloat(document.getElementById('waveAmplitude')?.value);\r\n                    if (waveType) this.waves.setWaveType(waveType);\r\n                    if (!isNaN(frequency)) this.waves.setFrequency(frequency);\r\n                    if (!isNaN(amplitude)) this.waves.setAmplitude(amplitude);\r\n                }\r\n                break;\r\n            case 'orbital':\r\n                if (this.orbital) {\r\n                    const speed = parseFloat(document.getElementById('orbitalSpeed')?.value);\r\n                    const eccentricity = parseFloat(document.getElementById('eccentricity')?.value);\r\n                    if (!isNaN(speed)) this.orbital.setSpeed(speed);\r\n                    if (!isNaN(eccentricity)) this.orbital.setEccentricity(eccentricity);\r\n                }\r\n                break;\r\n            case 'gas-laws':\r\n                if (this.gasLaws) {\r\n                    const speed = parseFloat(document.getElementById('gasSpeed')?.value);\r\n                    const particleCount = parseInt(document.getElementById('gasParticleCount')?.value);\r\n                    const temperature = parseFloat(document.getElementById('gasTemperature')?.value);\r\n                    const volume = parseFloat(document.getElementById('gasVolume')?.value);\r\n                    if (!isNaN(speed)) this.gasLaws.setSpeed(speed);\r\n                    if (!isNaN(particleCount)) this.gasLaws.setParticleCount(particleCount);\r\n                    if (!isNaN(temperature)) this.gasLaws.setTemperature(temperature);\r\n                    if (!isNaN(volume)) this.gasLaws.setVolume(volume);\r\n                }\r\n                break;\r\n            case 'collisions':\r\n                if (this.collisions) {\r\n                    const speed = parseFloat(document.getElementById('collisionSpeed')?.value);\r\n                    const ballCount = parseInt(document.getElementById('ballCount')?.value);\r\n                    if (!isNaN(speed)) this.collisions.setSpeed(speed);\r\n                    if (!isNaN(ballCount)) this.collisions.setBallCount(ballCount);\r\n                }\r\n                break;\r\n            case 'friction':\r\n                if (this.friction) {\r\n                    const speed = parseFloat(document.getElementById('frictionSpeed')?.value);\r\n                    const coefficient = parseFloat(document.getElementById('frictionCoefficient')?.value);\r\n                    const angle = parseFloat(document.getElementById('inclineAngle')?.value);\r\n                    if (!isNaN(speed)) this.friction.setSpeed(speed);\r\n                    if (!isNaN(coefficient)) this.friction.setFrictionCoefficient(coefficient);\r\n                    if (!isNaN(angle)) this.friction.setInclineAngle(angle);\r\n                }\r\n                break;\r\n            case 'electric-fields':\r\n                if (this.electricFields) {\r\n                    const speed = parseFloat(document.getElementById('efSpeed')?.value);\r\n                    const fieldStrength = parseFloat(document.getElementById('efFieldStrength')?.value);\r\n                    if (!isNaN(speed)) this.electricFields.setSpeed(speed);\r\n                    if (!isNaN(fieldStrength)) this.electricFields.setFieldStrength(fieldStrength);\r\n                }\r\n                break;\r\n            case 'sound-waves':\r\n                if (this.soundWaves) {\r\n                    const waveType = document.getElementById('soundWaveType')?.value;\r\n                    const frequency = parseFloat(document.getElementById('soundFrequency')?.value);\r\n                    const animationSpeed = parseFloat(document.getElementById('soundAnimationSpeed')?.value);\r\n                    if (waveType) this.soundWaves.setWaveType(waveType);\r\n                    if (!isNaN(frequency)) this.soundWaves.setFrequency(frequency);\r\n                    if (!isNaN(animationSpeed)) this.soundWaves.setAnimationSpeed(animationSpeed);\r\n                }\r\n                break;\r\n            // Add more cases as needed for other animations\r\n        }\r\n    }\r\n    \r\n    resetAnimation() {\r\n        switch(this.currentAnimation) {\r\n            case 'brownian':\r\n                this.brownianMotion.reset();\r\n                break;\r\n            case 'pendulum':\r\n                this.pendulum.reset();\r\n                break;\r\n            case 'diffusion':\r\n                this.diffusion.reset();\r\n                break;\r\n            case 'waves':\r\n                this.waves.reset();\r\n                break;\r\n            case 'orbital':\r\n                this.orbital.reset();\r\n                break;\r\n            case 'electric-fields':\r\n                this.electricFields.reset();\r\n                break;\r\n            case 'gas-laws':\r\n                this.gasLaws.reset();\r\n                break;\r\n            case 'collisions':\r\n                this.collisions.reset();\r\n                break;\r\n            case 'friction':\r\n                this.friction.reset();\r\n                break;\r\n\r\n            case 'magnetic-fields':\r\n                this.magneticFields.reset();\r\n                break;\r\n\r\n            case 'wave-particle-duality':\r\n                this.waveParticleDuality.reset();\r\n                break;   \r\n            case 'nuclear-reactions':\r\n                this.nuclearReactions.reset();\r\n                break;\r\n            case 'fluid-flow':\r\n                this.fluidFlow.reset();\r\n                break;\r\n            case 'bernoulli':\r\n                this.bernoulli.reset();\r\n                break;\r\n            case 'sound-waves':\r\n                this.soundWaves.reset();\r\n                break;\r\n            case 'diode-transistor':\r\n                this.diodeTransistor.reset();\r\n                break;\r\n            case 'neural-network':\r\n                this.neuralNetwork.reset();\r\n                break;\r\n            case 'memory-management':\r\n                this.memoryManagement.reset();\r\n                break;\r\n            case 'blockchain':\r\n                this.blockchain.reset();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    resizeCanvas() {\r\n        const container = this.canvas.parentElement; // .canvas-wrapper\r\n        // Standardize canvas size: fixed width with 4:3 aspect ratio\r\n        const standardWidth = 800;\r\n        const standardHeight = 600;\r\n        \r\n        this.canvas.width = standardWidth;\r\n        this.canvas.height = standardHeight;\r\n        \r\n        // Update source and receiver positions for sound waves\r\n        if (this.soundWaves) {\r\n            this.soundWaves.setSourcePosition(100, this.canvas.height / 2);\r\n            this.soundWaves.setReceiverPosition(this.canvas.width - 100, this.canvas.height / 2);\r\n        }\r\n        \r\n        // Resize neural network to center it on the new canvas size\r\n        if (this.neuralNetwork) {\r\n            this.neuralNetwork.resize();\r\n        }\r\n        \r\n        // Initialize neural network if it hasn't been initialized yet\r\n        if (this.neuralNetwork && this.neuralNetwork.neurons.length === 0) {\r\n            this.neuralNetwork.initializeNetwork();\r\n        }\r\n        \r\n        // Resize memory management panels if needed\r\n        if (this.memoryManagement) {\r\n            this.memoryManagement.resize();\r\n        }\r\n    }\r\n    \r\n    animate(currentTime = 0) {\r\n        if (!this.isRunning) {\r\n            requestAnimationFrame((time) => this.animate(time));\r\n            return;\r\n        }\r\n        \r\n        // Initialize lastTime on first frame\r\n        if (this.lastTime === undefined) {\r\n            this.lastTime = currentTime;\r\n        }\r\n        \r\n        const deltaTime = currentTime - this.lastTime;\r\n        this.lastTime = currentTime;\r\n        \r\n        // Clear canvas\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Update and render current animation\r\n        switch(this.currentAnimation) {\r\n            case 'brownian':\r\n                this.brownianMotion.update(deltaTime);\r\n                this.brownianMotion.render();\r\n                this.updateBrownianStats();\r\n                break;\r\n            case 'pendulum':\r\n                this.pendulum.update(deltaTime);\r\n                this.pendulum.render();\r\n                this.updatePendulumStats();\r\n                break;\r\n            case 'diffusion':\r\n                this.diffusion.update(deltaTime);\r\n                this.diffusion.render();\r\n                this.updateDiffusionStats();\r\n                break;\r\n            case 'waves':\r\n                this.waves.update(deltaTime);\r\n                this.waves.render();\r\n                this.updateWaveStats();\r\n                break;\r\n            case 'orbital':\r\n                this.orbital.update(deltaTime);\r\n                this.orbital.render();\r\n                this.updateOrbitalStats();\r\n                break;\r\n            case 'electric-fields':\r\n                this.electricFields.update(deltaTime);\r\n                this.electricFields.render();\r\n                this.updateElectricFieldsStats();\r\n                break;\r\n            case 'gas-laws':\r\n                this.gasLaws.update(deltaTime);\r\n                this.gasLaws.render();\r\n                this.updateGasLawsStats();\r\n                break;\r\n            case 'collisions':\r\n                this.collisions.update(deltaTime);\r\n                this.collisions.render();\r\n                this.updateCollisionStats();\r\n                break;\r\n            case 'friction':\r\n                this.friction.update(deltaTime);\r\n                this.friction.render();\r\n                this.updateFrictionStats();\r\n                break;\r\n\r\n            case 'magnetic-fields':\r\n                this.magneticFields.update(deltaTime);\r\n                this.magneticFields.render();\r\n                this.updateMagneticFieldsStats();\r\n                break;\r\n\r\n            case 'wave-particle-duality':\r\n                this.waveParticleDuality.update(deltaTime);\r\n                this.waveParticleDuality.render();\r\n                this.updateWaveParticleDualityStats();\r\n                break;\r\n            case 'nuclear-reactions':\r\n                this.nuclearReactions.update(deltaTime);\r\n                this.nuclearReactions.render();\r\n                break;\r\n            case 'fluid-flow':\r\n                if (this.fluidFlow) {\r\n                    this.fluidFlow.update(deltaTime);\r\n                    this.fluidFlow.render();\r\n                    this.updateFluidFlowStats();\r\n                }\r\n                break;\r\n            case 'bernoulli':\r\n                if (this.bernoulli) {\r\n                    this.bernoulli.update(deltaTime);\r\n                    this.bernoulli.render();\r\n                    this.updateBernoulliStats();\r\n                }\r\n                break;\r\n            case 'sound-waves':\r\n                if (this.soundWaves) {\r\n                    this.soundWaves.update(deltaTime);\r\n                    this.soundWaves.render();\r\n                    this.updateSoundWavesStats();\r\n                }\r\n                break;\r\n            case 'diode-transistor':\r\n                if (this.diodeTransistor) {\r\n                    this.diodeTransistor.update(deltaTime);\r\n                    this.diodeTransistor.render();\r\n                    this.updateDiodeTransistorStats();\r\n                }\r\n                break;\r\n            case 'neural-network':\r\n                if (this.neuralNetwork) {\r\n                    this.neuralNetwork.update(deltaTime);\r\n                    this.neuralNetwork.render();\r\n                    this.updateNeuralNetworkStats();\r\n                }\r\n                break;\r\n            case 'memory-management':\r\n                if (this.memoryManagement) {\r\n                    this.memoryManagement.update(deltaTime);\r\n                    this.memoryManagement.render();\r\n                    this.updateMemoryManagementStats();\r\n                }\r\n                break;\r\n            case 'blockchain':\r\n                if (this.blockchain) {\r\n                    this.blockchain.update(deltaTime);\r\n                    this.blockchain.render();\r\n                    this.updateBlockchainStats();\r\n                } else {\r\n                    console.error('Blockchain instance not found!');\r\n                }\r\n                break;\r\n        }\r\n        \r\n        requestAnimationFrame((time) => this.animate(time));\r\n    }\r\n    \r\n    // Unified stats update system\r\n    updateStats(animationName, elementMappings) {\r\n        const animation = this[animationName];\r\n        if (!animation) return;\r\n        \r\n        const stats = animation.getStats();\r\n        \r\n        Object.entries(elementMappings).forEach(([elementId, config]) => {\r\n            const element = document.getElementById(elementId);\r\n            if (element) {\r\n                const value = this.getNestedValue(stats, config.path);\r\n                element.textContent = this.formatValue(value, config);\r\n            }\r\n        });\r\n    }\r\n    \r\n    getNestedValue(obj, path) {\r\n        return path.split('.').reduce((current, key) => {\r\n            return current && current[key] !== undefined ? current[key] : null;\r\n        }, obj);\r\n    }\r\n    \r\n    formatValue(value, config) {\r\n        if (value === null || value === undefined) {\r\n            return config.fallback !== undefined ? config.fallback.toString() : '';\r\n        }\r\n        \r\n        const { format, suffix, prefix, decimalPlaces, transform } = config;\r\n        \r\n        // Apply transform function if provided\r\n        if (transform && typeof transform === 'function') {\r\n            value = transform(value);\r\n        }\r\n        \r\n        if (format === 'time') {\r\n            return (value / 1000).toFixed(2) + 's';\r\n        }\r\n        \r\n        if (format === 'angle') {\r\n            return value.toFixed(decimalPlaces || 2) + '°';\r\n        }\r\n        \r\n        if (format === 'percentage') {\r\n            return value.toFixed(decimalPlaces || 2) + '%';\r\n        }\r\n        \r\n        if (format === 'unit') {\r\n            if (typeof value === 'number') {\r\n                const dp = (decimalPlaces !== undefined) ? decimalPlaces : 2;\r\n                return value.toFixed(dp) + (suffix || '');\r\n            }\r\n            return value + (suffix || '');\r\n        }\r\n        \r\n        if (format === 'decimal') {\r\n            if (typeof value === 'number') {\r\n                return value.toFixed(decimalPlaces || 2);\r\n            }\r\n            return value.toString();\r\n        }\r\n        \r\n        if (format === 'boolean') {\r\n            return value ? 'Active' : 'Hidden';\r\n        }\r\n        \r\n        if (format === 'capitalize') {\r\n            return value.charAt(0).toUpperCase() + value.slice(1);\r\n        }\r\n        \r\n        if (format === 'uppercase') {\r\n            return value.toString().toUpperCase();\r\n        }\r\n        \r\n        return value.toString();\r\n    }\r\n    \r\n    updateBrownianStats() {\r\n        this.updateStats('brownianMotion', {\r\n            'activeParticles': { path: 'particleCount' },\r\n            'avgSpeed': { path: 'avgSpeed', format: 'decimal', decimalPlaces: 2 },\r\n            'brownianCollisionCount': { path: 'collisionCount' },\r\n            'brownianMeanFreePath': { path: 'meanFreePath', format: 'decimal', decimalPlaces: 2 },\r\n            'brownianTemperature': { path: 'temperature', format: 'decimal', decimalPlaces: 2 }\r\n        });\r\n    }\r\n    \r\n    updatePendulumStats() {\r\n        this.updateStats('pendulum', {\r\n            'currentAngle': { path: 'angle', format: 'angle', decimalPlaces: 2 },\r\n            'angularVelocity': { path: 'angularVelocity', format: 'decimal', decimalPlaces: 2 },\r\n            'period': { path: 'theoreticalPeriod', format: 'unit', suffix: 's', decimalPlaces: 2 },\r\n            'pendulumAirResistance': { path: 'airResistanceForce', format: 'decimal', decimalPlaces: 2 },\r\n            'pendulumDamping': { path: 'dampingCoefficient', format: 'decimal', decimalPlaces: 2 }\r\n        });\r\n    }\r\n    \r\n    updateDiffusionStats() {\r\n        this.updateStats('diffusion', {\r\n            'diffusionParticleCount': { path: 'particleCount' },\r\n            'diffusionAvgSpeed': { path: 'avgSpeed', format: 'decimal', decimalPlaces: 2 },\r\n            'concentrationSpread': { path: 'concentrationSpread', format: 'decimal', decimalPlaces: 2 },\r\n            \r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    updateWaveStats() {\r\n        this.updateStats('waves', {\r\n            'currentWaveType': { path: 'waveType', format: 'capitalize' },\r\n            'currentFrequency': { path: 'frequency', format: 'unit', suffix: ' Hz', decimalPlaces: 2 },\r\n            'currentWavelength': { path: 'wavelength', format: 'unit', suffix: ' px', decimalPlaces: 2 },\r\n            'currentAmplitude': { path: 'amplitude', format: 'unit', suffix: ' px', decimalPlaces: 2 },\r\n            'currentWaveSpeed': { path: 'waveSpeed', format: 'unit', suffix: ' px/s', decimalPlaces: 2 },\r\n            'currentWaveEnergy': { path: 'energy', format: 'decimal', decimalPlaces: 2 },\r\n            \r\n        });\r\n    }\r\n    \r\n    updateOrbitalStats() {\r\n        this.updateStats('orbital', {\r\n            'orbitalPeriod': { path: 'period', format: 'unit', suffix: 's', decimalPlaces: 2 },\r\n            'orbitalSpeed': { path: 'speed', format: 'decimal', decimalPlaces: 2 },\r\n            'orbitalDistance': { path: 'distance', format: 'decimal', decimalPlaces: 1 },\r\n            'orbitalEccentricity': { path: 'eccentricity', format: 'decimal', decimalPlaces: 2 }\r\n        });\r\n    }\r\n    \r\n    updateElectricFieldsStats() {\r\n        this.updateStats('electricFields', {\r\n            'activeCharges': { path: 'chargeCount' },\r\n            'stat-efParticleCount': { path: 'particleCount' },\r\n            'stat-efFieldStrength': { path: 'fieldStrength' },\r\n            \r\n        });\r\n    }\r\n    \r\n    updateGasLawsStats() {\r\n        this.updateStats('gasLaws', {\r\n            'stat-gasParticleCount': { path: 'particleCount' },\r\n            'stat-gasTemperature': { path: 'temperature', format: 'unit', suffix: 'K', decimalPlaces: 2 },\r\n            'stat-gasPressure': { path: 'pressure', format: 'decimal', decimalPlaces: 2 },\r\n            'stat-gasVolume': { path: 'volume' }\r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    updateCollisionStats() {\r\n        this.updateStats('collisions', {\r\n            'collisionBallCount': { path: 'ballCount' },\r\n            'collisionMomentum': { path: 'totalMomentum', format: 'decimal', decimalPlaces: 1 },\r\n            'collisionEnergy': { path: 'totalEnergy', format: 'decimal', decimalPlaces: 1 },\r\n            'collisionCount': { path: 'collisionCount' }\r\n        });\r\n    }\r\n    \r\n    updateFrictionStats() {\r\n        this.updateStats('friction', {\r\n            'frictionSurface': { path: 'surfaceType' },\r\n            'frictionAngle': { path: 'inclineAngle', format: 'angle', decimalPlaces: 2 },\r\n            'frictionNetForce': { path: 'netForce', format: 'decimal', decimalPlaces: 2 },\r\n            'frictionAcceleration': { path: 'acceleration', format: 'decimal', decimalPlaces: 2 }\r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    updateMagneticFieldsStats() {\r\n        this.updateStats('magneticFields', {\r\n            'stat-magneticFieldStrength': { path: 'fieldStrength' },\r\n            'stat-magneticParticleCount': { path: 'particleCount' },\r\n            \r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    updateWaveParticleDualityStats() {\r\n        this.updateStats('waveParticleDuality', {\r\n            'currentDualityMode': { path: 'mode' },\r\n            'currentPhotonEnergy': { path: 'photonEnergy', format: 'unit', suffix: ' eV' },\r\n            'currentDualityWavelength': { path: 'wavelength', format: 'unit', suffix: ' nm' },\r\n            'waveFunctionStatus': { path: 'showWaveFunction', format: 'boolean' },\r\n            'interferenceStatus': { path: 'showInterference', format: 'boolean' },\r\n            'measurementCount': { path: 'measurementCount' },\r\n            \r\n        });\r\n    }\r\n    \r\n    updateFluidFlowStats() {\r\n        this.updateStats('fluidFlow', {\r\n            'fluidFlowRate': { path: 'flowRate', format: 'decimal', decimalPlaces: 1 },\r\n            'fluidViscosity': { path: 'viscosity', format: 'decimal', decimalPlaces: 1 },\r\n            'stat-reynoldsNumber': { path: 'reynoldsNumber' },\r\n            'flowType': { path: 'flowType' },\r\n            'averageVelocity': { path: 'averageVelocity', format: 'decimal', decimalPlaces: 2 },\r\n            'viscosityEffect': { path: 'viscosityEffect', format: 'percentage', decimalPlaces: 0 },\r\n            'velocityRatio': { path: 'velocityRatio', format: 'decimal', decimalPlaces: 1 },\r\n            'topPorosity': { path: 'topPorosity', format: 'percentage', decimalPlaces: 0 },\r\n            'bottomPorosity': { path: 'bottomPorosity', format: 'percentage', decimalPlaces: 0 },\r\n            \r\n        });\r\n    }\r\n    \r\n    updateBernoulliStats() {\r\n        this.updateStats('bernoulli', {\r\n            'bernoulliPressureDiff': { path: 'pressureDifference', format: 'decimal', decimalPlaces: 1 },\r\n            'velocityRatio': { path: 'velocityRatio', format: 'decimal', decimalPlaces: 1 },\r\n            'energyConservation': { path: 'energyConservation' },\r\n            'particleCount': { path: 'particleCount' },\r\n            'maxParticles': { path: 'maxParticles' },\r\n            'flowEfficiency': { path: 'flowEfficiency', format: 'percentage' },\r\n            \r\n        });\r\n    }\r\n    \r\n    updateSoundWavesStats() {\r\n        this.updateStats('soundWaves', {\r\n            'stat-soundWaveType': { path: 'waveType', format: 'capitalize' },\r\n            'stat-soundFrequency': { path: 'frequency', format: 'unit', suffix: ' Hz', decimalPlaces: 2 },\r\n            'stat-soundWavelength': { path: 'wavelength', format: 'unit', suffix: ' m', decimalPlaces: 2 },\r\n            'stat-soundWaveSpeed': { path: 'waveSpeed', format: 'unit', suffix: ' m/s', decimalPlaces: 2 }\r\n        });\r\n    }\r\n    \r\n    updateDiodeTransistorStats() {\r\n        this.updateStats('diodeTransistor', {\r\n            'diodeComponentTypeDisplay': { path: 'componentType', format: 'uppercase' },\r\n            'diodeBiasTypeDisplay': { path: 'biasType', format: 'uppercase' },\r\n            'diodeInputVoltageDisplay': { path: 'inputVoltage', format: 'unit', suffix: 'V' },\r\n            'diodeBaseVoltageDisplay': { path: 'baseVoltage', format: 'unit', suffix: 'V' },\r\n            'diodeCurrent': { path: 'current', format: 'unit', suffix: 'mA', decimalPlaces: 1 },\r\n            'diodePower': { path: 'power', format: 'unit', suffix: 'mW', decimalPlaces: 1 },\r\n            'diodeStatus': { path: 'isActive', format: 'boolean' },\r\n            'diodeTemperature': { path: 'temperature', format: 'unit', suffix: '°C' },\r\n            'diodeTime': { path: 'time', format: 'time' }\r\n        });\r\n        \r\n        // Show/hide base voltage stat based on component type\r\n        const baseVoltageStat = document.getElementById('baseVoltageStat');\r\n        if (baseVoltageStat) {\r\n            const stats = this.diodeTransistor.getStats();\r\n            baseVoltageStat.style.display = (stats.componentType === 'npn' || stats.componentType === 'pnp') ? 'block' : 'none';\r\n        }\r\n    }\r\n    \r\n    updateNeuralNetworkStats() {\r\n        this.updateStats('neuralNetwork', {\r\n            'neuralEpoch': { path: 'epoch' },\r\n            'neuralLoss': { path: 'currentLoss', format: 'decimal', decimalPlaces: 2 },\r\n            'neuralAccuracy': { path: 'currentAccuracy', format: 'percentage', decimalPlaces: 2 },\r\n            'neuralLearningRate': { path: 'learningRate', format: 'decimal', decimalPlaces: 2 },\r\n            'neuralSpeed': { path: 'speed', format: 'unit', suffix: 'x', decimalPlaces: 1 },\r\n            'neuralPhase': { path: 'animationPhase' },\r\n            'neuralDataIndex': { path: 'trainingDataIndex' }\r\n        });\r\n    }\r\n    \r\n    showScienceExplanation() {\r\n        const modal = document.getElementById('scienceModal');\r\n        const modalTitle = document.getElementById('modalTitle');\r\n        const modalContent = document.getElementById('modalContent');\r\n        \r\n        // Get content based on current animation\r\n        const content = this.getScienceContent();\r\n        \r\n        // Update modal content\r\n        modalTitle.textContent = content.title;\r\n        modalContent.innerHTML = content.html;\r\n        \r\n        // Show modal\r\n        modal.style.display = 'block';\r\n    }\r\n    \r\n    closeModal() {\r\n        const modal = document.getElementById('scienceModal');\r\n        modal.style.display = 'none';\r\n    }\r\n    \r\n    getCurrentAnimationState() {\r\n        const state = {\r\n            animation: this.currentAnimation,\r\n            controls: {},\r\n            stats: {}\r\n        };\r\n        \r\n        // Get current control values and stats based on animation type\r\n        switch(this.currentAnimation) {\r\n            case 'brownian':\r\n                state.controls = {\r\n                    particleCount: document.getElementById('brownianParticleCount')?.value || '15',\r\n                    temperature: document.getElementById('brownianTemperature')?.value || '1.0',\r\n                    speed: document.getElementById('brownianSpeed')?.value || '1.0'\r\n                };\r\n                state.stats = this.brownianMotion?.getStats() || {};\r\n                break;\r\n            case 'pendulum':\r\n                state.controls = {\r\n                    length: document.getElementById('pendulumLength')?.value || '100',\r\n                    gravity: document.getElementById('pendulumGravity')?.value || '9.8',\r\n                    damping: document.getElementById('pendulumDamping')?.value || '0.01'\r\n                };\r\n                state.stats = this.pendulum?.getStats() || {};\r\n                break;\r\n            case 'waves':\r\n                state.controls = {\r\n                    waveType: document.getElementById('waveType')?.value || 'transverse',\r\n                    frequency: document.getElementById('waveFrequency')?.value || '1.0',\r\n                    amplitude: document.getElementById('waveAmplitude')?.value || '50'\r\n                };\r\n                state.stats = this.wavePropagation?.getStats() || {};\r\n                break;\r\n            case 'electric-fields':\r\n                state.controls = {\r\n                    fieldStrength: document.getElementById('efFieldStrength')?.value || '1.0',\r\n                    particleCount: document.getElementById('efParticleCount')?.value || '20'\r\n                };\r\n                state.stats = this.electricFields?.getStats() || {};\r\n                break;\r\n            case 'magnetic-fields':\r\n                state.controls = {\r\n                    fieldStrength: document.getElementById('magneticFieldStrength')?.value || '1.0',\r\n                    particleCount: document.getElementById('magneticParticleCount')?.value || '15'\r\n                };\r\n                state.stats = this.magneticFields?.getStats() || {};\r\n                break;\r\n            case 'gas-laws':\r\n                state.controls = {\r\n                    temperature: document.getElementById('gasTemperature')?.value || '300',\r\n                    pressure: document.getElementById('gasPressure')?.value || '1.0',\r\n                    volume: document.getElementById('gasVolume')?.value || '300'\r\n                };\r\n                state.stats = this.gasLaws?.getStats() || {};\r\n                break;\r\n            case 'collisions':\r\n                state.controls = {\r\n                    ballCount: document.getElementById('ballCount')?.value || '5',\r\n                    restitution: document.getElementById('restitution')?.value || '0.8',\r\n                    gravity: document.getElementById('collisionGravity')?.value || '9.8'\r\n                };\r\n                state.stats = this.collisions?.getStats() || {};\r\n                break;\r\n            case 'friction':\r\n                state.controls = {\r\n                    angle: document.getElementById('inclineAngle')?.value || '20',\r\n                    frictionCoefficient: document.getElementById('frictionCoefficient')?.value || '0.3',\r\n                    mass: document.getElementById('objectMass')?.value || '1'\r\n                };\r\n                state.stats = this.friction?.getStats() || {};\r\n                break;\r\n\r\n            case 'wave-particle-duality':\r\n                state.controls = {\r\n                    mode: document.getElementById('dualityMode')?.value || 'wave',\r\n                    energy: document.getElementById('dualityEnergy')?.value || '5.0',\r\n                    wavelength: document.getElementById('dualityWavelength')?.value || '150'\r\n                };\r\n                state.stats = this.waveParticleDuality?.getStats() || {};\r\n                break;\r\n            case 'sound-waves':\r\n                state.controls = {\r\n                    waveType: document.getElementById('soundWaveType')?.value || 'transverse',\r\n                    frequency: document.getElementById('soundFrequency')?.value || '5',\r\n                    amplitude: document.getElementById('soundAmplitude')?.value || '50',\r\n                    waveSpeed: document.getElementById('soundSpeed')?.value || '343',\r\n                    particleCount: document.getElementById('soundParticles')?.value || '15',\r\n                    animationSpeed: document.getElementById('soundAnimationSpeed')?.value || '1.0'\r\n                };\r\n                state.stats = this.soundWaves?.getStats() || {};\r\n                break;\r\n            case 'diode-transistor':\r\n                state.controls = {\r\n                    componentType: document.getElementById('diodeComponentType')?.value || 'diode',\r\n                    biasType: document.getElementById('diodeBiasType')?.value || 'forward',\r\n                    inputVoltage: document.getElementById('diodeInputVoltage')?.value || '5',\r\n                    baseVoltage: document.getElementById('diodeBaseVoltage')?.value || '0.7',\r\n                    animationSpeed: document.getElementById('diodeAnimationSpeed')?.value || '1.0'\r\n                };\r\n                state.stats = this.diodeTransistor?.getStats() || {};\r\n                break;\r\n            case 'neural-network':\r\n                state.controls = {\r\n                    learningRate: document.getElementById('neuralLearningRate')?.value || '0.1',\r\n                    speed: document.getElementById('neuralSpeed')?.value || '1.0',\r\n                    mode: document.getElementById('neuralMode')?.value || 'training',\r\n                    optimizer: document.getElementById('neuralOptimizer')?.value || 'sgd',\r\n                    dataset: document.getElementById('neuralDataset')?.value || 'shapes',\r\n                    batchSize: document.getElementById('neuralBatchSize')?.value || '4',\r\n                    dropout: document.getElementById('neuralDropout')?.value || '0',\r\n                    weightDecay: document.getElementById('neuralWeightDecay')?.value || '0'\r\n                };\r\n                state.stats = this.neuralNetwork?.getStats() || {};\r\n                break;\r\n            case 'memory-management':\r\n                state.controls = {\r\n                    mode: document.getElementById('memoryMode')?.value || 'random',\r\n                    retentionRate: document.getElementById('retentionRate')?.value || '0.5',\r\n                    decayRate: document.getElementById('decayRate')?.value || '0.1'\r\n                };\r\n                state.stats = this.memoryManagement?.getStats() || {};\r\n                break;\r\n        }\r\n        \r\n        return state;\r\n    }\r\n    \r\n    getScienceContent() {\r\n        switch (this.currentAnimation) {\r\n            case 'brownian':\r\n                return {\r\n                    title: 'Brownian Motion - Random Particle Movement',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Brownian Motion?</h3>\r\n                            <p>Brownian motion is the random, erratic movement of particles suspended in a fluid (liquid or gas) caused by collisions with fast-moving molecules in the surrounding medium. This phenomenon was first observed by botanist Robert Brown in 1827 when studying pollen grains in water.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Molecular Motion:</strong> All particles are in constant motion due to thermal energy</li>\r\n                                <li><strong>Random Walk:</strong> Each collision changes the particle's direction randomly</li>\r\n                                <li><strong>Temperature Dependence:</strong> Higher temperature = faster molecular motion = more vigorous Brownian motion</li>\r\n                                <li><strong>Particle Size Effect:</strong> Smaller particles show more dramatic Brownian motion</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Particles moving in seemingly random directions</li>\r\n                                <li>No predictable path - each particle follows a \"random walk\"</li>\r\n                                <li>Particles occasionally changing direction due to collisions</li>\r\n                                <li>Faster movement at higher temperatures</li>\r\n                                <li>Different colored particles for easy tracking</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Diffusion of molecules in cells</li>\r\n                                <li>Particle movement in air pollution</li>\r\n                                <li>Understanding molecular motion in chemistry</li>\r\n                                <li>Brownian motion in financial markets</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Description</h3>\r\n                            <p>The mean squared displacement (MSD) of a Brownian particle follows: <strong>MSD = 6Dt</strong>, where D is the diffusion coefficient and t is time. This relationship shows that the average distance a particle travels increases with the square root of time.</p>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'sound-waves':\r\n                return {\r\n                    title: 'Sound Waves - Wave Propagation',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Sound Waves?</h3>\r\n                            <p>Sound waves are mechanical waves that propagate through a medium (like air, water, or solids) by causing particles to vibrate. They are longitudinal waves, meaning the particles move back and forth in the same direction as the wave travels.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Longitudinal Waves:</strong> Particles oscillate parallel to wave direction</li>\r\n                                <li><strong>Transverse Waves:</strong> Particles oscillate perpendicular to wave direction</li>\r\n                                <li><strong>Compression & Rarefaction:</strong> High and low pressure regions in the medium</li>\r\n                                <li><strong>Wave Speed:</strong> v = fλ, where f is frequency and λ is wavelength</li>\r\n                                <li><strong>Amplitude:</strong> Maximum displacement of particles from equilibrium</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Wave pulse traveling from source to receiver</li>\r\n                                <li>Particles moving as the wave passes through</li>\r\n                                <li>Compression zones (orange) and rarefaction zones (cyan)</li>\r\n                                <li>Different wave types: transverse, longitudinal, and combined</li>\r\n                                <li>Wave speed and frequency effects on propagation</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Wave Types Explained</h3>\r\n                            <ul>\r\n                                <li><strong>Transverse:</strong> Like waves on a string - particles move up and down</li>\r\n                                <li><strong>Longitudinal:</strong> Like sound in air - particles move back and forth</li>\r\n                                <li><strong>Combined:</strong> Shows both transverse and longitudinal components</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Musical instruments and sound production</li>\r\n                                <li>Ultrasound imaging in medicine</li>\r\n                                <li>Seismic waves in earthquake detection</li>\r\n                                <li>Sonar and underwater communication</li>\r\n                                <li>Acoustic engineering and noise control</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Description</h3>\r\n                            <p>For a sound wave: <strong>v = √(B/ρ)</strong>, where v is wave speed, B is bulk modulus, and ρ is density. The frequency determines pitch, while amplitude determines loudness. The relationship <strong>v = fλ</strong> connects speed, frequency, and wavelength.</p>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'diode-transistor':\r\n                return {\r\n                    title: 'Diode & Transistor - Electronic Components',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Diodes and Transistors?</h3>\r\n                            <p>Diodes and transistors are fundamental electronic components that control the flow of electrical current. Diodes allow current to flow in one direction only, while transistors can amplify signals and act as electronic switches.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Semiconductor Physics:</strong> Materials with conductivity between conductors and insulators</li>\r\n                                <li><strong>P-N Junction:</strong> Boundary between P-type (holes) and N-type (electrons) materials</li>\r\n                                <li><strong>Forward Bias:</strong> Positive voltage applied to P-side, negative to N-side</li>\r\n                                <li><strong>Reverse Bias:</strong> Opposite voltage polarity blocks current flow</li>\r\n                                <li><strong>Transistor Amplification:</strong> Small base current controls large collector current</li>\r\n                                <li><strong>Particle Flow:</strong> Electrons and holes flow in opposite directions but contribute to current in the same direction</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Electrons (blue circles):</strong> Move from N-type to P-type material during forward bias</li>\r\n                                <li><strong>Holes (red outlined circles):</strong> Move from P-type to N-type material during forward bias</li>\r\n                                <li><strong>Current Flow:</strong> Only occurs in forward bias conditions with sufficient voltage</li>\r\n                                <li><strong>Voltage Drop:</strong> ~0.7V across diode in forward bias</li>\r\n                                <li><strong>Transistor Control:</strong> Base voltage controls collector current amplification</li>\r\n                                <li><strong>Energy Visualization:</strong> Pulsating circles represent electromagnetic field and power dissipation</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Component Behavior</h3>\r\n                            <ul>\r\n                                <li><strong>Diode Forward Bias:</strong> Current flows when voltage > 0.7V, voltage drop ~0.7V</li>\r\n                                <li><strong>Diode Reverse Bias:</strong> No current flow, acts as insulator</li>\r\n                                <li><strong>NPN Transistor:</strong> Electron flow from emitter to collector, base controls amplification</li>\r\n                                <li><strong>PNP Transistor:</strong> Hole flow from emitter to collector, base controls amplification</li>\r\n                                <li><strong>Amplification Factor:</strong> β = Ic/Ib (collector current / base current) ≈ 100</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Particle Physics</h3>\r\n                            <ul>\r\n                                <li><strong>Electrons:</strong> Filled blue circles representing negative charge carriers</li>\r\n                                <li><strong>Holes:</strong> Red outlined circles representing positive charge carriers (absence of electrons)</li>\r\n                                <li><strong>Flow Direction:</strong> Electrons and holes move in opposite directions but both contribute to conventional current flow</li>\r\n                                <li><strong>Energy Levels:</strong> Particles move faster and glow brighter with higher voltage</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Rectifiers in power supplies</li>\r\n                                <li>Amplifiers in audio systems</li>\r\n                                <li>Digital logic circuits</li>\r\n                                <li>Voltage regulators</li>\r\n                                <li>Radio frequency circuits</li>\r\n                                <li>Computer processors and memory</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Description</h3>\r\n                            <p>For a diode: <strong>I = I₀(e^(V/Vₜ) - 1)</strong>, where I is current, V is voltage, and Vₜ is thermal voltage (~26mV at room temperature). For a transistor: <strong>Ic = β × Ib</strong>, where β is the current gain factor (typically 50-200).</p>\r\n                            \r\n                            <h3>Interactive Features</h3>\r\n                            <ul>\r\n                                <li>Switch between diode, NPN, and PNP transistor modes</li>\r\n                                <li>Adjust input voltage to see current flow changes</li>\r\n                                <li>Control base voltage for transistor amplification</li>\r\n                                <li>Observe different bias conditions (forward, reverse, off)</li>\r\n                                <li>Watch real-time current and power calculations</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'pendulum':\r\n                return {\r\n                    title: 'Simple Pendulum - Harmonic Oscillation',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is a Simple Pendulum?</h3>\r\n                            <p>A simple pendulum consists of a point mass (bob) suspended from a fixed point by a massless, inextensible string. When displaced from its equilibrium position, it oscillates back and forth under the influence of gravity.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Simple Harmonic Motion:</strong> For small angles, the motion is approximately simple harmonic</li>\r\n                                <li><strong>Period Formula:</strong> T = 2π√(L/g), where L is length and g is gravitational acceleration</li>\r\n                                <li><strong>Energy Conservation:</strong> Kinetic and potential energy continuously convert between each other</li>\r\n                                <li><strong>Damping:</strong> Air resistance causes the amplitude to gradually decrease</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Regular back-and-forth oscillation</li>\r\n                                <li>Period remains constant regardless of amplitude (for small angles)</li>\r\n                                <li>Longer pendulum = longer period</li>\r\n                                <li>Gradual decrease in amplitude due to air resistance</li>\r\n                                <li>Maximum speed at the bottom, zero speed at the extremes</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Energy Transformations</h3>\r\n                            <ul>\r\n                                <li><strong>At extremes:</strong> Maximum potential energy, zero kinetic energy</li>\r\n                                <li><strong>At bottom:</strong> Maximum kinetic energy, minimum potential energy</li>\r\n                                <li><strong>Total energy:</strong> Gradually decreases due to air resistance</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Clock mechanisms (grandfather clocks)</li>\r\n                                <li>Seismometers for earthquake detection</li>\r\n                                <li>Metronomes for musical timing</li>\r\n                                <li>Amusement park rides</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'waves':\r\n                return {\r\n                    title: 'Wave Propagation - Energy Transfer',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Waves?</h3>\r\n                            <p>Waves are disturbances that transfer energy through a medium without transferring matter. They can be mechanical (requiring a medium) or electromagnetic (can travel through vacuum).</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Transverse Waves:</strong> Particles move perpendicular to wave direction (like water waves)</li>\r\n                                <li><strong>Longitudinal Waves:</strong> Particles move parallel to wave direction (like sound waves)</li>\r\n                                <li><strong>Wave Properties:</strong> Amplitude, frequency, wavelength, and speed</li>\r\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\r\n                                <li><strong>Interference:</strong> Waves can add together or cancel each other out</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Regular, repeating pattern of disturbance</li>\r\n                                <li>Waves traveling at constant speed</li>\r\n                                <li>Different wave types (transverse vs longitudinal)</li>\r\n                                <li>Interference patterns when waves overlap</li>\r\n                                <li>Energy transfer without matter movement</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Wave Characteristics</h3>\r\n                            <ul>\r\n                                <li><strong>Amplitude:</strong> Maximum displacement from equilibrium</li>\r\n                                <li><strong>Frequency:</strong> Number of complete cycles per second (Hz)</li>\r\n                                <li><strong>Wavelength:</strong> Distance between consecutive identical points</li>\r\n                                <li><strong>Period:</strong> Time for one complete cycle</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Sound waves in air and water</li>\r\n                                <li>Light waves and electromagnetic radiation</li>\r\n                                <li>Earthquake waves (seismic waves)</li>\r\n                                <li>Radio waves for communication</li>\r\n                                <li>Ocean waves and tides</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'diffusion':\r\n                return {\r\n                    title: 'Diffusion - Particle Spread',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Diffusion?</h3>\r\n                            <p>Diffusion is the process by which particles spread from regions of high concentration to regions of low concentration, driven by random molecular motion. This is a fundamental process in nature that leads to the uniform distribution of particles.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Fick's First Law:</strong> J = -D∇C (flux is proportional to concentration gradient)</li>\r\n                                <li><strong>Concentration Gradient:</strong> Difference in concentration between regions</li>\r\n                                <li><strong>Diffusion Coefficient:</strong> Measure of how quickly particles diffuse</li>\r\n                                <li><strong>Temperature Effect:</strong> Higher temperature increases diffusion rate</li>\r\n                                <li><strong>Particle Size:</strong> Smaller particles diffuse faster</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Particles spreading from concentrated areas</li>\r\n                                <li>Gradual mixing of different particle types</li>\r\n                                <li>Faster diffusion at higher temperatures</li>\r\n                                <li>Concentration gradient decreasing over time</li>\r\n                                <li>Eventually uniform distribution</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Diffusion Process</h3>\r\n                            <ul>\r\n                                <li><strong>Initial State:</strong> High concentration in one region</li>\r\n                                <li><strong>Random Motion:</strong> Particles move randomly due to thermal energy</li>\r\n                                <li><strong>Net Movement:</strong> More particles move from high to low concentration</li>\r\n                                <li><strong>Equilibrium:</strong> Eventually uniform concentration throughout</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Oxygen diffusion in lungs</li>\r\n                                <li>Nutrient absorption in cells</li>\r\n                                <li>Perfume spreading in air</li>\r\n                                <li>Salt dissolving in water</li>\r\n                                <li>Heat conduction in materials</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'orbital':\r\n                return {\r\n                    title: 'Orbital Motion - Gravitational Dynamics',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Orbital Motion?</h3>\r\n                            <p>Orbital motion describes the path of one object around another under the influence of gravity. This fundamental concept explains planetary orbits, satellite motion, and many other celestial phenomena.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Kepler's Laws:</strong> Three laws describing planetary motion</li>\r\n                                <li><strong>Gravitational Force:</strong> F = GMm/r² (inverse square law)</li>\r\n                                <li><strong>Orbital Velocity:</strong> v = √(GM/r) for circular orbits</li>\r\n                                <li><strong>Eccentricity:</strong> Measure of how elliptical an orbit is (0 = circular, 1 = parabolic)</li>\r\n                                <li><strong>Conservation of Angular Momentum:</strong> Orbital angular momentum remains constant</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Elliptical or circular paths around central mass</li>\r\n                                <li>Faster motion when closer to the center (Kepler's Second Law)</li>\r\n                                <li>Slower motion when farther from the center</li>\r\n                                <li>Different orbital shapes based on eccentricity</li>\r\n                                <li>Consistent orbital period for same central mass</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Kepler's Three Laws</h3>\r\n                            <ol>\r\n                                <li><strong>First Law:</strong> Orbits are ellipses with the central mass at one focus</li>\r\n                                <li><strong>Second Law:</strong> Equal areas are swept in equal times (faster when closer)</li>\r\n                                <li><strong>Third Law:</strong> Orbital period squared is proportional to semi-major axis cubed</li>\r\n                            </ol>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Planetary orbits around the Sun</li>\r\n                                <li>Satellite orbits around Earth</li>\r\n                                <li>Electron orbits in atoms (Bohr model)</li>\r\n                                <li>Binary star systems</li>\r\n                                <li>Spacecraft trajectories</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'electric-fields':\r\n                return {\r\n                    title: 'Electric Fields - Charged Particle Interactions',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Electric Fields?</h3>\r\n                            <p>Electric fields are regions of space around charged particles where other charges experience forces. They are invisible but can be visualized through their effects on test charges and field lines.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Coulomb's Law:</strong> F = kq₁q₂/r² (force between charges)</li>\r\n                                <li><strong>Electric Field:</strong> E = F/q (force per unit charge)</li>\r\n                                <li><strong>Field Lines:</strong> Imaginary lines showing field direction</li>\r\n                                <li><strong>Superposition:</strong> Total field is sum of individual fields</li>\r\n                                <li><strong>Conservation of Charge:</strong> Net charge remains constant</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Test particles moving along field lines</li>\r\n                                <li>Positive particles repelled by positive charges</li>\r\n                                <li>Negative particles attracted to positive charges</li>\r\n                                <li>Field strength decreases with distance</li>\r\n                                <li>Complex field patterns with multiple charges</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Field Properties</h3>\r\n                            <ul>\r\n                                <li><strong>Direction:</strong> Field lines point away from positive, toward negative</li>\r\n                                <li><strong>Strength:</strong> Closer lines indicate stronger fields</li>\r\n                                <li><strong>Superposition:</strong> Fields add vectorially</li>\r\n                                <li><strong>Conservative:</strong> Work done is path-independent</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Electrostatic precipitators</li>\r\n                                <li>Capacitors and electronic circuits</li>\r\n                                <li>Lightning and atmospheric electricity</li>\r\n                                <li>Particle accelerators</li>\r\n                                <li>Electron microscopes</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'gas-laws':\r\n                return {\r\n                    title: 'Gas Laws - Pressure, Volume, Temperature Relationships',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Gas Laws?</h3>\r\n                            <p>Gas laws describe the relationships between pressure, volume, temperature, and amount of gas. These fundamental laws help us understand how gases behave under different conditions.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Boyle's Law:</strong> P₁V₁ = P₂V₂ (inverse relationship between pressure and volume)</li>\r\n                                <li><strong>Charles's Law:</strong> V₁/T₁ = V₂/T₂ (direct relationship between volume and temperature)</li>\r\n                                <li><strong>Gay-Lussac's Law:</strong> P₁/T₁ = P₂/T₂ (direct relationship between pressure and temperature)</li>\r\n                                <li><strong>Combined Gas Law:</strong> P₁V₁/T₁ = P₂V₂/T₂</li>\r\n                                <li><strong>Ideal Gas Law:</strong> PV = nRT (universal gas law)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Particles moving faster at higher temperatures</li>\r\n                                <li>More frequent collisions at higher pressure</li>\r\n                                <li>Particles spreading out in larger volumes</li>\r\n                                <li>Pressure changes with volume and temperature</li>\r\n                                <li>Random motion of gas particles</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Gas Law Relationships</h3>\r\n                            <ul>\r\n                                <li><strong>Boyle's Law:</strong> Decrease volume → increase pressure</li>\r\n                                <li><strong>Charles's Law:</strong> Increase temperature → increase volume</li>\r\n                                <li><strong>Gay-Lussac's Law:</strong> Increase temperature → increase pressure</li>\r\n                                <li><strong>Avogadro's Law:</strong> More particles → larger volume</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Internal combustion engines</li>\r\n                                <li>Refrigeration and air conditioning</li>\r\n                                <li>Weather and atmospheric pressure</li>\r\n                                <li>Scuba diving and pressure changes</li>\r\n                                <li>Hot air balloons</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'collisions':\r\n                return {\r\n                    title: 'Collision Physics - Momentum and Energy Conservation',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Collisions?</h3>\r\n                            <p>Collisions are interactions between objects that result in changes in their motion. Understanding collisions involves principles of momentum conservation and energy transfer.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Momentum Conservation:</strong> Total momentum before = total momentum after</li>\r\n                                <li><strong>Elastic Collisions:</strong> Kinetic energy is conserved</li>\r\n                                <li><strong>Inelastic Collisions:</strong> Some kinetic energy is lost</li>\r\n                                <li><strong>Impulse:</strong> Change in momentum = force × time</li>\r\n                                <li><strong>Coefficient of Restitution:</strong> Measure of collision elasticity</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Objects changing direction after collision</li>\r\n                                <li>Speed changes based on collision type</li>\r\n                                <li>Energy transfer between objects</li>\r\n                                <li>Momentum conservation in all collisions</li>\r\n                                <li>Different outcomes for elastic vs inelastic collisions</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Collision Types</h3>\r\n                            <ul>\r\n                                <li><strong>Elastic:</strong> Perfect bounce, energy conserved</li>\r\n                                <li><strong>Inelastic:</strong> Objects stick together, energy lost</li>\r\n                                <li><strong>Partially Elastic:</strong> Some energy lost, some bounce</li>\r\n                                <li><strong>Explosive:</strong> Energy added, objects separate</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Car crash safety design</li>\r\n                                <li>Sports equipment design</li>\r\n                                <li>Particle physics experiments</li>\r\n                                <li>Billiards and pool</li>\r\n                                <li>Rocket propulsion</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'friction':\r\n                return {\r\n                    title: 'Friction & Inclined Planes - Force Analysis',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Friction?</h3>\r\n                            <p>Friction is a force that opposes the relative motion of objects in contact. On inclined planes, friction plays a crucial role in determining whether objects slide or remain stationary.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Static Friction:</strong> Prevents motion when object is at rest</li>\r\n                                <li><strong>Kinetic Friction:</strong> Opposes motion when object is sliding</li>\r\n                                <li><strong>Friction Force:</strong> f = μN (coefficient × normal force)</li>\r\n                                <li><strong>Normal Force:</strong> Component of weight perpendicular to surface</li>\r\n                                <li><strong>Net Force:</strong> Determines acceleration down the incline</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Objects sliding down inclined surfaces</li>\r\n                                <li>Different sliding speeds based on friction</li>\r\n                                <li>Objects stopping when friction is high</li>\r\n                                <li>Force vectors showing gravity and friction</li>\r\n                                <li>Acceleration changes with angle and friction</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Force Analysis</h3>\r\n                            <ul>\r\n                                <li><strong>Gravity Component:</strong> mg sin(θ) down the incline</li>\r\n                                <li><strong>Normal Force:</strong> mg cos(θ) perpendicular to surface</li>\r\n                                <li><strong>Friction Force:</strong> μmg cos(θ) opposing motion</li>\r\n                                <li><strong>Net Force:</strong> mg sin(θ) - μmg cos(θ)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Vehicle braking systems</li>\r\n                                <li>Walking and running mechanics</li>\r\n                                <li>Rock climbing and mountaineering</li>\r\n                                <li>Industrial conveyor systems</li>\r\n                                <li>Sports equipment design</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'magnetic-fields':\r\n                return {\r\n                    title: 'Magnetic Fields - Magnetic Force Interactions',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Magnetic Fields?</h3>\r\n                            <p>Magnetic fields are regions of space around magnets where magnetic materials and moving charges experience forces. They are fundamental to electromagnetism and many modern technologies.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Magnetic Force:</strong> F = qvB sin(θ) on moving charges</li>\r\n                                <li><strong>Field Lines:</strong> Imaginary lines showing field direction</li>\r\n                                <li><strong>Right-Hand Rule:</strong> Determines force direction on moving charges</li>\r\n                                <li><strong>Field Strength:</strong> Measured in Tesla (T) or Gauss</li>\r\n                                <li><strong>Superposition:</strong> Total field is sum of individual fields</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Charged particles moving in curved paths</li>\r\n                                <li>Different motion for positive vs negative charges</li>\r\n                                <li>Circular motion in uniform magnetic fields</li>\r\n                                <li>Field lines showing magnetic field direction</li>\r\n                                <li>Force perpendicular to both velocity and field</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Magnetic Field Properties</h3>\r\n                            <ul>\r\n                                <li><strong>Direction:</strong> Field lines point from north to south pole</li>\r\n                                <li><strong>Strength:</strong> Decreases with distance from magnet</li>\r\n                                <li><strong>Force Direction:</strong> Perpendicular to both velocity and field</li>\r\n                                <li><strong>No Work:</strong> Magnetic force does no work on charges</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Electric motors and generators</li>\r\n                                <li>Magnetic resonance imaging (MRI)</li>\r\n                                <li>Particle accelerators</li>\r\n                                <li>Magnetic levitation trains</li>\r\n                                <li>Compass navigation</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'wave-particle-duality':\r\n                return {\r\n                    title: 'Wave-Particle Duality - Quantum Mechanics',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Wave-Particle Duality?</h3>\r\n                            <p>Wave-particle duality is a fundamental concept in quantum mechanics where particles exhibit both wave-like and particle-like properties depending on how we observe them. This challenges our classical understanding of matter.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>De Broglie Wavelength:</strong> λ = h/p (wavelength = Planck's constant/momentum)</li>\r\n                                <li><strong>Wave Function:</strong> Mathematical description of quantum state</li>\r\n                                <li><strong>Superposition:</strong> Particles can exist in multiple states simultaneously</li>\r\n                                <li><strong>Measurement Effect:</strong> Observation affects the system</li>\r\n                                <li><strong>Interference:</strong> Wave-like behavior in experiments</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Wave-like interference patterns</li>\r\n                                <li>Particle-like discrete measurements</li>\r\n                                <li>Superposition of states</li>\r\n                                <li>Measurement affecting the system</li>\r\n                                <li>Dual behavior depending on observation method</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Quantum Phenomena</h3>\r\n                            <ul>\r\n                                <li><strong>Double-Slit Experiment:</strong> Shows both wave and particle behavior</li>\r\n                                <li><strong>Uncertainty Principle:</strong> Can't know position and momentum precisely</li>\r\n                                <li><strong>Quantum Tunneling:</strong> Particles can pass through barriers</li>\r\n                                <li><strong>Entanglement:</strong> Particles can be correlated across distance</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Electron microscopes</li>\r\n                                <li>Quantum computing</li>\r\n                                <li>Quantum cryptography</li>\r\n                                <li>Semiconductor technology</li>\r\n                                <li>Quantum sensors</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'nuclear-reactions':\r\n                return {\r\n                    title: 'Nuclear Reactions - Fission and Fusion',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Nuclear Reactions?</h3>\r\n                            <p>Nuclear reactions involve changes in the nucleus of atoms, releasing or absorbing tremendous amounts of energy. Fission (splitting) and fusion (combining) are the two main types of nuclear reactions.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Nuclear Fission:</strong> Heavy nucleus splits into lighter nuclei + energy</li>\r\n                                <li><strong>Nuclear Fusion:</strong> Light nuclei combine to form heavier nucleus + energy</li>\r\n                                <li><strong>Mass-Energy Equivalence:</strong> E = mc² (Einstein's equation)</li>\r\n                                <li><strong>Chain Reaction:</strong> Neutrons from one fission trigger more fissions</li>\r\n                                <li><strong>Critical Mass:</strong> Minimum mass needed for sustained chain reaction</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>Nuclei splitting or combining</li>\r\n                                <li>Energy release in the form of particles</li>\r\n                                <li>Neutrons triggering additional reactions</li>\r\n                                <li>Chain reactions spreading through material</li>\r\n                                <li>Different reaction rates based on conditions</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Nuclear Processes</h3>\r\n                            <ul>\r\n                                <li><strong>Fission:</strong> Uranium-235 + neutron → lighter nuclei + 2-3 neutrons + energy</li>\r\n                                <li><strong>Fusion:</strong> Hydrogen nuclei → Helium + energy (like in stars)</li>\r\n                                <li><strong>Radioactive Decay:</strong> Unstable nuclei emit particles</li>\r\n                                <li><strong>Neutron Capture:</strong> Nuclei absorb neutrons</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Nuclear power plants</li>\r\n                                <li>Nuclear weapons</li>\r\n                                <li>Medical radiation therapy</li>\r\n                                <li>Radioactive dating</li>\r\n                                <li>Fusion power research</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'fluid-flow':\r\n                return {\r\n                    title: 'Fluid Flow - Enhanced Viscosity & Porosity Effects',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Fluid Flow?</h3>\r\n                            <p>Fluid flow describes how liquids and gases move through space and porous materials. This enhanced simulation demonstrates realistic fluid dynamics with visible viscosity effects, Reynolds number transitions, and porous media flow patterns.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Laminar Flow:</strong> Smooth, parallel streamlines with no mixing between layers (Re < 2300)</li>\r\n                                <li><strong>Turbulent Flow:</strong> Chaotic, swirling motion with rapid mixing (Re > 4000)</li>\r\n                                <li><strong>Reynolds Number:</strong> Re = ρvL/μ - determines flow regime and transition points</li>\r\n                                <li><strong>Enhanced Viscosity Effects:</strong> Internal friction that visibly slows particle movement</li>\r\n                                <li><strong>Porous Media Flow:</strong> Fluid movement through materials with different porosity levels</li>\r\n                                <li><strong>Darcy's Law:</strong> Flow rate through porous media depends on permeability and pressure gradient</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Viscosity Effects:</strong> Particles move much slower with high viscosity (5x enhanced visibility)</li>\r\n                                <li><strong>Flow Regimes:</strong> Smooth laminar flow vs chaotic turbulent flow based on Reynolds number</li>\r\n                                <li><strong>Porosity Effects:</strong> Particles slow down significantly in porous materials</li>\r\n                                <li><strong>Visualization Modes:</strong> Different analysis panels show pressure, velocity, and porosity effects</li>\r\n                                <li><strong>Real-time Statistics:</strong> Live updates of Reynolds number, flow type, and viscosity effects</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Enhanced Features</h3>\r\n                            <ul>\r\n                                <li><strong>Visible Viscosity:</strong> 5x stronger effect makes viscosity changes clearly observable</li>\r\n                                <li><strong>Reynolds Number Display:</strong> Real-time calculation and color-coded flow type indicators</li>\r\n                                <li><strong>Porosity Analysis:</strong> Comparison between high and low porosity materials</li>\r\n                                <li><strong>Velocity Analysis:</strong> Shows how porosity affects flow velocity</li>\r\n                                <li><strong>Pressure Analysis:</strong> Demonstrates pressure build-up in porous materials</li>\r\n                                <li><strong>Clean UI:</strong> Removed redundant information for better focus</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Flow Regimes & Transitions</h3>\r\n                            <ul>\r\n                                <li><strong>Laminar (Re < 2300):</strong> Green indicator - smooth, predictable flow</li>\r\n                                <li><strong>Transitional (2300 < Re < 4000):</strong> Orange indicator - unstable, mixed flow</li>\r\n                                <li><strong>Turbulent (Re > 4000):</strong> Red indicator - chaotic, highly mixed flow</li>\r\n                                <li><strong>Viscosity Impact:</strong> High viscosity = lower Reynolds number = more laminar flow</li>\r\n                                <li><strong>Flow Rate Impact:</strong> High flow rate = higher Reynolds number = more turbulent flow</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Porous Media Physics</h3>\r\n                            <ul>\r\n                                <li><strong>High Porosity Material:</strong> More open spaces, particles flow through more easily</li>\r\n                                <li><strong>Low Porosity Material:</strong> Fewer open spaces, particles slow down significantly</li>\r\n                                <li><strong>Velocity Ratio:</strong> Shows the speed difference between materials</li>\r\n                                <li><strong>Pressure Build-up:</strong> Porous materials create resistance and pressure gradients</li>\r\n                                <li><strong>Flow Patterns:</strong> Particles follow tortuous paths through porous structures</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Interactive Controls</h3>\r\n                            <ul>\r\n                                <li><strong>Flow Rate Slider:</strong> Adjusts particle speed and Reynolds number</li>\r\n                                <li><strong>Viscosity Slider:</strong> Controls internal friction (now 5x more visible)</li>\r\n                                <li><strong>Visualization Modes:</strong> Switch between particle flow, pressure, velocity, and porosity analysis</li>\r\n                                <li><strong>Real-time Feedback:</strong> Watch statistics update as you adjust parameters</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li><strong>Groundwater Flow:</strong> Water movement through soil and rock formations</li>\r\n                                <li><strong>Oil Reservoir Engineering:</strong> Petroleum flow through porous rock</li>\r\n                                <li><strong>Blood Flow:</strong> Circulation through capillaries and tissue</li>\r\n                                <li><strong>Air Filtration:</strong> Gas flow through filter materials</li>\r\n                                <li><strong>Chemical Processing:</strong> Fluid flow through catalyst beds</li>\r\n                                <li><strong>Geothermal Systems:</strong> Heat transfer in porous media</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Foundation</h3>\r\n                            <ul>\r\n                                <li><strong>Reynolds Number:</strong> Re = (ρ × V × D) / μ where ρ=density, V=velocity, D=characteristic length, μ=viscosity</li>\r\n                                <li><strong>Viscosity Effect:</strong> velocity_factor = 1 - (viscosity × 0.1) - 5x enhanced for visibility</li>\r\n                                <li><strong>Porosity Factor:</strong> porosity_factor = 1 - (1 - porosity) × 0.6</li>\r\n                                <li><strong>Darcy's Law:</strong> Q = -kA(ΔP/ΔL)/μ where k=permeability, A=cross-sectional area</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Educational Value</h3>\r\n                            <ul>\r\n                                <li><strong>Visual Learning:</strong> See abstract concepts like viscosity and Reynolds number in action</li>\r\n                                <li><strong>Parameter Relationships:</strong> Understand how flow rate, viscosity, and porosity interact</li>\r\n                                <li><strong>Real-time Analysis:</strong> Watch statistics update as you experiment with controls</li>\r\n                                <li><strong>Multiple Perspectives:</strong> Different visualization modes show various aspects of fluid dynamics</li>\r\n                                <li><strong>Scientific Accuracy:</strong> Based on real fluid dynamics equations and principles</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'bernoulli':\r\n                return {\r\n                    title: \"Bernoulli's Principle - Energy Conservation in Fluids\",\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Bernoulli's Principle?</h3>\r\n                            <p>Bernoulli's principle states that in a flowing fluid, an increase in velocity is accompanied by a decrease in pressure. This is a consequence of energy conservation in fluid flow. Our enhanced simulation demonstrates this with continuous particle flow and realistic velocity transitions.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Bernoulli's Equation:</strong> P + ½ρv² + ρgh = constant</li>\r\n                                <li><strong>Energy Conservation:</strong> Total energy remains constant along a streamline</li>\r\n                                <li><strong>Pressure-Velocity Trade-off:</strong> Higher velocity = lower pressure</li>\r\n                                <li><strong>Continuity Equation:</strong> A₁v₁ = A₂v₂ (mass conservation)</li>\r\n                                <li><strong>Venturi Effect:</strong> Pressure drop in constricted flow</li>\r\n                                <li><strong>Enhanced Particle System:</strong> Continuous flow with 80 particles maintained</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Continuous Particle Flow:</strong> Steady stream without gaps or stops</li>\r\n                                <li><strong>Velocity Transitions:</strong> Smooth speed changes through pipe constriction</li>\r\n                                <li><strong>Bernoulli Effect:</strong> Particles speed up 1.8x in narrow section</li>\r\n                                <li><strong>Energy Conservation:</strong> Total energy maintained throughout flow</li>\r\n                                <li><strong>Pressure Changes:</strong> Lower pressure in high-velocity regions</li>\r\n                                <li><strong>Flow Efficiency:</strong> Optimized particle management system</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Enhanced Simulation Features</h3>\r\n                            <ul>\r\n                                <li><strong>Continuous Flow:</strong> Particles added continuously to maintain steady stream</li>\r\n                                <li><strong>Smart Particle Management:</strong> 80 particles with optimized addition/removal</li>\r\n                                <li><strong>Realistic Transitions:</strong> Gradual velocity changes in pipe constrictions</li>\r\n                                <li><strong>Energy Visualization:</strong> Color-coded particles show energy distribution</li>\r\n                                <li><strong>Flow Efficiency:</strong> Real-time calculation of flow performance</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Energy Components</h3>\r\n                            <ul>\r\n                                <li><strong>Pressure Energy:</strong> P (work done by pressure)</li>\r\n                                <li><strong>Kinetic Energy:</strong> ½ρv² (energy of motion)</li>\r\n                                <li><strong>Potential Energy:</strong> ρgh (gravitational energy)</li>\r\n                                <li><strong>Total Energy:</strong> Sum remains constant</li>\r\n                                <li><strong>Flow Efficiency:</strong> Percentage of optimal flow achieved</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li><strong>Airplane Wings:</strong> Curved upper surface creates lift</li>\r\n                                <li><strong>Carburetors:</strong> Fuel mixing through pressure differences</li>\r\n                                <li><strong>Venturi Meters:</strong> Flow measurement using pressure drop</li>\r\n                                <li><strong>Spray Bottles:</strong> Atomization through constricted flow</li>\r\n                                <li><strong>Blood Flow:</strong> Arterial constriction effects</li>\r\n                                <li><strong>Wind Tunnels:</strong> Aerodynamic testing</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Technical Implementation</h3>\r\n                            <ul>\r\n                                <li><strong>Particle System:</strong> 80 particles with continuous addition</li>\r\n                                <li><strong>Velocity Calculation:</strong> Based on cross-sectional area changes</li>\r\n                                <li><strong>Energy Conservation:</strong> Maintained through velocity-pressure relationship</li>\r\n                                <li><strong>Flow Monitoring:</strong> Real-time particle count and efficiency tracking</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n                        case 'neural-network':\r\n                return {\r\n                    title: 'Neural Network Training - Object Recognition',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>Overview</h3>\r\n                            <p>This animation shows a small neural network learning to classify geometric shapes as <em>simple</em> or <em>complex</em> using two features: symmetry and edge complexity. You can watch data flow forward, errors flow backward, and weights update in real-time.</p>\r\n\r\n                            <h3>Architecture</h3>\r\n                            <ul>\r\n                                <li><strong>Layers:</strong> 2 inputs → hidden layers (4, 3) → 1 output (binary)</li>\r\n                                <li><strong>Activation:</strong> Sigmoid σ(x) = 1/(1 + e<sup>−x</sup>)</li>\r\n                                <li><strong>Output:</strong> y ∈ (0,1) interpreted as probability of “complex”</li>\r\n                            </ul>\r\n\r\n                            <h3>Training process (science)</h3>\r\n                            <ol>\r\n                                <li><strong>Forward pass:</strong> y = σ(Wx + b)</li>\r\n                                <li><strong>Loss (MSE):</strong> L = (t − y)², where t ∈ {0,1}</li>\r\n                                <li><strong>Backpropagation:</strong> Compute ∂L/∂W via chain rule</li>\r\n                                <li><strong>Gradient descent:</strong> W ← W − α·∂L/∂W, b ← b − α·∂L/∂b</li>\r\n                            </ol>\r\n\r\n                            <h3>Visual guide</h3>\r\n                            <ul>\r\n                                <li><strong>Decision Boundary (bottom-left):</strong> Background color shows the model’s output over the 2D feature space. Amber rings mark <em>misclassified</em> training points.</li>\r\n                                <li><strong>Current Phase (top-right):</strong> Forward, Backward, Update, or Pause with progress.</li>\r\n                                <li><strong>Particles:</strong> Blue = forward flow, Red = error flow. Updated connections flash subtly.</li>\r\n                            </ul>\r\n\r\n                            <h3>How to use</h3>\r\n                            <ul>\r\n                                <li><strong>Mode:</strong> Switch Training/Testing in the controls.</li>\r\n                                <li><strong>Testing:</strong> Click a shape on the right to see prediction and confidence.</li>\r\n                                <li><strong>Learning Rate & Speed:</strong> Adjust to explore dynamics without changing the concept.</li>\r\n                            </ul>\r\n\r\n                            <h3>Scientific context</h3>\r\n                            <ul>\r\n                                <li><strong>Feature learning:</strong> Hidden layers learn intermediate patterns from symmetry/edges.</li>\r\n                                <li><strong>Bias/variance:</strong> Too few neurons underfit; too many can overfit. This network is sized to learn the task cleanly.</li>\r\n                                <li><strong>Generalization:</strong> The decision boundary illustrates how the model separates classes beyond the training points.</li>\r\n                            </ul>\r\n\r\n                            <h3>Applications</h3>\r\n                            <ul>\r\n                                <li>Vision (image classification), NLP (text classification), speech, robotics, medicine, finance.</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'sound-waves':\r\n                return {\r\n                    title: 'Sound Waves - Wave Propagation in Air',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Sound Waves?</h3>\r\n                            <p>Sound waves are longitudinal mechanical waves that travel through a medium (like air, water, or solids) by compressing and rarefying the particles of the medium. These waves carry energy and information, allowing us to hear sounds.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Longitudinal Waves:</strong> Particles oscillate parallel to wave direction (compression and rarefaction)</li>\r\n                                <li><strong>Transverse Waves:</strong> Particles oscillate perpendicular to wave direction (like guitar strings)</li>\r\n                                <li><strong>Wave Properties:</strong> Frequency (pitch), amplitude (loudness), wavelength, and speed</li>\r\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\r\n                                <li><strong>Pressure Variations:</strong> High pressure (compression) and low pressure (rarefaction) zones</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Transverse Mode:</strong> Particles moving up and down like a guitar string</li>\r\n                                <li><strong>Longitudinal Mode:</strong> Particles moving back and forth in the direction of wave travel</li>\r\n                                <li><strong>Pressure Zones:</strong> Red areas (compression) and blue areas (rarefaction) in longitudinal waves</li>\r\n                                <li><strong>Wave Speed:</strong> How fast the wave pattern travels through the medium</li>\r\n                                <li><strong>Frequency Effect:</strong> Higher frequency = shorter wavelength = higher pitch</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Wave Characteristics</h3>\r\n                            <ul>\r\n                                <li><strong>Frequency (f):</strong> Number of complete cycles per second (Hz) - determines pitch</li>\r\n                                <li><strong>Amplitude (A):</strong> Maximum displacement from equilibrium - determines loudness</li>\r\n                                <li><strong>Wavelength (λ):</strong> Distance between consecutive identical points</li>\r\n                                <li><strong>Wave Speed (v):</strong> How fast the wave travels through the medium</li>\r\n                                <li><strong>Period (T):</strong> Time for one complete cycle (T = 1/f)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Musical instruments (guitar strings, air columns)</li>\r\n                                <li>Human speech and hearing</li>\r\n                <li>Ultrasound imaging in medicine</li>\r\n                                <li>Sonar for underwater detection</li>\r\n                                <li>Acoustic engineering and sound design</li>\r\n                                <li>Earthquake detection (seismic waves)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Relationships</h3>\r\n                            <ul>\r\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\r\n                                <li><strong>Period and Frequency:</strong> T = 1/f (period = 1/frequency)</li>\r\n                                <li><strong>Energy:</strong> E ∝ A²f² (energy proportional to amplitude² × frequency²)</li>\r\n                                <li><strong>Intensity:</strong> I ∝ A² (intensity proportional to amplitude squared)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Wave Types Comparison</h3>\r\n                            <ul>\r\n                                <li><strong>Transverse Waves:</strong> Guitar strings, water waves, light waves</li>\r\n                                <li><strong>Longitudinal Waves:</strong> Sound waves in air, seismic P-waves</li>\r\n                                <li><strong>Combined Waves:</strong> Complex wave patterns with both components</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'neural-network':\r\n                return {\r\n                    title: 'Neural Network Training - Object Recognition',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What are Neural Networks?</h3>\r\n                            <p>Neural networks are computational models inspired by biological neurons in the brain. They consist of interconnected nodes (neurons) organized in layers that process information and learn patterns from data. This animation demonstrates how neural networks learn to recognize and classify different geometric objects.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Artificial Neurons:</strong> Mathematical functions that receive inputs, apply weights, and produce outputs. Each neuron computes: output = σ(Σ(inputs × weights) + bias)</li>\r\n                                <li><strong>Network Architecture:</strong> Input layer (2 neurons) → Hidden layer 1 (4 neurons) → Hidden layer 2 (3 neurons) → Output layer (1 neuron)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Why This Architecture?</h3>\r\n                            <ul>\r\n                                <li><strong>2 Input Neurons:</strong> Perfect for our 2-feature problem (symmetry, edges)</li>\r\n                                <li><strong>4 Hidden Neurons:</strong> Provides enough capacity to learn non-linear patterns without overfitting</li>\r\n                                <li><strong>3 Hidden Neurons:</strong> Allows further feature refinement and abstraction</li>\r\n                                <li><strong>1 Output Neuron:</strong> Binary classification (simple vs complex objects)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Layer Size Effects</h3>\r\n                            <ul>\r\n                                <li><strong>Too Few Neurons:</strong> Network can't learn complex patterns (underfitting)</li>\r\n                                <li><strong>Too Many Neurons:</strong> Network memorizes training data (overfitting)</li>\r\n                                <li><strong>Optimal Size:</strong> Balances learning capacity with generalization</li>\r\n                                <li><strong>Our Choice:</strong> 4→3 hidden layers provide sufficient complexity for this task</li>\r\n                            </ul>\r\n                                <li><strong>Weights & Biases:</strong> Numerical values that determine connection strength and neuron activation thresholds</li>\r\n                                <li><strong>Sigmoid Activation:</strong> σ(x) = 1/(1 + e^(-x)) - transforms any input to a value between 0 and 1</li>\r\n                                <li><strong>Backpropagation:</strong> Algorithm that calculates how much each weight should change to reduce prediction errors</li>\r\n                                <li><strong>Learning Rate:</strong> Controls how big weight updates are during training</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Training Process Explained</h3>\r\n                            <ol>\r\n                                <li><strong>Forward Propagation:</strong> Input features flow through the network, each neuron computes its output using weights and activation function</li>\r\n                                <li><strong>Loss Calculation:</strong> Compare network output with target value using Mean Squared Error: Loss = (target - output)²</li>\r\n                                <li><strong>Backward Propagation:</strong> Calculate error gradients for each weight using chain rule of calculus</li>\r\n                                <li><strong>Weight Updates:</strong> Adjust weights using gradient descent: Δw = learning_rate × gradient</li>\r\n                            </ol>\r\n                            \r\n                            <h3>Object Recognition Task</h3>\r\n                            <p>This network learns to classify geometric objects based on their complexity using 2 features:</p>\r\n                            <ul>\r\n                                <li><strong>Feature 1 - Symmetry Score (0-1):</strong> How symmetrical the object is (high = simple)</li>\r\n                                <li><strong>Feature 2 - Edge Complexity (0-1):</strong> How many edges/corners the object has (high = complex)</li>\r\n                                <li><strong>Simple Objects:</strong> Circle [0.9,0.1], Square [0.8,0.3] → Output: 0 (classified as simple)</li>\r\n                                <li><strong>Complex Objects:</strong> Triangle [0.6,0.5], Star [0.3,0.9] → Output: 1 (classified as complex)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Training Mode:</strong> Watch data flow forward (blue particles), errors flow backward (red particles), and weights update (flashing connections)</li>\r\n                                <li><strong>Testing Mode:</strong> See how the trained network processes new inputs and makes predictions with confidence scores</li>\r\n                                <li><strong>Visual Indicators:</strong> Active neurons pulse, weight changes are highlighted, and prediction accuracy improves over time</li>\r\n                                <li><strong>Object Context:</strong> Each training example shows the actual geometric object being learned</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Foundation</h3>\r\n                            <ul>\r\n                                <li><strong>Neuron Output:</strong> y = σ(w₁x₁ + w₂x₂ + ... + wₙxₙ + b)</li>\r\n                                <li><strong>Loss Function:</strong> L = (y_target - y_predicted)²</li>\r\n                                <li><strong>Weight Update:</strong> w_new = w_old - α × ∂L/∂w</li>\r\n                                <li><strong>Gradient Calculation:</strong> ∂L/∂w = ∂L/∂y × ∂y/∂w (chain rule)</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li><strong>Computer Vision:</strong> Image classification, object detection, facial recognition</li>\r\n                                <li><strong>Natural Language Processing:</strong> Text classification, language translation, chatbots</li>\r\n                                <li><strong>Speech Recognition:</strong> Voice assistants, transcription services</li>\r\n                                <li><strong>Autonomous Systems:</strong> Self-driving cars, robotics, drones</li>\r\n                                <li><strong>Medical Diagnosis:</strong> Disease detection, medical image analysis</li>\r\n                                <li><strong>Financial Analysis:</strong> Fraud detection, stock prediction, risk assessment</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Educational Insights</h3>\r\n                            <ul>\r\n                                <li><strong>Learning Process:</strong> Neural networks learn by adjusting weights to minimize prediction errors</li>\r\n                                <li><strong>Feature Learning:</strong> Hidden layers automatically learn useful features from raw input data</li>\r\n                                <li><strong>Generalization:</strong> Well-trained networks can make accurate predictions on unseen data</li>\r\n                                <li><strong>Overfitting:</strong> Networks can memorize training data instead of learning general patterns</li>\r\n                                <li><strong>Hyperparameters:</strong> Learning rate, network architecture, and activation functions affect training success</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Interactive Features</h3>\r\n                            <ul>\r\n                                <li><strong>Training Mode:</strong> Watch the network learn through forward/backward propagation cycles</li>\r\n                                <li><strong>Testing Mode:</strong> Test the trained network on different objects and see predictions</li>\r\n                                <li><strong>Parameter Control:</strong> Adjust learning rate and animation speed to observe different training behaviors</li>\r\n                                <li><strong>Visual Feedback:</strong> See real-time loss, accuracy, and confidence metrics</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Advanced Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Gradient Descent:</strong> Optimization algorithm that finds the best weights by following the steepest descent</li>\r\n                                <li><strong>Vanishing Gradients:</strong> Problem where gradients become very small in deep networks</li>\r\n                                <li><strong>Regularization:</strong> Techniques to prevent overfitting (dropout, weight decay)</li>\r\n                                <li><strong>Batch Processing:</strong> Training on multiple examples simultaneously for better gradient estimates</li>\r\n                                <li><strong>Transfer Learning:</strong> Using pre-trained networks for new tasks</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'memory-management':\r\n                return {\r\n                    title: 'Program Execution - Code, Memory, and Data Flow',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Program Execution?</h3>\r\n                            <p>Program execution is the process by which a computer runs code, manages memory, and processes data. This animation visualizes how a real program is executed, showing the flow of control, function calls, memory allocation and deallocation, and the movement of data between stack and heap. It provides a unique window into what happens \"under the hood\" when a computer runs software.</p>\r\n                            <h3>Key Concepts Demonstrated</h3>\r\n                            <ul>\r\n                                <li><strong>Code Execution:</strong> Step-by-step execution of a real program, including function calls and returns</li>\r\n                                <li><strong>Call Stack Visualization:</strong> See how function calls create stack frames and how the stack grows and shrinks</li>\r\n                                <li><strong>Heap Memory Management:</strong> Watch memory blocks being allocated (malloc) and freed (free), and observe fragmentation and memory usage</li>\r\n                                <li><strong>Data Flow:</strong> Visualize how data moves between functions, stack, and heap during program execution</li>\r\n                                <li><strong>Garbage Collection:</strong> Observe how unreachable memory is detected and cleaned up (if enabled)</li>\r\n                                <li><strong>Performance Metrics:</strong> Track memory usage, allocation/deallocation counts, fragmentation, and efficiency</li>\r\n                            </ul>\r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li>How function calls and returns affect the call stack</li>\r\n                                <li>How memory is allocated and deallocated on the heap</li>\r\n                                <li>How data is passed between functions and stored in memory</li>\r\n                                <li>How memory fragmentation and leaks can occur</li>\r\n                                <li>How the program completes its execution and cleans up resources</li>\r\n                            </ul>\r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li>Understanding how operating systems and programming languages manage memory</li>\r\n                                <li>Debugging and optimizing software for performance and reliability</li>\r\n                                <li>Learning about stack overflows, memory leaks, and efficient resource management</li>\r\n                                <li>Building better software by understanding what happens at runtime</li>\r\n                            </ul>\r\n                            <h3>Interactive Features</h3>\r\n                            <ul>\r\n                                <li>Step through program execution or watch it run automatically</li>\r\n                                <li>View real-time statistics and performance metrics</li>\r\n                                <li>Observe visual effects for memory allocation, deallocation, and data flow</li>\r\n                                <li>Toggle output and statistics panels for deeper insights</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            case 'blockchain':\r\n                return {\r\n                    title: 'Blockchain - Distributed Ledger Technology',\r\n                    html: `\r\n                        <div class=\"science-content\">\r\n                            <h3>What is Blockchain?</h3>\r\n                            <p>Blockchain is a distributed ledger technology that enables secure, transparent, and tamper-resistant record-keeping across a network of computers. Each block contains a list of transactions, and blocks are linked together in a chain using cryptographic hashes, creating an immutable record of all transactions.</p>\r\n                            \r\n                            <h3>Key Scientific Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Cryptographic Hashing:</strong> Mathematical function that converts data into a fixed-size string (hash) - any change in data produces a completely different hash</li>\r\n                                <li><strong>Proof of Work:</strong> Consensus mechanism where miners solve complex mathematical puzzles to validate transactions and create new blocks</li>\r\n                                <li><strong>Distributed Network:</strong> Multiple nodes maintain identical copies of the blockchain, ensuring redundancy and security</li>\r\n                                <li><strong>Merkle Trees:</strong> Data structure that efficiently verifies transaction integrity by creating a single hash from multiple transactions</li>\r\n                                <li><strong>Difficulty Adjustment:</strong> Network automatically adjusts mining difficulty to maintain consistent block creation rate</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Block Structure</h3>\r\n                            <ul>\r\n                                <li><strong>Block Header:</strong> Contains metadata including previous block hash, timestamp, nonce, and Merkle root</li>\r\n                                <li><strong>Transactions:</strong> List of validated transactions waiting to be included in the block</li>\r\n                                <li><strong>Nonce:</strong> Number that miners change to find a hash meeting the difficulty requirement</li>\r\n                                <li><strong>Hash:</strong> Unique fingerprint of the block's content - any change invalidates the hash</li>\r\n                                <li><strong>Previous Hash:</strong> Links each block to its predecessor, creating the chain</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mining Process Explained</h3>\r\n                            <ol>\r\n                                <li><strong>Transaction Collection:</strong> Network collects pending transactions into a candidate block</li>\r\n                                <li><strong>Hash Calculation:</strong> Block header is hashed using SHA-256 algorithm</li>\r\n                                <li><strong>Difficulty Check:</strong> Hash must start with a specific number of zeros (target)</li>\r\n                                <li><strong>Nonce Increment:</strong> If hash doesn't meet target, nonce is incremented and process repeats</li>\r\n                                <li><strong>Block Discovery:</strong> When valid hash is found, block is broadcast to network</li>\r\n                                <li><strong>Network Validation:</strong> Other nodes verify the block and add it to their chain</li>\r\n                            </ol>\r\n                            \r\n                            <h3>What You Should Observe</h3>\r\n                            <ul>\r\n                                <li><strong>Modern Block Design:</strong> Rounded blocks with gradients, inner highlights, and modern typography</li>\r\n                                <li><strong>Enhanced Mining Process:</strong> Watch miners (orange nodes with pulsing rings) working to find valid hashes</li>\r\n                                <li><strong>Successful Miner Zoom:</strong> The successful miner node pulses and zooms to draw attention</li>\r\n                                <li><strong>Dynamic Transaction Blocks:</strong> Transactions fade over time, show age indicators, and have priority colors</li>\r\n                                <li><strong>Block Creation:</strong> See new blocks being added to the chain with celebration particles</li>\r\n                                <li><strong>Network Propagation:</strong> Observe animated arrows showing blocks spreading through the network</li>\r\n                                <li><strong>Transaction Flow:</strong> Watch pending transactions being included in blocks with real-time updates</li>\r\n                                <li><strong>Difficulty Effects:</strong> Lower difficulty = faster mining, higher difficulty = slower mining</li>\r\n                                <li><strong>Dynamic Network:</strong> Nodes join and leave the network automatically with enhanced visual effects</li>\r\n                                <li><strong>Block Hashes:</strong> Always visible with modern monospace font (truncated for readability)</li>\r\n                                <li><strong>Consensus Process:</strong> Watch network nodes reach agreement during guided mode</li>\r\n                                <li><strong>Block Rejection:</strong> See blocks rejected with red particles when consensus fails (60% threshold)</li>\r\n                                <li><strong>Transparent Info Panel:</strong> Network status panel with reduced opacity for better integration</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Block Rejection & Consensus</h3>\r\n                            <p>In guided mode (difficulty 2+), the network implements a realistic consensus mechanism:</p>\r\n                            <ul>\r\n                                <li><strong>Consensus Threshold:</strong> 60% of network nodes must agree to accept a block</li>\r\n                                <li><strong>Rejection Process:</strong> If consensus fails, the block is rejected with visual feedback</li>\r\n                                <li><strong>Red Particles:</strong> Rejection particles appear around the mining block position</li>\r\n                                <li><strong>Automatic Recovery:</strong> Mining automatically restarts after rejection</li>\r\n                                <li><strong>Network Reset:</strong> All nodes return to default state after rejection</li>\r\n                                <li><strong>Statistics Update:</strong> Phase indicator shows consensus percentage and rejection status</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Guided Mode (Difficulty 2+)</h3>\r\n                            <p>When mining difficulty is set to 2 or higher, the simulation automatically activates a step-by-step guided mode that walks you through the entire block addition process:</p>\r\n                            <ol>\r\n                                <li><strong>Mining Success:</strong> Block is successfully mined with valid hash</li>\r\n                                <li><strong>Validation:</strong> Network nodes validate the block's transactions and hash</li>\r\n                                <li><strong>Propagation:</strong> Block spreads through the network via peer-to-peer communication</li>\r\n                                <li><strong>Consensus:</strong> Network reaches agreement on block validity (requires 60% of nodes)</li>\r\n                                <li><strong>Finalization:</strong> Block is permanently added to the blockchain OR rejected if consensus fails</li>\r\n                            </ol>\r\n                            <p><strong>Consensus Mechanism:</strong> The network requires 60% of nodes to reach consensus. If consensus fails, the block is rejected and mining restarts automatically.</p>\r\n                            <p><strong>Note:</strong> For difficulty levels 1, blocks are added directly without guided mode for faster simulation.</p>\r\n                            \r\n                            <h3>Cryptographic Security</h3>\r\n                            <ul>\r\n                                <li><strong>Hash Function:</strong> SHA-256 produces 256-bit hashes - practically impossible to reverse</li>\r\n                                <li><strong>Chain Integrity:</strong> Changing any block invalidates all subsequent blocks</li>\r\n                                <li><strong>Immutability:</strong> Once added, blocks cannot be modified without detection</li>\r\n                                <li><strong>Digital Signatures:</strong> Transactions are cryptographically signed to prevent forgery</li>\r\n                                <li><strong>51% Attack Resistance:</strong> Network security depends on honest majority of computing power</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Network Architecture</h3>\r\n                            <ul>\r\n                                <li><strong>Full Nodes:</strong> Store complete blockchain and validate all transactions</li>\r\n                                <li><strong>Mining Nodes:</strong> Specialized nodes that create new blocks through proof of work</li>\r\n                                <li><strong>Light Nodes:</strong> Store only block headers for efficiency</li>\r\n                                <li><strong>Peer-to-Peer:</strong> Direct communication between nodes without central authority</li>\r\n                                <li><strong>Fork Resolution:</strong> Network automatically chooses the longest valid chain</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Mathematical Foundation</h3>\r\n                            <ul>\r\n                                <li><strong>Hash Function:</strong> H(x) = SHA-256(block_header) - deterministic and collision-resistant</li>\r\n                                <li><strong>Difficulty Target:</strong> T = 2^(256-D) where D is difficulty level</li>\r\n                                <li><strong>Mining Probability:</strong> P = T/2^256 - probability of finding valid hash in one attempt</li>\r\n                                <li><strong>Expected Time:</strong> E[T] = 1/P attempts to find valid block</li>\r\n                                <li><strong>Hashrate:</strong> H = attempts_per_second × network_size</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Real-World Applications</h3>\r\n                            <ul>\r\n                                <li><strong>Cryptocurrencies:</strong> Bitcoin, Ethereum, and other digital currencies</li>\r\n                                <li><strong>Smart Contracts:</strong> Self-executing contracts with predefined conditions</li>\r\n                                <li><strong>Supply Chain:</strong> Transparent tracking of goods from source to consumer</li>\r\n                                <li><strong>Digital Identity:</strong> Secure, decentralized identity management</li>\r\n                                <li><strong>Voting Systems:</strong> Tamper-resistant electronic voting</li>\r\n                                <li><strong>Decentralized Finance (DeFi):</strong> Financial services without intermediaries</li>\r\n                                <li><strong>NFTs:</strong> Non-fungible tokens for digital asset ownership</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Visual Enhancements</h3>\r\n                            <ul>\r\n                                <li><strong>Modern Block Design:</strong> Rounded corners, gradient backgrounds, inner highlights, and enhanced typography</li>\r\n                                <li><strong>Golden Genesis Block:</strong> Special golden gradient to distinguish the first block</li>\r\n                                <li><strong>Enhanced Node Design:</strong> Multi-stop gradients, gradient borders, and inner highlights for depth</li>\r\n                                <li><strong>Successful Miner Zoom:</strong> Pulsing zoom effect (0.7x-1.3x) with additional rings for emphasis</li>\r\n                                <li><strong>Dynamic Transaction Display:</strong> Age-based fading, priority indicators, and real-time updates</li>\r\n                                <li><strong>Transaction Priority Colors:</strong> Green (High), Orange (Medium), Red (Low) based on fees</li>\r\n                                <li><strong>Pulsing New Transactions:</strong> Fresh transactions have animated borders for 5 seconds</li>\r\n                                <li><strong>Transparent Info Panel:</strong> Reduced opacity (75%-55%) with text shadows for readability</li>\r\n                                <li><strong>Enhanced Typography:</strong> Modern fonts, better spacing, and improved readability</li>\r\n                                <li><strong>Realistic Transaction Aging:</strong> Transactions expire after 30 seconds with visual feedback</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Interactive Features</h3>\r\n                            <ul>\r\n                                <li><strong>Mining Difficulty (1-8):</strong> Control how hard it is to mine blocks - affects block creation speed and guided mode activation</li>\r\n                                <li><strong>Simulation Speed (0.1x-3x):</strong> Control how fast the entire simulation runs</li>\r\n                                <li><strong>Auto Mining:</strong> Always enabled - simulation continuously mines new blocks</li>\r\n                                <li><strong>Network Visualization:</strong> Always visible - watch nodes join, leave, and validate blocks</li>\r\n                                <li><strong>Block Hashes:</strong> Always visible with modern monospace font (truncated for readability)</li>\r\n                                <li><strong>Real-time Statistics:</strong> Monitor blocks, transactions, hashrate, network status, and current phase</li>\r\n                                <li><strong>Guided Mode:</strong> Automatically activates for difficulty 2+ with step-by-step process visualization</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Dynamic Transaction System</h3>\r\n                            <ul>\r\n                                <li><strong>Real-time Generation:</strong> 1-4 new transactions every 1.5-3.5 seconds</li>\r\n                                <li><strong>Transaction Types:</strong> Transfer, Smart Contract, Token Mint, Stake, Swap, Liquidity</li>\r\n                                <li><strong>Dynamic Fees:</strong> Fees vary based on transaction type and complexity</li>\r\n                                <li><strong>Age-based Fading:</strong> Transactions fade over 30 seconds with visual feedback</li>\r\n                                <li><strong>Priority System:</strong> High/Medium/Low priority based on fee amounts</li>\r\n                                <li><strong>Automatic Expiration:</strong> Transactions older than 30 seconds are removed</li>\r\n                                <li><strong>Random Failures:</strong> 10% chance of low-fee transactions being rejected</li>\r\n                                <li><strong>Mempool Management:</strong> Maximum 100 transactions with fee-based replacement</li>\r\n                                <li><strong>Realistic Descriptions:</strong> Dynamic transaction descriptions for each type</li>\r\n                                <li><strong>Visual Age Indicators:</strong> \"Xs ago\" display instead of absolute timestamps</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Advanced Concepts</h3>\r\n                            <ul>\r\n                                <li><strong>Consensus Mechanisms:</strong> Proof of Work, Proof of Stake, Delegated Proof of Stake</li>\r\n                                <li><strong>Forking:</strong> Temporary chain splits that resolve through consensus</li>\r\n                                <li><strong>Mempool:</strong> Pool of unconfirmed transactions waiting to be mined</li>\r\n                                <li><strong>Block Rewards:</strong> Incentive system for miners to secure the network</li>\r\n                                <li><strong>Transaction Fees:</strong> Additional incentive for miners to prioritize transactions</li>\r\n                                <li><strong>Lightning Network:</strong> Layer 2 scaling solution for faster, cheaper transactions</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Security Considerations</h3>\r\n                            <ul>\r\n                                <li><strong>Double Spending:</strong> Prevented through consensus and transaction ordering</li>\r\n                                <li><strong>Sybil Attacks:</strong> Mitigated through proof of work cost</li>\r\n                                <li><strong>51% Attacks:</strong> Theoretical but economically unfeasible for large networks</li>\r\n                                <li><strong>Quantum Resistance:</strong> Future consideration for post-quantum cryptography</li>\r\n                                <li><strong>Privacy:</strong> Techniques like zero-knowledge proofs for transaction privacy</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Current Control Panel</h3>\r\n                            <ul>\r\n                                <li><strong>Mining Difficulty:</strong> Set to 1-8 (default: 4) - controls mining speed and guided mode activation</li>\r\n                                <li><strong>Simulation Speed:</strong> Set to 0.1x-3x (default: 1.0x) - controls overall animation speed</li>\r\n                                <li><strong>Reset Button:</strong> Resets the entire simulation to initial state</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Always Active Features</h3>\r\n                            <ul>\r\n                                <li><strong>Auto Mining:</strong> Continuously mines new blocks</li>\r\n                                <li><strong>Network Visualization:</strong> Shows all nodes and their activities</li>\r\n                                <li><strong>Block Hashes:</strong> Always visible in blocks (truncated for readability)</li>\r\n                                <li><strong>Real-time Statistics:</strong> Live updates of all blockchain metrics</li>\r\n                            </ul>\r\n                            \r\n                            <h3>Educational Insights</h3>\r\n                            <ul>\r\n                                <li><strong>Decentralization:</strong> No single point of failure or control</li>\r\n                                <li><strong>Transparency:</strong> All transactions are publicly verifiable</li>\r\n                                <li><strong>Immutability:</strong> Historical record cannot be altered</li>\r\n                                <li><strong>Trustlessness:</strong> Participants don't need to trust each other, only the protocol</li>\r\n                                <li><strong>Incentive Alignment:</strong> Economic incentives ensure network security and participation</li>\r\n                            </ul>\r\n                        </div>\r\n                    `\r\n                };\r\n            default:\r\n                return {\r\n                    title: 'Animation Information',\r\n                    html: '<p>Select an animation to learn more about the physics concepts it demonstrates.</p>'\r\n                };\r\n        }\r\n    }\r\n    \r\n    updateMemoryManagementStats() {\r\n        this.updateStats('memoryManagement', {\r\n            'memoryBuildings': { path: 'totalHeapUsed', fallback: 0 },\r\n            'memoryAllocated': { path: 'totalHeapUsed', fallback: 0 },\r\n            'memoryGCCycles': { path: 'gcCycles', fallback: 0 },\r\n            'memoryEfficiency': { \r\n                path: 'fragmentation', \r\n                format: 'percentage', \r\n                decimalPlaces: 1,\r\n                transform: (value) => value ? (100 - value) : 100\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateBlockchainStats() {\r\n        this.updateStats('blockchain', {\r\n            'blockchainBlocks': { path: 'blocks', fallback: 0 },\r\n            'blockchainTransactions': { path: 'transactions', fallback: 0 },\r\n            'blockchainPending': { path: 'pending', fallback: 0 },\r\n            'blockchainDifficulty': { path: 'difficulty', fallback: 0 },\r\n            'blockchainHashrate': { path: 'hashrate', format: 'unit', suffix: ' H/s', fallback: 0 },\r\n            'blockchainMiners': { path: 'miners', fallback: 0 },\r\n            'blockchainNodes': { path: 'nodes', fallback: 0 },\r\n            'blockchainMining': { path: 'isMining', format: 'boolean' }\r\n        });\r\n        \r\n        // Update phase with consensus information\r\n        const phaseElement = document.getElementById('blockchainPhase');\r\n        if (phaseElement) {\r\n            const stats = this.blockchain.getStats();\r\n            let phaseText = stats.phase || 'idle';\r\n            if (stats.phase === 'finalization' && stats.consensusPercentage !== undefined) {\r\n                if (stats.consensusReached) {\r\n                    phaseText = `Finalization (${stats.consensusPercentage}% consensus)`;\r\n                } else {\r\n                    phaseText = `Rejection (${stats.consensusPercentage}% < ${stats.consensusThreshold}%)`;\r\n                }\r\n            }\r\n            phaseElement.textContent = phaseText;\r\n        }\r\n    }\r\n}\r\n","import { ScientificAnimations } from './animations.js';\r\n\r\n// Initialize the application when the page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const canvas = document.getElementById('animationCanvas');\r\n    new ScientificAnimations(canvas);\r\n    \r\n    // Initialize controls panel toggle\r\n    initializeControlsToggle();\r\n});\r\n\r\n// Controls panel toggle functionality\r\nfunction initializeControlsToggle() {\r\n    const controlsPanel = document.querySelector('.controls-panel');\r\n    const toggleButton = document.querySelector('.controls-toggle');\r\n    \r\n    if (!controlsPanel || !toggleButton) return;\r\n    \r\n    // Check if user has a preference stored\r\n    const isCollapsed = localStorage.getItem('controlsCollapsed') === 'true';\r\n    \r\n    if (isCollapsed) {\r\n        controlsPanel.classList.add('collapsed');\r\n    }\r\n    \r\n    toggleButton.addEventListener('click', () => {\r\n        const isCurrentlyCollapsed = controlsPanel.classList.contains('collapsed');\r\n        \r\n        if (isCurrentlyCollapsed) {\r\n            // Expand the panel\r\n            controlsPanel.classList.remove('collapsed');\r\n            localStorage.setItem('controlsCollapsed', 'false');\r\n        } else {\r\n            // Collapse the panel\r\n            controlsPanel.classList.add('collapsed');\r\n            localStorage.setItem('controlsCollapsed', 'true');\r\n        }\r\n    });\r\n    \r\n    // Add keyboard shortcut (Ctrl/Cmd + T)\r\n    document.addEventListener('keydown', (e) => {\r\n        if ((e.ctrlKey || e.metaKey) && e.key === 't') {\r\n            e.preventDefault();\r\n            toggleButton.click();\r\n        }\r\n    });\r\n} "],"names":["BaseAnimation","ctx","title","formulas","titleY","formulasY","dpr","titleFontSize","formulaFontSize","textColor","shadowColor","outlineColor","stats","elementMappings","key","elementId","element","deltaTime","BrownianMotion","i","vx","vy","velocity","count","speed","temp","show","p","size","dt","particle","index","oldX","oldY","j","other","dx","dy","distance","tempVx","tempVy","overlap","moveX","moveY","totalDistance","sum","normalizedVelocity","t","cols","rows","centerX","centerY","localTemp","particleCount","alpha","graphX","graphY","histogram","maxVelocity","binIndex","maxCount","barWidth","barHeight","avgSpeed","Diffusion","startRegion","gridSize","x","rate","gradient","gridX","gridY","concentrationDiff","_a","_b","timeFactor","velocityFactor","baseColor","profileY","profileWidth","bins","binWidth","concentrationProfile","maxConcentration","scale","y","labelGradient","barrierX","barrierGradient","text","textWidth","textGradient","leftParticles","rightParticles","concentrationSpread","GasLaws","prev","factor","vol","pressure","law","currentPressure","particleDensity","calculatedPressure","pressureDiff","boyleConstant","charlesConstant","gayLussacConstant","combinedConstant","canvasWidth","panelX","panelY","panelWidth","panelHeight","lawNames","pressureValue","angle","localPressure","maxPressure","minPressure","maxVolume","minVolume","maxTemp","minTemp","xLabel","yLabel","Pendulum","length","gravity","damping","mass","stepDt","g","L","angularAcceleration","period","kineticEnergy","potentialEnergy","bobX","bobY","totalEnergy","energyRatio","bobColor","gravityLength","tensionLength","tensionX","tensionY","tensionMagnitude","unitX","unitY","velocityX","velocityY","velocityMagnitude","airResistanceForce","airResistanceLength","unitVX","unitVY","scaledVX","scaledVY","kineticRatio","potentialRatio","plotX","plotY","angles","d","velocities","minAngle","maxAngle","minVel","maxVel","avgPeriod","theoreticalPeriod","OrbitalMotion","r","eccentricity","axis","normalizedVX","normalizedVY","arrowLength","perigeeX","perigeeY","apogeeAngle","apogeeX","apogeeY","textX","startY","currentDistance","currentSpeed","CollisionPhysics","restitution","type","canvasHeight","positions","pos","spacing","startX","effect","ball","ball1","ball2","nx","ny","dvx","dvy","relativeVelocity","effectiveRestitution","impulse","separationX","separationY","preCollisionEnergy","radius","ringRadius","ringAlpha","sparkleX","sparkleY","colors","labelX","labelY","gravityForce","endX","endY","totalMomentum","momentum","energy","FrictionInclinedPlanes","coefficient","offsetDistance","angleRad","inclineLength","maxEndY","verticalOffset","adjustedStartY","objectSize","weight","normalForce","parallelForce","frictionForce","netForce","acceleration","angleEffect","enhancedAcceleration","adjustedEndY","surfaceColor","textureColor","surfaceGradient","bounceOffset","rotationSpeed","objectGradient","blurIntensity","drawArrow","fromX","fromY","color","label","len","normDX","normDY","arrowLen","frictionDir","frictionMagnitude","WavePropagation","freq","amp","wavelength","speedSlider","frequencySlider","amplitudeSlider","waveTypeSelect","analyticsCheckbox","speedMultiplier","phase","timePhase","displacement","longitudinalAmplitude","wave1","wave2","px","py","numPoints","particleIndex","lowIndex","highIndex","fraction","lowY","highY","springRadius","totalLength","waveDisplacement","coilOffset","waveSpeed","arrowX","ax","waveTypeLabel","velocityRatio","b","particleSize","sx","sy","ex","ey","barX","barY","maxEnergy","energyWidth","energyGradient","SoundWaves","e","rect","touch","button","action","active","note","instrument","pulse","angularFrequency","amplitude","waveActive","isInWavePacket","wavePacketStart","wavePacketLength","elapsed","waveFrontPosition","hasReachedReceiver","wavePacketEnd","spatialPhase","temporalPhase","totalPhase","arrowSpacing","intensity","frequencyHue","amplitudeSat","wavePosition","zoneHeight","zoneY","relativeX","particles","current","next","cp1x","cp1y","ElectricFields","strength","charge","k","force","sign","field","magnitude","point","arrowGradient","panelGradient","bannerY","bannerGradient","MagneticFields","magnetLength","magnet","Bx","By","fieldStrength","fieldMagnitude","forceX","forceY","forceScale","scaledForceX","scaledForceY","dampingFactor","stepX","stepY","lineLength","stepSize","currentX","currentY","drawProgress","maxSteps","step","fieldDirX","fieldDirY","northPole","southPole","magnetAngle","pole","poleType","currentEndX","currentEndY","lineColor","lineWidth","arrowAngle","direction","tipX","tipY","leftX","leftY","rightX","rightY","arrowColor","northPoles","m","southPoles","animationOffset","animatedLength","actualEndX","actualEndY","magnetGroups","magnetGroup","halfWidth","corners","magnetGradient","poleGradient","trailGradient","trailOpacity","particleGradient","glowIntensity","velocityAngle","bannerWidth","bannerHeight","bannerX","iconX","iconY","DiodeTransistor","bias","voltage","voltageDrop","baseCurrent","beta","spark","time","waveRadius","waveAlpha","glowColor","labelGlow","isForward","isReverse","glow","pulseEffect","symbolColor","leadLength","baseCurrentColor","typeColor","biasType","biasText","biasColor","x1","x2","y1","y2","dash","electron","hole","baseVoltageEffect","bulbGlow","bulbColor","filamentPulse","trailPoint","dashOffset","arrowOffset","arrowGlow","pulseIntensity","particleProgress","particleX","particleY","WaveParticleDuality","mode","wave","screenHeight","slit1X","slit2X","slitY","screenX","screenY","distance1","distance2","pathDifference","phaseDifference","amplitude1","amplitude2","totalAmplitude","distanceFromSlit1","distanceFromSlit2","screenGradient","activePulse","started","timeOffset","animatedIntensity","dotSize","arrowPulse","lineHeight","NuclearReactions","row","col","neutron","nucleus","additionalNeutrons","product","randomAngle","neutronCount","energyParticleCount","life","hNucleus","closestNucleus","closestDistance","elementSymbol","nucleonCount","FluidFlow","visc","re","viscosity","isInTopPipe","isInBottomPipe","isInPipe","isInTopMaterial","isInBottomMaterial","baseVelocity","material","porosityFactor","turbulence","viscosityFactor","targetParticles","currentParticles","particlesToAdd","staggerOffset","pipeChoice","height","pipeGradient","glowGradient","dotX","dotY","porosityType","width","materialGradient","highlightGradient","indicatorY","numDots","dotSpacing","porosity","holeSize","holeSpacing","topLabelY","topLabelX","topLabelWidth","labelHeight","topLabelGradient","bottomLabelY","bottomLabelX","bottomLabelWidth","bottomLabelGradient","amount","hex","trailColor","borderGradient","innerGradient","pressureRatio","pressureColor","viscosityEffect","viscosityColor","velocityColor","avgVelocity","efficiency","efficiencyColor","Bernoulli","density","velocityMultiplier","transitionProgress","topBoundary","bottomBoundary","margin","midGaugeX","midGaugeY","rightGaugeX","rightGaugeY","value","fillWidth","energyLevel","NeuralNetwork","l","layer","mL","vL","velL","o","l2","name","n","noise","data","a","totalNetworkWidth","networkCenterY","layerIndex","layerNeurons","layerSize","neuronIndex","preTrainedWeights","preTrainedBiases","currentLayerSize","nextLayerSize","layerWeights","neuronWeights","layerBiases","auto","currentData","rawWeights","rawBiases","w","trainingEpochs","originalLearningRate","epoch","dataIndex","inputs","currentLayer","nextLayer","activated","keep","targets","outputLayer","error","biasChange","weightChange","loss","correct","fromNeuron","toNeuron","isError","testing","objectType","predicted","confidence","isCorrect","previousLayer","neuron","output","expectedOutput","distanceFromTarget","weightAbs","opacity","weightUpdateEffect","hue","saturation","lightness","pulseSize","delta","phaseX","phaseY","phaseText","phaseColor","phaseDescription","progressBarX","progressBarY","progressBarWidth","progressBarHeight","progress","detailsX","detailsY","objects","objX","objY","clickRadius","y0","stepsX","stepsY","savedDropout","iy","ix","out","c0","c1","inx","iny","target","objectY","objType","outerRadius","innerRadius","infoY","object","buttonSize","isTrainingComplete","isSelected","lossData","accuracyData","maxLoss","minLoss","maxAcc","minAcc","chartX","normalizedLoss","chartY","normalizedAcc","totalTests","correctTests","accuracy","recentResults","resultY","result","status","currentTrainingObject","progressWidth","progressHeight","progressX","progressY","MemoryManagement","buttonId","currentFunc","line","match","funcName","functionIndex","f","varName","altMatch1","altMatch2","address","caller","currentFunctionVariables","callingLine","varMatch","newVarName","returnedVarName","returnAddress","functionVariables","lastVar","bestBlock","freeBlockIndex","block","heapWidth","heapHeight","sizeRatio","blockWidth","blockHeight","newBlock","position","blockIndex","operation","heapArea","overlaps","existingBlock","maxAttempts","attempt","block1","block2","totalHeapSize","usedSpace","total","freeSpace","fragmentedBlocks","lastBlock","freeBlock","sortedBlocks","currentAddress","gapSize","gapWidth","gapHeight","totalFreeSize","largestFreeBlock","fragmentation","unreachableBlocks","access","highlight","connection","frag","hexSize","offset","isHovered","bgGradient","tooltipX","tooltipY","tooltipWidth","radialGradient","frame","func","blockGradient","fontSize","sizeFontSize","addrFontSize","freeGradient","startIndex","midX","midY","usageX","usageY","usageWidth","usageHeight","usagePercent","barGradient","layoutY","layoutHeight","layoutX","layoutWidth","segmentX","segmentWidth","fragBlock","fragX","fragWidth","statsX","statsY","statsBorderGradient","Blockchain","genesisBlock","miner","node","consensusNodes","consensusThreshold","latency","consensusProbability","callback","minDelay","maxDelay","targetPosition","newNode","removableNodes","nodeToRemove","nodeCount","angleStep","targetAngle","targetX","targetY","currentTime","numTransactions","randomTx","tx","lowFeeIndex","from","to","description","fee","descriptions","sortedTransactions","maxTransactions","selectedTransactions","transactions","hashes","newHashes","left","right","blockString","str","hash","prime","mod","char","calculatedHash","totalFees","timeRatio","expectedIndex","targetHash","baseNoncesPerFrame","difficultyMultiplier","noncesToTry","successfulMinerIndex","blockTime","totalBlocks","blockX","visibleIndex","blockY","particleRate","contractX","contractY","arrow","difficulty","animationDeltaTime","baseHashrate","effectiveHashrate","visibleBlocks","visibleWidth","contentHeight","nextX","ellipsesX","ellipsesY","lastBlockX","hiddenCount","startLineGradient","badgeX","badgeY","badgeText","endLineGradient","connectionGradient","maxX","miningGradient","miningBorderGradient","miningHighlightGradient","miningContentHeight","miningStartY","progressGradient","networkGradient","node1","node2","nodeGradient","primaryColor","secondaryColor","hslMatch","h","s","zoomPulse","zoomedRadius","successGradient","ringPulse","miningPulse","age","ageSeconds","ageOpacity","txGradient","borderColor","fromTo","maxFromToLength","displayFromTo","typeText","displayType","timeText","priorityText","priorityColor","desc","headLength","headAngle","avgBlockTime","consensusPercentage","gradientStartX","gradientStartY","gradientEndX","gradientEndY","difficultySlider","difficultyValue","speedValue","reward","ScientificAnimations","canvas","header","setExpanded","el","expanded","categoryItem","sideNav","mainContent","item","firstAnimation","animation","subItem","navToggleBtn","controlsPanel","controlsToggle","controlsBackdrop","willCollapse","mobileNavToggle","openControls","closeControls","applyBtn","cancelBtn","playBtn","navBackdrop","closeMobileNav","playPauseBtnEl","resetBtnEl","learnMoreBtnEl","applySideNavLayout","userToggled","lastAnimation","waveTypeElement","waveShowAnalyticsElement","soundWaveTypeSelect","scaleX","scaleY","chargeType","initialMode","componentTypeSelect","biasTypeSelect","showOutputCheckbox","neuralMode","isTesting","sliderId","valueId","slider","valueDisplay","formatAndApply","val","raw","parsedNum","customUnit","decimalsAttr","decimals","fallbackUnit","unit","displayVal","performMeasurementBtn","diffusion","gasLaws","pendulum","category","btn","categoryBtn","group","animationGroup","animationType","activeItem","panel","controlPanel","infoPanel","animationSpeedSlider","temperature","_c","_d","_e","_f","_g","_h","_i","_j","_k","waveType","_l","frequency","_m","_n","_o","_p","_q","_r","_s","volume","_t","_u","ballCount","_v","_w","_x","_y","_z","_A","_B","_C","animationSpeed","_D","standardWidth","standardHeight","animationName","config","obj","path","format","suffix","prefix","decimalPlaces","transform","dp","baseVoltageStat","modal","modalTitle","modalContent","content","state","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_U","_V","_W","_X","_Y","_Z","__","_$","_aa","_ba","_ca","_da","_ea","_fa","phaseElement","initializeControlsToggle","toggleButton"],"mappings":"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"}