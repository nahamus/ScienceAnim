{"version":3,"file":"index-CZsN36xL.js","sources":["../../src/js/animations/particle-physics.js","../../src/js/animations/classical-mechanics.js","../../src/js/animations/wave-phenomena.js","../../src/js/animations/elelectro-magnetism.js","../../src/js/animations/quantum-physics.js","../../src/js/animations/nuclear-physics.js","../../src/js/animations/fluid-dynamics.js","../../src/js/animations/computer-science.js","../../src/js/animations.js","../../src/js/main.js"],"sourcesContent":["// Particle Physics Animations\r\n// Brownian Motion Simulation\r\nexport class BrownianMotion {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.particleCount = 15;\r\n        this.speed = 1;\r\n        this.temperature = 1;\r\n        this.showTrails = false;\r\n        this.showVelocityVectors = false;\r\n        this.showTemperatureHeatmap = false;\r\n        this.showVelocityDistribution = false;\r\n        this.showMeanFreePath = false;\r\n        this.particleSize = 4;\r\n        this.time = 0;\r\n        this.collisionCount = 0;\r\n        this.meanFreePath = 0;\r\n        this.velocityData = [];\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            const vx = (Math.random() - 0.5) * 2;\r\n            const vy = (Math.random() - 0.5) * 2;\r\n            const velocity = Math.sqrt(vx * vx + vy * vy);\r\n            \r\n            this.particles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: vx,\r\n                vy: vy,\r\n                velocity: velocity,\r\n                trail: [],\r\n                lastCollisionTime: 0,\r\n                distanceTraveled: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        this.temperature = temp;\r\n    }\r\n    \r\n    setShowTrails(show) {\r\n        this.showTrails = show;\r\n        if (!show) {\r\n            this.particles.forEach(p => p.trail = []);\r\n        }\r\n    }\r\n    \r\n    setShowVelocityVectors(show) {\r\n        this.showVelocityVectors = show;\r\n    }\r\n    \r\n    setShowTemperatureHeatmap(show) {\r\n        this.showTemperatureHeatmap = show;\r\n    }\r\n    \r\n    setShowVelocityDistribution(show) {\r\n        this.showVelocityDistribution = show;\r\n    }\r\n    \r\n    setShowMeanFreePath(show) {\r\n        this.showMeanFreePath = show;\r\n    }\r\n    \r\n    setParticleSize(size) {\r\n        this.particleSize = size;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        \r\n        // Store old positions for collision detection\r\n        const oldPositions = this.particles.map(p => ({ x: p.x, y: p.y }));\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Add random motion based on temperature (Brownian motion)\r\n            particle.vx += (Math.random() - 0.5) * this.temperature * 0.1;\r\n            particle.vy += (Math.random() - 0.5) * this.temperature * 0.1;\r\n            \r\n            // Apply damping\r\n            particle.vx *= 0.99;\r\n            particle.vy *= 0.99;\r\n            \r\n            // Update position\r\n            const oldX = particle.x;\r\n            const oldY = particle.y;\r\n            particle.x += particle.vx * dt * 50;\r\n            particle.y += particle.vy * dt * 50;\r\n            \r\n            // Update velocity magnitude\r\n            particle.velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            \r\n            // Update distance traveled for mean free path\r\n            particle.distanceTraveled += Math.sqrt(\r\n                (particle.x - oldX) * (particle.x - oldX) + \r\n                (particle.y - oldY) * (particle.y - oldY)\r\n            );\r\n            \r\n            // Bounce off walls\r\n            if (particle.x < 0 || particle.x > this.ctx.canvas.width) {\r\n                particle.vx *= -0.8;\r\n                particle.x = Math.max(0, Math.min(this.ctx.canvas.width, particle.x));\r\n                this.collisionCount++;\r\n                particle.lastCollisionTime = this.time;\r\n            }\r\n            if (particle.y < 0 || particle.y > this.ctx.canvas.height) {\r\n                particle.vy *= -0.8;\r\n                particle.y = Math.max(0, Math.min(this.ctx.canvas.height, particle.y));\r\n                this.collisionCount++;\r\n                particle.lastCollisionTime = this.time;\r\n            }\r\n            \r\n            // Check particle-to-particle collisions\r\n            for (let j = index + 1; j < this.particles.length; j++) {\r\n                const other = this.particles[j];\r\n                const dx = particle.x - other.x;\r\n                const dy = particle.y - other.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance < this.particleSize * 2) {\r\n                    // Simple elastic collision\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const speed1 = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n                    const speed2 = Math.sqrt(other.vx * other.vx + other.vy * other.vy);\r\n                    \r\n                    // Swap velocities\r\n                    const tempVx = particle.vx;\r\n                    const tempVy = particle.vy;\r\n                    particle.vx = other.vx;\r\n                    particle.vy = other.vy;\r\n                    other.vx = tempVx;\r\n                    other.vy = tempVy;\r\n                    \r\n                    this.collisionCount++;\r\n                    particle.lastCollisionTime = this.time;\r\n                    other.lastCollisionTime = this.time;\r\n                    \r\n                    // Separate particles\r\n                    const overlap = this.particleSize * 2 - distance;\r\n                    const moveX = (overlap * dx) / distance / 2;\r\n                    const moveY = (overlap * dy) / distance / 2;\r\n                    particle.x += moveX;\r\n                    particle.y += moveY;\r\n                    other.x -= moveX;\r\n                    other.y -= moveY;\r\n                }\r\n            }\r\n            \r\n            // Update trail\r\n\r\n        });\r\n        \r\n        // Update velocity distribution data\r\n        if (this.showVelocityDistribution) {\r\n            this.velocityData.push(...this.particles.map(p => p.velocity));\r\n            if (this.velocityData.length > 1000) {\r\n                this.velocityData = this.velocityData.slice(-500);\r\n            }\r\n        }\r\n        \r\n        // Calculate mean free path\r\n        if (this.showMeanFreePath && this.collisionCount > 0) {\r\n            const totalDistance = this.particles.reduce((sum, p) => sum + p.distanceTraveled, 0);\r\n            this.meanFreePath = totalDistance / this.collisionCount;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw temperature heatmap\r\n        if (this.showTemperatureHeatmap) {\r\n            this.drawTemperatureHeatmap();\r\n        }\r\n        \r\n        // Draw velocity distribution\r\n        if (this.showVelocityDistribution) {\r\n            this.drawVelocityDistribution();\r\n        }\r\n        \r\n        // Draw mean free path info\r\n        if (this.showMeanFreePath) {\r\n            this.drawMeanFreePathInfo();\r\n        }\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Draw particle with velocity-based color\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = this.getVelocityColor(particle.velocity);\r\n            this.ctx.arc(particle.x, particle.y, this.particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add particle border\r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n        \r\n        // Draw canvas labels\r\n        this.drawBrownianLabels();\r\n    }\r\n    \r\n    getVelocityColor(velocity) {\r\n        // Color particles based on velocity (red = fast, blue = slow)\r\n        const maxVelocity = 3;\r\n        const normalizedVelocity = Math.min(velocity / maxVelocity, 1);\r\n        \r\n        if (normalizedVelocity < 0.5) {\r\n            // Blue to green\r\n            const t = normalizedVelocity * 2;\r\n            return `rgb(0, ${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))})`;\r\n        } else {\r\n            // Green to red\r\n            const t = (normalizedVelocity - 0.5) * 2;\r\n            return `rgb(${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))}, 0)`;\r\n        }\r\n    }\r\n    \r\n    drawTemperatureHeatmap() {\r\n        const gridSize = 20;\r\n        const cols = Math.ceil(this.ctx.canvas.width / gridSize);\r\n        const rows = Math.ceil(this.ctx.canvas.height / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                const centerX = j * gridSize + gridSize / 2;\r\n                const centerY = i * gridSize + gridSize / 2;\r\n                \r\n                // Calculate local temperature based on nearby particles\r\n                let localTemp = 0;\r\n                let particleCount = 0;\r\n                \r\n                this.particles.forEach(particle => {\r\n                    const dx = particle.x - centerX;\r\n                    const dy = particle.y - centerY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < gridSize) {\r\n                        localTemp += particle.velocity;\r\n                        particleCount++;\r\n                    }\r\n                });\r\n                \r\n                if (particleCount > 0) {\r\n                    localTemp /= particleCount;\r\n                    const alpha = Math.min(localTemp / 3, 0.3);\r\n                    this.ctx.fillStyle = `rgba(255, 100, 100, ${alpha})`;\r\n                    this.ctx.fillRect(j * gridSize, i * gridSize, gridSize, gridSize);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityDistribution() {\r\n        const graphWidth = 200;\r\n        const graphHeight = 100;\r\n        const graphX = this.ctx.canvas.width - graphWidth - 20;\r\n        const graphY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.velocityData.length > 0) {\r\n            // Create histogram\r\n            const bins = 20;\r\n            const histogram = new Array(bins).fill(0);\r\n            const maxVelocity = Math.max(...this.velocityData);\r\n            \r\n            this.velocityData.forEach(velocity => {\r\n                const binIndex = Math.floor((velocity / maxVelocity) * (bins - 1));\r\n                if (binIndex >= 0 && binIndex < bins) {\r\n                    histogram[binIndex]++;\r\n                }\r\n            });\r\n            \r\n            // Draw histogram\r\n            const maxCount = Math.max(...histogram);\r\n            const barWidth = graphWidth / bins;\r\n            \r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            for (let i = 0; i < bins; i++) {\r\n                const barHeight = (histogram[i] / maxCount) * (graphHeight - 20);\r\n                this.ctx.fillRect(\r\n                    graphX + i * barWidth + 2, \r\n                    graphY + graphHeight - 10 - barHeight, \r\n                    barWidth - 4, \r\n                    barHeight\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Velocity Distribution', graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    drawMeanFreePathInfo() {\r\n        const infoX = 20;\r\n        const infoY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(infoX, infoY, 200, 80);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(infoX, infoY, 200, 80);\r\n        \r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText(`Collisions: ${this.collisionCount}`, infoX + 10, infoY + 20);\r\n        this.ctx.fillText(`Mean Free Path: ${this.meanFreePath.toFixed(1)}`, infoX + 10, infoY + 40);\r\n        this.ctx.fillText(`Temperature: ${this.temperature.toFixed(1)}`, infoX + 10, infoY + 60);\r\n    }\r\n    \r\n    getStats() {\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            avgSpeed: avgSpeed,\r\n            time: this.time,\r\n            collisionCount: this.collisionCount,\r\n            meanFreePath: this.meanFreePath,\r\n            temperature: this.temperature\r\n        };\r\n    }\r\n    \r\n    drawBrownianLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Brownian Motion', this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Draw mathematical formulas in a more compact format\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`⟨v²⟩ = 3kBT/m  |  λ = 1/(√2πd²n)  |  D = kBT/(6πηr)`, \r\n                          this.ctx.canvas.width / 2, 45);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n// Diffusion Simulation\r\nexport class Diffusion {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.particleCount = 200;\r\n        this.speed = 1;\r\n        this.diffusionRate = 1;\r\n        this.concentrationGradient = 1;\r\n        this.showConcentration = true; // Default to showing concentration\r\n        this.particleSize = 4;\r\n        this.time = 0;\r\n        this.concentrationMap = [];\r\n        this.diffusionStarted = false; // New: control when diffusion starts\r\n        this.showConcentrationProfile = true; // New: show concentration profile\r\n        this.showParticleTrails = false; // New: show particle trails\r\n        \r\n        this.initializeParticles();\r\n        this.initializeConcentrationMap();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const startRegion = this.ctx.canvas.width * 0.2; // Concentrated in left 20%\r\n        \r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: Math.random() * startRegion, // Start in concentrated region\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: 0,\r\n                vy: 0,\r\n                color: '#FF6B6B', // Consistent red color for better visibility\r\n                trail: [] // New: store trail positions\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeConcentrationMap() {\r\n        this.concentrationMap = [];\r\n        const gridSize = 15; // Smaller grid for better resolution\r\n        const cols = Math.ceil(this.ctx.canvas.width / gridSize);\r\n        const rows = Math.ceil(this.ctx.canvas.height / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            this.concentrationMap[i] = [];\r\n            for (let j = 0; j < cols; j++) {\r\n                // Much stronger concentration gradient - high on left, zero on right\r\n                const x = j / cols;\r\n                this.concentrationMap[i][j] = Math.max(0, 1 - x * 2); // Steeper gradient\r\n            }\r\n        }\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setDiffusionRate(rate) {\r\n        this.diffusionRate = rate;\r\n    }\r\n    \r\n    setConcentrationGradient(gradient) {\r\n        this.concentrationGradient = gradient;\r\n        this.initializeConcentrationMap();\r\n    }\r\n    \r\n    setParticleSize(size) {\r\n        this.particleSize = size;\r\n    }\r\n    \r\n    setShowConcentration(show) {\r\n        this.showConcentration = show;\r\n    }\r\n    \r\n    setShowConcentrationProfile(show) {\r\n        this.showConcentrationProfile = show;\r\n    }\r\n    \r\n    setShowParticleTrails(show) {\r\n        this.showParticleTrails = show;\r\n    }\r\n    \r\n    startDiffusion() {\r\n        this.diffusionStarted = true;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.diffusionStarted = false;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 20; // Much faster animation\r\n        \r\n        // Only update particles if diffusion has started\r\n        if (!this.diffusionStarted) return;\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Check if particle coordinates are valid before updating\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                // Reset invalid particle to a valid position\r\n                particle.x = Math.random() * this.ctx.canvas.width * 0.2;\r\n                particle.y = Math.random() * this.ctx.canvas.height;\r\n                particle.vx = 0;\r\n                particle.vy = 0;\r\n                return;\r\n            }\r\n            \r\n            // Add random diffusion motion\r\n            particle.vx += (Math.random() - 0.5) * this.diffusionRate * 0.5;\r\n            particle.vy += (Math.random() - 0.5) * this.diffusionRate * 0.5;\r\n            \r\n            // Apply concentration gradient force (particles move from high to low concentration)\r\n            const gridX = Math.floor(particle.x / 15);\r\n            const gridY = Math.floor(particle.y / 15);\r\n            if (gridX > 0 && gridX < this.concentrationMap[0].length - 1 && \r\n                gridY >= 0 && gridY < this.concentrationMap.length) {\r\n                const concentrationDiff = this.concentrationMap[gridY]?.[gridX] - this.concentrationMap[gridY]?.[gridX + 1];\r\n                particle.vx += concentrationDiff * 0.2; // Stronger gradient force\r\n            }\r\n            \r\n            // Apply damping\r\n            particle.vx *= 0.98;\r\n            particle.vy *= 0.98;\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * dt * 30;\r\n            particle.y += particle.vy * dt * 30;\r\n            \r\n            // Update particle trail\r\n            if (this.showParticleTrails) {\r\n                particle.trail.push({ x: particle.x, y: particle.y });\r\n                if (particle.trail.length > 20) {\r\n                    particle.trail.shift();\r\n                }\r\n            }\r\n            \r\n            // Wrap around edges with bounds checking\r\n            if (particle.x < 0) particle.x = this.ctx.canvas.width;\r\n            if (particle.x > this.ctx.canvas.width) particle.x = 0;\r\n            if (particle.y < 0) particle.y = this.ctx.canvas.height;\r\n            if (particle.y > this.ctx.canvas.height) particle.y = 0;\r\n            \r\n            // Final validation check\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                // Reset if still invalid after update\r\n                particle.x = Math.random() * this.ctx.canvas.width * 0.2;\r\n                particle.y = Math.random() * this.ctx.canvas.height;\r\n                particle.vx = 0;\r\n                particle.vy = 0;\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Draw concentration heatmap with stronger colors\r\n        if (this.showConcentration) {\r\n            const gridSize = 15;\r\n            for (let i = 0; i < this.concentrationMap.length; i++) {\r\n                for (let j = 0; j < this.concentrationMap[i].length; j++) {\r\n                    const concentration = this.concentrationMap[i][j];\r\n                    const alpha = concentration * 0.6; // Stronger visibility\r\n                    this.ctx.fillStyle = `rgba(102, 126, 234, ${alpha})`;\r\n                    this.ctx.fillRect(j * gridSize, i * gridSize, gridSize, gridSize);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Draw particle trails\r\n        if (this.showParticleTrails) {\r\n            this.particles.forEach(particle => {\r\n                if (particle.trail.length > 1) {\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = 'rgba(255, 107, 107, 0.3)';\r\n                    this.ctx.lineWidth = 1;\r\n                    this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                    for (let i = 1; i < particle.trail.length; i++) {\r\n                        this.ctx.lineTo(particle.trail[i].x, particle.trail[i].y);\r\n                    }\r\n                    this.ctx.stroke();\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Draw particles with enhanced styling\r\n        this.particles.forEach(particle => {\r\n            // Check if particle coordinates are valid\r\n            if (!isFinite(particle.x) || !isFinite(particle.y) || \r\n                isNaN(particle.x) || isNaN(particle.y)) {\r\n                return; // Skip invalid particles\r\n            }\r\n            \r\n            // Add soft glow effect\r\n            this.ctx.shadowColor = 'rgba(102, 126, 234, 0.3)';\r\n            this.ctx.shadowBlur = 8;\r\n            \r\n            // Draw particle with gradient\r\n            const gradient = this.ctx.createRadialGradient(\r\n                particle.x, particle.y, 0,\r\n                particle.x, particle.y, this.particleSize\r\n            );\r\n            gradient.addColorStop(0, 'rgba(255, 107, 107, 0.9)');\r\n            gradient.addColorStop(1, 'rgba(255, 107, 107, 0.6)');\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(particle.x, particle.y, this.particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add subtle border\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n        \r\n        // Draw concentration profile\r\n        if (this.showConcentrationProfile) {\r\n            this.drawConcentrationProfile();\r\n        }\r\n        \r\n        // Draw start barrier if diffusion hasn't started\r\n        if (!this.diffusionStarted) {\r\n            this.drawStartBarrier();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawDiffusionLabels();\r\n    }\r\n    \r\n    drawConcentrationProfile() {\r\n        const profileHeight = 80;\r\n        const profileY = this.ctx.canvas.height - profileHeight - 20;\r\n        const profileWidth = this.ctx.canvas.width - 40;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(20, profileY, profileWidth, profileHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(20, profileY, profileWidth, profileHeight);\r\n        \r\n        // Calculate concentration profile\r\n        const bins = 50;\r\n        const binWidth = profileWidth / bins;\r\n        const concentrationProfile = new Array(bins).fill(0);\r\n        \r\n        this.particles.forEach(particle => {\r\n            const binIndex = Math.floor((particle.x / this.ctx.canvas.width) * bins);\r\n            if (binIndex >= 0 && binIndex < bins) {\r\n                concentrationProfile[binIndex]++;\r\n            }\r\n        });\r\n        \r\n        // Normalize to fit in profile height\r\n        const maxConcentration = Math.max(...concentrationProfile);\r\n        const scale = (profileHeight - 20) / Math.max(maxConcentration, 1);\r\n        \r\n        // Draw concentration profile\r\n        this.ctx.strokeStyle = '#FF6B6B';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(20, profileY + profileHeight - 10);\r\n        \r\n        for (let i = 0; i < bins; i++) {\r\n            const x = 20 + i * binWidth;\r\n            const y = profileY + profileHeight - 10 - (concentrationProfile[i] * scale);\r\n            this.ctx.lineTo(x, y);\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Concentration Profile', this.ctx.canvas.width / 2, profileY - 5);\r\n        this.ctx.fillText('High', 30, profileY + 15);\r\n        this.ctx.fillText('Low', this.ctx.canvas.width - 30, profileY + 15);\r\n    }\r\n    \r\n    drawStartBarrier() {\r\n        // Draw a barrier line to show where particles are contained\r\n        this.ctx.strokeStyle = '#FF0000';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.setLineDash([10, 5]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.ctx.canvas.width * 0.2, 0);\r\n        this.ctx.lineTo(this.ctx.canvas.width * 0.2, this.ctx.canvas.height);\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n        \r\n        // Add instruction text at the bottom of canvas\r\n        this.ctx.fillStyle = 'rgba(102, 126, 234, 0.9)';\r\n        this.ctx.font = 'bold 20px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Click or tap to start diffusion', this.ctx.canvas.width / 2, this.ctx.canvas.height - 30);\r\n        \r\n        // Add subtle background for better readability\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.fillRect(this.ctx.canvas.width / 2 - 150, this.ctx.canvas.height - 50, 300, 30);\r\n        \r\n        // Redraw text on top of background\r\n        this.ctx.fillStyle = 'rgba(102, 126, 234, 0.9)';\r\n        this.ctx.fillText('Click or tap to start diffusion', this.ctx.canvas.width / 2, this.ctx.canvas.height - 30);\r\n    }\r\n    \r\n    getStats() {\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Calculate concentration spread\r\n        const leftParticles = this.particles.filter(p => p.x < this.ctx.canvas.width / 2).length;\r\n        const rightParticles = this.particles.length - leftParticles;\r\n        const concentrationSpread = Math.abs(leftParticles - rightParticles) / this.particles.length;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            avgSpeed: avgSpeed,\r\n            concentrationSpread: concentrationSpread,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawDiffusionLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Particle Diffusion', this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Draw mathematical formulas in a more compact format\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`∂c/∂t = D∇²c  |  J = -D∇c  |  D = kBT/(6πηr)`, \r\n                          this.ctx.canvas.width / 2, 45);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n// Gas Laws Simulation\r\nexport class GasLaws {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.particleCount = 50;\r\n        this.temperature = 300; // Kelvin\r\n        this.volume = 300; // Container height\r\n        this.pressure = 1.0; // External pressure\r\n        this.speed = 1.0;\r\n        this.showPressureGauge = true;\r\n        this.showParticleTrails = false;\r\n        this.showGasLaws = false;\r\n        this.showPressureHeatmap = false;\r\n        this.showVelocityDistribution = false;\r\n        this.showGasLawGraph = false;\r\n        this.showParticleCollisions = false;\r\n        this.lawType = 'boyle';\r\n        this.time = 0;\r\n        this.containerWidth = 200;\r\n        this.containerX = 300;\r\n        this.pistonY = 400 - this.volume;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.pressureHistory = [];\r\n        this.volumeHistory = [];\r\n        this.temperatureHistory = [];\r\n        this.initialConditions = {\r\n            pressure: 1.0,\r\n            volume: 300,\r\n            temperature: 300\r\n        };\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: this.containerX + Math.random() * this.containerWidth,\r\n                y: this.pistonY + this.volume + Math.random() * (this.volume * 0.8),\r\n                vx: (Math.random() - 0.5) * this.temperature * 0.1,\r\n                vy: (Math.random() - 0.5) * this.temperature * 0.1\r\n            });\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        this.temperature = temp;\r\n        // Adjust particle velocities based on temperature\r\n        this.particles.forEach(particle => {\r\n            const speedFactor = Math.sqrt(temp / 300);\r\n            particle.vx *= speedFactor;\r\n            particle.vy *= speedFactor;\r\n        });\r\n    }\r\n    \r\n    setVolume(vol) {\r\n        this.volume = vol;\r\n        this.pistonY = 400 - this.volume;\r\n        // Adjust particle positions to stay in container\r\n        this.particles.forEach(particle => {\r\n            if (particle.y > this.pistonY + this.volume) {\r\n                particle.y = this.pistonY + this.volume - 10;\r\n            }\r\n        });\r\n    }\r\n    \r\n    setPressure(pressure) {\r\n        this.pressure = pressure;\r\n    }\r\n    \r\n    setShowPressureGauge(show) {\r\n        this.showPressureGauge = show;\r\n    }\r\n    \r\n    setShowPressureHeatmap(show) {\r\n        this.showPressureHeatmap = show;\r\n    }\r\n    \r\n    setShowVelocityDistribution(show) {\r\n        this.showVelocityDistribution = show;\r\n    }\r\n    \r\n    setShowGasLawGraph(show) {\r\n        this.showGasLawGraph = show;\r\n    }\r\n    \r\n    setShowParticleCollisions(show) {\r\n        this.showParticleCollisions = show;\r\n    }\r\n    \r\n    setLawType(law) {\r\n        this.lawType = law;\r\n        // Reset to initial conditions when changing law\r\n        this.pressure = this.initialConditions.pressure;\r\n        this.volume = this.initialConditions.volume;\r\n        this.temperature = this.initialConditions.temperature;\r\n        this.pistonY = 400 - this.volume;\r\n        this.reset();\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.collisionCount = 0;\r\n        this.velocityData = [];\r\n        this.pressureHistory = [];\r\n        this.volumeHistory = [];\r\n        this.temperatureHistory = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        \r\n        // Update particles with collision detection\r\n        this.particles.forEach((particle, index) => {\r\n            // Update position\r\n            particle.x += particle.vx * dt * 30;\r\n            particle.y += particle.vy * dt * 30;\r\n            \r\n            // Bounce off container walls\r\n            if (particle.x < this.containerX || particle.x > this.containerX + this.containerWidth) {\r\n                particle.vx *= -0.8;\r\n                particle.x = Math.max(this.containerX, Math.min(this.containerX + this.containerWidth, particle.x));\r\n                this.collisionCount++;\r\n            }\r\n            \r\n            // Bounce off piston and bottom\r\n            if (particle.y < this.pistonY || particle.y > this.pistonY + this.volume) {\r\n                particle.vy *= -0.8;\r\n                particle.y = Math.max(this.pistonY, Math.min(this.pistonY + this.volume, particle.y));\r\n                this.collisionCount++;\r\n            }\r\n            \r\n            // Particle-to-particle collisions\r\n            if (this.showParticleCollisions) {\r\n                for (let j = index + 1; j < this.particles.length; j++) {\r\n                    const other = this.particles[j];\r\n                    const dx = particle.x - other.x;\r\n                    const dy = particle.y - other.y;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < 6) { // Collision radius\r\n                        // Simple elastic collision\r\n                        const tempVx = particle.vx;\r\n                        const tempVy = particle.vy;\r\n                        particle.vx = other.vx;\r\n                        particle.vy = other.vy;\r\n                        other.vx = tempVx;\r\n                        other.vy = tempVy;\r\n                        \r\n                        this.collisionCount++;\r\n                        \r\n                        // Separate particles\r\n                        const overlap = 6 - distance;\r\n                        const moveX = (overlap * dx) / distance / 2;\r\n                        const moveY = (overlap * dy) / distance / 2;\r\n                        particle.x += moveX;\r\n                        particle.y += moveY;\r\n                        other.x -= moveX;\r\n                        other.y -= moveY;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n        });\r\n        \r\n        // Update velocity distribution data\r\n        if (this.showVelocityDistribution) {\r\n            this.velocityData.push(...this.particles.map(p => Math.sqrt(p.vx * p.vx + p.vy * p.vy)));\r\n            if (this.velocityData.length > 1000) {\r\n                this.velocityData = this.velocityData.slice(-500);\r\n            }\r\n        }\r\n        \r\n        // Update history data for graphs (always collect data)\r\n        const currentPressure = this.calculatePressure();\r\n        this.pressureHistory.push(currentPressure);\r\n        this.volumeHistory.push(this.volume);\r\n        this.temperatureHistory.push(this.temperature);\r\n        \r\n        if (this.pressureHistory.length > 100) {\r\n            this.pressureHistory.shift();\r\n            this.volumeHistory.shift();\r\n            this.temperatureHistory.shift();\r\n        }\r\n        \r\n        // Calculate and apply pressure effects\r\n        this.calculatePressure();\r\n    }\r\n    \r\n    calculatePressure() {\r\n        // Calculate pressure based on particle collisions and container volume\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Pressure is proportional to particle density and average kinetic energy\r\n        const calculatedPressure = particleDensity * avgSpeed * avgSpeed * 0.01;\r\n        \r\n        // Apply gas law relationships based on current law type\r\n        this.applyGasLaw();\r\n        \r\n        // Adjust piston position based on pressure difference\r\n        const pressureDiff = calculatedPressure - this.pressure;\r\n        this.pistonY += pressureDiff * 0.1;\r\n        this.pistonY = Math.max(100, Math.min(350, this.pistonY)); // Limit piston movement\r\n        this.volume = 400 - this.pistonY;\r\n        \r\n        return calculatedPressure;\r\n    }\r\n    \r\n    applyGasLaw() {\r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                // Boyle's Law: P₁V₁ = P₂V₂ (constant temperature)\r\n                const boyleConstant = this.initialConditions.pressure * this.initialConditions.volume;\r\n                if (this.volume !== this.initialConditions.volume) {\r\n                    this.pressure = boyleConstant / this.volume;\r\n                }\r\n                break;\r\n                \r\n            case 'charles':\r\n                // Charles's Law: V₁/T₁ = V₂/T₂ (constant pressure)\r\n                const charlesConstant = this.initialConditions.volume / this.initialConditions.temperature;\r\n                if (this.temperature !== this.initialConditions.temperature) {\r\n                    this.volume = charlesConstant * this.temperature;\r\n                    this.pistonY = 400 - this.volume;\r\n                }\r\n                break;\r\n                \r\n            case 'gay-lussac':\r\n                // Gay-Lussac's Law: P₁/T₁ = P₂/T₂ (constant volume)\r\n                const gayLussacConstant = this.initialConditions.pressure / this.initialConditions.temperature;\r\n                if (this.temperature !== this.initialConditions.temperature) {\r\n                    this.pressure = gayLussacConstant * this.temperature;\r\n                }\r\n                break;\r\n                \r\n            case 'combined':\r\n                // Combined Gas Law: P₁V₁/T₁ = P₂V₂/T₂\r\n                const combinedConstant = (this.initialConditions.pressure * this.initialConditions.volume) / this.initialConditions.temperature;\r\n                if (this.volume !== this.initialConditions.volume || this.temperature !== this.initialConditions.temperature) {\r\n                    this.pressure = (combinedConstant * this.temperature) / this.volume;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw pressure heatmap\r\n        if (this.showPressureHeatmap) {\r\n            this.drawPressureHeatmap();\r\n        }\r\n        \r\n        // Draw velocity distribution\r\n        if (this.showVelocityDistribution) {\r\n            this.drawVelocityDistribution();\r\n        }\r\n        \r\n        // Draw gas law graph\r\n        if (this.showGasLawGraph) {\r\n            this.drawGasLawGraph();\r\n        }\r\n        \r\n        // Draw enhanced container with better visual design\r\n        this.drawEnhancedContainer();\r\n        \r\n        // Draw particles with temperature-based coloring\r\n            this.particles.forEach(particle => {\r\n            // Draw particle with temperature-based color\r\n                this.ctx.beginPath();\r\n            this.ctx.fillStyle = this.getTemperatureColor(particle);\r\n            this.ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            \r\n            // Add particle border\r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n        \r\n        // Draw pressure gauge\r\n        if (this.showPressureGauge) {\r\n            this.drawPressureGauge();\r\n        }\r\n        \r\n        // Draw law description and formula on canvas\r\n        this.drawLawDescription();\r\n        \r\n        // Draw canvas labels\r\n        this.drawGasLabels();\r\n    }\r\n    \r\n    drawEnhancedContainer() {\r\n        // Draw container with gradient and better styling\r\n        const gradient = this.ctx.createLinearGradient(\r\n            this.containerX, this.pistonY, \r\n            this.containerX + this.containerWidth, this.pistonY + this.volume\r\n        );\r\n        gradient.addColorStop(0, 'rgba(200, 220, 255, 0.1)');\r\n        gradient.addColorStop(1, 'rgba(150, 180, 255, 0.2)');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(this.containerX, this.pistonY, this.containerWidth, this.volume);\r\n        \r\n        // Draw container border\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.strokeRect(this.containerX, this.pistonY, this.containerWidth, this.volume);\r\n        \r\n        // Draw piston with enhanced styling\r\n        this.ctx.fillStyle = '#34495E';\r\n        this.ctx.fillRect(this.containerX - 8, this.pistonY - 15, this.containerWidth + 16, 30);\r\n        \r\n        // Piston border\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeRect(this.containerX - 8, this.pistonY - 15, this.containerWidth + 16, 30);\r\n        \r\n        // Piston handle\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.fillRect(this.containerX + this.containerWidth/2 - 15, this.pistonY - 25, 30, 10);\r\n        \r\n        // Add labels\r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('GAS', this.containerX + this.containerWidth/2, this.pistonY + this.volume/2);\r\n        \r\n        // Volume indicator\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#7F8C8D';\r\n        this.ctx.fillText(`Volume: ${this.volume}`, this.containerX + this.containerWidth/2, this.pistonY + this.volume + 25);\r\n    }\r\n    \r\n    drawLawDescription() {\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Position the description panel on the right side (reduced width to avoid overlap)\r\n        const panelX = canvasWidth - 220;\r\n        const panelY = 20;\r\n        const panelWidth = 200;\r\n        const panelHeight = 220;\r\n        \r\n        // Background panel\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.95)';\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.strokeStyle = '#2C3E50';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = panelY + 30;\r\n        \r\n        // Law title\r\n        const lawNames = {\r\n            'boyle': \"Boyle's Law\",\r\n            'charles': \"Charles's Law\", \r\n            'gay-lussac': \"Gay-Lussac's Law\",\r\n            'combined': \"Combined Gas Law\"\r\n        };\r\n        \r\n        this.ctx.fillText(lawNames[this.lawType], panelX + 10, y);\r\n        y += 30;\r\n        \r\n        // Formula\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        \r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                this.ctx.fillText('P₁V₁ = P₂V₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant temperature', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Pressure ∝ 1/Volume', panelX + 10, y);\r\n                break;\r\n            case 'charles':\r\n                this.ctx.fillText('V₁/T₁ = V₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant pressure', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Volume ∝ Temperature', panelX + 10, y);\r\n                break;\r\n            case 'gay-lussac':\r\n                this.ctx.fillText('P₁/T₁ = P₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('At constant volume', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('Pressure ∝ Temperature', panelX + 10, y);\r\n                break;\r\n            case 'combined':\r\n                this.ctx.fillText('P₁V₁/T₁ = P₂V₂/T₂', panelX + 10, y);\r\n                y += 25;\r\n                this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                this.ctx.fillStyle = '#7F8C8D';\r\n                this.ctx.fillText('Combines all three laws', panelX + 10, y);\r\n                y += 18;\r\n                this.ctx.fillText('PV/T = constant', panelX + 10, y);\r\n                break;\r\n        }\r\n        \r\n        // Current values\r\n        y += 30;\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#2C3E50';\r\n        this.ctx.fillText('Current Values:', panelX + 10, y);\r\n        y += 20;\r\n        \r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#7F8C8D';\r\n        this.ctx.fillText(`P = ${this.pressure.toFixed(2)} atm`, panelX + 10, y);\r\n        y += 16;\r\n        this.ctx.fillText(`V = ${this.volume.toFixed(0)} units`, panelX + 10, y);\r\n        y += 16;\r\n        this.ctx.fillText(`T = ${this.temperature} K`, panelX + 10, y);\r\n    }\r\n    \r\n    getTemperatureColor(particle) {\r\n        const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n        const maxVelocity = this.temperature * 0.2;\r\n        const normalizedVelocity = Math.min(velocity / maxVelocity, 1);\r\n        \r\n        if (normalizedVelocity < 0.5) {\r\n            // Blue to green\r\n            const t = normalizedVelocity * 2;\r\n            return `rgb(0, ${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))})`;\r\n        } else {\r\n            // Green to red\r\n            const t = (normalizedVelocity - 0.5) * 2;\r\n            return `rgb(${Math.floor(255 * t)}, ${Math.floor(255 * (1 - t))}, 0)`;\r\n        }\r\n    }\r\n    \r\n    drawPressureGauge() {\r\n        const gaugeX = 50;\r\n        const gaugeY = 150; // Moved down to avoid overlap with main labels\r\n        const gaugeRadius = 30;\r\n        \r\n        // Draw gauge background\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#f0f0f0';\r\n        this.ctx.arc(gaugeX, gaugeY, gaugeRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Calculate pressure value (0-1 scale)\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        \r\n        // Use the actual pressure value from gas law calculations\r\n        const pressureValue = Math.min(this.pressure / 2.0, 1.0); // Scale to 0-1 range\r\n        \r\n        // Draw pressure needle\r\n        const angle = -Math.PI/2 + pressureValue * Math.PI;\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#FF6B6B';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(gaugeX, gaugeY);\r\n        this.ctx.lineTo(\r\n            gaugeX + Math.cos(angle) * (gaugeRadius - 5),\r\n            gaugeY + Math.sin(angle) * (gaugeRadius - 5)\r\n        );\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pressure label\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Pressure', gaugeX, gaugeY + gaugeRadius + 15);\r\n        this.ctx.fillText(pressureValue.toFixed(2), gaugeX, gaugeY + gaugeRadius + 30);\r\n    }\r\n    \r\n    drawPressureHeatmap() {\r\n        const gridSize = 15;\r\n        const cols = Math.ceil(this.containerWidth / gridSize);\r\n        const rows = Math.ceil(this.volume / gridSize);\r\n        \r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                const centerX = this.containerX + j * gridSize + gridSize / 2;\r\n                const centerY = this.pistonY + i * gridSize + gridSize / 2;\r\n                \r\n                // Calculate local pressure based on nearby particles\r\n                let localPressure = 0;\r\n                let particleCount = 0;\r\n                \r\n                this.particles.forEach(particle => {\r\n                    const dx = particle.x - centerX;\r\n                    const dy = particle.y - centerY;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n                    if (distance < gridSize) {\r\n                        const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n                        localPressure += velocity * velocity;\r\n                        particleCount++;\r\n                    }\r\n                });\r\n                \r\n                if (particleCount > 0) {\r\n                    localPressure /= particleCount;\r\n                    const alpha = Math.min(localPressure / 100, 0.4);\r\n                    this.ctx.fillStyle = `rgba(255, 100, 100, ${alpha})`;\r\n                    this.ctx.fillRect(\r\n                        this.containerX + j * gridSize, \r\n                        this.pistonY + i * gridSize, \r\n                        gridSize, \r\n                        gridSize\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityDistribution() {\r\n        const graphWidth = 200;\r\n        const graphHeight = 100;\r\n        const graphX = this.ctx.canvas.width - graphWidth - 20;\r\n        const graphY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.velocityData.length > 0) {\r\n            // Create histogram\r\n            const bins = 20;\r\n            const histogram = new Array(bins).fill(0);\r\n            const maxVelocity = Math.max(...this.velocityData);\r\n            \r\n            this.velocityData.forEach(velocity => {\r\n                const binIndex = Math.floor((velocity / maxVelocity) * (bins - 1));\r\n                if (binIndex >= 0 && binIndex < bins) {\r\n                    histogram[binIndex]++;\r\n                }\r\n            });\r\n            \r\n            // Draw histogram\r\n            const maxCount = Math.max(...histogram);\r\n            const barWidth = graphWidth / bins;\r\n            \r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            for (let i = 0; i < bins; i++) {\r\n                const barHeight = (histogram[i] / maxCount) * (graphHeight - 20);\r\n                this.ctx.fillRect(\r\n                    graphX + i * barWidth + 2, \r\n                    graphY + graphHeight - 10 - barHeight, \r\n                    barWidth - 4, \r\n                    barHeight\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Velocity Distribution', graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    drawGasLawGraph() {\r\n        const graphWidth = 300;\r\n        const graphHeight = 150;\r\n        const graphX = 20;\r\n        const graphY = this.ctx.canvas.height - graphHeight - 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(graphX, graphY, graphWidth, graphHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(graphX, graphY, graphWidth, graphHeight);\r\n        \r\n        if (this.pressureHistory.length > 1) {\r\n            // Calculate data ranges for proper scaling\r\n            const maxPressure = Math.max(...this.pressureHistory);\r\n            const minPressure = Math.min(...this.pressureHistory);\r\n            const maxVolume = Math.max(...this.volumeHistory);\r\n            const minVolume = Math.min(...this.volumeHistory);\r\n            const maxTemp = Math.max(...this.temperatureHistory);\r\n            const minTemp = Math.min(...this.temperatureHistory);\r\n            \r\n            // Draw graph based on current law type\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            \r\n            for (let i = 0; i < this.pressureHistory.length; i++) {\r\n                let x, y;\r\n                \r\n                switch(this.lawType) {\r\n                    case 'boyle':\r\n                        // P vs V (inverse relationship)\r\n                        x = graphX + ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    case 'charles':\r\n                        // V vs T (linear relationship)\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphHeight;\r\n                        break;\r\n                    case 'gay-lussac':\r\n                        // P vs T (linear relationship)\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    default:\r\n                        x = graphX + (i / this.pressureHistory.length) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                }\r\n                \r\n                // Ensure coordinates are within graph bounds\r\n                x = Math.max(graphX, Math.min(graphX + graphWidth, x));\r\n                y = Math.max(graphY, Math.min(graphY + graphHeight, y));\r\n                \r\n                if (i === 0) {\r\n                    this.ctx.moveTo(x, y);\r\n                } else {\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            this.ctx.stroke();\r\n            \r\n            // Draw data points\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            for (let i = 0; i < this.pressureHistory.length; i += 5) { // Draw every 5th point\r\n                let x, y;\r\n                \r\n                switch(this.lawType) {\r\n                    case 'boyle':\r\n                        x = graphX + ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    case 'charles':\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.volumeHistory[i] - minVolume) / (maxVolume - minVolume)) * graphHeight;\r\n                        break;\r\n                    case 'gay-lussac':\r\n                        x = graphX + ((this.temperatureHistory[i] - minTemp) / (maxTemp - minTemp)) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                        break;\r\n                    default:\r\n                        x = graphX + (i / this.pressureHistory.length) * graphWidth;\r\n                        y = graphY + graphHeight - ((this.pressureHistory[i] - minPressure) / (maxPressure - minPressure)) * graphHeight;\r\n                }\r\n                \r\n                x = Math.max(graphX, Math.min(graphX + graphWidth, x));\r\n                y = Math.max(graphY, Math.min(graphY + graphHeight, y));\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        let xLabel, yLabel;\r\n        switch(this.lawType) {\r\n            case 'boyle':\r\n                xLabel = 'Volume';\r\n                yLabel = 'Pressure';\r\n                break;\r\n            case 'charles':\r\n                xLabel = 'Temperature (K)';\r\n                yLabel = 'Volume';\r\n                break;\r\n            case 'gay-lussac':\r\n                xLabel = 'Temperature (K)';\r\n                yLabel = 'Pressure';\r\n                break;\r\n            default:\r\n                xLabel = 'Time';\r\n                yLabel = 'Pressure';\r\n        }\r\n        \r\n        this.ctx.fillText(`${yLabel} vs ${xLabel}`, graphX + graphWidth / 2, graphY - 5);\r\n    }\r\n    \r\n    getStats() {\r\n        const particleDensity = this.particles.length / (this.containerWidth * this.volume);\r\n        const avgSpeed = this.particles.reduce((sum, p) => \r\n            sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        const calculatedPressure = particleDensity * avgSpeed * avgSpeed * 0.01;\r\n        \r\n        return {\r\n            particleCount: this.particles.length,\r\n            temperature: this.temperature,\r\n            pressure: calculatedPressure,\r\n            volume: Math.round(this.volume),\r\n            collisionCount: this.collisionCount,\r\n            lawType: this.lawType\r\n        };\r\n    }\r\n    \r\n    drawGasLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label only (no formulas to avoid overlap with law info container)\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Gas Laws', this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}","// Classical Mechanics Animations\r\n\r\n// Pendulum Simulation\r\n// Pendulum Simulation\r\nexport class Pendulum {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.length = 120;\r\n        this.angle = Math.PI / 4; // 45 degrees\r\n        this.angularVelocity = 0;\r\n        this.gravity = 1;\r\n        this.damping = 0.01;\r\n        this.speed = 1;\r\n        this.mass = 1.0; // New: bob mass\r\n        this.showPath = false;\r\n        this.showVelocityVectors = false; // New: show velocity vectors\r\n        this.showForceVectors = false; // New: show force vectors\r\n        this.showEnergyInfo = false; // New: show energy information\r\n        this.showPhaseSpace = false; // New: show phase space plot\r\n        this.time = 0;\r\n        this.path = [];\r\n        this.phaseSpaceData = []; // New: store phase space data\r\n        this.energyHistory = []; // New: store energy data\r\n        this.initialAngle = Math.PI / 4;\r\n        this.maxAmplitude = Math.PI / 4; // Track maximum amplitude\r\n        this.periods = []; // Track periods\r\n        this.lastZeroCrossing = 0; // For period calculation\r\n        this.crossingCount = 0; // Count zero crossings\r\n    }\r\n    \r\n    setLength(length) {\r\n        this.length = length;\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setInitialAngle(angle) {\r\n        this.initialAngle = angle * Math.PI / 180;\r\n        this.angle = this.initialAngle;\r\n    }\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setDamping(damping) {\r\n        this.damping = damping;\r\n    }\r\n    \r\n    setShowPath(show) {\r\n        this.showPath = show;\r\n        if (!show) this.path = [];\r\n    }\r\n    \r\n    setMass(mass) {\r\n        this.mass = mass;\r\n    }\r\n    \r\n    setShowVelocityVectors(show) {\r\n        this.showVelocityVectors = show;\r\n    }\r\n    \r\n    setShowForceVectors(show) {\r\n        this.showForceVectors = show;\r\n    }\r\n    \r\n    setShowEnergyInfo(show) {\r\n        this.showEnergyInfo = show;\r\n    }\r\n    \r\n    setShowPhaseSpace(show) {\r\n        this.showPhaseSpace = show;\r\n        if (!show) this.phaseSpaceData = [];\r\n    }\r\n    \r\n    reset() {\r\n        this.angle = this.initialAngle;\r\n        this.angularVelocity = 0;\r\n        this.time = 0;\r\n        this.path = [];\r\n        this.phaseSpaceData = [];\r\n        this.energyHistory = [];\r\n        this.maxAmplitude = Math.abs(this.initialAngle);\r\n        this.periods = [];\r\n        this.lastZeroCrossing = 0;\r\n        this.crossingCount = 0;\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 3; // Reduced scaling for moderate speed\r\n        \r\n        // Pendulum physics with enhanced air resistance modeling\r\n        const acceleration = -(this.gravity * 9.8) / (this.length / 100) * Math.sin(this.angle);\r\n        \r\n        // Enhanced air resistance: velocity-dependent damping\r\n        const velocityMagnitude = Math.abs(this.angularVelocity);\r\n        const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n        const dampingAcceleration = -Math.sign(this.angularVelocity) * airResistanceForce;\r\n        \r\n        this.angularVelocity += (acceleration + dampingAcceleration) * dt;\r\n        this.angle += this.angularVelocity * dt;\r\n        \r\n        // Track maximum amplitude\r\n        this.maxAmplitude = Math.max(this.maxAmplitude, Math.abs(this.angle));\r\n        \r\n        // Period calculation (zero crossing detection)\r\n        if (this.angle * this.angularVelocity < 0 && this.angularVelocity > 0) {\r\n            // Positive zero crossing\r\n            if (this.crossingCount > 0) {\r\n                const period = this.time - this.lastZeroCrossing;\r\n                this.periods.push(period);\r\n                if (this.periods.length > 10) {\r\n                    this.periods.shift();\r\n                }\r\n            }\r\n            this.lastZeroCrossing = this.time;\r\n            this.crossingCount++;\r\n        }\r\n        \r\n        // Update path\r\n        if (this.showPath) {\r\n            const x = this.ctx.canvas.width / 2 + this.length * Math.sin(this.angle);\r\n            const y = this.ctx.canvas.height / 2 + this.length * Math.cos(this.angle);\r\n            this.path.push({ x, y });\r\n            if (this.path.length > 100) {\r\n                this.path.shift();\r\n            }\r\n        }\r\n        \r\n        // Update phase space data\r\n        if (this.showPhaseSpace) {\r\n            this.phaseSpaceData.push({ angle: this.angle, velocity: this.angularVelocity });\r\n            if (this.phaseSpaceData.length > 200) {\r\n                this.phaseSpaceData.shift();\r\n            }\r\n        }\r\n        \r\n        // Update energy history\r\n        if (this.showEnergyInfo) {\r\n            const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n            const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n            this.energyHistory.push({ kinetic: kineticEnergy, potential: potentialEnergy, total: kineticEnergy + potentialEnergy });\r\n            if (this.energyHistory.length > 100) {\r\n                this.energyHistory.shift();\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const centerX = this.ctx.canvas.width / 2;\r\n        const centerY = this.ctx.canvas.height * 0.3; // Move pendulum higher up\r\n        const bobX = centerX + this.length * Math.sin(this.angle);\r\n        const bobY = centerY + this.length * Math.cos(this.angle);\r\n        \r\n        // Calculate energy for color coding\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const totalEnergy = kineticEnergy + potentialEnergy;\r\n        const energyRatio = kineticEnergy / totalEnergy;\r\n        \r\n        // Draw phase space plot\r\n        if (this.showPhaseSpace) {\r\n            this.drawPhaseSpacePlot();\r\n        }\r\n        \r\n        // Draw energy bar\r\n        if (this.showEnergyInfo) {\r\n            this.drawEnergyBar();\r\n        }\r\n        \r\n        // Draw path with energy-based color\r\n        if (this.showPath && this.path.length > 1) {\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = `hsl(${200 + energyRatio * 60}, 70%, 50%, 0.6)`;\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for (let i = 1; i < this.path.length; i++) {\r\n                this.ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw enhanced pivot\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#2c3e50';\r\n        this.ctx.arc(centerX, centerY, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.strokeStyle = '#34495e';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pivot shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.arc(centerX + 2, centerY + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw string with shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(centerX + 1, centerY + 1);\r\n        this.ctx.lineTo(bobX + 1, bobY + 1);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#34495e';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.moveTo(centerX, centerY);\r\n        this.ctx.lineTo(bobX, bobY);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw force vectors\r\n        if (this.showForceVectors) {\r\n            this.drawForceVectors(centerX, centerY, bobX, bobY);\r\n        }\r\n        \r\n        // Draw velocity vector\r\n        if (this.showVelocityVectors) {\r\n            this.drawVelocityVector(bobX, bobY);\r\n        }\r\n        \r\n        // Draw enhanced bob with energy-based color\r\n        const bobColor = `hsl(${200 + energyRatio * 60}, 70%, 50%)`;\r\n        \r\n        // Bob shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.arc(bobX + 2, bobY + 2, 18, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob main\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = bobColor;\r\n        this.ctx.arc(bobX, bobY, 18, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob highlight\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.arc(bobX - 5, bobY - 5, 6, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Bob border\r\n        this.ctx.strokeStyle = '#2c3e50';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // Draw pendulum info\r\n        if (this.showEnergyInfo) {\r\n            this.drawPendulumInfo();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawPendulumLabels();\r\n    }\r\n    \r\n    drawForceVectors(centerX, centerY, bobX, bobY) {\r\n        // Gravity force vector\r\n        const gravityForce = this.mass * this.gravity * 9.8;\r\n        const gravityLength = 50; // Increased from 30\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#e74c3c';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(bobX, bobY);\r\n        this.ctx.lineTo(bobX, bobY + gravityLength);\r\n        this.ctx.stroke();\r\n        \r\n        // Arrow head for gravity\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(bobX, bobY + gravityLength);\r\n        this.ctx.lineTo(bobX - 6, bobY + gravityLength - 10);\r\n        this.ctx.lineTo(bobX + 6, bobY + gravityLength - 10);\r\n        this.ctx.closePath();\r\n        this.ctx.fillStyle = '#e74c3c';\r\n        this.ctx.fill();\r\n        \r\n        // Gravity force label\r\n        this.ctx.fillStyle = '#e74c3c';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Fg', bobX + 15, bobY + gravityLength / 2);\r\n        \r\n        // Tension force vector (along the string)\r\n        const tensionLength = 40; // Increased from 25\r\n        const tensionX = bobX - centerX;\r\n        const tensionY = bobY - centerY;\r\n        const tensionMagnitude = Math.sqrt(tensionX * tensionX + tensionY * tensionY);\r\n        \r\n        if (tensionMagnitude > 0) {\r\n            const unitX = tensionX / tensionMagnitude;\r\n            const unitY = tensionY / tensionMagnitude;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#3498db';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(bobX, bobY);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength, bobY - unitY * tensionLength);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head for tension\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(bobX - unitX * tensionLength, bobY - unitY * tensionLength);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength + unitY * 6, bobY - unitY * tensionLength - unitX * 6);\r\n            this.ctx.lineTo(bobX - unitX * tensionLength - unitY * 6, bobY - unitY * tensionLength + unitX * 6);\r\n            this.ctx.closePath();\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.fill();\r\n            \r\n            // Tension force label\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('T', bobX - unitX * tensionLength / 2 + 15, bobY - unitY * tensionLength / 2 - 10);\r\n        }\r\n        \r\n        // Air resistance force vector (if damping is significant)\r\n        if (this.damping > 0.001 && Math.abs(this.angularVelocity) > 0.1) {\r\n            const velocityX = this.length * this.angularVelocity * Math.cos(this.angle);\r\n            const velocityY = -this.length * this.angularVelocity * Math.sin(this.angle);\r\n            const velocityMagnitude = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n            \r\n            if (velocityMagnitude > 0) {\r\n                const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n                const airResistanceLength = Math.min(airResistanceForce * 2, 30); // Scale for visibility\r\n                \r\n                const unitVX = velocityX / velocityMagnitude;\r\n                const unitVY = velocityY / velocityMagnitude;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#e67e22';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.moveTo(bobX, bobY);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength, bobY - unitVY * airResistanceLength);\r\n                this.ctx.stroke();\r\n                \r\n                // Arrow head for air resistance\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(bobX - unitVX * airResistanceLength, bobY - unitVY * airResistanceLength);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength + unitVY * 4, bobY - unitVY * airResistanceLength - unitVX * 4);\r\n                this.ctx.lineTo(bobX - unitVX * airResistanceLength - unitVY * 4, bobY - unitVY * airResistanceLength + unitVX * 4);\r\n                this.ctx.closePath();\r\n                this.ctx.fillStyle = '#e67e22';\r\n                this.ctx.fill();\r\n                \r\n                // Air resistance force label\r\n                this.ctx.fillStyle = '#e67e22';\r\n                this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('Fd', bobX - unitVX * airResistanceLength / 2 - 10, bobY - unitVY * airResistanceLength / 2 - 5);\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawVelocityVector(bobX, bobY) {\r\n        const velocityX = this.length * this.angularVelocity * Math.cos(this.angle);\r\n        const velocityY = -this.length * this.angularVelocity * Math.sin(this.angle);\r\n        const velocityMagnitude = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n        \r\n        if (velocityMagnitude > 0.1) {\r\n            const scale = 20 / velocityMagnitude;\r\n            const scaledVX = velocityX * scale;\r\n            const scaledVY = velocityY * scale;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#f39c12';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(bobX, bobY);\r\n            this.ctx.lineTo(bobX + scaledVX, bobY + scaledVY);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(bobX + scaledVX, bobY + scaledVY);\r\n            this.ctx.lineTo(bobX + scaledVX - scaledVY * 0.3, bobY + scaledVY + scaledVX * 0.3);\r\n            this.ctx.lineTo(bobX + scaledVX + scaledVY * 0.3, bobY + scaledVY - scaledVX * 0.3);\r\n            this.ctx.closePath();\r\n            this.ctx.fillStyle = '#f39c12';\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawEnergyBar() {\r\n        const barWidth = 200;\r\n        const barHeight = 20;\r\n        const barX = 20;\r\n        const barY = 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(barX, barY, barWidth, barHeight);\r\n        \r\n        // Calculate current energies\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const totalEnergy = kineticEnergy + potentialEnergy;\r\n        \r\n        if (totalEnergy > 0) {\r\n            const kineticRatio = kineticEnergy / totalEnergy;\r\n            const potentialRatio = potentialEnergy / totalEnergy;\r\n            \r\n            // Kinetic energy (orange)\r\n            this.ctx.fillStyle = '#f39c12';\r\n            this.ctx.fillRect(barX, barY, barWidth * kineticRatio, barHeight);\r\n            \r\n            // Potential energy (blue)\r\n            this.ctx.fillStyle = '#3498db';\r\n            this.ctx.fillRect(barX + barWidth * kineticRatio, barY, barWidth * potentialRatio, barHeight);\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Energy', barX + barWidth / 2, barY - 5);\r\n        this.ctx.fillText('K', barX + 10, barY + 15);\r\n        this.ctx.fillText('P', barX + barWidth - 10, barY + 15);\r\n    }\r\n    \r\n    drawPhaseSpacePlot() {\r\n        const plotWidth = 200;\r\n        const plotHeight = 150;\r\n        const plotX = this.ctx.canvas.width - plotWidth - 20;\r\n        const plotY = 20;\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.fillRect(plotX, plotY, plotWidth, plotHeight);\r\n        this.ctx.strokeStyle = '#333';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(plotX, plotY, plotWidth, plotHeight);\r\n        \r\n        if (this.phaseSpaceData.length > 1) {\r\n            // Find data ranges\r\n            const angles = this.phaseSpaceData.map(d => d.angle);\r\n            const velocities = this.phaseSpaceData.map(d => d.velocity);\r\n            const minAngle = Math.min(...angles);\r\n            const maxAngle = Math.max(...angles);\r\n            const minVel = Math.min(...velocities);\r\n            const maxVel = Math.max(...velocities);\r\n            \r\n            // Draw phase space trajectory\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#9b59b6';\r\n            this.ctx.lineWidth = 2;\r\n            \r\n            for (let i = 0; i < this.phaseSpaceData.length; i++) {\r\n                const x = plotX + ((this.phaseSpaceData[i].angle - minAngle) / (maxAngle - minAngle)) * plotWidth;\r\n                const y = plotY + plotHeight - ((this.phaseSpaceData[i].velocity - minVel) / (maxVel - minVel)) * plotHeight;\r\n                \r\n                if (i === 0) {\r\n                    this.ctx.moveTo(x, y);\r\n                } else {\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Labels\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Phase Space', plotX + plotWidth / 2, plotY - 5);\r\n        this.ctx.fillText('θ', plotX + plotWidth / 2, plotY + plotHeight + 15);\r\n        this.ctx.fillText('ω', plotX - 10, plotY + plotHeight / 2);\r\n    }\r\n    \r\n    drawPendulumInfo() {\r\n        const infoX = 20;\r\n        const infoY = 60;\r\n        \r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = infoY;\r\n        this.ctx.fillText(`Angle: ${(this.angle * 180 / Math.PI).toFixed(1)}°`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Angular Velocity: ${this.angularVelocity.toFixed(2)} rad/s`, infoX, y);\r\n        y += 20;\r\n        \r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        this.ctx.fillText(`Kinetic Energy: ${kineticEnergy.toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Potential Energy: ${potentialEnergy.toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Total Energy: ${(kineticEnergy + potentialEnergy).toFixed(1)} J`, infoX, y);\r\n        y += 20;\r\n        \r\n        // Period information\r\n        if (this.periods.length > 0) {\r\n            const avgPeriod = this.periods.reduce((sum, p) => sum + p, 0) / this.periods.length;\r\n            this.ctx.fillText(`Measured Period: ${avgPeriod.toFixed(2)} s`, infoX, y);\r\n            y += 20;\r\n        }\r\n        \r\n        const theoreticalPeriod = 2 * Math.PI * Math.sqrt(this.length / (this.gravity * 9.8));\r\n        this.ctx.fillText(`Theoretical Period: ${theoreticalPeriod.toFixed(2)} s`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Max Amplitude: ${(this.maxAmplitude * 180 / Math.PI).toFixed(1)}°`, infoX, y);\r\n        y += 20;\r\n        \r\n        // Air resistance information\r\n        const velocityMagnitude = Math.abs(this.angularVelocity);\r\n        const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n        this.ctx.fillText(`Air Resistance: ${airResistanceForce.toFixed(3)} N`, infoX, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Damping Coefficient: ${this.damping.toFixed(3)}`, infoX, y);\r\n    }\r\n    \r\n    getStats() {\r\n        const theoreticalPeriod = 2 * Math.PI * Math.sqrt(this.length / (this.gravity * 9.8));\r\n        const kineticEnergy = 0.5 * this.mass * this.length * this.length * this.angularVelocity * this.angularVelocity;\r\n        const potentialEnergy = this.mass * this.gravity * 9.8 * this.length * (1 - Math.cos(this.angle));\r\n        const velocityMagnitude = Math.abs(this.angularVelocity);\r\n        const airResistanceForce = this.damping * velocityMagnitude * velocityMagnitude;\r\n        \r\n        return {\r\n            angle: this.angle * 180 / Math.PI,\r\n            angularVelocity: this.angularVelocity,\r\n            theoreticalPeriod: theoreticalPeriod,\r\n            measuredPeriod: this.periods.length > 0 ? this.periods.reduce((sum, p) => sum + p, 0) / this.periods.length : 0,\r\n            kineticEnergy: kineticEnergy,\r\n            potentialEnergy: potentialEnergy,\r\n            totalEnergy: kineticEnergy + potentialEnergy,\r\n            maxAmplitude: this.maxAmplitude * 180 / Math.PI,\r\n            airResistanceForce: airResistanceForce,\r\n            dampingCoefficient: this.damping,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawPendulumLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Simple Pendulum', this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Draw mathematical formulas in a more compact format\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`T = 2π√(L/g)  |  θ̈ + (g/L)sin(θ) = 0  |  E = ½mL²θ̇² + mgL(1-cos(θ))`, \r\n                          this.ctx.canvas.width / 2, 45);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n// Orbital Motion Simulation\r\nexport class OrbitalMotion {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.centerX = 400;\r\n        this.centerY = 300;\r\n        this.semiMajorAxis = 200;\r\n        this.eccentricity = 0.2;\r\n        this.centralMass = 1.0;\r\n        this.speed = 1.0;\r\n        this.time = 0;\r\n        this.angle = 0;\r\n        this.showOrbitPath = true;\r\n        this.showVelocityVector = false;\r\n        this.showKeplerInfo = false;\r\n        \r\n        // Calculate orbital parameters\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    calculateOrbitalParameters() {\r\n        // Calculate semi-minor axis from eccentricity\r\n        this.semiMinorAxis = this.semiMajorAxis * Math.sqrt(1 - this.eccentricity * this.eccentricity);\r\n        \r\n        // Calculate focal distance\r\n        this.focalDistance = this.semiMajorAxis * this.eccentricity;\r\n        \r\n        // Calculate orbital period (Kepler's Third Law)\r\n        this.period = 2 * Math.PI * Math.sqrt(Math.pow(this.semiMajorAxis, 3) / this.centralMass);\r\n        \r\n        // Calculate angular velocity\r\n        this.angularVelocity = 2 * Math.PI / this.period;\r\n        \r\n        // Store orbit path points\r\n        this.orbitPath = [];\r\n        for (let i = 0; i <= 360; i += 2) {\r\n            const angle = (i * Math.PI) / 180;\r\n            const r = this.semiMajorAxis * (1 - this.eccentricity * this.eccentricity) / \r\n                     (1 + this.eccentricity * Math.cos(angle));\r\n            const x = this.centerX + r * Math.cos(angle);\r\n            const y = this.centerY + r * Math.sin(angle);\r\n            this.orbitPath.push({ x, y });\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setEccentricity(eccentricity) {\r\n        this.eccentricity = eccentricity;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setSemiMajorAxis(axis) {\r\n        this.semiMajorAxis = axis;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setCentralMass(mass) {\r\n        this.centralMass = mass;\r\n        this.calculateOrbitalParameters();\r\n    }\r\n    \r\n    setShowOrbitPath(show) {\r\n        this.showOrbitPath = show;\r\n    }\r\n    \r\n    setShowVelocityVector(show) {\r\n        this.showVelocityVector = show;\r\n    }\r\n    \r\n    setShowKeplerInfo(show) {\r\n        this.showKeplerInfo = show;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.angle = 0;\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        \r\n        // Update orbital angle\r\n        this.angle += this.angularVelocity * dt * 100;\r\n        if (this.angle > 2 * Math.PI) {\r\n            this.angle -= 2 * Math.PI;\r\n        }\r\n        \r\n        // Calculate current position\r\n        const r = this.semiMajorAxis * (1 - this.eccentricity * this.eccentricity) / \r\n                 (1 + this.eccentricity * Math.cos(this.angle));\r\n        this.currentX = this.centerX + r * Math.cos(this.angle);\r\n        this.currentY = this.centerY + r * Math.sin(this.angle);\r\n        \r\n        // Calculate velocity components\r\n        const velocity = this.angularVelocity * r;\r\n        this.velocityX = -velocity * Math.sin(this.angle);\r\n        this.velocityY = velocity * Math.cos(this.angle);\r\n        \r\n        // Calculate orbital energy\r\n        const kineticEnergy = 0.5 * velocity * velocity;\r\n        const potentialEnergy = -this.centralMass / r;\r\n        this.totalEnergy = kineticEnergy + potentialEnergy;\r\n        \r\n        // Track perigee and apogee\r\n        if (r < this.perigee || this.perigee === undefined) {\r\n            this.perigee = r;\r\n        }\r\n        if (r > this.apogee || this.apogee === undefined) {\r\n            this.apogee = r;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw central mass\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.arc(this.centerX, this.centerY, 15, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add glow effect\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(255, 215, 0, 0.3)';\r\n        this.ctx.arc(this.centerX, this.centerY, 25, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw orbit path\r\n        if (this.showOrbitPath && this.orbitPath.length > 1) {\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.5)';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.moveTo(this.orbitPath[0].x, this.orbitPath[0].y);\r\n            for (let i = 1; i < this.orbitPath.length; i++) {\r\n                this.ctx.lineTo(this.orbitPath[i].x, this.orbitPath[i].y);\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw orbiting object\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.arc(this.currentX, this.currentY, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add shadow\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n        this.ctx.arc(this.currentX + 2, this.currentY + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw velocity vector with enhanced visualization\r\n        if (this.showVelocityVector) {\r\n            const vectorLength = 40;\r\n            const velocity = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n            const normalizedVX = this.velocityX / velocity;\r\n            const normalizedVY = this.velocityY / velocity;\r\n            \r\n            // Draw velocity vector\r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(this.currentX, this.currentY);\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength,\r\n                this.currentY + normalizedVY * vectorLength\r\n            );\r\n            this.ctx.stroke();\r\n            \r\n            // Draw arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            const angle = Math.atan2(this.velocityY, this.velocityX);\r\n            const arrowLength = 10;\r\n            this.ctx.moveTo(\r\n                this.currentX + normalizedVX * vectorLength,\r\n                this.currentY + normalizedVY * vectorLength\r\n            );\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength - arrowLength * Math.cos(angle - Math.PI / 6),\r\n                this.currentY + normalizedVY * vectorLength - arrowLength * Math.sin(angle - Math.PI / 6)\r\n            );\r\n            this.ctx.lineTo(\r\n                this.currentX + normalizedVX * vectorLength - arrowLength * Math.cos(angle + Math.PI / 6),\r\n                this.currentY + normalizedVY * vectorLength - arrowLength * Math.sin(angle + Math.PI / 6)\r\n            );\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n            \r\n            // Draw velocity label\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`v = ${velocity.toFixed(1)}`, \r\n                this.currentX + normalizedVX * (vectorLength + 15),\r\n                this.currentY + normalizedVY * (vectorLength + 15));\r\n        }\r\n        \r\n        // Draw perigee and apogee markers\r\n        if (this.showKeplerInfo && this.perigee && this.apogee) {\r\n            // Perigee marker (closest point)\r\n            const perigeeAngle = 0; // Perigee is at angle 0\r\n            const perigeeX = this.centerX + this.perigee * Math.cos(perigeeAngle);\r\n            const perigeeY = this.centerY + this.perigee * Math.sin(perigeeAngle);\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#2ECC71';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.arc(perigeeX, perigeeY, 12, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.fillStyle = '#2ECC71';\r\n            this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText('P', perigeeX - 3, perigeeY + 3);\r\n            \r\n            // Apogee marker (farthest point)\r\n            const apogeeAngle = Math.PI; // Apogee is at angle π\r\n            const apogeeX = this.centerX + this.apogee * Math.cos(apogeeAngle);\r\n            const apogeeY = this.centerY + this.apogee * Math.sin(apogeeAngle);\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#E74C3C';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.arc(apogeeX, apogeeY, 12, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.fillStyle = '#E74C3C';\r\n            this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText('A', apogeeX - 3, apogeeY + 3);\r\n        }\r\n        \r\n        // Draw Kepler's laws information\r\n        if (this.showKeplerInfo) {\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'left';\r\n            \r\n            // Position text on the right side to avoid cutoff\r\n            const textX = this.ctx.canvas.width - 250;\r\n            const startY = 30;\r\n            \r\n            this.ctx.fillText(`Kepler's 1st Law: Elliptical orbit (e = ${this.eccentricity.toFixed(2)})`, textX, startY);\r\n            this.ctx.fillText(`Kepler's 2nd Law: Equal areas in equal times`, textX, startY + 20);\r\n            this.ctx.fillText(`Kepler's 3rd Law: T^2 ∝ a^3 (T = ${this.period.toFixed(1)}s)`, textX, startY + 40);\r\n            \r\n            // Add orbital mechanics details\r\n            if (this.perigee && this.apogee) {\r\n                this.ctx.fillText(`Perigee: ${this.perigee.toFixed(0)}px`, textX, startY + 60);\r\n                this.ctx.fillText(`Apogee: ${this.apogee.toFixed(0)}px`, textX, startY + 80);\r\n                this.ctx.fillText(`Semi-major axis: ${this.semiMajorAxis}px`, textX, startY + 100);\r\n            }\r\n            \r\n            // Show current orbital position info\r\n            const currentDistance = Math.sqrt(\r\n                Math.pow(this.currentX - this.centerX, 2) + \r\n                Math.pow(this.currentY - this.centerY, 2)\r\n            );\r\n            const currentSpeed = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n            this.ctx.fillText(`Current distance: ${currentDistance.toFixed(0)}px`, textX, startY + 120);\r\n            this.ctx.fillText(`Current speed: ${currentSpeed.toFixed(1)}`, textX, startY + 140);\r\n            \r\n            // Show orbital energy\r\n            if (this.totalEnergy !== undefined) {\r\n                this.ctx.fillText(`Total energy: ${this.totalEnergy.toFixed(1)}`, textX, startY + 160);\r\n            }\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawOrbitalLabels();\r\n    }\r\n    \r\n    getStats() {\r\n        const distance = Math.sqrt(\r\n            Math.pow(this.currentX - this.centerX, 2) + \r\n            Math.pow(this.currentY - this.centerY, 2)\r\n        );\r\n        const speed = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n        \r\n        return {\r\n            period: this.period,\r\n            speed: speed,\r\n            distance: distance,\r\n            eccentricity: this.eccentricity,\r\n            perigee: this.perigee,\r\n            apogee: this.apogee,\r\n            semiMajorAxis: this.semiMajorAxis,\r\n            totalEnergy: this.totalEnergy,\r\n            time: this.time\r\n        };\r\n    }\r\n    \r\n    drawOrbitalLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Orbital Motion', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`r = a(1-e²)/(1+ecos(θ))`, \r\n                          this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Draw Kepler's laws\r\n        this.ctx.fillText(`T² ∝ a³`, \r\n                          this.ctx.canvas.width / 2, 70);\r\n        \r\n        // Draw energy conservation\r\n        this.ctx.fillText(`E = ½mv² - GMm/r`, \r\n                          this.ctx.canvas.width / 2, 90);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n\r\n// Collision Physics Simulation\r\nexport class CollisionPhysics {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.balls = [];\r\n        this.ballCount = 5;\r\n        this.restitution = 0.8;\r\n        this.gravity = 0.5;\r\n        this.speed = 1.0;\r\n        this.showAnalytics = false;\r\n        this.collisionType = 'elastic';\r\n        this.collisionCount = 0;\r\n        this.collisionEffects = []; // Track collision effects for visual feedback\r\n        \r\n        this.initializeBalls();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setBallCount(count) {\r\n        this.ballCount = count;\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    setRestitution(restitution) {\r\n        this.restitution = restitution;\r\n    }\r\n    \r\n\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n    setCollisionType(type) {\r\n        this.collisionType = type;\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    initializeBalls() {\r\n        this.balls = [];\r\n        \r\n        if (this.collisionType === 'head-on') {\r\n            // Head-on collision: two balls moving toward each other\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            this.balls = [\r\n                {\r\n                    x: canvasWidth * 0.25,\r\n                    y: canvasHeight * 0.5,\r\n                    vx: 80,\r\n                    vy: 0,\r\n                    radius: 20,\r\n                    mass: 2\r\n                },\r\n                {\r\n                    x: canvasWidth * 0.75,\r\n                    y: canvasHeight * 0.5,\r\n                    vx: -80,\r\n                    vy: 0,\r\n                    radius: 20,\r\n                    mass: 2\r\n                }\r\n            ];\r\n        } else if (this.collisionType === 'elastic') {\r\n            // Multiple balls with elastic collisions - respect ball count\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.25}, {x: canvasWidth * 0.8, y: canvasHeight * 0.25},\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.5}, {x: canvasWidth * 0.8, y: canvasHeight * 0.5},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}, {x: canvasWidth * 0.375, y: canvasHeight * 0.2}, {x: canvasWidth * 0.625, y: canvasHeight * 0.55},\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.55}, {x: canvasWidth * 0.75, y: canvasHeight * 0.2}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 120,\r\n                    vy: (Math.random() - 0.5) * 120,\r\n                    radius: 15 + Math.random() * 10,\r\n                    mass: 1 + Math.random() * 2\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'inelastic') {\r\n            // Inelastic collisions with energy loss\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.25}, {x: canvasWidth * 0.75, y: canvasHeight * 0.25},\r\n                {x: canvasWidth * 0.25, y: canvasHeight * 0.5}, {x: canvasWidth * 0.75, y: canvasHeight * 0.5},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 100,\r\n                    vy: (Math.random() - 0.5) * 100,\r\n                    radius: 18 + Math.random() * 8,\r\n                    mass: 1.5 + Math.random() * 1.5\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'mixed') {\r\n            // Mixed collision types with varying properties\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const positions = [\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.2}, {x: canvasWidth * 0.8, y: canvasHeight * 0.2},\r\n                {x: canvasWidth * 0.2, y: canvasHeight * 0.55}, {x: canvasWidth * 0.8, y: canvasHeight * 0.55},\r\n                {x: canvasWidth * 0.5, y: canvasHeight * 0.375}, {x: canvasWidth * 0.375, y: canvasHeight * 0.3}, {x: canvasWidth * 0.625, y: canvasHeight * 0.45}\r\n            ];\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, positions.length); i++) {\r\n                const pos = positions[i];\r\n                this.balls.push({\r\n                    x: pos.x,\r\n                    y: pos.y,\r\n                    vx: (Math.random() - 0.5) * 110,\r\n                    vy: (Math.random() - 0.5) * 110,\r\n                    radius: 12 + Math.random() * 12,\r\n                    mass: 0.8 + Math.random() * 2.4\r\n                });\r\n            }\r\n        } else if (this.collisionType === 'cascade') {\r\n            // Cascade collision - balls in a line\r\n            const canvasWidth = this.ctx.canvas.width;\r\n            const canvasHeight = this.ctx.canvas.height;\r\n            const spacing = canvasWidth * 0.075;\r\n            const startX = canvasWidth * 0.125;\r\n            const y = canvasHeight * 0.375;\r\n            \r\n            for (let i = 0; i < Math.min(this.ballCount, 8); i++) {\r\n                this.balls.push({\r\n                    x: startX + i * spacing,\r\n                    y: y,\r\n                    vx: i === 0 ? 100 : 0, // Only first ball moves\r\n                    vy: 0,\r\n                    radius: 15,\r\n                    mass: 1.5\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Reset collision count\r\n        this.collisionCount = 0;\r\n        this.lastCollision = null;\r\n    }\r\n    \r\n    reset() {\r\n        this.collisionCount = 0;\r\n        this.collisionEffects = [];\r\n        this.initializeBalls();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 5; // Fixed time step calculation\r\n        \r\n        // Update collision effects\r\n        this.collisionEffects = this.collisionEffects.filter(effect => {\r\n            effect.time += dt;\r\n            return effect.time < effect.maxTime;\r\n        });\r\n        \r\n        // Update ball positions\r\n        this.balls.forEach(ball => {\r\n            ball.x += ball.vx * dt;\r\n            ball.y += ball.vy * dt;\r\n            \r\n            // Apply gravity\r\n            ball.vy += this.gravity * 9.8 * dt;\r\n            \r\n            // Apply minimal friction for stability\r\n            ball.vx *= (1 - 0.02 * dt);\r\n            ball.vy *= (1 - 0.02 * dt);\r\n            \r\n            // Bounce off canvas boundaries with energy loss\r\n            if (ball.x - ball.radius < 0 || ball.x + ball.radius > this.ctx.canvas.width) {\r\n                ball.vx *= -this.restitution;\r\n                ball.x = Math.max(ball.radius, Math.min(this.ctx.canvas.width - ball.radius, ball.x));\r\n                \r\n                // Add wall collision effect\r\n                this.collisionEffects.push({\r\n                    x: ball.x,\r\n                    y: ball.y,\r\n                    time: 0,\r\n                    maxTime: 0.3,\r\n                    type: 'wall'\r\n                });\r\n            }\r\n            \r\n            if (ball.y - ball.radius < 0 || ball.y + ball.radius > this.ctx.canvas.height) {\r\n                ball.vy *= -this.restitution;\r\n                ball.y = Math.max(ball.radius, Math.min(this.ctx.canvas.height - ball.radius, ball.y));\r\n                \r\n                // Add wall collision effect\r\n                this.collisionEffects.push({\r\n                    x: ball.x,\r\n                    y: ball.y,\r\n                    time: 0,\r\n                    maxTime: 0.3,\r\n                    type: 'wall'\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Check for collisions between balls\r\n        for (let i = 0; i < this.balls.length; i++) {\r\n            for (let j = i + 1; j < this.balls.length; j++) {\r\n                this.checkCollision(this.balls[i], this.balls[j]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    checkCollision(ball1, ball2) {\r\n        const dx = ball2.x - ball1.x;\r\n        const dy = ball2.y - ball1.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    \r\n        if (distance < ball1.radius + ball2.radius) {\r\n            this.collisionCount++;\r\n            \r\n            // Add collision effect for visual feedback\r\n            this.collisionEffects.push({\r\n                x: (ball1.x + ball2.x) / 2,\r\n                y: (ball1.y + ball2.y) / 2,\r\n                time: 0,\r\n                maxTime: 0.5,\r\n                type: 'ball'\r\n            });\r\n            \r\n            // Normalize collision vector\r\n            const nx = dx / distance;\r\n            const ny = dy / distance;\r\n            \r\n            // Relative velocity\r\n            const dvx = ball2.vx - ball1.vx;\r\n            const dvy = ball2.vy - ball1.vy;\r\n            const relativeVelocity = dvx * nx + dvy * ny;\r\n            \r\n            // Don't resolve if balls are moving apart\r\n            if (relativeVelocity > 0) return;\r\n            \r\n            // Calculate impulse based on collision type\r\n            let effectiveRestitution = this.restitution;\r\n            if (this.collisionType === 'inelastic') {\r\n                effectiveRestitution = 0.3; // More energy loss\r\n            } else if (this.collisionType === 'mixed') {\r\n                effectiveRestitution = 0.5 + Math.random() * 0.3; // Variable energy loss\r\n            }\r\n            \r\n            // Calculate impulse\r\n            const impulse = -(1 + effectiveRestitution) * relativeVelocity / \r\n                           (1/ball1.mass + 1/ball2.mass);\r\n            \r\n            // Update velocities\r\n            ball1.vx -= (impulse * nx) / ball1.mass;\r\n            ball1.vy -= (impulse * ny) / ball1.mass;\r\n            ball2.vx += (impulse * nx) / ball2.mass;\r\n            ball2.vy += (impulse * ny) / ball2.mass;\r\n            \r\n            // Separate balls to prevent sticking\r\n            const overlap = ball1.radius + ball2.radius - distance;\r\n            const separationX = nx * overlap * 0.5;\r\n            const separationY = ny * overlap * 0.5;\r\n            \r\n            ball1.x -= separationX;\r\n            ball1.y -= separationY;\r\n            ball2.x += separationX;\r\n            ball2.y += separationY;\r\n            \r\n            // Track collision energy\r\n            const preCollisionEnergy = 0.5 * ball1.mass * (ball1.vx * ball1.vx + ball1.vy * ball1.vy) +\r\n                                      0.5 * ball2.mass * (ball2.vx * ball2.vx + ball2.vy * ball2.vy);\r\n            \r\n            // Store collision data for analysis\r\n            this.lastCollision = {\r\n                ball1: { mass: ball1.mass, velocity: Math.sqrt(ball1.vx * ball1.vx + ball1.vy * ball1.vy) },\r\n                ball2: { mass: ball2.mass, velocity: Math.sqrt(ball2.vx * ball2.vx + ball2.vy * ball2.vy) },\r\n                energy: preCollisionEnergy,\r\n                restitution: effectiveRestitution\r\n            };\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Draw modern gradient background using full canvas\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw enhanced collision effects with modern styling\r\n        this.collisionEffects.forEach(effect => {\r\n            const alpha = 1 - (effect.time / effect.maxTime);\r\n            const radius = 40 * (1 - effect.time / effect.maxTime);\r\n            \r\n            if (effect.type === 'ball') {\r\n                // Modern ball collision effect with multiple rings\r\n                for (let i = 0; i < 3; i++) {\r\n                    const ringRadius = radius * (0.3 + i * 0.3);\r\n                    const ringAlpha = alpha * (1 - i * 0.3);\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(255, 107, 107, ${ringAlpha})`;\r\n                    this.ctx.lineWidth = 3 - i;\r\n                    this.ctx.arc(effect.x, effect.y, ringRadius, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                }\r\n                \r\n                // Add sparkle effect\r\n                for (let i = 0; i < 8; i++) {\r\n                    const angle = (i * Math.PI * 2) / 8;\r\n                    const sparkleX = effect.x + Math.cos(angle) * radius * 0.8;\r\n                    const sparkleY = effect.y + Math.sin(angle) * radius * 0.8;\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.8})`;\r\n                    this.ctx.arc(sparkleX, sparkleY, 2, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                }\r\n            } else if (effect.type === 'wall') {\r\n                // Modern wall collision effect\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = `rgba(100, 150, 255, ${alpha})`;\r\n                this.ctx.lineWidth = 4;\r\n                this.ctx.arc(effect.x, effect.y, radius * 0.7, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n                \r\n                // Add ripple effect\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = `rgba(100, 150, 255, ${alpha * 0.5})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.arc(effect.x, effect.y, radius * 0.4, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n        \r\n        // Draw enhanced balls with modern styling\r\n        this.balls.forEach((ball, index) => {\r\n            // Create gradient for each ball based on velocity\r\n            const velocity = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n            const normalizedVelocity = Math.min(velocity / 100, 1);\r\n            \r\n            // Dynamic color based on velocity and ball index\r\n            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\r\n            const baseColor = colors[index % colors.length];\r\n            \r\n            // Ball shadow with modern blur effect\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n            this.ctx.arc(ball.x + 3, ball.y + 3, ball.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball gradient\r\n            const gradient = this.ctx.createRadialGradient(\r\n                ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, 0,\r\n                ball.x, ball.y, ball.radius\r\n            );\r\n            gradient.addColorStop(0, baseColor);\r\n            gradient.addColorStop(0.7, baseColor);\r\n            gradient.addColorStop(1, '#1a1a2e');\r\n            \r\n            // Ball main with gradient\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball highlight with velocity-based intensity\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + normalizedVelocity * 0.4})`;\r\n            this.ctx.arc(ball.x - ball.radius * 0.3, ball.y - ball.radius * 0.3, ball.radius * 0.5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Ball border with velocity-based color\r\n            this.ctx.strokeStyle = normalizedVelocity > 0.5 ? '#FFD700' : '#333';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.stroke();\r\n            \r\n            // Draw enhanced momentum vectors with modern styling\r\n            if (this.showAnalytics) {\r\n                const velocity = Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n                if (velocity > 1) { // Only show vectors for moving balls\r\n                    const vectorLength = 50;\r\n                    const normalizedVX = ball.vx / velocity;\r\n                    const normalizedVY = ball.vy / velocity;\r\n                    \r\n                    // Vector glow effect\r\n                this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(78, 205, 196, 0.3)`;\r\n                    this.ctx.lineWidth = 6;\r\n                this.ctx.moveTo(ball.x, ball.y);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                this.ctx.stroke();\r\n                \r\n                    // Main momentum vector\r\n                this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = '#4ECDC4';\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.moveTo(ball.x, ball.y);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrowhead with gradient\r\n                    const angle = Math.atan2(ball.vy, ball.vx);\r\n                    const arrowLength = 12;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = '#4ECDC4';\r\n                    this.ctx.moveTo(ball.x + normalizedVX * vectorLength, ball.y + normalizedVY * vectorLength);\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength - arrowLength * Math.cos(angle - Math.PI / 6),\r\n                                  ball.y + normalizedVY * vectorLength - arrowLength * Math.sin(angle - Math.PI / 6));\r\n                    this.ctx.lineTo(ball.x + normalizedVX * vectorLength - arrowLength * Math.cos(angle + Math.PI / 6),\r\n                                  ball.y + normalizedVY * vectorLength - arrowLength * Math.sin(angle + Math.PI / 6));\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n                    \r\n                    // Velocity magnitude label with background\r\n                    const labelX = ball.x + normalizedVX * (vectorLength + 20);\r\n                    const labelY = ball.y + normalizedVY * (vectorLength + 20);\r\n                    \r\n                    // Label background\r\n                    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n                    this.ctx.fillRect(labelX - 25, labelY - 8, 50, 16);\r\n                    \r\n                    // Label text\r\n                    this.ctx.fillStyle = '#4ECDC4';\r\n                    this.ctx.font = 'bold 13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n                    this.ctx.textAlign = 'center';\r\n                    this.ctx.fillText(`v = ${velocity.toFixed(1)}`, labelX, labelY + 3);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Draw collision info\r\n        if (this.showAnalytics) {\r\n            this.drawCollisionInfo();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawCollisionLabels();\r\n    }\r\n    \r\n    drawCollisionInfo() {\r\n        // Modern info panel background with responsive sizing\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        \r\n        // Calculate responsive panel size (20% of canvas width, max 300px)\r\n        const panelWidth = Math.min(canvasWidth * 0.2, 300);\r\n        const panelHeight = Math.min(canvasHeight * 0.25, 250);\r\n        const panelX = 10;\r\n        const panelY = 10;\r\n        \r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = panelY + 25;\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.fillText(`Collision Physics`, panelX + 10, y);\r\n        y += 25;\r\n        \r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText(`Scenario: ${this.collisionType}`, panelX + 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Bounciness: ${this.restitution}`, panelX + 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Collisions: ${this.collisionCount}`, panelX + 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Objects: ${this.balls.length}`, panelX + 10, y);\r\n        y += 25;\r\n        \r\n        // Show last collision analysis with modern styling\r\n        if (this.lastCollision) {\r\n            this.ctx.fillStyle = '#FFD700';\r\n            this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`Last Collision Analysis:`, panelX + 10, y);\r\n            y += 20;\r\n            \r\n            this.ctx.font = '13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillStyle = '#FF6B6B';\r\n            this.ctx.fillText(`  Ball 1: m=${this.lastCollision.ball1.mass}, v=${this.lastCollision.ball1.velocity.toFixed(1)}`, panelX + 10, y);\r\n            y += 15;\r\n            this.ctx.fillStyle = '#4ECDC4';\r\n            this.ctx.fillText(`  Ball 2: m=${this.lastCollision.ball2.mass}, v=${this.lastCollision.ball2.velocity.toFixed(1)}`, panelX + 10, y);\r\n            y += 15;\r\n            this.ctx.fillStyle = '#FFEAA7';\r\n            this.ctx.fillText(`  Energy: ${this.lastCollision.energy.toFixed(1)}`, panelX + 10, y);\r\n            y += 15;\r\n            this.ctx.fillStyle = '#DDA0DD';\r\n            this.ctx.fillText(`  Effective e: ${this.lastCollision.restitution.toFixed(2)}`, panelX + 10, y);\r\n            y += 25;\r\n        }\r\n        \r\n        // Physics principles with modern styling\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Physics Principles:`, panelX + 10, y);\r\n        y += 20;\r\n        \r\n        this.ctx.font = '13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.fillText(`  • Momentum conservation`, panelX + 10, y);\r\n        y += 15;\r\n        this.ctx.fillText(`  • Energy transfer in collisions`, panelX + 10, y);\r\n        y += 15;\r\n        this.ctx.fillText(`  • Impulse = Force × Time`, panelX + 10, y);\r\n        y += 15;\r\n        this.ctx.fillStyle = '#96CEB4';\r\n        this.ctx.fillText(`  • Elastic: e = 1 (energy conserved)`, panelX + 10, y);\r\n        y += 15;\r\n        this.ctx.fillStyle = '#FF6B6B';\r\n        this.ctx.fillText(`  • Inelastic: e < 1 (energy lost)`, panelX + 10, y);\r\n    }\r\n    \r\n    getStats() {\r\n        let totalMomentum = 0;\r\n        let totalEnergy = 0;\r\n        \r\n        this.balls.forEach(ball => {\r\n            const momentum = ball.mass * Math.sqrt(ball.vx * ball.vx + ball.vy * ball.vy);\r\n            const energy = 0.5 * ball.mass * (ball.vx * ball.vx + ball.vy * ball.vy);\r\n            totalMomentum += momentum;\r\n            totalEnergy += energy;\r\n        });\r\n        \r\n        return {\r\n            ballCount: this.balls.length,\r\n            totalMomentum: totalMomentum,\r\n            totalEnergy: totalEnergy,\r\n            collisionCount: this.collisionCount\r\n        };\r\n    }\r\n    \r\n    drawCollisionLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Collision Physics', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.fillText(`p = mv`, \r\n                          this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Draw momentum conservation\r\n        this.ctx.fillText(`Σp = constant`, \r\n                          this.ctx.canvas.width / 2, 70);\r\n        \r\n        // Draw energy relation\r\n        this.ctx.fillText(`KE = ½mv²`, \r\n                          this.ctx.canvas.width / 2, 90);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n// Friction & Inclined Planes Simulation\r\nexport class FrictionInclinedPlanes {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.object = {\r\n            x: 100,\r\n            y: 200,\r\n            vx: 0,\r\n            vy: 0\r\n        };\r\n        this.inclineAngle = 20;\r\n        this.frictionCoefficient = 0.3;\r\n        this.objectMass = 5;\r\n        this.initialVelocity = 50;\r\n        this.gravity = 1.0;\r\n        this.speed = 1.0;\r\n        this.showAnalytics = false;\r\n        \r\n        this.resetObject();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setInclineAngle(angle) {\r\n        this.inclineAngle = angle;\r\n        this.resetObject();\r\n    }\r\n    \r\n    setFrictionCoefficient(coefficient) {\r\n        this.frictionCoefficient = coefficient;\r\n    }\r\n    \r\n    setObjectMass(mass) {\r\n        this.objectMass = mass;\r\n    }\r\n    \r\n    setInitialVelocity(velocity) {\r\n        this.initialVelocity = velocity;\r\n        this.resetObject();\r\n    }\r\n    \r\n    setGravity(gravity) {\r\n        this.gravity = gravity;\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n\r\n    \r\n    resetObject() {\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const startX = canvasWidth * 0.125;\r\n        this.object.x = startX;\r\n        \r\n        // Calculate adjusted start position based on current angle\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startY = canvasHeight * 0.5;\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        \r\n        this.object.y = adjustedStartY - 15 - 18 * Math.cos(angleRad);\r\n        this.object.vx = this.initialVelocity * Math.cos(angleRad);\r\n        this.object.vy = 0;\r\n    }\r\n    \r\n    reset() {\r\n        this.resetObject();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 2; // Standardized time step scaling\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        \r\n        // Calculate forces\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n\r\n        let netForce = 0;\r\n        if (Math.abs(this.object.vx) < 1e-4) {\r\n            // Object is at rest\r\n            if (Math.abs(parallelForce) > frictionForce) {\r\n                // Static friction is overcome, object starts moving\r\n                netForce = parallelForce - Math.sign(parallelForce) * frictionForce;\r\n            } else {\r\n                // Static friction holds object in place\r\n                netForce = 0;\r\n                this.object.vx = 0;\r\n            }\r\n        } else {\r\n            // Object is moving, use kinetic friction (always opposes motion)\r\n            netForce = parallelForce - Math.sign(this.object.vx) * frictionForce;\r\n        }\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        // Update velocity\r\n        this.object.vx += acceleration * dt;\r\n        \r\n        // Update position\r\n        this.object.x += this.object.vx * dt;\r\n        \r\n        // Calculate incline length and end position with adjusted start\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startX = canvasWidth * 0.125;\r\n        const startY = canvasHeight * 0.5;\r\n        const endX = startX + inclineLength * Math.cos(angleRad);\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        \r\n        // Calculate how much to move the incline up to keep it within bounds\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        \r\n        // Constrain object to stay within the incline\r\n        if (this.object.x > endX) {\r\n            this.object.x = endX;\r\n            this.object.vx = 0;\r\n        }\r\n        \r\n        // Position object ON TOP of the incline surface (not embedded)\r\n        this.object.y = adjustedStartY + (this.object.x - startX) * Math.tan(angleRad) - 15 - 18 * Math.cos(angleRad);\r\n    }\r\n    \r\n    render() {\r\n        // Draw modern gradient background using full canvas\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#1a1a2e');\r\n        gradient.addColorStop(1, '#16213e');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        // Use canvas dimensions for incline positioning\r\n        const canvasWidth = this.ctx.canvas.width;\r\n        const canvasHeight = this.ctx.canvas.height;\r\n        const inclineLength = canvasWidth * 0.75;\r\n        const startX = canvasWidth * 0.125;\r\n        const startY = canvasHeight * 0.5;\r\n        const endX = startX + inclineLength * Math.cos(angleRad);\r\n        const endY = startY + inclineLength * Math.sin(angleRad);\r\n        \r\n        // Calculate how much to move the incline up to keep it within bounds\r\n        const maxEndY = canvasHeight * 0.95;\r\n        const verticalOffset = Math.max(0, endY - maxEndY);\r\n        const adjustedStartY = startY - verticalOffset;\r\n        const adjustedEndY = endY - verticalOffset;\r\n        const objectSize = 15;\r\n\r\n        // Draw subtle grid/ruler along the incline\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = 'rgba(80,80,80,0.25)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let i = 0; i <= inclineLength; i += 40) {\r\n            const x = startX + i * Math.cos(angleRad);\r\n            const y = adjustedStartY + i * Math.sin(angleRad);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            this.ctx.lineTo(x - 8 * Math.sin(angleRad), y + 8 * Math.cos(angleRad));\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.restore();\r\n\r\n        // Draw enhanced incline surface with modern styling\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(startX, adjustedStartY);\r\n        this.ctx.lineTo(endX, adjustedEndY);\r\n        this.ctx.lineTo(endX + 20 * Math.sin(angleRad), adjustedEndY - 20 * Math.cos(angleRad));\r\n        this.ctx.lineTo(startX + 20 * Math.sin(angleRad), adjustedStartY - 20 * Math.cos(angleRad));\r\n        this.ctx.closePath();\r\n        \r\n        // Modern surface colors - use generic surface appearance\r\n        const surfaceColor = '#f5f5f5';\r\n        const textureColor = '#757575';\r\n        \r\n        // Main surface fill\r\n        this.ctx.fillStyle = surfaceColor;\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced gradient shading\r\n        const surfaceGradient = this.ctx.createLinearGradient(startX, adjustedStartY, endX, adjustedEndY);\r\n        surfaceGradient.addColorStop(0, 'rgba(255,255,255,0.3)');\r\n        surfaceGradient.addColorStop(0.5, 'rgba(255,255,255,0.1)');\r\n        surfaceGradient.addColorStop(1, 'rgba(0,0,0,0.2)');\r\n        this.ctx.fillStyle = surfaceGradient;\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced texture pattern\r\n        this.ctx.strokeStyle = textureColor;\r\n        this.ctx.lineWidth = 1.5;\r\n        for (let i = 0; i < inclineLength; i += 20) {\r\n            const x = startX + i * Math.cos(angleRad);\r\n            const y = adjustedStartY + i * Math.sin(angleRad);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            this.ctx.lineTo(x + 15 * Math.sin(angleRad), y - 15 * Math.cos(angleRad));\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.restore();\r\n            \r\n        // Draw angle indicator (arc/protractor)\r\n        this.ctx.save();\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n        this.ctx.arc(startX, adjustedStartY, 38, 0, angleRad, false);\r\n            this.ctx.stroke();\r\n        // Angle label\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText(`${this.inclineAngle}°`, startX + 44 * Math.cos(angleRad / 2), adjustedStartY + 44 * Math.sin(angleRad / 2));\r\n        this.ctx.restore();\r\n\r\n        // Draw enhanced object with modern styling\r\n        this.ctx.save();\r\n        this.ctx.translate(this.object.x, this.object.y);\r\n        this.ctx.rotate(angleRad);\r\n        \r\n        // Enhanced 3D shadow effect\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';\r\n        this.ctx.fillRect(-objectSize + 4, -objectSize + 4, objectSize * 2, objectSize * 2);\r\n        \r\n        // Modern gradient for the object\r\n        const objectGradient = this.ctx.createLinearGradient(-objectSize, -objectSize, objectSize, objectSize);\r\n        objectGradient.addColorStop(0, '#ff6b6b');\r\n        objectGradient.addColorStop(0.7, '#ee5a52');\r\n        objectGradient.addColorStop(1, '#c62828');\r\n        \r\n        // Main object body\r\n        this.ctx.fillStyle = objectGradient;\r\n        this.ctx.fillRect(-objectSize, -objectSize, objectSize * 2, objectSize * 2);\r\n        \r\n        // Enhanced highlight effect\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';\r\n        this.ctx.fillRect(-objectSize, -objectSize, objectSize * 2, objectSize * 0.6);\r\n        \r\n        // Modern border\r\n        this.ctx.strokeStyle = '#2c3e50';\r\n        this.ctx.lineWidth = 2.5;\r\n        this.ctx.strokeRect(-objectSize, -objectSize, objectSize * 2, objectSize * 2);\r\n        \r\n        this.ctx.restore();\r\n\r\n        // Draw analytics if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawForceVectors();\r\n            this.drawFrictionInfo();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawFrictionLabels();\r\n    }\r\n    \r\n    drawForceVectors() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = (Math.abs(this.object.vx) < 1e-4 && Math.abs(parallelForce) <= frictionForce)\r\n            ? 0\r\n            : parallelForce - Math.sign(this.object.vx || parallelForce) * frictionForce;\r\n        const objectSize = 15;\r\n        const x = this.object.x;\r\n        const y = this.object.y;\r\n\r\n        // Helper to draw an arrow\r\n        const drawArrow = (fromX, fromY, dx, dy, color, label) => {\r\n            const len = Math.sqrt(dx * dx + dy * dy);\r\n            if (len < 1) return; // Reduced minimum threshold\r\n            const normDX = dx / len;\r\n            const normDY = dy / len;\r\n            const arrowLen = Math.max(50, Math.min(120, len));\r\n            const endX = fromX + normDX * arrowLen;\r\n            const endY = fromY + normDY * arrowLen;\r\n            this.ctx.save();\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(fromX, fromY);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.strokeStyle = color;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.stroke();\r\n            // Arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(endX, endY);\r\n            this.ctx.lineTo(endX - 12 * normDX - 8 * normDY, endY - 12 * normDY + 8 * normDX);\r\n            this.ctx.lineTo(endX - 12 * normDX + 8 * normDY, endY - 12 * normDY - 8 * normDX);\r\n            this.ctx.lineTo(endX, endY);\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.fill();\r\n            // Label\r\n            this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.textAlign = 'left';\r\n            this.ctx.fillText(label, endX + 15, endY + 4);\r\n            this.ctx.restore();\r\n        };\r\n\r\n        // Gravity (downward) - Dark Blue\r\n        drawArrow(x, y, 0, weight * 0.12, '#1565C0', 'mg');\r\n        \r\n        // Parallel component of gravity (down the incline) - Orange\r\n        drawArrow(x, y, parallelForce * Math.cos(angleRad) * 0.12, parallelForce * Math.sin(angleRad) * 0.12, '#FF8C00', `mg sin(${this.inclineAngle}°)`);\r\n        \r\n        // Friction (opposes motion, along incline) - Dark Red\r\n        let frictionDir = -1;\r\n        if (Math.abs(this.object.vx) < 1e-4) {\r\n            frictionDir = -Math.sign(parallelForce);\r\n        } else {\r\n            frictionDir = -Math.sign(this.object.vx);\r\n        }\r\n        // Ensure friction force is always visible with minimum length\r\n        const frictionMagnitude = Math.max(frictionForce * 0.12, 20);\r\n        drawArrow(x, y, frictionDir * frictionMagnitude * Math.cos(angleRad), frictionDir * frictionMagnitude * Math.sin(angleRad), '#C62828', 'f');\r\n        \r\n        // Net force (along incline) - Dark Purple\r\n        if (Math.abs(netForce) > 0.1) {\r\n            drawArrow(x, y, netForce * Math.cos(angleRad) * 0.12, netForce * Math.sin(angleRad) * 0.12, '#6A1B9A', 'Fₙₑₜ');\r\n        }\r\n    }\r\n    \r\n    drawFrictionInfo() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = parallelForce - frictionForce;\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        // Modern info panel background\r\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\r\n        this.ctx.fillRect(10, 10, 280, 120);\r\n        \r\n        // Border\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(10, 10, 280, 120);\r\n        \r\n        // Modern text styling\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = 35;\r\n        this.ctx.fillText(`Friction: ${this.frictionCoefficient.toFixed(2)}`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Angle: ${this.inclineAngle}°`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Net Force: ${netForce.toFixed(1)} N`, 20, y);\r\n        y += 25;\r\n        this.ctx.fillText(`Acceleration: ${acceleration.toFixed(2)} m/s²`, 20, y);\r\n    }\r\n    \r\n    getStats() {\r\n        const angleRad = this.inclineAngle * Math.PI / 180;\r\n        const weight = this.objectMass * this.gravity * 9.8;\r\n        const normalForce = weight * Math.cos(angleRad);\r\n        const parallelForce = weight * Math.sin(angleRad);\r\n        const frictionForce = this.frictionCoefficient * normalForce;\r\n        const netForce = parallelForce - frictionForce;\r\n        const acceleration = netForce / this.objectMass;\r\n        \r\n        return {\r\n            frictionCoefficient: this.frictionCoefficient,\r\n            inclineAngle: this.inclineAngle,\r\n            netForce: netForce,\r\n            acceleration: acceleration\r\n        };\r\n    }\r\n    \r\n    drawFrictionLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Friction & Inclined Planes', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.fillText(`F = μN`, \r\n                          this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Draw force components\r\n        this.ctx.fillText(`F∥ = mg sin θ`, \r\n                          this.ctx.canvas.width / 2, 70);\r\n        \r\n        // Draw normal force\r\n        this.ctx.fillText(`N = mg cos θ`, \r\n                          this.ctx.canvas.width / 2, 90);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}","\r\n// Wave Propagation Simulation\r\nexport class WavePropagation {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.waveType = 'transverse';\r\n        this.speed = 1;\r\n        this.frequency = 1;\r\n        this.amplitude = 50;\r\n        this.wavelength = 150;\r\n        this.showAnalytics = false;\r\n        this.time = 0;\r\n        this.particles = [];\r\n        this.waveSpeed = 0; // Calculated from frequency and wavelength\r\n        this.energy = 0; // Wave energy\r\n        \r\n        this.initializeParticles();\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const particleCount = 80; // Increased for smoother waves\r\n        for (let i = 0; i < particleCount; i++) {\r\n            this.particles.push({\r\n                x: (i / particleCount) * this.ctx.canvas.width,\r\n                y: this.ctx.canvas.height / 2,\r\n                originalY: this.ctx.canvas.height / 2,\r\n                originalX: (i / particleCount) * this.ctx.canvas.width,\r\n                vx: 0,\r\n                vy: 0,\r\n                index: i\r\n            });\r\n        }\r\n    }\r\n    \r\n    calculateWaveParameters() {\r\n        // Calculate wave speed: v = f × λ\r\n        this.waveSpeed = this.frequency * this.wavelength;\r\n        // Calculate wave energy (proportional to amplitude^2 and frequency^2)\r\n        this.energy = 0.5 * this.amplitude * this.amplitude * this.frequency * this.frequency;\r\n    }\r\n    \r\n    setWaveType(type) {\r\n        this.waveType = type;\r\n        \r\n        // Reset all parameters to default values when changing wave type\r\n        this.speed = 1;\r\n        this.frequency = 1;\r\n        this.amplitude = 50;\r\n        this.wavelength = 150;\r\n        this.showAnalytics = false;\r\n        this.time = 0;\r\n        \r\n        // Reinitialize particles\r\n        this.initializeParticles();\r\n        \r\n        // Recalculate wave parameters\r\n        this.calculateWaveParameters();\r\n        \r\n        // Reset all controls to default values\r\n        const speedSlider = document.getElementById('waveSpeed');\r\n        const frequencySlider = document.getElementById('waveFrequency');\r\n        const amplitudeSlider = document.getElementById('waveAmplitude');\r\n        const waveTypeSelect = document.getElementById('waveType');\r\n        const analyticsCheckbox = document.getElementById('waveShowAnalytics');\r\n        \r\n        if (speedSlider) {\r\n            speedSlider.value = this.speed;\r\n            document.getElementById('waveSpeedValue').textContent = this.speed + 'x';\r\n        }\r\n        \r\n        if (frequencySlider) {\r\n            frequencySlider.value = this.frequency;\r\n            document.getElementById('waveFrequencyValue').textContent = this.frequency;\r\n        }\r\n        \r\n        if (amplitudeSlider) {\r\n            amplitudeSlider.value = this.amplitude;\r\n            document.getElementById('waveAmplitudeValue').textContent = this.amplitude;\r\n        }\r\n        \r\n        if (waveTypeSelect) {\r\n            waveTypeSelect.value = this.waveType;\r\n        }\r\n        \r\n        if (analyticsCheckbox) {\r\n            analyticsCheckbox.checked = this.showAnalytics;\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        // Don't recalculate wave parameters when user changes speed\r\n        // this.calculateWaveParameters();\r\n    }\r\n    \r\n    setFrequency(freq) {\r\n        this.frequency = freq;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setAmplitude(amp) {\r\n        this.amplitude = amp;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setWavelength(wavelength) {\r\n        this.wavelength = wavelength;\r\n        this.calculateWaveParameters();\r\n    }\r\n    \r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    \r\n    reset() {\r\n        // Reset all parameters to initial state\r\n        this.waveType = 'transverse';\r\n        this.speed = 1;\r\n        this.frequency = 1;\r\n        this.amplitude = 50;\r\n        this.wavelength = 150;\r\n        this.showAnalytics = false;\r\n        this.time = 0;\r\n        \r\n        // Reinitialize particles\r\n        this.initializeParticles();\r\n        \r\n        // Recalculate wave parameters\r\n        this.calculateWaveParameters();\r\n        \r\n        // Reset controls to match the reset state\r\n        const speedSlider = document.getElementById('waveSpeed');\r\n        const frequencySlider = document.getElementById('waveFrequency');\r\n        const amplitudeSlider = document.getElementById('waveAmplitude');\r\n        const waveTypeSelect = document.getElementById('waveType');\r\n        const analyticsCheckbox = document.getElementById('waveShowAnalytics');\r\n        \r\n        if (speedSlider) {\r\n            speedSlider.value = this.speed;\r\n            document.getElementById('waveSpeedValue').textContent = this.speed + 'x';\r\n        }\r\n        \r\n        if (frequencySlider) {\r\n            frequencySlider.value = this.frequency;\r\n            document.getElementById('waveFrequencyValue').textContent = this.frequency;\r\n        }\r\n        \r\n        if (amplitudeSlider) {\r\n            amplitudeSlider.value = this.amplitude;\r\n            document.getElementById('waveAmplitudeValue').textContent = this.amplitude;\r\n        }\r\n        \r\n        if (waveTypeSelect) {\r\n            waveTypeSelect.value = this.waveType;\r\n        }\r\n        \r\n        if (analyticsCheckbox) {\r\n            analyticsCheckbox.checked = this.showAnalytics;\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        // Slow down longitudinal waves for better visibility\r\n        const speedMultiplier = this.waveType === 'longitudinal' ? 1 : 5;\r\n        const dt = (deltaTime / 1000) * this.speed * speedMultiplier;\r\n        this.time += dt;\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            const phase = (particle.x / this.wavelength) * 2 * Math.PI;\r\n            const timePhase = this.time * this.frequency * 2 * Math.PI;\r\n            \r\n            let displacement = 0;\r\n            let velocity = 0;\r\n            \r\n            switch (this.waveType) {\r\n                case 'transverse':\r\n                    displacement = this.amplitude * Math.sin(phase - timePhase);\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * Math.cos(phase - timePhase);\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n\r\n                case 'longitudinal':\r\n                    // Longitudinal wave: particles move horizontally along wave direction\r\n                    // Use smaller amplitude for more visible movement\r\n                    const longitudinalAmplitude = this.amplitude * 0.5;\r\n                    displacement = longitudinalAmplitude * Math.sin(phase - timePhase);\r\n                    velocity = -longitudinalAmplitude * this.frequency * 2 * Math.PI * Math.cos(phase - timePhase);\r\n                    particle.x = particle.originalX + displacement;\r\n                    particle.y = particle.originalY; // Keep vertical position constant\r\n                    particle.vx = velocity;\r\n                    particle.vy = 0;\r\n                    // Store displacement for spring visualization\r\n                    particle.displacement = displacement;\r\n                    break;\r\n                case 'interference':\r\n                    const wave1 = this.amplitude * Math.sin(phase - timePhase);\r\n                    const wave2 = this.amplitude * Math.sin(phase + timePhase);\r\n                    displacement = wave1 + wave2;\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * \r\n                              (Math.cos(phase - timePhase) - Math.cos(phase + timePhase));\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n                case 'standing':\r\n                    displacement = this.amplitude * Math.sin(phase) * Math.cos(timePhase);\r\n                    velocity = -this.amplitude * this.frequency * 2 * Math.PI * Math.sin(phase) * Math.sin(timePhase);\r\n                    particle.y = particle.originalY + displacement;\r\n                    particle.vy = velocity;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Draw grid and scale markers\r\n        this.drawGrid();\r\n        \r\n        // Draw waveform based on wave type\r\n        if (this.waveType === 'longitudinal') {\r\n            this.drawLongitudinalWaveform();\r\n        } else {\r\n        this.drawEnhancedWaveform();\r\n        }\r\n        \r\n        // Always draw particles with velocity-based coloring\r\n        this.drawParticles();\r\n        \r\n        // Draw wave direction indicator\r\n        this.drawWaveDirection();\r\n        \r\n        // Draw canvas labels\r\n        this.drawCanvasLabels();\r\n        \r\n        // Draw analytics if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawVelocityVectors();\r\n            this.drawWaveInfo();\r\n            this.drawEnergyVisualization();\r\n        }\r\n    }\r\n    \r\n    drawGrid() {\r\n        // Draw wavelength markers\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.setLineDash([5, 5]);\r\n        \r\n        for (let x = 0; x < this.ctx.canvas.width; x += this.wavelength) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.ctx.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        this.ctx.setLineDash([]);\r\n        \r\n        // Draw amplitude markers\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let y = centerY - this.amplitude; y <= centerY + this.amplitude; y += this.amplitude / 2) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.ctx.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawEnhancedWaveform() {\r\n        this.ctx.beginPath();\r\n        \r\n        // Create gradient for waveform\r\n        const gradient = this.ctx.createLinearGradient(0, 0, this.ctx.canvas.width, 0);\r\n        gradient.addColorStop(0, '#667eea');\r\n        gradient.addColorStop(0.5, '#764ba2');\r\n        gradient.addColorStop(1, '#667eea');\r\n        \r\n        this.ctx.strokeStyle = gradient;\r\n        this.ctx.lineWidth = 4;\r\n        \r\n        // Create smooth waveform with dense interpolation\r\n        if (this.particles.length > 1) {\r\n            const startX = this.particles[0].x;\r\n            const endX = this.particles[this.particles.length - 1].x;\r\n            const numPoints = 300; // Even denser sampling\r\n            \r\n            // For transverse waves, draw vertical waveform\r\n            this.ctx.moveTo(startX, this.particles[0].y);\r\n            \r\n            for (let i = 1; i < numPoints; i++) {\r\n                const t = i / (numPoints - 1);\r\n                const x = startX + t * (endX - startX);\r\n                \r\n                // Find the corresponding y value by interpolating between particles\r\n                const particleIndex = t * (this.particles.length - 1);\r\n                const lowIndex = Math.floor(particleIndex);\r\n                const highIndex = Math.min(lowIndex + 1, this.particles.length - 1);\r\n                const fraction = particleIndex - lowIndex;\r\n                \r\n                const lowY = this.particles[lowIndex].y;\r\n                const highY = this.particles[highIndex].y;\r\n                const y = lowY + fraction * (highY - lowY);\r\n                \r\n                this.ctx.lineTo(x, y);\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Add glow effect\r\n        this.ctx.shadowColor = '#667eea';\r\n        this.ctx.shadowBlur = 10;\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n    }\r\n    \r\n    drawLongitudinalWaveform() {\r\n        if (this.particles.length < 2) return;\r\n        \r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const springRadius = 20;\r\n        \r\n        // Draw a slinky-like spring with multiple coils\r\n        this.ctx.strokeStyle = '#667eea';\r\n        this.ctx.lineWidth = 4;\r\n        \r\n        // Create a continuous spring path\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particles[0].x, centerY);\r\n        \r\n        // Draw smooth spring coils along the entire length\r\n        const totalLength = this.particles[this.particles.length - 1].x - this.particles[0].x;\r\n        const numPoints = 200; // Much more points for smooth curve\r\n        \r\n        for (let i = 0; i <= numPoints; i++) {\r\n            const t = i / numPoints;\r\n            const x = this.particles[0].x + t * totalLength;\r\n            \r\n            // Calculate wave displacement at this position\r\n            const phase = (x / this.wavelength) * 2 * Math.PI;\r\n            const timePhase = this.time * this.frequency * 2 * Math.PI;\r\n            const waveDisplacement = this.amplitude * Math.sin(phase - timePhase);\r\n            \r\n            // Add smooth spring coil offset\r\n            const coilOffset = Math.sin(t * Math.PI * 8) * springRadius; // More coils for smoothness\r\n            \r\n            // Combine wave displacement with spring coil\r\n            const y = centerY + coilOffset + waveDisplacement * 0.3;\r\n            \r\n            this.ctx.lineTo(x, y);\r\n        }\r\n        \r\n        this.ctx.stroke();\r\n        \r\n        // Add glow effect\r\n        this.ctx.shadowColor = '#667eea';\r\n        this.ctx.shadowBlur = 10;\r\n        this.ctx.stroke();\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw wave direction arrows\r\n        this.drawLongitudinalWaveDirection();\r\n    }\r\n    \r\n    drawLongitudinalWaveDirection() {\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const waveSpeed = this.frequency * this.wavelength;\r\n        const arrowX = 50 + (this.time * waveSpeed * 0.1) % 100;\r\n        \r\n        // Draw horizontal arrow\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = '#ff6b6b';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.moveTo(arrowX, centerY);\r\n        this.ctx.lineTo(arrowX + 30, centerY);\r\n        this.ctx.stroke();\r\n        \r\n        // Arrowhead\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = '#ff6b6b';\r\n        this.ctx.moveTo(arrowX + 30, centerY);\r\n        this.ctx.lineTo(arrowX + 25, centerY - 5);\r\n        this.ctx.lineTo(arrowX + 25, centerY + 5);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawCanvasLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw wave type label\r\n        const waveTypeLabel = this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1) + ' Wave';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText(waveTypeLabel, this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Draw mathematical formulas in a more compact format\r\n        this.ctx.font = '12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`v = f×λ = ${this.waveSpeed.toFixed(1)} px/s  |  y = A sin(2π(ft-x/λ))  |  E ∝ A²f²`, \r\n                          this.ctx.canvas.width / 2, 45);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Calculate velocity magnitude for coloring\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const maxVelocity = this.amplitude * this.frequency * 2 * Math.PI;\r\n            const velocityRatio = Math.min(velocity / maxVelocity, 1);\r\n            \r\n            // Color based on velocity (blue = slow, red = fast)\r\n            const r = Math.floor(100 + velocityRatio * 155);\r\n            const g = Math.floor(100 + (1 - velocityRatio) * 100);\r\n            const b = Math.floor(200 + velocityRatio * 55);\r\n            \r\n            // Make particles larger for longitudinal waves\r\n            const particleSize = this.waveType === 'longitudinal' ? 8 : 5;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n            this.ctx.arc(particle.x, particle.y, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add highlight\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n            this.ctx.arc(particle.x - 1, particle.y - 1, particleSize * 0.4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.lineWidth = 1;\r\n            this.ctx.stroke();\r\n        });\r\n    }\r\n    \r\n    drawVelocityVectors() {\r\n        this.particles.forEach(particle => {\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            if (velocity > 1) {\r\n                const scale = 0.1;\r\n                const endX = particle.x + particle.vx * scale;\r\n                const endY = particle.y + particle.vy * scale;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#ff6b6b';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Arrowhead\r\n                const angle = Math.atan2(particle.vy, particle.vx);\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#ff6b6b';\r\n                this.ctx.moveTo(endX, endY);\r\n                this.ctx.lineTo(endX - 6 * Math.cos(angle - Math.PI / 6), endY - 6 * Math.sin(angle - Math.PI / 6));\r\n                this.ctx.lineTo(endX - 6 * Math.cos(angle + Math.PI / 6), endY - 6 * Math.sin(angle + Math.PI / 6));\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawWaveDirection() {\r\n        if (this.waveType !== 'standing') {\r\n            // Animated wave direction indicator - move at wave speed\r\n            const waveSpeed = this.frequency * this.wavelength;\r\n            const arrowX = 50 + (this.time * waveSpeed * 0.1) % 100;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.strokeStyle = '#ff6b6b';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.moveTo(arrowX, 50);\r\n            this.ctx.lineTo(arrowX + 20, 50);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrowhead\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = '#ff6b6b';\r\n            this.ctx.moveTo(arrowX + 20, 50);\r\n            this.ctx.lineTo(arrowX + 15, 45);\r\n            this.ctx.lineTo(arrowX + 15, 55);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawWaveInfo() {\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        let y = 120; // Moved down to avoid overlap with main labels\r\n        this.ctx.fillText(`Wave Type: ${this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1)}`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Frequency: ${this.frequency.toFixed(1)} Hz`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Wavelength: ${this.wavelength.toFixed(0)} px`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Amplitude: ${this.amplitude.toFixed(0)} px`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Wave Speed: ${this.waveSpeed.toFixed(1)} px/s`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`Energy: ${this.energy.toFixed(1)}`, 10, y);\r\n        y += 30;\r\n        \r\n        // Wave equation\r\n        this.ctx.fillText(`Wave Equation: y = A sin(kx - ωt)`, 10, y);\r\n        y += 20;\r\n        this.ctx.fillText(`where: k = 2π/λ, ω = 2πf`, 10, y);\r\n    }\r\n    \r\n    drawEnergyVisualization() {\r\n        // Draw energy bar\r\n        const barWidth = 200;\r\n        const barHeight = 20;\r\n        const barX = this.ctx.canvas.width - barWidth - 20;\r\n        const barY = 120; // Moved down to avoid overlap with main labels\r\n        \r\n        // Background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n        \r\n        // Energy level\r\n        const maxEnergy = 0.5 * 100 * 100 * 3 * 3; // Max possible energy\r\n        const energyRatio = Math.min(this.energy / maxEnergy, 1);\r\n        const energyWidth = barWidth * energyRatio;\r\n        \r\n        // Gradient for energy bar\r\n        const energyGradient = this.ctx.createLinearGradient(barX, barY, barX + energyWidth, barY);\r\n        energyGradient.addColorStop(0, '#4CAF50');\r\n        energyGradient.addColorStop(1, '#FF9800');\r\n        \r\n        this.ctx.fillStyle = energyGradient;\r\n        this.ctx.fillRect(barX, barY, energyWidth, barHeight);\r\n        \r\n        // Label\r\n        this.ctx.fillStyle = '#fff';\r\n        this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(`Energy: ${this.energy.toFixed(1)}`, barX + barWidth / 2, barY + 15);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            waveType: this.waveType.charAt(0).toUpperCase() + this.waveType.slice(1),\r\n            frequency: this.frequency.toFixed(1),\r\n            wavelength: this.wavelength.toFixed(0),\r\n            amplitude: this.amplitude.toFixed(0),\r\n            waveSpeed: this.waveSpeed.toFixed(1),\r\n            energy: this.energy.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n}\r\n\r\n// Sound Waves Simulation\r\nexport class SoundWaves {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.frequency = 5; // Hz (low frequency for visualization)\r\n        this.amplitude = 50; // Percentage\r\n        this.waveSpeed = 343; // m/s (speed of sound in air)\r\n        this.particleCount = 15;\r\n        this.waveType = 'transverse'; // 'transverse', 'longitudinal', 'combined'\r\n        this.showPressure = true;\r\n        this.animationSpeed = 1.0;\r\n        this.time = 0;\r\n        \r\n        // Source and receiver properties\r\n        this.sourceX = 100;\r\n        this.sourceY = this.ctx.canvas.height / 2;\r\n        this.receiverX = this.ctx.canvas.width - 100;\r\n        this.receiverY = this.ctx.canvas.height / 2;\r\n        this.showSourceReceiver = true;\r\n        this.sourceActive = true;\r\n        this.pulses = [];\r\n        this.pulseDuration = 2; // number of wavelengths to show\r\n        \r\n        this.initializeParticles();\r\n        this.setupClickEvents();\r\n    }\r\n    \r\n    setupClickEvents() {\r\n        // Add click event listener to canvas for triggering wave pulses\r\n        this.ctx.canvas.addEventListener('click', (e) => {\r\n            const rect = this.ctx.canvas.getBoundingClientRect();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            \r\n            // Check if click is near the source\r\n            const distanceFromSource = Math.sqrt((x - this.sourceX) ** 2 + (y - this.sourceY) ** 2);\r\n            if (distanceFromSource < 50) {\r\n                this.triggerWavePulse();\r\n            }\r\n        });\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        const spacing = this.ctx.canvas.width / this.particleCount;\r\n        \r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: i * spacing,\r\n                originalX: i * spacing,\r\n                y: this.ctx.canvas.height / 2,\r\n                originalY: this.ctx.canvas.height / 2,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 4 + Math.random() * 2,\r\n                color: `hsl(${200 + Math.random() * 60}, 70%, 60%)`,\r\n                pressure: 0,\r\n                life: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    setFrequency(freq) {\r\n        this.frequency = freq;\r\n    }\r\n    \r\n    setAmplitude(amp) {\r\n        this.amplitude = amp;\r\n    }\r\n    \r\n    setWaveSpeed(speed) {\r\n        this.waveSpeed = speed;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setWaveType(type) {\r\n        this.waveType = type;\r\n    }\r\n    \r\n    setShowPressure(show) {\r\n        this.showPressure = show;\r\n    }\r\n    \r\n    setAnimationSpeed(speed) {\r\n        this.animationSpeed = speed;\r\n    }\r\n    \r\n    setShowSourceReceiver(show) {\r\n        this.showSourceReceiver = show;\r\n    }\r\n    \r\n    setSourceActive(active) {\r\n        this.sourceActive = active;\r\n    }\r\n    \r\n    setSourcePosition(x, y) {\r\n        this.sourceX = x;\r\n        this.sourceY = y;\r\n    }\r\n    \r\n    setReceiverPosition(x, y) {\r\n        this.receiverX = x;\r\n        this.receiverY = y;\r\n    }\r\n    \r\n    triggerWavePulse() {\r\n        const pulse = {\r\n            startTime: this.time, // Use animation time instead of Date.now()\r\n            duration: 5.0, // 5 seconds in animation time - longer to ensure wave reaches receiver\r\n            active: true\r\n        };\r\n        this.pulses.push(pulse);\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.pulses = [];\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime * this.animationSpeed;\r\n        \r\n        // Update pulses - remove expired ones\r\n        this.pulses = this.pulses.filter(pulse => {\r\n            const elapsed = (this.time - pulse.startTime) / 1000; // Convert to seconds\r\n            return elapsed < pulse.duration;\r\n        });\r\n        \r\n        const wavelength = (this.waveSpeed / this.frequency) * 0.5; // Scale down for visualization but not too much\r\n        const angularFrequency = 2 * Math.PI * this.frequency;\r\n        const amplitude = (this.amplitude / 100) * 50; // Scale amplitude\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Check if any pulse is active\r\n            let waveActive = false;\r\n            let pulsePhase = 0;\r\n            let waveProgress = 0; // How far the wave front has traveled (0 to 1)\r\n            \r\n\r\n            \r\n            this.pulses.forEach(pulse => {\r\n                const elapsed = (this.time - pulse.startTime) / 1000; // Convert to seconds\r\n                const pulseDuration = pulse.duration;\r\n                \r\n                // Check if pulse is active\r\n                if (elapsed >= 0 && elapsed <= pulseDuration) {\r\n                    waveActive = true;\r\n                    \r\n                    // Calculate how far the wave front has traveled - ensure it reaches receiver within pulse duration\r\n                    const totalDistance = this.receiverX - this.sourceX; // Total distance to travel\r\n                    const pulseDuration = pulse.duration; // Duration in seconds\r\n                    \r\n                    // Calculate required wave speed to reach receiver within pulse duration\r\n                    const requiredSpeed = totalDistance / pulseDuration; // pixels per second\r\n                    const waveSpeedScale = requiredSpeed / this.waveSpeed; // Scale factor to match required speed\r\n                    \r\n                    const waveTravelDistance = elapsed * (this.waveSpeed * waveSpeedScale); // Scale for visualization\r\n                    \r\n                    // Calculate wave front progress (0 to 1) - ensure wave reaches receiver\r\n                    waveProgress = Math.min(waveTravelDistance / totalDistance, 1.0);\r\n                    \r\n                    // Calculate phase for this particle based on its position within the wave packet\r\n                    const particleDistance = waveProgress * totalDistance;\r\n                    pulsePhase = (particleDistance / wavelength) * 2 * Math.PI;\r\n                }\r\n            });\r\n            \r\n            if (waveActive) {\r\n                // Calculate wave packet properties\r\n                const wavePacketWidth = 6 * wavelength; // Wave packet spans 6 wavelengths for better visibility\r\n                \r\n                // Calculate wave packet start position - ensure it starts at source and moves forward\r\n                const wavePacketStart = this.sourceX + (this.receiverX - this.sourceX) * waveProgress;\r\n                const wavePacketEnd = Math.min(this.receiverX, wavePacketStart + wavePacketWidth);\r\n                \r\n\r\n                \r\n                // Calculate this particle's position within the wave packet\r\n                const particlePositionInPacket = (index / (this.particleCount - 1)) * (wavePacketEnd - wavePacketStart);\r\n                let particleX = wavePacketStart + particlePositionInPacket;\r\n                \r\n                // Ensure particle is within the wave packet bounds\r\n                if (particleX < wavePacketStart) particleX = wavePacketStart;\r\n                if (particleX > wavePacketEnd) particleX = wavePacketEnd;\r\n                \r\n                // Only show particles that are within the wave packet bounds and between source and receiver\r\n                if (particleX >= this.sourceX && particleX <= this.receiverX && particleX >= wavePacketStart && particleX <= wavePacketEnd) {\r\n                    // Convert amplitude from percentage to actual displacement - make it more visible\r\n                    const amplitudeDisplacement = (this.amplitude / 100) * 120; // Scale amplitude to reasonable pixel values\r\n                    \r\n                    if (this.waveType === 'transverse' || this.waveType === 'combined') {\r\n                        // Transverse wave motion - particle moves horizontally and oscillates vertically\r\n                        particle.x = particleX;\r\n                        particle.y = particle.originalY + amplitudeDisplacement * Math.sin(pulsePhase + (index * 0.2));\r\n                        particle.vy = amplitudeDisplacement * 2 * Math.PI * Math.cos(pulsePhase + (index * 0.2)) * this.animationSpeed * 0.001;\r\n                    }\r\n                    \r\n                    if (this.waveType === 'longitudinal' || this.waveType === 'combined') {\r\n                        // Longitudinal wave motion - particle oscillates around its traveling position\r\n                        particle.x = particleX + amplitudeDisplacement * 0.1 * Math.sin(pulsePhase + (index * 0.2));\r\n                        particle.vx = amplitudeDisplacement * 0.1 * 2 * Math.PI * Math.cos(pulsePhase + (index * 0.2)) * this.animationSpeed * 0.001;\r\n                    }\r\n                    \r\n                    // Calculate pressure for longitudinal waves\r\n                    if (this.waveType === 'longitudinal' || this.waveType === 'combined') {\r\n                        particle.pressure = Math.sin(pulsePhase + (index * 0.2));\r\n                    }\r\n                } else {\r\n                    // Hide particles outside the wave packet\r\n                    particle.x = -100;\r\n                    particle.y = -100;\r\n                    particle.vy = 0;\r\n                    particle.vx = 0;\r\n                    particle.pressure = 0;\r\n                }\r\n            } else {\r\n                // Reset particle to original position when no pulse is active\r\n                particle.y = particle.originalY;\r\n                particle.x = particle.originalX;\r\n                particle.vy = 0;\r\n                particle.vx = 0;\r\n                particle.pressure = 0;\r\n            }\r\n            \r\n            particle.life += deltaTime;\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Always draw background and source/receiver\r\n        this.drawBackground();\r\n        if (this.showSourceReceiver) {\r\n            this.drawSourceAndReceiver();\r\n        }\r\n        \r\n        // Draw wave if pulses are active\r\n        if (this.pulses && this.pulses.length > 0) {\r\n            switch (this.waveType) {\r\n                case 'transverse':\r\n                    this.drawTransverseWave();\r\n                    break;\r\n                case 'longitudinal':\r\n                    this.drawLongitudinalWave();\r\n                    break;\r\n                case 'combined':\r\n                    this.drawCombinedWave();\r\n                    break;\r\n            }\r\n        } else {\r\n            // Show instruction when no wave is active\r\n            this.drawInstruction();\r\n        }\r\n        \r\n        // Always show info panels\r\n        this.drawSoundInfo();\r\n        this.drawRealWorldAnalogy();\r\n    }\r\n    \r\n    drawInstruction() {\r\n        // Draw instruction to click on source\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(this.ctx.canvas.width / 2 - 200, this.ctx.canvas.height / 2 - 40, 400, 80);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🎵 Click the red source to trigger a sound wave!', this.ctx.canvas.width / 2, this.ctx.canvas.height / 2 - 10);\r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('Watch the wave propagate from source to receiver', this.ctx.canvas.width / 2, this.ctx.canvas.height / 2 + 10);\r\n        this.ctx.fillText('Adjust controls to see different wave behaviors', this.ctx.canvas.width / 2, this.ctx.canvas.height / 2 + 30);\r\n    }\r\n    \r\n    drawBackground() {\r\n        // Draw subtle grid\r\n        this.ctx.strokeStyle = 'rgba(200, 200, 200, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Vertical lines\r\n        for (let x = 0; x < this.ctx.canvas.width; x += 50) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.ctx.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Horizontal lines\r\n        for (let y = 0; y < this.ctx.canvas.height; y += 50) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.ctx.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawTransverseWave() {\r\n        // Draw wave line\r\n        this.ctx.strokeStyle = '#0066CC';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            if (index === 0) {\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n            } else {\r\n                this.ctx.lineTo(particle.x, particle.y);\r\n            }\r\n        });\r\n        this.ctx.stroke();\r\n        \r\n        // Draw particles\r\n        this.particles.forEach(particle => {\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const intensity = Math.min(velocity * 100, 1);\r\n            \r\n            // Color based on velocity\r\n            const hue = 200 + intensity * 60;\r\n            const color = `hsl(${hue}, 80%, 60%)`;\r\n            \r\n            this.ctx.fillStyle = color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add glow for fast particles\r\n            if (intensity > 0.5) {\r\n                this.ctx.shadowColor = color;\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y, particle.size + 2, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n        });\r\n        \r\n\r\n    }\r\n    \r\n    drawLongitudinalWave() {\r\n        // Draw air molecules as particles with enhanced pressure visualization\r\n        this.particles.forEach(particle => {\r\n            const pressure = particle.pressure;\r\n            const intensity = Math.abs(pressure);\r\n            \r\n            // Color based on pressure (orange for high, cyan for low)\r\n            let color;\r\n            if (pressure > 0) {\r\n                // High pressure (compression) - subtle orange\r\n                color = `hsl(30, 80%, 60%)`;\r\n            } else {\r\n                // Low pressure (rarefaction) - subtle cyan\r\n                color = `hsl(180, 60%, 60%)`;\r\n            }\r\n            \r\n            // Draw particle with size based on pressure\r\n            const particleSize = particle.size + intensity * 5;\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particleSize, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add glow effect for high pressure particles\r\n            if (intensity > 0.5) {\r\n                this.ctx.shadowColor = color;\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y, particleSize + 2, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n            \r\n            // Add pressure indicator arrows\r\n            if (this.showPressure && intensity > 0.2) {\r\n                this.ctx.strokeStyle = color;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.beginPath();\r\n                \r\n                if (pressure > 0) {\r\n                    // Compression arrows pointing inward\r\n                    this.ctx.moveTo(particle.x - 15, particle.y);\r\n                    this.ctx.lineTo(particle.x - 5, particle.y);\r\n                    this.ctx.moveTo(particle.x + 5, particle.y);\r\n                    this.ctx.lineTo(particle.x + 15, particle.y);\r\n                } else {\r\n                    // Rarefaction arrows pointing outward\r\n                    this.ctx.moveTo(particle.x - 5, particle.y);\r\n                    this.ctx.lineTo(particle.x - 15, particle.y);\r\n                    this.ctx.moveTo(particle.x + 15, particle.y);\r\n                    this.ctx.lineTo(particle.x + 5, particle.y);\r\n                }\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n        \r\n        // Draw pressure zones\r\n        if (this.showPressure) {\r\n            this.drawPressureZones();\r\n        }\r\n    }\r\n    \r\n    drawCombinedWave() {\r\n        // Draw transverse wave as the main wave\r\n        this.drawTransverseWave();\r\n        \r\n        // Draw longitudinal components as pressure indicators\r\n        if (this.showPressure) {\r\n            this.drawPressureZones();\r\n        }\r\n        \r\n        // Draw longitudinal particles as small indicators\r\n        this.particles.forEach(particle => {\r\n            const pressure = particle.pressure;\r\n            const intensity = Math.abs(pressure);\r\n            \r\n            if (intensity > 0.3) {\r\n                // Color based on pressure (red for high, blue for low)\r\n                let color;\r\n                if (pressure > 0) {\r\n                    color = `hsl(0, 80%, 60%)`; // Red for compression\r\n                } else {\r\n                    color = `hsl(240, 80%, 60%)`; // Blue for rarefaction\r\n                }\r\n                \r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y + 30, 3, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawPressureZones() {\r\n        // Draw pressure zones that move with the wave - using more subtle colors\r\n        const wavelength = this.waveSpeed / this.frequency;\r\n        const waveSpeed = this.waveSpeed;\r\n        const frequency = this.frequency;\r\n        \r\n        // Calculate wave position based on time\r\n        const wavePosition = (this.time * 0.001 * waveSpeed) % wavelength;\r\n        \r\n        // Draw compression and rarefaction zones that move with the wave - only between source and receiver\r\n        const zoneHeight = 80; // Reduced height for pressure zones\r\n        const zoneY = this.sourceY - zoneHeight / 2; // Center zones vertically on the wave path\r\n        \r\n        for (let x = this.sourceX; x <= this.receiverX; x += wavelength / 4) {\r\n            const relativeX = (x - wavePosition) % wavelength;\r\n            const phase = (2 * Math.PI * relativeX) / wavelength;\r\n            const pressure = Math.sin(phase);\r\n            \r\n            if (pressure > 0.5) {\r\n                // High pressure zone (compression) - subtle orange/amber\r\n                this.ctx.fillStyle = 'rgba(255, 165, 0, 0.2)';\r\n                this.ctx.fillRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle border\r\n                this.ctx.strokeStyle = 'rgba(255, 165, 0, 0.3)';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle compression label\r\n                this.ctx.fillStyle = 'rgba(255, 165, 0, 0.7)';\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('C', x + wavelength / 8, zoneY + 15);\r\n            } else if (pressure < -0.5) {\r\n                // Low pressure zone (rarefaction) - subtle cyan/teal\r\n                this.ctx.fillStyle = 'rgba(0, 128, 128, 0.2)';\r\n                this.ctx.fillRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle border\r\n                this.ctx.strokeStyle = 'rgba(0, 128, 128, 0.3)';\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.strokeRect(x, zoneY, wavelength / 4, zoneHeight);\r\n                \r\n                // Add subtle rarefaction label\r\n                this.ctx.fillStyle = 'rgba(0, 128, 128, 0.7)';\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText('R', x + wavelength / 8, zoneY + 15);\r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n        \r\n    drawSourceAndReceiver() {\r\n        // Draw clickable area indicator (for debugging)\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.3)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.sourceX, this.sourceY, 50, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw source (speaker/microphone)\r\n        this.ctx.fillStyle = this.sourceActive ? '#FF6B6B' : '#666666';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.sourceX, this.sourceY, 25, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add speaker cone effect when active\r\n        if (this.sourceActive) {\r\n            this.ctx.strokeStyle = '#FF6B6B';\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.sourceX, this.sourceY, 35, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Add pulsing effect\r\n            const pulse = Math.sin(this.time * 0.01) * 0.3 + 0.7;\r\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${pulse * 0.3})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.sourceX, this.sourceY, 40, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw receiver (ear/microphone)\r\n        this.ctx.fillStyle = '#4ECDC4';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.receiverX, this.receiverY, 20, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add receiver cone\r\n        this.ctx.strokeStyle = '#4ECDC4';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.receiverX, this.receiverY, 30, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw labels with improved styling\r\n        // Add text shadow for better visibility\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 3;\r\n        this.ctx.shadowOffsetX = 1;\r\n        this.ctx.shadowOffsetY = 1;\r\n        \r\n        // Source label\r\n        this.ctx.fillStyle = '#FF6B6B'; // Match source color\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🎤 Source', this.sourceX, this.sourceY + 50);\r\n        \r\n        // Receiver label\r\n        this.ctx.fillStyle = '#4ECDC4'; // Match receiver color\r\n        this.ctx.fillText('👂 Receiver', this.receiverX, this.receiverY + 50);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        this.ctx.shadowOffsetY = 0;\r\n        \r\n        // Draw wave direction arrow\r\n        this.ctx.strokeStyle = '#FFD93D';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.setLineDash([10, 5]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.sourceX + 40, this.sourceY);\r\n        this.ctx.lineTo(this.receiverX - 30, this.receiverY);\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n        \r\n        // Add arrowhead\r\n        this.ctx.fillStyle = '#FFD93D';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.receiverX - 30, this.receiverY);\r\n        this.ctx.lineTo(this.receiverX - 40, this.receiverY - 5);\r\n        this.ctx.lineTo(this.receiverX - 40, this.receiverY + 5);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawSoundInfo() {\r\n        // Simple info panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 320, 180);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🎵 Sound Wave Properties', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText(`Frequency: ${this.frequency} Hz`, 20, 50);\r\n        this.ctx.fillText(`Wavelength: ${(this.waveSpeed / this.frequency).toFixed(1)} m`, 20, 70);\r\n        this.ctx.fillText(`Wave Speed: ${this.waveSpeed} m/s`, 20, 90);\r\n        // Calculate the actual visual speed being used\r\n        const totalDistance = this.receiverX - this.sourceX;\r\n        const pulseDuration = 5.0; // Default pulse duration\r\n        const visualSpeed = totalDistance / pulseDuration;\r\n        this.ctx.fillText(`Visual Speed: ${visualSpeed.toFixed(1)} px/s`, 20, 110);\r\n        this.ctx.fillText(`Amplitude: ${this.amplitude}%`, 20, 130);\r\n        this.ctx.fillText(`Wave Type: ${this.waveType}`, 20, 150);\r\n        this.ctx.fillText(`Particles: ${this.particleCount}`, 20, 170);\r\n    }\r\n    \r\n    drawRealWorldAnalogy() {\r\n        // Simple analogy panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(this.ctx.canvas.width - 280, 10, 270, 140);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('💡 Real-World Examples:', this.ctx.canvas.width - 270, 30);\r\n        \r\n        this.ctx.font = '12px Arial';\r\n        if (this.waveType === 'transverse') {\r\n            this.ctx.fillText('🎸 Guitar/violin strings', this.ctx.canvas.width - 270, 50);\r\n            this.ctx.fillText('🌊 Ocean surface waves', this.ctx.canvas.width - 270, 70);\r\n            this.ctx.fillText('📡 Electromagnetic waves', this.ctx.canvas.width - 270, 90);\r\n            this.ctx.fillText('🎪 Jump rope motion', this.ctx.canvas.width - 270, 110);\r\n        } else if (this.waveType === 'longitudinal') {\r\n            this.ctx.fillText('🔊 Sound waves in air', this.ctx.canvas.width - 270, 50);\r\n            this.ctx.fillText('🎤 Speaker diaphragm', this.ctx.canvas.width - 270, 70);\r\n            this.ctx.fillText('💨 Air compression waves', this.ctx.canvas.width - 270, 90);\r\n            this.ctx.fillText('🌊 Seismic P-waves', this.ctx.canvas.width - 270, 110);\r\n        } else {\r\n            this.ctx.fillText('🎵 Complex wave patterns', this.ctx.canvas.width - 270, 50);\r\n            this.ctx.fillText('🔊 Multiple wave types', this.ctx.canvas.width - 270, 70);\r\n            this.ctx.fillText('📡 Combined phenomena', this.ctx.canvas.width - 270, 90);\r\n            this.ctx.fillText('🎼 Musical instruments', this.ctx.canvas.width - 270, 110);\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            waveType: this.waveType,\r\n            frequency: this.frequency,\r\n            wavelength: this.waveSpeed / this.frequency,\r\n            waveSpeed: this.waveSpeed,\r\n            amplitude: this.amplitude,\r\n            particleCount: this.particleCount,\r\n            time: this.time\r\n        };\r\n    }\r\n}","\r\n\r\n// Electric Fields Simulation - Simplified\r\nexport class ElectricFields {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.charges = [];\r\n        this.testParticles = [];\r\n        this.fieldStrength = 1.0;\r\n        this.speed = 1.0;\r\n        this.particleCount = 20;\r\n        this.showFieldLines = true;\r\n        this.showParticles = true;\r\n        this.showForceArrows = false;\r\n        this.showAnalytics = true; // Enable analytics by default for electric fields\r\n        this.time = 0;\r\n        \r\n        this.initializeTestParticles();\r\n        this.initializeDefaultCharges();\r\n    }\r\n    \r\n    initializeTestParticles() {\r\n        this.testParticles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.testParticles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: 0,\r\n                vy: 0,\r\n                trail: [],\r\n                maxTrailLength: 30\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeDefaultCharges() {\r\n        // Add some default charges to make the animation interesting\r\n        this.addChargeAtPosition('positive', this.ctx.canvas.width * 0.3, this.ctx.canvas.height * 0.5);\r\n        this.addChargeAtPosition('negative', this.ctx.canvas.width * 0.7, this.ctx.canvas.height * 0.5);\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setFieldStrength(strength) {\r\n        this.fieldStrength = strength;\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeTestParticles();\r\n    }\r\n    setShowAnalytics(show) {\r\n        this.showAnalytics = show;\r\n    }\r\n    addChargeAtPosition(type, x, y) {\r\n        const charge = {\r\n            x: x,\r\n            y: y,\r\n            type: type, // 'positive' or 'negative'\r\n            magnitude: 1,\r\n            color: type === 'positive' ? '#ff6b6b' : '#667eea'\r\n        };\r\n        this.charges.push(charge);\r\n    }\r\n    \r\n    clearCharges() {\r\n        this.charges = [];\r\n        this.initializeDefaultCharges(); // Re-add default charges after clearing\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.charges = [];\r\n        this.initializeTestParticles();\r\n        this.initializeDefaultCharges();\r\n    }\r\n    \r\n    calculateElectricField(x, y) {\r\n        let ex = 0, ey = 0;\r\n        const k = 500; // Simplified Coulomb's constant\r\n        \r\n        this.charges.forEach(charge => {\r\n            const dx = x - charge.x;\r\n            const dy = y - charge.y;\r\n            const r = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (r > 10) { // Avoid division by zero\r\n                const force = k * charge.magnitude * this.fieldStrength / (r * r);\r\n                const sign = charge.type === 'positive' ? 1 : -1;\r\n                ex += sign * force * dx / r;\r\n                ey += sign * force * dy / r;\r\n            }\r\n        });\r\n        \r\n        return { ex, ey };\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 20; // Much faster animation\r\n        this.time += dt;\r\n        \r\n        this.testParticles.forEach(particle => {\r\n            const field = this.calculateElectricField(particle.x, particle.y);\r\n            \r\n            // Apply electric force (simplified)\r\n            particle.vx += field.ex * dt * 0.5;\r\n            particle.vy += field.ey * dt * 0.5;\r\n            \r\n            // Add damping to prevent chaos\r\n            particle.vx *= 0.95;\r\n            particle.vy *= 0.95;\r\n            \r\n            // Limit maximum speed\r\n            const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            if (speed > 100) {\r\n                particle.vx *= 0.8;\r\n                particle.vy *= 0.8;\r\n            }\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * dt;\r\n            particle.y += particle.vy * dt;\r\n            \r\n            // Add to trail\r\n            particle.trail.push({ x: particle.x, y: particle.y });\r\n            if (particle.trail.length > particle.maxTrailLength) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Wrap around edges\r\n            if (particle.x < 0) particle.x = this.ctx.canvas.width;\r\n            if (particle.x > this.ctx.canvas.width) particle.x = 0;\r\n            if (particle.y < 0) particle.y = this.ctx.canvas.height;\r\n            if (particle.y > this.ctx.canvas.height) particle.y = 0;\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Modern dark gradient background\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, '#181c2b');\r\n        gradient.addColorStop(1, '#232946');\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n\r\n        // Show analytics (field lines, particles, force arrows) if enabled\r\n        if (this.showAnalytics) {\r\n            this.drawFieldLines();\r\n            this.drawParticles();\r\n            this.drawForceArrows();\r\n        }\r\n        // Always show charges\r\n        this.drawCharges();\r\n        \r\n        // Draw canvas labels\r\n        this.drawElectricLabels();\r\n    }\r\n    \r\n    drawFieldLines() {\r\n        const spacing = 30; // Reduced spacing for more field lines\r\n        \r\n        for (let x = spacing; x < this.ctx.canvas.width; x += spacing) {\r\n            for (let y = spacing; y < this.ctx.canvas.height; y += spacing) {\r\n                const field = this.calculateElectricField(x, y);\r\n                const magnitude = Math.sqrt(field.ex * field.ex + field.ey * field.ey);\r\n                \r\n                if (magnitude > 0.1) { // Lower threshold to show more field lines\r\n                    const angle = Math.atan2(field.ey, field.ex);\r\n                    const intensity = Math.min(magnitude / 50, 1); // Adjusted intensity scaling\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(102, 126, 234, ${intensity})`;\r\n                    this.ctx.lineWidth = 2;\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(\r\n                        x + 25 * Math.cos(angle), // Longer arrows\r\n                        y + 25 * Math.sin(angle)\r\n                    );\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrowhead\r\n                    this.ctx.beginPath();\r\n                    this.ctx.fillStyle = `rgba(102, 126, 234, ${intensity})`;\r\n                    this.ctx.moveTo(\r\n                        x + 25 * Math.cos(angle),\r\n                        y + 25 * Math.sin(angle)\r\n                    );\r\n                    this.ctx.lineTo(\r\n                        x + 20 * Math.cos(angle - Math.PI / 6),\r\n                        y + 20 * Math.sin(angle - Math.PI / 6)\r\n                    );\r\n                    this.ctx.lineTo(\r\n                        x + 20 * Math.cos(angle + Math.PI / 6),\r\n                        y + 20 * Math.sin(angle + Math.PI / 6)\r\n                    );\r\n                    this.ctx.closePath();\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawCharges() {\r\n        this.charges.forEach(charge => {\r\n            // Modern gradient charge with glow effect\r\n            const gradient = this.ctx.createRadialGradient(\r\n                charge.x - 8, charge.y - 8, 0,\r\n                charge.x, charge.y, 20\r\n            );\r\n            \r\n            if (charge.type === 'positive') {\r\n                gradient.addColorStop(0, '#ff6b6b');\r\n                gradient.addColorStop(0.7, '#ff4757');\r\n                gradient.addColorStop(1, '#ff3838');\r\n            } else {\r\n                gradient.addColorStop(0, '#667eea');\r\n                gradient.addColorStop(0.7, '#5f6fd8');\r\n                gradient.addColorStop(1, '#5352ed');\r\n            }\r\n            \r\n            // Glow effect\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = charge.type === 'positive' ? 'rgba(255, 107, 107, 0.3)' : 'rgba(102, 126, 234, 0.3)';\r\n            this.ctx.arc(charge.x, charge.y, 18, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Main charge circle\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.arc(charge.x, charge.y, 12, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Modern shadow\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n            this.ctx.arc(charge.x + 2, charge.y + 2, 12, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Charge symbol with modern styling\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = 'bold 20px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.textBaseline = 'middle';\r\n            this.ctx.fillText(charge.type === 'positive' ? '+' : '−', charge.x, charge.y);\r\n        });\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.testParticles.forEach(particle => {\r\n            // Modern particle trail with gradient\r\n            if (particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                const gradient = this.ctx.createLinearGradient(\r\n                    particle.trail[0].x, particle.trail[0].y,\r\n                    particle.x, particle.y\r\n                );\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.1)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.6)');\r\n                this.ctx.strokeStyle = gradient;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                particle.trail.forEach(point => {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                });\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Modern particle with glow and gradient\r\n            const particleGradient = this.ctx.createRadialGradient(\r\n                particle.x - 3, particle.y - 3, 0,\r\n                particle.x, particle.y, 8\r\n            );\r\n            particleGradient.addColorStop(0, '#ffffff');\r\n            particleGradient.addColorStop(0.7, '#f8f9fa');\r\n            particleGradient.addColorStop(1, '#e9ecef');\r\n            \r\n            // Glow effect\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';\r\n            this.ctx.arc(particle.x, particle.y, 8, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Main particle\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = particleGradient;\r\n            this.ctx.arc(particle.x, particle.y, 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Modern shadow\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n            this.ctx.arc(particle.x + 1, particle.y + 1, 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n    }\r\n    \r\n    drawForceArrows() {\r\n        this.testParticles.forEach(particle => {\r\n            const field = this.calculateElectricField(particle.x, particle.y);\r\n            const forceMagnitude = Math.sqrt(field.ex * field.ex + field.ey * field.ey);\r\n            \r\n            if (forceMagnitude > 5) {\r\n                const scale = 0.8;\r\n                const endX = particle.x + field.ex * scale;\r\n                const endY = particle.y + field.ey * scale;\r\n                \r\n                // Modern force arrow with gradient and glow\r\n                const arrowGradient = this.ctx.createLinearGradient(\r\n                    particle.x, particle.y, endX, endY\r\n                );\r\n                arrowGradient.addColorStop(0, '#ff6b35');\r\n                arrowGradient.addColorStop(1, '#ff8c42');\r\n                \r\n                // Glow effect\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = 'rgba(255, 107, 53, 0.4)';\r\n                this.ctx.lineWidth = 6;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Main arrow\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = arrowGradient;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.lineCap = 'round';\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Modern arrowhead\r\n                const angle = Math.atan2(field.ey, field.ex);\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = arrowGradient;\r\n                this.ctx.moveTo(endX, endY);\r\n                this.ctx.lineTo(\r\n                    endX - 10 * Math.cos(angle - Math.PI / 6),\r\n                    endY - 10 * Math.sin(angle - Math.PI / 6)\r\n                );\r\n                this.ctx.lineTo(\r\n                    endX - 10 * Math.cos(angle + Math.PI / 6),\r\n                    endY - 10 * Math.sin(angle + Math.PI / 6)\r\n                );\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawInfo() {\r\n        // Modern analytics panel with gradient background\r\n        const panelWidth = 200;\r\n        const panelHeight = 120;\r\n        const panelX = this.ctx.canvas.width - panelWidth - 20;\r\n        const panelY = 20;\r\n        \r\n        // Panel background with gradient\r\n        const panelGradient = this.ctx.createLinearGradient(panelX, panelY, panelX, panelY + panelHeight);\r\n        panelGradient.addColorStop(0, 'rgba(24, 28, 43, 0.95)');\r\n        panelGradient.addColorStop(1, 'rgba(35, 41, 70, 0.95)');\r\n        \r\n        this.ctx.fillStyle = panelGradient;\r\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel border with glow\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\r\n        \r\n        // Panel title\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('Electric Field Analytics', panelX + 15, panelY + 25);\r\n        \r\n        // Analytics data with modern styling\r\n        this.ctx.fillStyle = '#e9ecef';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Charges: ${this.charges.length}`, panelX + 15, panelY + 45);\r\n        this.ctx.fillText(`Particles: ${this.testParticles.length}`, panelX + 15, panelY + 65);\r\n        this.ctx.fillText(`Field Strength: ${this.fieldStrength.toFixed(1)}`, panelX + 15, panelY + 85);\r\n        \r\n        // Modern explanation at bottom with dark background for visibility\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(5, this.ctx.canvas.height - 50, 300, 40);\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔴 Positive (+)  🔵 Negative (−)', 10, this.ctx.canvas.height - 40);\r\n        this.ctx.fillText('Click canvas to add charges', 10, this.ctx.canvas.height - 20);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            chargeCount: this.charges.length,\r\n            particleCount: this.testParticles.length,\r\n            fieldStrength: this.fieldStrength.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawElectricLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Electric Fields', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.fillText(`E = kQ/r²`, \r\n                          this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Draw Coulomb's law\r\n        this.ctx.fillText(`F = kq₁q₂/r²`, \r\n                          this.ctx.canvas.width / 2, 70);\r\n        \r\n        // Draw field superposition\r\n        this.ctx.fillText(`E = ΣEᵢ`, \r\n                          this.ctx.canvas.width / 2, 90);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\n// Magnetic Fields Simulation - Simplified\r\nexport class MagneticFields {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.speed = 1.0;\r\n        this.fieldStrength = 1.0;\r\n        this.particleCount = 15;\r\n        this.showFieldLines = true;\r\n        this.showParticles = true;\r\n        this.showForceArrows = false;\r\n        this.time = 0;\r\n        this.magnets = [];\r\n        this.particles = [];\r\n        \r\n        this.initializeParticles();\r\n        this.initializeDefaultMagnets();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            this.particles.push({\r\n                x: Math.random() * this.ctx.canvas.width,\r\n                y: Math.random() * this.ctx.canvas.height,\r\n                vx: (Math.random() - 0.5) * 80,\r\n                vy: (Math.random() - 0.5) * 80,\r\n                charge: Math.random() > 0.5 ? 1 : -1, // Simple +1 or -1\r\n                trail: [],\r\n                maxTrailLength: 30\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeDefaultMagnets() {\r\n        // Start with one simple magnet in the center\r\n        this.magnets = [\r\n            {\r\n                x: this.ctx.canvas.width / 2,\r\n                y: this.ctx.canvas.height / 2,\r\n                strength: this.fieldStrength,\r\n                color: '#ff6b6b'\r\n            }\r\n        ];\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setFieldStrength(strength) {\r\n        this.fieldStrength = strength;\r\n        this.magnets.forEach(magnet => {\r\n            magnet.strength = strength;\r\n        });\r\n    }\r\n    \r\n    setParticleCount(count) {\r\n        this.particleCount = count;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    setShowFieldLines(show) {\r\n        this.showFieldLines = show;\r\n    }\r\n    \r\n    setShowParticles(show) {\r\n        this.showParticles = show;\r\n    }\r\n    \r\n    setShowForceArrows(show) {\r\n        this.showForceArrows = show;\r\n    }\r\n    \r\n    addMagnetAtPosition(x, y) {\r\n        this.magnets.push({\r\n            x: x,\r\n            y: y,\r\n            strength: this.fieldStrength,\r\n            color: '#ff6b6b'\r\n        });\r\n    }\r\n    \r\n    clearMagnets() {\r\n        this.magnets = [];\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.clearMagnets();\r\n        this.initializeDefaultMagnets();\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    calculateMagneticField(x, y) {\r\n        let Bx = 0, By = 0;\r\n        \r\n        this.magnets.forEach(magnet => {\r\n            const dx = x - magnet.x;\r\n            const dy = y - magnet.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance > 10) {\r\n                // Simple uniform field pointing upward from each magnet\r\n                const fieldStrength = magnet.strength / (1 + distance / 100);\r\n                By += fieldStrength; // Upward field\r\n            }\r\n        });\r\n        \r\n        return { Bx, By };\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 3;\r\n        this.time += dt;\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Calculate magnetic field at particle position\r\n            const field = this.calculateMagneticField(particle.x, particle.y);\r\n            \r\n            // Simple Lorentz force: F = q(v × B)\r\n            // Since B points upward, force is perpendicular to velocity\r\n            const forceX = particle.charge * particle.vy * field.By;\r\n            const forceY = -particle.charge * particle.vx * field.By;\r\n        \r\n        // Update velocity\r\n            particle.vx += forceX * dt;\r\n            particle.vy += forceY * dt;\r\n            \r\n            // Add some damping to prevent particles from going too fast\r\n            const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            if (speed > 150) {\r\n                particle.vx *= 0.95;\r\n                particle.vy *= 0.95;\r\n            }\r\n        \r\n        // Update position\r\n            particle.x += particle.vx * dt;\r\n            particle.y += particle.vy * dt;\r\n            \r\n            // Add to trail\r\n            particle.trail.push({ x: particle.x, y: particle.y });\r\n            if (particle.trail.length > particle.maxTrailLength) {\r\n                particle.trail.shift();\r\n            }\r\n            \r\n            // Wrap around edges\r\n            if (particle.x < 0) particle.x = this.ctx.canvas.width;\r\n            if (particle.x > this.ctx.canvas.width) particle.x = 0;\r\n            if (particle.y < 0) particle.y = this.ctx.canvas.height;\r\n            if (particle.y > this.ctx.canvas.height) particle.y = 0;\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        // Draw field lines (simplified)\r\n        if (this.showFieldLines) {\r\n            this.drawFieldLines();\r\n        }\r\n        \r\n        // Draw magnets\r\n        this.drawMagnets();\r\n        \r\n        // Draw particles\r\n            this.drawParticles();\r\n        \r\n        // Draw force arrows\r\n        if (this.showForceArrows) {\r\n            this.drawForceArrows();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawMagneticLabels();\r\n    }\r\n    \r\n    drawFieldLines() {\r\n        const spacing = 40;\r\n        \r\n        for (let x = spacing; x < this.ctx.canvas.width; x += spacing) {\r\n            for (let y = spacing; y < this.ctx.canvas.height; y += spacing) {\r\n                const field = this.calculateMagneticField(x, y);\r\n                const magnitude = Math.sqrt(field.Bx * field.Bx + field.By * field.By);\r\n                \r\n                if (magnitude > 0.1) {\r\n                    // Draw simple upward arrows\r\n                    this.ctx.beginPath();\r\n                    this.ctx.strokeStyle = `rgba(255, 107, 107, ${Math.min(magnitude, 1)})`;\r\n            this.ctx.lineWidth = 2;\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(x, y - 20);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Arrowhead\r\n            this.ctx.beginPath();\r\n                    this.ctx.fillStyle = `rgba(255, 107, 107, ${Math.min(magnitude, 1)})`;\r\n                    this.ctx.moveTo(x, y - 20);\r\n                    this.ctx.lineTo(x - 4, y - 16);\r\n                    this.ctx.lineTo(x + 4, y - 16);\r\n                    this.ctx.closePath();\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawMagnets() {\r\n        this.magnets.forEach((magnet, index) => {\r\n            // Draw magnet as a simple circle\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = magnet.color;\r\n            this.ctx.arc(magnet.x, magnet.y, 10, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw N/S labels\r\n            this.ctx.fillStyle = '#fff';\r\n            this.ctx.font = 'bold 14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('N', magnet.x, magnet.y + 4);\r\n        });\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Draw trail\r\n            if (particle.trail.length > 1) {\r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = particle.charge > 0 ? 'rgba(255, 100, 100, 0.4)' : 'rgba(100, 100, 255, 0.4)';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.moveTo(particle.trail[0].x, particle.trail[0].y);\r\n                particle.trail.forEach(point => {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                });\r\n            this.ctx.stroke();\r\n            }\r\n            \r\n            // Draw particle\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = particle.charge > 0 ? '#ff6b6b' : '#667eea';\r\n            this.ctx.arc(particle.x, particle.y, 5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw charge symbol\r\n            this.ctx.fillStyle = '#fff';\r\n            this.ctx.font = 'bold 12px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(particle.charge > 0 ? '+' : '−', particle.x, particle.y + 3);\r\n        });\r\n    }\r\n    \r\n    drawForceArrows() {\r\n        this.particles.forEach(particle => {\r\n            const field = this.calculateMagneticField(particle.x, particle.y);\r\n            const forceX = particle.charge * particle.vy * field.By;\r\n            const forceY = -particle.charge * particle.vx * field.By;\r\n            const forceMagnitude = Math.sqrt(forceX * forceX + forceY * forceY);\r\n            \r\n            if (forceMagnitude > 5) {\r\n                const scale = 0.2;\r\n                const endX = particle.x + forceX * scale;\r\n                const endY = particle.y + forceY * scale;\r\n                \r\n                this.ctx.beginPath();\r\n                this.ctx.strokeStyle = '#ff9800';\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(endX, endY);\r\n                this.ctx.stroke();\r\n                \r\n                // Arrowhead\r\n                const angle = Math.atan2(forceY, forceX);\r\n                this.ctx.beginPath();\r\n                this.ctx.fillStyle = '#ff9800';\r\n                this.ctx.moveTo(endX, endY);\r\n                this.ctx.lineTo(endX - 8 * Math.cos(angle - Math.PI / 6), endY - 8 * Math.sin(angle - Math.PI / 6));\r\n                this.ctx.lineTo(endX - 8 * Math.cos(angle + Math.PI / 6), endY - 8 * Math.sin(angle + Math.PI / 6));\r\n                this.ctx.closePath();\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawInfo() {\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        \r\n        this.ctx.fillText(`Magnets: ${this.magnets.length}`, 10, 30);\r\n        this.ctx.fillText(`Particles: ${this.particles.length}`, 10, 50);\r\n        this.ctx.fillText(`Field Strength: ${this.fieldStrength.toFixed(1)}`, 10, 70);\r\n        \r\n        // Simple explanation with dark background for visibility\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(5, this.ctx.canvas.height - 50, 350, 40);\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText('Red = Positive charge, Blue = Negative charge', 10, this.ctx.canvas.height - 40);\r\n        this.ctx.fillText('Click to add magnets, particles spiral around them', 10, this.ctx.canvas.height - 20);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            magnetCount: this.magnets.length,\r\n            particleCount: this.particles.length,\r\n            fieldStrength: this.fieldStrength.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawMagneticLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Magnetic Fields', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Draw mathematical formulas\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillText(`F = q(v × B)`, \r\n                          this.ctx.canvas.width / 2, 50);\r\n        \r\n        // Draw Lorentz force\r\n        this.ctx.fillText(`F = qvB sin θ`, \r\n                          this.ctx.canvas.width / 2, 70);\r\n        \r\n        // Draw magnetic field\r\n        this.ctx.fillText(`B = μ₀I/2πr`, \r\n                          this.ctx.canvas.width / 2, 90);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nexport class DiodeTransistor {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.componentType = 'diode'; // 'diode', 'npn', 'pnp'\r\n        this.biasType = 'forward'; // 'forward', 'reverse', 'off'\r\n        this.inputVoltage = 5; // Volts\r\n        this.baseVoltage = 0.7; // Volts for transistor\r\n        this.current = 0; // mA\r\n        this.power = 0; // mW\r\n        this.temperature = 25; // Celsius\r\n        this.showElectrons = true;\r\n        this.showCurrent = true;\r\n        this.showVoltage = true;\r\n        this.animationSpeed = 1.0;\r\n        this.time = 0;\r\n        this.isActive = false;\r\n        \r\n        // Scientific accuracy notes:\r\n        // - Diode: P-N junction with proper forward/reverse bias behavior\r\n        // - NPN: N-P-N with electron flow from emitter to collector\r\n        // - PNP: P-N-P with hole flow from emitter to collector\r\n        // - Current calculations use realistic transistor parameters (beta values)\r\n        // - Voltage drops follow standard semiconductor physics\r\n        \r\n        // Component positions\r\n        this.componentX = this.ctx.canvas.width / 2;\r\n        this.componentY = this.ctx.canvas.height / 2;\r\n        this.batteryX = this.componentX - 250;\r\n        this.batteryY = this.componentY;\r\n        this.loadX = this.componentX + 250;\r\n        this.loadY = this.componentY;\r\n        \r\n        // Enhanced particle systems\r\n        this.electrons = [];\r\n        this.holes = [];\r\n        this.sparks = [];\r\n        this.energyWaves = [];\r\n        this.initializeParticles();\r\n        \r\n        // Visual effects\r\n        this.glowIntensity = 0;\r\n        this.pulsePhase = 0;\r\n        this.energyParticles = [];\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.electrons = [];\r\n        this.holes = [];\r\n        this.sparks = [];\r\n        this.energyWaves = [];\r\n        this.energyParticles = [];\r\n        \r\n        // Create electron particles for N-type material (right side of diode)\r\n        for (let i = 0; i < 30; i++) {\r\n            this.electrons.push({\r\n                x: this.componentX + 50 + Math.random() * 100, // N-region (cathode)\r\n                y: this.componentY - 40 + Math.random() * 80,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 3.5 + Math.random() * 1.2, // Slightly larger electrons\r\n                color: '#00AAFF',\r\n                glow: 0,\r\n                trail: [],\r\n                active: false\r\n            });\r\n        }\r\n        \r\n        // Create hole particles for P-type material (left side of diode)\r\n        for (let i = 0; i < 30; i++) {\r\n            this.holes.push({\r\n                x: this.componentX - 150 + Math.random() * 100, // P-region (anode)\r\n                y: this.componentY - 40 + Math.random() * 80,\r\n                vx: 0,\r\n                vy: 0,\r\n                size: 3.5 + Math.random() * 1.2, // Slightly larger holes\r\n                color: '#FF4444',\r\n                glow: 0,\r\n                trail: [],\r\n                active: false\r\n            });\r\n        }\r\n        \r\n        // Create energy particles\r\n        for (let i = 0; i < 15; i++) {\r\n            this.energyParticles.push({\r\n                x: this.componentX - 100 + Math.random() * 200,\r\n                y: this.componentY - 60 + Math.random() * 120,\r\n                vx: (Math.random() - 0.5) * 2,\r\n                vy: (Math.random() - 0.5) * 2,\r\n                size: 1.8 + Math.random() * 0.7,\r\n                color: '#FFFF00',\r\n                life: 1.0,\r\n                decay: 0.02\r\n            });\r\n        }\r\n    }\r\n    \r\n    setComponentType(type) {\r\n        this.componentType = type;\r\n        this.initializeParticles();\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setBiasType(bias) {\r\n        this.biasType = bias;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setInputVoltage(voltage) {\r\n        this.inputVoltage = voltage;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setBaseVoltage(voltage) {\r\n        this.baseVoltage = voltage;\r\n        this.calculateCurrent();\r\n        \r\n        // Force immediate visual update\r\n        this.time = 0; // Reset animation time for immediate effect\r\n    }\r\n    \r\n    setShowElectrons(show) {\r\n        this.showElectrons = show;\r\n    }\r\n    \r\n    setShowCurrent(show) {\r\n        this.showCurrent = show;\r\n    }\r\n    \r\n    setShowVoltage(show) {\r\n        this.showVoltage = show;\r\n    }\r\n    \r\n    setAnimationSpeed(speed) {\r\n        this.animationSpeed = speed;\r\n    }\r\n    \r\n    calculateCurrent() {\r\n        if (this.componentType === 'diode') {\r\n            if (this.biasType === 'forward' && this.inputVoltage > 0.7) {\r\n                // Diode forward current: exponential relationship with voltage\r\n                const voltageDrop = this.inputVoltage - 0.7;\r\n                this.current = Math.exp(voltageDrop * 2) * 5; // Exponential current increase\r\n                this.power = this.current * 0.7;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.5;\r\n            } else if (this.biasType === 'reverse') {\r\n                // Diode reverse leakage current (very small)\r\n                this.current = 0.001; // 1μA leakage\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        } else if (this.componentType === 'npn') {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // NPN transistor: base current controls collector current\r\n                const baseCurrent = (this.baseVoltage - 0.7) * 10; // Base current\r\n                const beta = 100; // Current gain (typical value)\r\n                this.current = baseCurrent * beta; // Collector current\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.3;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        } else if (this.componentType === 'pnp') {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // PNP transistor: base current controls collector current (negative voltages)\r\n                const baseCurrent = (this.baseVoltage - 0.7) * 8; // Base current\r\n                const beta = 80; // Current gain (slightly lower for PNP)\r\n                this.current = baseCurrent * beta; // Collector current\r\n                this.power = this.current * this.inputVoltage;\r\n                this.isActive = true;\r\n                this.temperature = 25 + this.current * 0.4;\r\n            } else {\r\n                this.current = 0;\r\n                this.power = 0;\r\n                this.isActive = false;\r\n                this.temperature = 25;\r\n            }\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.current = 0;\r\n        this.power = 0;\r\n        this.isActive = false;\r\n        this.glowIntensity = 0;\r\n        this.pulsePhase = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime * this.animationSpeed;\r\n        this.calculateCurrent();\r\n        \r\n        // Update glow and pulse effects\r\n        this.glowIntensity = this.isActive ? Math.sin(this.time * 0.005) * 0.3 + 0.7 : 0;\r\n        this.pulsePhase = this.time * 0.01;\r\n        \r\n        // Update particle movement based on component type\r\n        if (this.isActive && this.showElectrons) {\r\n            if (this.componentType === 'diode') {\r\n                // Diode: show both electrons and holes\r\n                this.updateDiodeParticles();\r\n            } else if (this.componentType === 'npn') {\r\n                // NPN: emphasize electron flow from emitter to collector\r\n                this.updateNPNParticles();\r\n            } else if (this.componentType === 'pnp') {\r\n                // PNP: emphasize hole flow from emitter to collector\r\n                this.updatePNPParticles();\r\n            }\r\n        }\r\n        \r\n        // Update energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n            particle.life -= particle.decay;\r\n            \r\n            // Bounce off boundaries\r\n            if (particle.x < 0 || particle.x > this.ctx.canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > this.ctx.canvas.height) particle.vy *= -1;\r\n            \r\n            // Reset when life is over\r\n            if (particle.life <= 0) {\r\n                particle.x = this.componentX - 100 + Math.random() * 200;\r\n                particle.y = this.componentY - 60 + Math.random() * 120;\r\n                particle.life = 1.0;\r\n            }\r\n        });\r\n        \r\n        // Add sparks when current is high\r\n        if (this.isActive && this.current > 10 && Math.random() < 0.1) {\r\n            this.sparks.push({\r\n                x: this.componentX + Math.random() * 100 - 50,\r\n                y: this.componentY + Math.random() * 60 - 30,\r\n                vx: (Math.random() - 0.5) * 10,\r\n                vy: (Math.random() - 0.5) * 10,\r\n                life: 1.0,\r\n                color: '#FFFF00'\r\n            });\r\n        }\r\n        \r\n        // Update sparks\r\n        this.sparks.forEach((spark, index) => {\r\n            spark.x += spark.vx;\r\n            spark.y += spark.vy;\r\n            spark.life -= 0.05;\r\n            if (spark.life <= 0) {\r\n                this.sparks.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        this.drawBackground();\r\n        this.drawEnergyField();\r\n        this.drawBattery();\r\n        this.drawComponent();\r\n        this.drawLoad();\r\n        this.drawParticles();\r\n        this.drawSparks();\r\n        this.drawCurrentFlow();\r\n        this.drawInfo();\r\n        this.drawInstructions();\r\n    }\r\n    \r\n    drawBackground() {\r\n        // Create dynamic dark sci-fi background with animated gradient\r\n        const time = this.time * 0.001;\r\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\r\n        gradient.addColorStop(0, `hsl(${240 + Math.sin(time) * 10}, 70%, 15%)`);\r\n        gradient.addColorStop(1, `hsl(${250 + Math.cos(time) * 10}, 80%, 10%)`);\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw animated circuit board pattern\r\n        this.ctx.strokeStyle = `rgba(0, 255, 255, ${0.1 + Math.sin(time * 2) * 0.05})`;\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Horizontal lines with pulse effect\r\n        for (let y = 0; y < this.ctx.canvas.height; y += 40) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y + Math.sin(time + y * 0.01) * 2);\r\n            this.ctx.lineTo(this.ctx.canvas.width, y + Math.sin(time + y * 0.01) * 2);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Vertical lines with pulse effect\r\n        for (let x = 0; x < this.ctx.canvas.width; x += 40) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + Math.cos(time + x * 0.01) * 2, 0);\r\n            this.ctx.lineTo(x + Math.cos(time + x * 0.01) * 2, this.ctx.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add floating energy particles in background\r\n        for (let i = 0; i < 20; i++) {\r\n            const x = (i * 37) % this.ctx.canvas.width;\r\n            const y = (i * 23) % this.ctx.canvas.height;\r\n            const alpha = 0.1 + Math.sin(time * 3 + i) * 0.05;\r\n            this.ctx.fillStyle = `rgba(0, 255, 255, ${alpha})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, 1, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawEnergyField() {\r\n        if (this.isActive) {\r\n            const time = this.time * 0.001;\r\n            \r\n            // Draw multiple energy field layers with different effects\r\n            for (let i = 0; i < 3; i++) {\r\n                const radius = 120 + i * 30;\r\n                const alpha = (this.glowIntensity * 0.2) / (i + 1);\r\n                const pulse = Math.sin(time * 5 + i) * 0.1;\r\n                \r\n                const gradient = this.ctx.createRadialGradient(\r\n                    this.componentX, this.componentY, 0,\r\n                    this.componentX, this.componentY, radius\r\n                );\r\n                gradient.addColorStop(0, `rgba(0, 255, 255, ${alpha + pulse})`);\r\n                gradient.addColorStop(0.7, `rgba(0, 255, 255, ${alpha * 0.3})`);\r\n                gradient.addColorStop(1, 'rgba(0, 255, 255, 0)');\r\n                \r\n                this.ctx.fillStyle = gradient;\r\n                this.ctx.fillRect(this.componentX - radius, this.componentY - radius, radius * 2, radius * 2);\r\n            }\r\n            \r\n            // Draw energy waves radiating from component\r\n            for (let i = 0; i < 5; i++) {\r\n                const waveRadius = 50 + i * 20 + Math.sin(time * 3 + i) * 10;\r\n                const waveAlpha = (0.3 - i * 0.05) * this.glowIntensity;\r\n                \r\n                this.ctx.strokeStyle = `rgba(0, 255, 255, ${waveAlpha})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(this.componentX, this.componentY, waveRadius, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawBattery() {\r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw battery with enhanced glow effect when active\r\n        const glowColor = this.isActive ? `rgba(76, 175, 80, ${0.8 + this.glowIntensity * 0.2})` : '#4CAF50';\r\n        this.ctx.fillStyle = glowColor;\r\n        this.ctx.fillRect(this.batteryX - 25, this.batteryY - 35, 50, 70);\r\n        \r\n        // Add metallic shine with animation\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.fillRect(this.batteryX - 20, this.batteryY - 30, 40, 5);\r\n        \r\n        // Draw battery terminals with enhanced metallic effect\r\n        this.ctx.fillStyle = '#888';\r\n        this.ctx.fillRect(this.batteryX - 8, this.batteryY - 45, 16, 12);\r\n        this.ctx.fillRect(this.batteryX - 8, this.batteryY + 33, 16, 12);\r\n        \r\n        // Add terminal shine\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n        this.ctx.fillRect(this.batteryX - 6, this.batteryY - 43, 12, 3);\r\n        this.ctx.fillRect(this.batteryX - 6, this.batteryY + 35, 12, 3);\r\n        \r\n        // Draw voltage label with pulsing glow\r\n        const labelGlow = this.isActive ? Math.sin(time * 3) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(255, 255, 0, ${labelGlow})` : 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(`${this.inputVoltage}V`, this.batteryX, this.batteryY + 60);\r\n        \r\n        // Draw polarity with enhanced colors and glow\r\n        this.ctx.fillStyle = this.isActive ? `rgba(255, 102, 102, ${0.8 + this.glowIntensity})` : '#FF6666';\r\n        this.ctx.font = 'bold 20px Arial';\r\n        this.ctx.fillText('+', this.batteryX - 20, this.batteryY - 5);\r\n        \r\n        this.ctx.fillStyle = this.isActive ? `rgba(102, 102, 255, ${0.8 + this.glowIntensity})` : '#6666FF';\r\n        this.ctx.fillText('-', this.batteryX + 20, this.batteryY + 15);\r\n        \r\n        // Add energy indicator when active\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(0, 255, 0, ${this.glowIntensity})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.batteryX, this.batteryY, 30, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawComponent() {\r\n        if (this.componentType === 'diode') {\r\n            this.drawDiode();\r\n        } else {\r\n            this.drawTransistor();\r\n        }\r\n    }\r\n    \r\n    drawDiode() {\r\n        const time = this.time * 0.001;\r\n        const x = this.componentX;\r\n        const y = this.componentY;\r\n        const size = 40;\r\n        \r\n        // Determine visual state based on bias type\r\n        const isForward = this.biasType === 'forward';\r\n        const isReverse = this.biasType === 'reverse';\r\n        const glow = this.isActive ? this.glowIntensity : 0;\r\n        \r\n        // Enhanced glow effects with pulsing\r\n        const pulseEffect = Math.sin(time * 3) * 0.2;\r\n        const glowColor = isForward ? '#00FF00' : isReverse ? '#FF0000' : '#FFFF00';\r\n        const glowIntensity = isForward ? glow * (1 + pulseEffect) : isReverse ? glow * 0.3 : 0;\r\n        \r\n        // Apply enhanced shadow effect\r\n        this.ctx.shadowColor = this.isActive ? glowColor : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 15 + glowIntensity * 10 : 0;\r\n        \r\n        // Draw diode symbol with enhanced styling\r\n        const symbolColor = this.isActive ? `rgba(255, 255, 0, ${0.9 + glowIntensity})` : '#FFFFFF';\r\n        \r\n        // Triangle (anode) with gradient effect\r\n        this.ctx.fillStyle = symbolColor;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - size, y);\r\n        this.ctx.lineTo(x - size/3, y - size/2);\r\n        this.ctx.lineTo(x - size/3, y + size/2);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Add metallic shine to triangle\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + pulseEffect})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - size + 5, y - size/3);\r\n            this.ctx.lineTo(x - size/3, y);\r\n            this.ctx.lineTo(x - size + 5, y + size/3);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Bar (cathode) with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 8;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x + size/3, y - size/2);\r\n        this.ctx.lineTo(x + size/3, y + size/2);\r\n        this.ctx.stroke();\r\n        \r\n        // Leads with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 6;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - size - 25, y);\r\n        this.ctx.lineTo(x - size, y);\r\n        this.ctx.moveTo(x + size/3 + 25, y);\r\n        this.ctx.lineTo(x + size/3, y);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced labels with better positioning\r\n        this.drawComponentLabel('DIODE', x, y + size + 35, time);\r\n        this.drawBiasIndicator(this.biasType, x, y - size - 25, glowIntensity);\r\n        \r\n        // Enhanced current flow indicators with animation\r\n        if (this.isActive) {\r\n            if (isForward) {\r\n                this.drawCurrentFlow(x - size - 45, x + size/3 + 45, y, y, 'forward', glow);\r\n                this.drawVoltageDrop(x, y - size/2 - 15, '0.7V', glow);\r\n            } else if (isReverse) {\r\n                this.drawCurrentFlow(x - size - 45, x + size/3 + 45, y, y, 'reverse', glow);\r\n                this.drawVoltageDrop(x, y - size/2 - 15, 'BLOCKED', glow);\r\n            }\r\n        }\r\n        \r\n        // Add junction glow effect for forward bias\r\n        if (this.isActive && isForward) {\r\n            this.ctx.fillStyle = `rgba(0, 255, 0, ${0.3 + pulseEffect})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x - size/3, y, 8, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawTransistor() {\r\n        const time = this.time * 0.001;\r\n        const x = this.componentX;\r\n        const y = this.componentY;\r\n        const radius = 35;\r\n        const leadLength = 25;\r\n        \r\n        // Determine visual state based on bias type\r\n        const isForward = this.biasType === 'forward';\r\n        const isReverse = this.biasType === 'reverse';\r\n        const glow = this.isActive ? this.glowIntensity : 0;\r\n        \r\n        // Enhanced glow effects with pulsing\r\n        const pulseEffect = Math.sin(time * 3) * 0.2;\r\n        const glowColor = isForward ? '#00FF00' : isReverse ? '#FF0000' : '#FFFF00';\r\n        const glowIntensity = isForward ? glow * (1 + pulseEffect) : isReverse ? glow * 0.3 : 0;\r\n        \r\n        // Apply enhanced shadow effect\r\n        this.ctx.shadowColor = this.isActive ? glowColor : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 15 + glowIntensity * 10 : 0;\r\n        \r\n        // Draw transistor symbol with enhanced styling\r\n        const symbolColor = this.isActive ? `rgba(255, 255, 0, ${0.9 + glowIntensity})` : '#FFFFFF';\r\n        \r\n        // Circle (transistor body) with enhanced styling\r\n        this.ctx.strokeStyle = symbolColor;\r\n        this.ctx.lineWidth = 6;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n        this.ctx.stroke();\r\n        \r\n        // Add inner glow for active state\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(255, 255, 0, ${0.1 + pulseEffect})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, radius - 2, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Enhanced leads with better styling\r\n        this.ctx.lineWidth = 6;\r\n        this.drawTransistorLeads(x, y, radius, leadLength, symbolColor);\r\n        \r\n        // Enhanced emitter arrow\r\n        this.drawEmitterArrow(x, y, radius, symbolColor);\r\n        \r\n        // Enhanced lead labels\r\n        this.drawLeadLabels(x, y, radius, leadLength, symbolColor);\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Enhanced labels with better positioning\r\n        this.drawComponentLabel(this.componentType.toUpperCase(), x, y + radius + leadLength + 55, time);\r\n        this.drawBiasIndicator(this.biasType, x, y - radius - leadLength - 35, glowIntensity);\r\n        \r\n        // Enhanced current flow indicators with voltage drops\r\n        if (this.isActive) {\r\n            if (isForward) {\r\n                // Different current flow direction for NPN vs PNP\r\n                if (this.componentType === 'npn') {\r\n                    // NPN: electrons flow from emitter to collector\r\n                    this.drawCurrentFlow(x, x, y + radius + leadLength + 25, y - radius - leadLength - 25, 'forward', glow);\r\n                    this.drawVoltageDrop(x, y - radius - 15, 'Vbe: 0.7V', glow);\r\n                    this.drawVoltageDrop(x, y + radius + 15, 'Vce: 0.2V', glow);\r\n                } else if (this.componentType === 'pnp') {\r\n                    // PNP: holes flow from emitter to collector\r\n                    this.drawCurrentFlow(x, x, y - radius - leadLength - 25, y + radius + leadLength + 25, 'forward', glow);\r\n                    this.drawVoltageDrop(x, y - radius - 15, 'Vbe: -0.7V', glow);\r\n                    this.drawVoltageDrop(x, y + radius + 15, 'Vce: -0.2V', glow);\r\n                }\r\n            } else if (isReverse) {\r\n                this.drawCurrentFlow(x, x, y - radius - leadLength - 25, y + radius + leadLength + 25, 'reverse', glow);\r\n                this.drawVoltageDrop(x, y - radius - 15, 'BLOCKED', glow);\r\n            }\r\n        }\r\n        \r\n        // Add base current indicator for forward bias\r\n        if (this.isActive && isForward) {\r\n            const baseCurrentColor = this.componentType === 'npn' ? \r\n                `rgba(0, 255, 255, ${0.5 + pulseEffect})` : \r\n                `rgba(255, 100, 100, ${0.5 + pulseEffect})`;\r\n            \r\n            this.ctx.strokeStyle = baseCurrentColor;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.setLineDash([3, 3]);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - radius - leadLength - 10, y);\r\n            this.ctx.lineTo(x - radius, y);\r\n            this.ctx.stroke();\r\n            this.ctx.setLineDash([]);\r\n        }\r\n        \r\n        // Add transistor type indicator\r\n        if (this.isActive) {\r\n            const typeColor = this.componentType === 'npn' ? '#00AAFF' : '#FF4444';\r\n            this.ctx.fillStyle = `rgba(0, 0, 0, 0.7)`;\r\n            this.ctx.fillRect(x - 30, y - radius - 45, 60, 20);\r\n            this.ctx.fillStyle = typeColor;\r\n            this.ctx.font = 'bold 10px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText(this.componentType.toUpperCase(), x, y - radius - 35);\r\n        }\r\n    }\r\n    \r\n    // Helper methods for drawing components\r\n    drawComponentLabel(text, x, y, time) {\r\n        const labelGlow = this.isActive ? Math.sin(time * 2) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(255, 255, 0, ${labelGlow})` : 'white';\r\n        this.ctx.font = 'bold 18px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n    \r\n    drawBiasIndicator(biasType, x, y, glowIntensity) {\r\n        const biasText = biasType.toUpperCase();\r\n        const biasColor = biasType === 'forward' ? '#00FF00' : \r\n                         biasType === 'reverse' ? '#FF0000' : '#FFFF00';\r\n        this.ctx.fillStyle = this.isActive ? `rgba(0, 255, 0, ${0.8 + glowIntensity})` : biasColor;\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.fillText(biasText, x, y);\r\n    }\r\n    \r\n    drawCurrentFlow(x1, x2, y1, y2, type, glow) {\r\n        const isForward = type === 'forward';\r\n        const color = isForward ? `rgba(0, 255, 255, ${glow})` : `rgba(255, 0, 0, ${glow * 0.5})`;\r\n        const dash = isForward ? [5, 5] : [3, 3];\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.setLineDash(dash);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n        this.ctx.setLineDash([]);\r\n    }\r\n    \r\n    drawTransistorLeads(x, y, radius, leadLength, color) {\r\n        this.ctx.strokeStyle = color;\r\n        \r\n        // Collector lead (top)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y - radius);\r\n        this.ctx.lineTo(x, y - radius - leadLength);\r\n        this.ctx.stroke();\r\n        \r\n        // Base lead (middle)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x - radius, y);\r\n        this.ctx.lineTo(x - radius - leadLength, y);\r\n        this.ctx.stroke();\r\n        \r\n        // Emitter lead (bottom)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y + radius);\r\n        this.ctx.lineTo(x, y + radius + leadLength);\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    drawEmitterArrow(x, y, radius, color) {\r\n        this.ctx.fillStyle = color;\r\n        \r\n        if (this.componentType === 'npn') {\r\n            // NPN: arrow pointing outward from emitter (electron flow)\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 8, y + radius - 15);\r\n            this.ctx.lineTo(x + 8, y + radius - 15);\r\n            this.ctx.lineTo(x, y + radius - 5);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        } else if (this.componentType === 'pnp') {\r\n            // PNP: arrow pointing inward to emitter (hole flow)\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x - 8, y + radius + 5);\r\n            this.ctx.lineTo(x + 8, y + radius + 5);\r\n            this.ctx.lineTo(x, y + radius + 15);\r\n            this.ctx.closePath();\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    drawLeadLabels(x, y, radius, leadLength, color) {\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('C', x, y - radius - leadLength - 10);\r\n        this.ctx.fillText('B', x - radius - leadLength - 10, y);\r\n        this.ctx.fillText('E', x, y + radius + leadLength + 20);\r\n    }\r\n    \r\n    drawVoltageDrop(x, y, text, glow) {\r\n        this.ctx.fillStyle = `rgba(255, 255, 0, ${0.8 + glow})`;\r\n        this.ctx.font = 'bold 10px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n    \r\n    updateDiodeParticles() {\r\n        // Diode: show electrons and holes moving in opposite directions during forward bias\r\n        // Electrons: N-side (cathode) to P-side (anode) - right to left\r\n        // Holes: P-side (anode) to N-side (cathode) - left to right\r\n        // Both contribute to current flow in the same direction\r\n        this.electrons.forEach((electron, index) => {\r\n            if (this.biasType === 'forward') {\r\n                // Electrons flow from N-side (cathode) to P-side (anode) - right to left\r\n                electron.vx = -3 + Math.sin(this.time * 0.02 + index * 0.5) * 1.5;\r\n                electron.vy = Math.sin(this.time * 0.03 + index) * 0.5;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = Math.sin(this.time * 0.1 + index) * 0.5 + 0.5;\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 1.0});\r\n                if (electron.trail.length > 5) electron.trail.shift();\r\n                \r\n                if (electron.x < this.componentX - 200) {\r\n                    electron.x = this.componentX + 100;\r\n                    electron.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else if (this.biasType === 'reverse') {\r\n                // Minimal reverse leakage current\r\n                electron.vx = 0.1 + Math.sin(this.time * 0.01 + index * 0.5) * 0.05;\r\n                electron.vy = Math.sin(this.time * 0.02 + index) * 0.1;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = 0.1;\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 0.3});\r\n                if (electron.trail.length > 3) electron.trail.shift();\r\n                \r\n                if (electron.x > this.componentX + 200) {\r\n                    electron.x = this.componentX - 100;\r\n                    electron.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else {\r\n                electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n            }\r\n        });\r\n        \r\n        this.holes.forEach((hole, index) => {\r\n            if (this.biasType === 'forward') {\r\n                // Holes flow from P-side (anode) to N-side (cathode) - left to right\r\n                hole.vx = 2.5 + Math.sin(this.time * 0.02 + index * 0.5) * 1.2;\r\n                hole.vy = Math.sin(this.time * 0.03 + index) * 0.5;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = Math.sin(this.time * 0.1 + index) * 0.5 + 0.5;\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 1.0});\r\n                if (hole.trail.length > 5) hole.trail.shift();\r\n                \r\n                if (hole.x > this.componentX + 200) {\r\n                    hole.x = this.componentX - 100;\r\n                    hole.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else if (this.biasType === 'reverse') {\r\n                // Minimal reverse leakage current\r\n                hole.vx = 0.1 + Math.sin(this.time * 0.01 + index * 0.5) * 0.05;\r\n                hole.vy = Math.sin(this.time * 0.02 + index) * 0.1;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = 0.1;\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 0.3});\r\n                if (hole.trail.length > 3) hole.trail.shift();\r\n                \r\n                if (hole.x > this.componentX + 200) {\r\n                    hole.x = this.componentX - 100;\r\n                    hole.y = this.componentY - 40 + Math.random() * 80;\r\n                }\r\n            } else {\r\n                hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n            }\r\n        });\r\n    }\r\n    \r\n    updateNPNParticles() {\r\n        // NPN: emphasize electron flow from emitter to collector\r\n        // Base voltage affects particle speed and intensity\r\n        const baseVoltageEffect = Math.max(0, (this.baseVoltage - 0.7) / 0.3); // 0 to 1 scale\r\n        const speedMultiplier = 1 + baseVoltageEffect * 2; // 1x to 3x speed\r\n        \r\n        this.electrons.forEach((electron, index) => {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // Electrons flow from emitter (bottom) to collector (top)\r\n                electron.vx = Math.sin(this.time * 0.02 + index * 0.5) * 1.0 * speedMultiplier;\r\n                electron.vy = (-4 + Math.sin(this.time * 0.03 + index) * 1.0) * speedMultiplier;\r\n                electron.x += electron.vx;\r\n                electron.y += electron.vy;\r\n                electron.glow = (Math.sin(this.time * 0.1 + index) * 0.5 + 0.5) * (0.5 + baseVoltageEffect * 0.5);\r\n                \r\n                electron.trail.push({x: electron.x, y: electron.y, alpha: 1.0});\r\n                if (electron.trail.length > 8) electron.trail.shift();\r\n                \r\n                if (electron.y < this.componentY - 150) {\r\n                    electron.x = this.componentX - 40 + Math.random() * 80;\r\n                    electron.y = this.componentY + 100;\r\n                }\r\n            } else {\r\n                electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n            }\r\n        });\r\n        \r\n        // Minimal hole movement for NPN\r\n        this.holes.forEach((hole, index) => {\r\n            hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n        });\r\n    }\r\n    \r\n    updatePNPParticles() {\r\n        // PNP: emphasize hole flow from emitter to collector\r\n        // Base voltage affects particle speed and intensity\r\n        const baseVoltageEffect = Math.max(0, (this.baseVoltage - 0.7) / 0.3); // 0 to 1 scale\r\n        const speedMultiplier = 1 + baseVoltageEffect * 2; // 1x to 3x speed\r\n        \r\n        this.holes.forEach((hole, index) => {\r\n            if (this.biasType === 'forward' && this.baseVoltage > 0.7) {\r\n                // Holes flow from emitter (top) to collector (bottom)\r\n                hole.vx = Math.sin(this.time * 0.02 + index * 0.5) * 1.0 * speedMultiplier;\r\n                hole.vy = (4 + Math.sin(this.time * 0.03 + index) * 1.0) * speedMultiplier;\r\n                hole.x += hole.vx;\r\n                hole.y += hole.vy;\r\n                hole.glow = (Math.sin(this.time * 0.1 + index) * 0.5 + 0.5) * (0.5 + baseVoltageEffect * 0.5);\r\n                \r\n                hole.trail.push({x: hole.x, y: hole.y, alpha: 1.0});\r\n                if (hole.trail.length > 8) hole.trail.shift();\r\n                \r\n                if (hole.y > this.componentY + 150) {\r\n                    hole.x = this.componentX - 40 + Math.random() * 80;\r\n                    hole.y = this.componentY - 100;\r\n                }\r\n            } else {\r\n                hole.vx = 0; hole.vy = 0; hole.glow = 0; hole.trail = [];\r\n            }\r\n        });\r\n        \r\n        // Minimal electron movement for PNP\r\n        this.electrons.forEach((electron, index) => {\r\n            electron.vx = 0; electron.vy = 0; electron.glow = 0; electron.trail = [];\r\n        });\r\n    }\r\n    \r\n    drawLoad() {\r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw load (light bulb) with enhanced glow effect and animation\r\n        const bulbGlow = this.isActive ? this.glowIntensity : 0;\r\n        const pulseEffect = this.isActive ? Math.sin(time * 3) * 0.1 : 0;\r\n        const bulbColor = this.isActive ? `rgba(255, 255, 0, ${0.8 + bulbGlow * 0.2 + pulseEffect})` : '#666';\r\n        \r\n        // Draw outer glow when active\r\n        if (this.isActive) {\r\n            this.ctx.shadowColor = '#FFFF00';\r\n            this.ctx.shadowBlur = 30 + this.glowIntensity * 20;\r\n            this.ctx.fillStyle = `rgba(255, 255, 0, ${0.3 + this.glowIntensity * 0.2})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.loadX, this.loadY, 45, 0, 2 * Math.PI);\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0;\r\n        }\r\n        \r\n        // Draw main bulb\r\n        this.ctx.fillStyle = bulbColor;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.loadX, this.loadY, 35, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        \r\n        // Add metallic shine to bulb\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.4 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.loadX - 10, this.loadY - 15, 8, 0, Math.PI);\r\n        this.ctx.fill();\r\n        \r\n        // Draw bulb base with enhanced metallic effect\r\n        this.ctx.fillStyle = '#444';\r\n        this.ctx.fillRect(this.loadX - 18, this.loadY + 35, 36, 25);\r\n        \r\n        // Add metallic shine to base with animation\r\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${0.3 + Math.sin(time * 2) * 0.1})`;\r\n        this.ctx.fillRect(this.loadX - 15, this.loadY + 37, 30, 5);\r\n        \r\n        // Draw filament with enhanced effect and glow\r\n        this.ctx.strokeStyle = this.isActive ? `rgba(255, 170, 0, ${0.8 + this.glowIntensity})` : '#999';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.shadowColor = this.isActive ? '#FFAA00' : 'transparent';\r\n        this.ctx.shadowBlur = this.isActive ? 5 : 0;\r\n        \r\n        // Main filament\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.loadX - 12, this.loadY);\r\n        this.ctx.lineTo(this.loadX + 12, this.loadY);\r\n        this.ctx.stroke();\r\n        \r\n        // Add additional filament lines when active with animation\r\n        if (this.isActive) {\r\n            const filamentPulse = Math.sin(time * 4) * 0.2 + 0.8;\r\n            this.ctx.strokeStyle = `rgba(255, 170, 0, ${0.8 + this.glowIntensity * filamentPulse})`;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.loadX - 8, this.loadY - 5);\r\n            this.ctx.lineTo(this.loadX + 8, this.loadY - 5);\r\n            this.ctx.stroke();\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.loadX - 8, this.loadY + 5);\r\n            this.ctx.lineTo(this.loadX + 8, this.loadY + 5);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw load label with pulsing glow\r\n        const labelGlow = this.isActive ? Math.sin(time * 2) * 0.3 + 0.7 : 0.7;\r\n        this.ctx.fillStyle = this.isActive ? `rgba(255, 255, 0, ${labelGlow})` : 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('LOAD', this.loadX, this.loadY + 80);\r\n        \r\n        // Add power indicator with enhanced styling\r\n        if (this.isActive) {\r\n            this.ctx.fillStyle = `rgba(0, 255, 0, ${0.8 + this.glowIntensity})`;\r\n            this.ctx.font = 'bold 12px Arial';\r\n            this.ctx.fillText(`${this.power.toFixed(1)}mW`, this.loadX, this.loadY - 60);\r\n            \r\n            // Add energy waves radiating from bulb\r\n            for (let i = 0; i < 3; i++) {\r\n                const waveRadius = 50 + i * 15 + Math.sin(time * 2 + i) * 5;\r\n                const waveAlpha = (0.2 - i * 0.05) * this.glowIntensity;\r\n                this.ctx.strokeStyle = `rgba(255, 255, 0, ${waveAlpha})`;\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(this.loadX, this.loadY, waveRadius, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n    \r\n    drawParticles() {\r\n        if (!this.showElectrons) return;\r\n        \r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw electron trails with enhanced effects (filled circles)\r\n        this.electrons.forEach(electron => {\r\n            if (electron.trail.length > 0) {\r\n                electron.trail.forEach((trailPoint, index) => {\r\n                    const alpha = trailPoint.alpha * (index / electron.trail.length) * 0.6;\r\n                    const pulse = Math.sin(time * 4 + index) * 0.2 + 0.8;\r\n                    this.ctx.fillStyle = `rgba(0, 170, 255, ${alpha * pulse})`;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(trailPoint.x, trailPoint.y, electron.size * 0.6, 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Draw hole trails with enhanced effects (empty circles)\r\n        this.holes.forEach(hole => {\r\n            if (hole.trail.length > 0) {\r\n                hole.trail.forEach((trailPoint, index) => {\r\n                    const alpha = trailPoint.alpha * (index / hole.trail.length) * 0.6;\r\n                    const pulse = Math.sin(time * 4 + index) * 0.2 + 0.8;\r\n                    this.ctx.strokeStyle = `rgba(255, 68, 68, ${alpha * pulse})`;\r\n                    this.ctx.lineWidth = 1;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(trailPoint.x, trailPoint.y, hole.size * 0.6, 0, Math.PI * 2);\r\n                    this.ctx.stroke();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Draw electrons with enhanced glow effect and standard symbol (filled circle)\r\n        this.electrons.forEach(electron => {\r\n            const glowIntensity = electron.glow * 0.4;\r\n            const pulse = Math.sin(time * 3 + electron.x * 0.01) * 0.3 + 0.7;\r\n            \r\n            // Outer glow\r\n            this.ctx.shadowColor = '#00AAFF';\r\n            this.ctx.shadowBlur = glowIntensity * 15;\r\n            this.ctx.fillStyle = `rgba(0, 170, 255, ${0.8 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x, electron.y, electron.size * 1.2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Core electron circle (filled - standard notation)\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.fillStyle = electron.color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x, electron.y, electron.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Inner highlight\r\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${0.6 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(electron.x - 2, electron.y - 2, electron.size * 0.3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Draw holes with enhanced glow effect and standard symbol (empty circle)\r\n        this.holes.forEach(hole => {\r\n            const glowIntensity = hole.glow * 0.4;\r\n            const pulse = Math.sin(time * 3 + hole.x * 0.01) * 0.3 + 0.7;\r\n            \r\n            // Subtle outer glow for holes (not filling the circle)\r\n            this.ctx.shadowColor = '#FF4444';\r\n            this.ctx.shadowBlur = glowIntensity * 8;\r\n            \r\n            // Core hole circle (empty - standard notation)\r\n            this.ctx.strokeStyle = hole.color;\r\n            this.ctx.lineWidth = 0.5; // Very thin line for smaller holes\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(hole.x, hole.y, hole.size, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            this.ctx.shadowBlur = 0;\r\n            \r\n            // Optional: small center dot to show it's a hole (not an empty space)\r\n            this.ctx.fillStyle = `rgba(255, 68, 68, ${0.3 * pulse})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(hole.x, hole.y, hole.size * 0.2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Draw energy particles with enhanced effects\r\n        this.energyParticles.forEach(particle => {\r\n            const pulse = Math.sin(time * 5 + particle.x * 0.01) * 0.3 + 0.7;\r\n            this.ctx.fillStyle = `rgba(255, 255, 0, ${particle.life * pulse})`;\r\n            this.ctx.shadowColor = '#FFFF00';\r\n            this.ctx.shadowBlur = particle.life * 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0;\r\n        });\r\n    }\r\n    \r\n    drawSparks() {\r\n        // Draw sparks when current is high\r\n        this.sparks.forEach(spark => {\r\n            this.ctx.fillStyle = `rgba(255, 255, 0, ${spark.life})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(spark.x, spark.y, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n    }\r\n    \r\n    drawCurrentFlow() {\r\n        if (!this.showCurrent || !this.isActive) return;\r\n        \r\n        const time = this.time * 0.001;\r\n        \r\n        // Draw current flow with enhanced effects and animation\r\n        this.ctx.strokeStyle = `rgba(255, 255, 0, ${0.8 + this.glowIntensity})`;\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.setLineDash([15, 8]);\r\n        \r\n        // Add glow effect to current flow\r\n        this.ctx.shadowColor = '#FFFF00';\r\n        this.ctx.shadowBlur = 10 + this.glowIntensity * 10;\r\n        \r\n        // Battery to component with animated dash pattern\r\n        const dashOffset = Math.sin(time * 3) * 5;\r\n        this.ctx.setLineDash([15 + dashOffset, 8 - dashOffset]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.batteryX + 25, this.batteryY);\r\n        this.ctx.lineTo(this.componentX - 90, this.componentY);\r\n        this.ctx.stroke();\r\n        \r\n        // Component to load with animated dash pattern\r\n        this.ctx.setLineDash([15 - dashOffset, 8 + dashOffset]);\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.componentX + 90, this.componentY);\r\n        this.ctx.lineTo(this.loadX - 35, this.loadY);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.setLineDash([]);\r\n        this.ctx.shadowBlur = 0;\r\n        \r\n        // Draw animated current arrows with pulsing effect\r\n        const arrowOffset = Math.sin(time * 2) * 5;\r\n        const arrowGlow = Math.sin(time * 4) * 0.3 + 0.7;\r\n        this.drawArrow(this.batteryX + 35 + arrowOffset, this.batteryY, 12, 0, `rgba(255, 255, 0, ${arrowGlow})`);\r\n        this.drawArrow(this.componentX + 100 + arrowOffset, this.componentY, 12, 0, `rgba(255, 255, 0, ${arrowGlow})`);\r\n        \r\n        // Draw current intensity indicator with animation\r\n        const intensity = Math.min(this.current / 20, 1);\r\n        const pulseIntensity = intensity * (0.3 + Math.sin(time * 5) * 0.1);\r\n        this.ctx.fillStyle = `rgba(255, 255, 0, ${pulseIntensity})`;\r\n        this.ctx.fillRect(this.componentX - 100, this.componentY - 10, 200, 20);\r\n        \r\n        // Add energy particles along the current path\r\n        for (let i = 0; i < 5; i++) {\r\n            const particleProgress = (time * 0.5 + i * 0.2) % 1;\r\n            const particleX = this.batteryX + 25 + (this.componentX - 90 - this.batteryX - 25) * particleProgress;\r\n            const particleY = this.batteryY + Math.sin(time * 3 + i) * 3;\r\n            \r\n            this.ctx.fillStyle = `rgba(255, 255, 0, ${0.6 + Math.sin(time * 4 + i) * 0.2})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particleX, particleY, 2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Voltage drop indicators are already shown on the component symbol\r\n    }\r\n    \r\n    drawArrow(x, y, dx, dy, color) {\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x - 8, y - 4);\r\n        this.ctx.lineTo(x - 8, y + 4);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawInfo() {\r\n        // Draw info panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 200);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔌 Diode & Transistor', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText(`Component: ${this.componentType.toUpperCase()}`, 20, 50);\r\n        this.ctx.fillText(`Bias: ${this.biasType.toUpperCase()}`, 20, 70);\r\n        this.ctx.fillText(`Input Voltage: ${this.inputVoltage}V`, 20, 90);\r\n        \r\n        if (this.componentType === 'npn' || this.componentType === 'pnp') {\r\n            this.ctx.fillText(`Base Voltage: ${this.baseVoltage}V`, 20, 110);\r\n        }\r\n        \r\n        this.ctx.fillText(`Current: ${this.current.toFixed(1)}mA`, 20, 130);\r\n        this.ctx.fillText(`Power: ${this.power.toFixed(1)}mW`, 20, 150);\r\n        this.ctx.fillText(`Status: ${this.isActive ? 'ACTIVE' : 'INACTIVE'}`, 20, 170);\r\n        this.ctx.fillText(`Temperature: ${this.temperature}°C`, 20, 190);\r\n    }\r\n    \r\n    drawInstructions() {\r\n        // Draw instruction panel with color legend\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';\r\n        this.ctx.fillRect(this.ctx.canvas.width - 320, 10, 310, 180);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🔌 Particle Legend:', this.ctx.canvas.width - 310, 30);\r\n        \r\n        // Draw color-coded legend\r\n        this.ctx.font = 'bold 14px Arial';\r\n        \r\n        // Blue particles (Electrons) - filled circle\r\n        this.ctx.fillStyle = '#00AAFF';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 50, 2.5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Electrons (filled circle)', this.ctx.canvas.width - 285, 55);\r\n        \r\n        // Red particles (Holes) - empty circle\r\n        this.ctx.strokeStyle = '#FF4444';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 70, 2.5, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Holes (empty circle)', this.ctx.canvas.width - 285, 75);\r\n        \r\n        // Yellow particles (Energy)\r\n        this.ctx.fillStyle = '#FFFF00';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.ctx.canvas.width - 300, 90, 2.5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Energy Carriers', this.ctx.canvas.width - 285, 95);\r\n        \r\n        // Yellow arrows (Current flow)\r\n        this.ctx.fillStyle = '#FFFF00';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.ctx.canvas.width - 300, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 290, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 292, 108);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 290, 110);\r\n        this.ctx.lineTo(this.ctx.canvas.width - 292, 112);\r\n        this.ctx.fill();\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Current Flow', this.ctx.canvas.width - 285, 115);\r\n        \r\n        // Component behavior\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.fillText('💡 Behavior:', this.ctx.canvas.width - 310, 140);\r\n        \r\n        this.ctx.font = '11px Arial';\r\n        if (this.componentType === 'diode') {\r\n            this.ctx.fillText('• Forward bias: Electrons flow, light on', this.ctx.canvas.width - 310, 155);\r\n            this.ctx.fillText('• Reverse bias: No flow, light off', this.ctx.canvas.width - 310, 170);\r\n        } else {\r\n            this.ctx.fillText('• Base controls collector current', this.ctx.canvas.width - 310, 155);\r\n            this.ctx.fillText('• Small base = Large collector', this.ctx.canvas.width - 310, 170);\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            componentType: this.componentType,\r\n            biasType: this.biasType,\r\n            inputVoltage: this.inputVoltage,\r\n            baseVoltage: this.baseVoltage,\r\n            current: this.current,\r\n            power: this.power,\r\n            temperature: this.temperature,\r\n            isActive: this.isActive,\r\n            time: this.time\r\n        };\r\n    }\r\n}","\r\nexport class WaveParticleDuality {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.canvas = ctx.canvas;\r\n        \r\n        // Quantum properties\r\n        this.mode = 'wave'; // 'wave', 'particle', 'superposition', 'measurement'\r\n        this.photonEnergy = 5.0; // eV\r\n        this.wavelength = 150; // nm\r\n        this.speed = 1.0;\r\n        this.time = 0;\r\n        \r\n        // Wave function properties\r\n        this.waveFunction = [];\r\n        this.amplitude = 50;\r\n        this.frequency = 1.0;\r\n        this.phase = 0;\r\n        this.wavePhase = 0;\r\n        \r\n        // Particle properties\r\n        this.particleX = 100;\r\n        this.particleY = 300;\r\n        this.particleVelocity = { x: 8, y: 0 };\r\n        this.particleSize = 8;\r\n        \r\n        // Interference properties\r\n        this.slits = [\r\n            { x: 400, y: 250, width: 20, height: 100 },\r\n            { x: 400, y: 350, width: 20, height: 100 }\r\n        ];\r\n        this.interferencePattern = [];\r\n        this.screenX = 600;\r\n        \r\n        // Measurement properties\r\n        this.measurementCount = 0;\r\n        this.measurementResults = [];\r\n        this.showMeasurement = false;\r\n        \r\n        // Display options\r\n        this.showWaveFunction = true;\r\n        this.showParticlePosition = true;\r\n        this.showInterference = true;\r\n        this.showMeasurementEffect = false;\r\n\r\n        \r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setMode(mode) {\r\n        this.mode = mode;\r\n        this.reset();\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setPhotonEnergy(energy) {\r\n        this.photonEnergy = energy;\r\n        this.wavelength = 1240 / energy; // E = hc/λ, simplified\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setWavelength(wavelength) {\r\n        this.wavelength = wavelength;\r\n        this.photonEnergy = 1240 / wavelength; // E = hc/λ, simplified\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    setShowWaveFunction(show) {\r\n        this.showWaveFunction = show;\r\n    }\r\n    \r\n    setShowParticlePosition(show) {\r\n        this.showParticlePosition = show;\r\n    }\r\n    \r\n    setShowInterference(show) {\r\n        this.showInterference = show;\r\n    }\r\n    \r\n    setShowMeasurementEffect(show) {\r\n        this.showMeasurementEffect = show;\r\n    }\r\n    \r\n\r\n    \r\n    performMeasurement() {\r\n        this.measurementCount++;\r\n        this.showMeasurement = true;\r\n        \r\n        // Simulate measurement collapse\r\n        if (this.mode === 'superposition') {\r\n            const random = Math.random();\r\n            if (random < 0.5) {\r\n                this.mode = 'particle';\r\n            } else {\r\n                this.mode = 'wave';\r\n            }\r\n        }\r\n        \r\n        // Record measurement result\r\n        this.measurementResults.push({\r\n            time: this.time,\r\n            mode: this.mode,\r\n            position: { x: this.particleX, y: this.particleY }\r\n        });\r\n        \r\n        // Force measurement effect to show regardless of checkbox\r\n        this.showMeasurementEffect = true;\r\n        \r\n        setTimeout(() => {\r\n            this.showMeasurement = false;\r\n            this.showMeasurementEffect = false;\r\n        }, 3000);\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.phase = 0;\r\n        this.wavePhase = 0;\r\n        this.particleX = 100;\r\n        this.particleY = 300;\r\n        this.measurementCount = 0;\r\n        this.measurementResults = [];\r\n        this.showMeasurement = false;\r\n        this.initializeWaveFunction();\r\n        this.initializeInterferencePattern();\r\n    }\r\n    \r\n    initializeWaveFunction() {\r\n        this.waveFunction = [];\r\n        const numPoints = 150;\r\n        for (let i = 0; i < numPoints; i++) {\r\n            const x = (i / numPoints) * this.canvas.width;\r\n            \r\n            // Create a clean sinusoidal wave function\r\n            const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength + this.phase);\r\n            \r\n            const y = this.canvas.height / 2 + wave;\r\n            this.waveFunction.push({ x, y });\r\n        }\r\n    }\r\n    \r\n    initializeInterferencePattern() {\r\n        this.interferencePattern = [];\r\n        const screenHeight = 300; // Reduced to match new detection screen height\r\n        const centerY = this.canvas.height / 2;\r\n        \r\n        // Define slit positions for vertical slits\r\n        const slit1X = 390; // Center of left slit\r\n        const slit2X = 410; // Center of right slit\r\n        const slitY = 300;   // Y position of slits (center)\r\n        const screenX = this.screenX;\r\n        \r\n        for (let y = 0; y < screenHeight; y += 8) {\r\n            const screenY = centerY - screenHeight/2 + y;\r\n            let intensity = 0;\r\n            \r\n            // Calculate path difference from each slit\r\n            const distance1 = Math.sqrt(Math.pow(screenX - slit1X, 2) + Math.pow(screenY - slitY, 2));\r\n            const distance2 = Math.sqrt(Math.pow(screenX - slit2X, 2) + Math.pow(screenY - slitY, 2));\r\n            \r\n            // Calculate phase difference\r\n            const pathDifference = distance2 - distance1;\r\n            const phaseDifference = 2 * Math.PI * pathDifference / this.wavelength;\r\n            \r\n            // Calculate interference intensity\r\n            const amplitude1 = 1 / Math.sqrt(distance1);\r\n            const amplitude2 = 1 / Math.sqrt(distance2);\r\n            \r\n            // Total amplitude with interference\r\n            const totalAmplitude = amplitude1 + amplitude2 * Math.cos(phaseDifference);\r\n            intensity = Math.abs(totalAmplitude);\r\n            \r\n            this.interferencePattern.push({\r\n                x: screenX,\r\n                y: screenY,\r\n                intensity: intensity\r\n            });\r\n        }\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        const dt = (deltaTime / 1000) * this.speed * 5; // Increased multiplier for better responsiveness\r\n        this.time += dt;\r\n        this.phase += dt * this.frequency;\r\n        \r\n        // Only update wave function when needed (not every frame)\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            // Update wave function points efficiently\r\n            this.waveFunction.forEach((point, i) => {\r\n                const x = point.x;\r\n                \r\n                // Check if wave is blocked by the barrier\r\n                if (x >= 380 && x <= 420) {\r\n                    // Inside barrier - wave is blocked except at slits\r\n                    // Check if this x position corresponds to a slit\r\n                    const slit1X = 390; // Left slit center\r\n                    const slit2X = 410; // Right slit center\r\n                    const slitWidth = 10;\r\n                    \r\n                    // Check if this x position is within either slit\r\n                    const distanceFromSlit1 = Math.abs(x - slit1X);\r\n                    const distanceFromSlit2 = Math.abs(x - slit2X);\r\n                    \r\n                    if (distanceFromSlit1 < slitWidth / 2 || distanceFromSlit2 < slitWidth / 2) {\r\n                        // Wave passes through slit\r\n                        const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength - this.phase);\r\n                        point.y = this.canvas.height / 2 + wave;\r\n                    } else {\r\n                        // Wave is blocked by barrier - make it invisible\r\n                        point.y = -1000; // Move off-screen\r\n                    }\r\n                } else {\r\n                    // Outside barrier - normal wave propagation\r\n                    const wave = this.amplitude * Math.sin(2 * Math.PI * x / this.wavelength - this.phase);\r\n                    point.y = this.canvas.height / 2 + wave;\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Update particle position with more realistic movement\r\n        if (this.mode === 'particle' || this.mode === 'superposition') {\r\n            this.particleX += this.particleVelocity.x * dt;\r\n            \r\n            // Add some vertical oscillation for particle\r\n            this.particleY = 300 + Math.sin(this.time * 3) * 20;\r\n            \r\n            // Reset particle when it reaches the screen\r\n            if (this.particleX > this.screenX - 50) {\r\n                this.particleX = 100;\r\n            }\r\n        }\r\n        \r\n        // Only update interference pattern when needed and less frequently\r\n        if (this.showInterference && (this.mode === 'wave' || this.mode === 'superposition')) {\r\n            // Update interference pattern less frequently for better performance\r\n            if (Math.floor(this.time * 10) % 3 === 0) { // Update every 3rd frame at 10fps\r\n        this.initializeInterferencePattern();\r\n            }\r\n        }\r\n        \r\n        // Add wave propagation effect\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            this.wavePhase += dt * 2;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Clear canvas\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Draw background grid\r\n        this.drawGrid();\r\n        \r\n        // Draw slits\r\n        this.drawSlits();\r\n        \r\n        // Draw detection screen\r\n        this.drawDetectionScreen();\r\n        \r\n        // Draw based on current mode\r\n        switch (this.mode) {\r\n            case 'wave':\r\n                this.renderWaveMode();\r\n                break;\r\n            case 'particle':\r\n                this.renderParticleMode();\r\n                break;\r\n            case 'superposition':\r\n                this.renderSuperpositionMode();\r\n                break;\r\n            case 'measurement':\r\n                this.renderMeasurementMode();\r\n                break;\r\n        }\r\n        \r\n        // Draw interference pattern (only if enabled and in wave/superposition modes)\r\n        if (this.showInterference && (this.mode === 'wave' || this.mode === 'superposition')) {\r\n            this.drawInterferencePattern();\r\n        }\r\n        \r\n        // Draw measurement effect\r\n        if (this.showMeasurement) {\r\n            this.drawMeasurementEffect();\r\n        }\r\n        \r\n        // Draw canvas labels\r\n        this.drawQuantumLabels();\r\n        \r\n        // Draw descriptive labels\r\n        this.drawDescriptiveLabels();\r\n    }\r\n    \r\n    drawGrid() {\r\n        // Draw a very subtle grid for reference\r\n        this.ctx.strokeStyle = 'rgba(100, 100, 100, 0.1)';\r\n        this.ctx.lineWidth = 0.5;\r\n        \r\n        // Vertical lines (less frequent)\r\n        for (let x = 0; x < this.canvas.width; x += 100) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Horizontal lines (less frequent)\r\n        for (let y = 0; y < this.canvas.height; y += 100) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawSlits() {\r\n        // Draw main barrier with gradient for depth\r\n        const gradient = this.ctx.createLinearGradient(380, 0, 420, 0);\r\n        gradient.addColorStop(0, '#2c3e50');\r\n        gradient.addColorStop(0.5, '#34495e');\r\n        gradient.addColorStop(1, '#2c3e50');\r\n        \r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fillRect(380, 0, 40, this.canvas.height);\r\n        \r\n        // Add subtle shadow for depth\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';\r\n        this.ctx.shadowBlur = 4;\r\n        this.ctx.shadowOffsetX = 2;\r\n        this.ctx.fillRect(380, 0, 40, this.canvas.height);\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.shadowOffsetX = 0;\r\n        \r\n        // Cut out vertical slits with rounded corners\r\n        this.ctx.clearRect(385, 200, 10, 200); // Left slit\r\n        this.ctx.clearRect(405, 200, 10, 200); // Right slit\r\n        \r\n        // Draw sharp slit borders with better contrast\r\n        this.ctx.strokeStyle = '#1a1a1a';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n        \r\n        // Left slit border\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(385, 200);\r\n        this.ctx.lineTo(385, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(395, 200);\r\n        this.ctx.lineTo(395, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Right slit border\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(405, 200);\r\n        this.ctx.lineTo(405, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(415, 200);\r\n        this.ctx.lineTo(415, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Add inner highlight for slit edges\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(386, 200);\r\n        this.ctx.lineTo(386, 400);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(414, 200);\r\n        this.ctx.lineTo(414, 400);\r\n        this.ctx.stroke();\r\n        \r\n        // Add barrier label\r\n        this.ctx.fillStyle = '#2c3e50';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Barrier', 400, 190);\r\n        \r\n        // Add arrows showing wave approach with improved styling\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(350, 300);\r\n        this.ctx.lineTo(380, 300);\r\n        this.ctx.stroke();\r\n        \r\n        // Arrow head with better shape\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(375, 295);\r\n        this.ctx.lineTo(380, 300);\r\n        this.ctx.lineTo(375, 305);\r\n        this.ctx.closePath();\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        this.ctx.fill();\r\n        \r\n        // Add arrow label\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        this.ctx.font = 'bold 10px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Wave', 365, 290);\r\n    }\r\n    \r\n    drawDetectionScreen() {\r\n        // Draw detection screen with reduced height to make more space\r\n        const pulse = Math.sin(this.time * 2) * 0.3 + 0.7;\r\n        this.ctx.fillStyle = `rgba(200, 200, 255, ${0.6 * pulse})`;\r\n        this.ctx.fillRect(this.screenX - 8, 150, 16, 300);\r\n        \r\n        // Draw screen border\r\n        this.ctx.strokeStyle = '#0066cc';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeRect(this.screenX - 8, 150, 16, 300);\r\n        \r\n        // Add pulsing effect for wave/superposition modes\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            const activePulse = Math.sin(this.time * 4) * 0.4 + 0.6;\r\n            this.ctx.fillStyle = `rgba(100, 150, 255, ${activePulse * 0.3})`;\r\n            this.ctx.fillRect(this.screenX - 10, 150, 20, 300);\r\n        }\r\n        \r\n        // Small detection screen label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Screen', this.screenX, 145);\r\n        \r\n\r\n        \r\n        // Draw detection zones\r\n        this.ctx.strokeStyle = 'rgba(0, 102, 204, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let i = 0; i < 6; i++) {\r\n            const y = 170 + i * 45;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.screenX - 8, y);\r\n            this.ctx.lineTo(this.screenX + 8, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    renderWaveMode() {\r\n        if (!this.showWaveFunction) return;\r\n        \r\n        // Draw wave function with barrier interaction\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 3;\r\n        \r\n        // Draw wave before barrier\r\n        this.ctx.beginPath();\r\n        let started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x < 380) {\r\n                if (!started) {\r\n                    this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n                } else {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave after barrier\r\n        this.ctx.beginPath();\r\n        started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x > 420) {\r\n                if (!started) {\r\n                this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n            } else {\r\n                this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave particles\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        for (let i = 0; i < this.waveFunction.length; i += 5) {\r\n            const point = this.waveFunction[i];\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(point.x, point.y, 3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n\r\n        \r\n        // Add wave direction arrows (moved to avoid overlap)\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < 3; i++) {\r\n            const x = 150 + i * 120;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 350);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + 15, 345);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.lineTo(x + 15, 355);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    renderWaveModeWithoutLabel() {\r\n        if (!this.showWaveFunction) return;\r\n        \r\n        // Draw wave function with barrier interaction\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 3;\r\n        \r\n        // Draw wave before barrier\r\n        this.ctx.beginPath();\r\n        let started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x < 380) {\r\n                if (!started) {\r\n                    this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n                } else {\r\n                    this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave after barrier\r\n        this.ctx.beginPath();\r\n        started = false;\r\n        for (let i = 0; i < this.waveFunction.length; i++) {\r\n            const point = this.waveFunction[i];\r\n            if (point.x > 420) {\r\n                if (!started) {\r\n                this.ctx.moveTo(point.x, point.y);\r\n                    started = true;\r\n            } else {\r\n                this.ctx.lineTo(point.x, point.y);\r\n                }\r\n            }\r\n        }\r\n        this.ctx.stroke();\r\n        \r\n        // Draw wave particles\r\n        this.ctx.fillStyle = '#4CAF50';\r\n        for (let i = 0; i < this.waveFunction.length; i += 5) {\r\n            const point = this.waveFunction[i];\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(point.x, point.y, 3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Add wave direction arrows (moved to avoid overlap)\r\n        this.ctx.strokeStyle = '#4CAF50';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < 3; i++) {\r\n            const x = 150 + i * 120;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 350);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.stroke();\r\n            \r\n            // Arrow head\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + 15, 345);\r\n            this.ctx.lineTo(x + 20, 350);\r\n            this.ctx.lineTo(x + 15, 355);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    renderParticleMode() {\r\n        if (!this.showParticlePosition) return;\r\n        \r\n        // Draw particle\r\n        this.ctx.fillStyle = '#FF5722';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, this.particleSize, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw particle trail\r\n        this.ctx.strokeStyle = 'rgba(255, 87, 34, 0.5)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX - 50, this.particleY);\r\n        this.ctx.lineTo(this.particleX + 50, this.particleY);\r\n        this.ctx.stroke();\r\n        \r\n\r\n    }\r\n    \r\n    renderParticleModeWithoutLabel() {\r\n        if (!this.showParticlePosition) return;\r\n        \r\n        // Draw particle\r\n        this.ctx.fillStyle = '#FF5722';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, this.particleSize, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw particle trail\r\n        this.ctx.strokeStyle = 'rgba(255, 87, 34, 0.5)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX - 50, this.particleY);\r\n        this.ctx.lineTo(this.particleX + 50, this.particleY);\r\n        this.ctx.stroke();\r\n    }\r\n    \r\n    renderSuperpositionMode() {\r\n        // Draw both wave and particle aspects without their labels\r\n        this.renderWaveModeWithoutLabel();\r\n        this.renderParticleModeWithoutLabel();\r\n        \r\n\r\n    }\r\n    \r\n    renderMeasurementMode() {\r\n        this.renderParticleModeWithoutLabel();\r\n        \r\n        // Draw measurement apparatus\r\n        this.ctx.strokeStyle = '#FF9800';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.particleX, this.particleY - 30);\r\n        this.ctx.lineTo(this.particleX, this.particleY + 30);\r\n        this.ctx.stroke();\r\n        \r\n\r\n    }\r\n    \r\n    drawInterferencePattern() {\r\n        // Draw interference pattern with better visibility and animation\r\n        for (let i = 0; i < this.interferencePattern.length; i++) {\r\n            const point = this.interferencePattern[i];\r\n            const intensity = Math.min(point.intensity * 3, 1); // Increased intensity\r\n            const alpha = Math.min(intensity, 0.9);\r\n            \r\n            // Add time-based animation\r\n            const timeOffset = this.time * 2 + i * 0.1;\r\n            const animatedIntensity = intensity * (0.7 + 0.3 * Math.sin(timeOffset));\r\n            \r\n            // Use different colors for bright and dark fringes\r\n            if (intensity > 0.2) {\r\n                this.ctx.fillStyle = `rgba(156, 39, 176, ${animatedIntensity})`; // Purple for bright fringes\r\n            } else {\r\n                this.ctx.fillStyle = `rgba(0, 0, 0, ${animatedIntensity * 0.3})`; // Dark for destructive interference\r\n            }\r\n            \r\n            // Draw larger, more visible dots\r\n            const dotSize = Math.max(6, animatedIntensity * 12);\r\n            this.ctx.fillRect(point.x - dotSize/2, point.y - dotSize/2, dotSize, dotSize);\r\n        }\r\n        \r\n        // Add animated detection dots\r\n        if (this.mode === 'wave' || this.mode === 'superposition') {\r\n            this.ctx.fillStyle = '#FFD700';\r\n            for (let i = 0; i < 5; i++) {\r\n                const y = 170 + i * 50;\r\n                const x = this.screenX + 8;\r\n                const pulse = Math.sin(this.time * 3 + i) * 0.5 + 0.5;\r\n                this.ctx.globalAlpha = pulse;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, 4, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n            this.ctx.globalAlpha = 1;\r\n        }\r\n        \r\n\r\n        \r\n        // Add wave arrows to slits with animation\r\n        this.ctx.strokeStyle = '#9C27B0';\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Animated wave arrows\r\n        const arrowPulse = Math.sin(this.time * 2) * 0.3 + 0.7;\r\n        this.ctx.globalAlpha = arrowPulse;\r\n        \r\n        // From left slit\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(390, 300);\r\n        this.ctx.lineTo(this.screenX, 200);\r\n        this.ctx.stroke();\r\n        \r\n        // From right slit\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(410, 300);\r\n        this.ctx.lineTo(this.screenX, 400);\r\n        this.ctx.stroke();\r\n        \r\n        this.ctx.globalAlpha = 1;\r\n        \r\n\r\n    }\r\n    \r\n    drawMeasurementEffect() {\r\n        // More dramatic flash effect with pulsing\r\n        const pulse = Math.sin(this.time * 8) * 0.3 + 0.7;\r\n        this.ctx.fillStyle = `rgba(255, 255, 0, ${0.4 * pulse})`;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Add particle collapse animation\r\n        this.ctx.fillStyle = '#FF5722';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.particleX, this.particleY, 15 + Math.sin(this.time * 10) * 5, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n\r\n    }\r\n    \r\n    drawQuantumInfo() {\r\n        // Draw quantum information panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 120, 350, 200); // Increased height to accommodate formulas\r\n        \r\n        // Draw formulas at the top of the panel\r\n        this.ctx.fillStyle = '#E74C3C';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('E = hf', 20, 140);\r\n        this.ctx.fillText('λ = h/p', 20, 160);\r\n        this.ctx.fillText('ΔxΔp ≥ ℏ/2', 20, 180);\r\n        \r\n        // Draw separator line\r\n        this.ctx.strokeStyle = '#FFFFFF';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(20, 190);\r\n        this.ctx.lineTo(340, 190);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw current values\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`Mode: ${this.mode.toUpperCase()}`, 20, 210);\r\n        this.ctx.fillText(`Energy: ${this.photonEnergy.toFixed(1)} eV`, 20, 230);\r\n        this.ctx.fillText(`Wavelength: ${this.wavelength.toFixed(0)} nm`, 20, 250);\r\n        this.ctx.fillText(`Measurements: ${this.measurementCount}`, 20, 270);\r\n        this.ctx.fillText(`Time: ${this.time.toFixed(1)}s`, 20, 290);\r\n        \r\n        // Add mode-specific descriptions\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#FFFF00';\r\n        switch(this.mode) {\r\n            case 'wave':\r\n                this.ctx.fillText('Wave Behavior: Light behaves as a wave', 20, 315);\r\n                this.ctx.fillText('creating interference patterns', 20, 330);\r\n                break;\r\n            case 'particle':\r\n                this.ctx.fillText('Particle Behavior: Light behaves as', 20, 315);\r\n                this.ctx.fillText('discrete particles with definite position', 20, 330);\r\n                break;\r\n            case 'superposition':\r\n                this.ctx.fillText('Superposition: Light exists in both', 20, 315);\r\n                this.ctx.fillText('wave and particle states until measured', 20, 330);\r\n                break;\r\n            case 'measurement':\r\n                this.ctx.fillText('Measurement: Observing the system', 20, 315);\r\n                this.ctx.fillText('forces it to choose wave OR particle', 20, 330);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            mode: this.mode,\r\n            photonEnergy: this.photonEnergy.toFixed(1),\r\n            wavelength: this.wavelength.toFixed(0),\r\n            measurementCount: this.measurementCount,\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n    \r\n    drawQuantumLabels() {\r\n        // Draw elegant labels on the canvas\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 16px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw animation type label only (formulas moved to info panel)\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        this.ctx.fillText('Wave-Particle Duality', this.ctx.canvas.width / 2, 25);\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n    \r\n    drawDescriptiveLabels() {\r\n        // Draw descriptive labels in the bottom-right corner\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 13px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.6)';\r\n        this.ctx.shadowBlur = 1;\r\n        \r\n        const startX = this.ctx.canvas.width - 200;\r\n        const startY = this.ctx.canvas.height - 120;\r\n        const lineHeight = 16;\r\n        \r\n        // Draw mode-specific descriptions\r\n        switch(this.mode) {\r\n            case 'wave':\r\n                this.ctx.fillText('Wave Behavior:', startX, startY);\r\n                this.ctx.fillText('• Light travels as waves', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Creates interference pattern', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Shows wave-like properties', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'particle':\r\n                this.ctx.fillText('Particle Behavior:', startX, startY);\r\n                this.ctx.fillText('• Light travels as particles', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Hits screen at specific points', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Shows particle-like properties', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'superposition':\r\n                this.ctx.fillText('Quantum Superposition:', startX, startY);\r\n                this.ctx.fillText('• Light exists in both states', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Wave + Particle simultaneously', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Until measured (collapsed)', startX, startY + lineHeight * 3);\r\n                break;\r\n            case 'measurement':\r\n                this.ctx.fillText('Measurement Effect:', startX, startY);\r\n                this.ctx.fillText('• Observation forces a choice', startX, startY + lineHeight);\r\n                this.ctx.fillText('• Wave OR Particle behavior', startX, startY + lineHeight * 2);\r\n                this.ctx.fillText('• Quantum mystery revealed', startX, startY + lineHeight * 3);\r\n                break;\r\n        }\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n}","\r\nexport class NuclearReactions {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.canvas = ctx.canvas;\r\n        this.time = 0;\r\n        this.speed = 1;\r\n        this.mode = 'fission'; // fission, fusion\r\n        this.neutronEnergy = 1.0;\r\n        this.temperature = 1.0;\r\n\r\n        \r\n        // Nuclear particles\r\n        this.nuclei = [];\r\n        this.neutrons = [];\r\n        this.fissionProducts = [];\r\n        this.fusionProducts = [];\r\n        this.energyParticles = [];\r\n        this.reactingParticles = [];\r\n        this.shockwaves = [];\r\n        \r\n        // Statistics\r\n        this.energyReleased = 0;\r\n        this.neutronsProduced = 0;\r\n        this.chainReactions = 0;\r\n        this.fissionCount = 0;\r\n        this.fusionCount = 0;\r\n        \r\n        // Chain reaction state\r\n        this.chainStarted = false;\r\n        \r\n\r\n        \r\n        // Click interaction\r\n        this.setupClickEvents();\r\n        this.initializeNuclei();\r\n    }\r\n    \r\n    setupClickEvents() {\r\n        this.canvas.addEventListener('click', (e) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            \r\n            // Start reacting particle movement for all modes\r\n            this.reactingParticles.forEach(particle => {\r\n                if (!particle.moving) {\r\n                    // Find the target atom for this particle\r\n                    this.findTargetForParticle(particle);\r\n                    particle.moving = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    initializeNuclei() {\r\n        this.nuclei = [];\r\n        this.neutrons = [];\r\n        this.fissionProducts = [];\r\n        this.fusionProducts = [];\r\n        this.energyParticles = [];\r\n        this.reactingParticles = [];\r\n        \r\n        // Create initial nuclei based on mode\r\n        const centerX = this.canvas.width / 2;\r\n        const centerY = this.canvas.height / 2;\r\n        \r\n        if (this.mode === 'chain') {\r\n            // Chain reaction mode: 3x3 grid of uranium atoms for chain reactions\r\n            const gridSpacing = 40;\r\n            const gridSize = 3; // 3x3 grid\r\n            \r\n            for (let row = 0; row < gridSize; row++) {\r\n                for (let col = 0; col < gridSize; col++) {\r\n                    const x = centerX + (col - 1) * gridSpacing;\r\n                    const y = centerY + (row - 1) * gridSpacing;\r\n                    \r\n                    this.nuclei.push({\r\n                        x: x,\r\n                        y: y,\r\n                        type: 'uranium',\r\n                        protons: 92,\r\n                        neutrons: 143,\r\n                        mass: 235,\r\n                        radius: 8,\r\n                        color: '#FF6B35',\r\n                        stability: 0.8,\r\n                        fissioned: false,\r\n                        visible: true,\r\n                        time: 0\r\n                    });\r\n                }\r\n            }\r\n            \r\n            // Add neutron as reacting particle\r\n            this.reactingParticles.push({\r\n                x: centerX - 150,\r\n                y: centerY,\r\n                targetX: centerX,\r\n                targetY: centerY,\r\n                type: 'neutron',\r\n                radius: 12, // Much larger for better visibility\r\n                color: '#9C27B0',\r\n                speed: 80,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n        } else if (this.mode === 'fission') {\r\n            // Single fission demonstration\r\n                            this.nuclei.push({\r\n                    x: centerX,\r\n                    y: centerY,\r\n                    type: 'uranium',\r\n                    protons: 92,\r\n                    neutrons: 143,\r\n                    mass: 235,\r\n                    radius: 30, // Much larger than hydrogen atoms for proportion\r\n                    color: '#FF6B35',\r\n                    stability: 0.8,\r\n                    fissioned: false,\r\n                    visible: true,\r\n                    time: 0\r\n                });\r\n            \r\n            // Add neutron as reacting particle\r\n            this.reactingParticles.push({\r\n                x: centerX - 150,\r\n                y: centerY,\r\n                targetX: centerX,\r\n                targetY: centerY,\r\n                type: 'neutron',\r\n                radius: 12, // Much larger for better visibility\r\n                color: '#9C27B0',\r\n                speed: 80,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n        } else if (this.mode === 'fusion') {\r\n            // Single fusion demonstration with deuterium (H-2) and tritium (H-3)\r\n            // Only create the tritium nucleus - deuterium will be the reacting particle\r\n            this.nuclei.push({\r\n                x: centerX + 60,\r\n                y: centerY,\r\n                type: 'tritium',\r\n                protons: 1,\r\n                neutrons: 2,\r\n                mass: 3,\r\n                radius: 20, // Even bigger for better visibility\r\n                color: '#4CAF50',\r\n                stability: 0.9,\r\n                fused: false,\r\n                visible: true,\r\n                time: 0\r\n            });\r\n            \r\n            // Add deuterium as reacting particle (this will be the moving H-2)\r\n            this.reactingParticles.push({\r\n                x: centerX - 60,\r\n                y: centerY,\r\n                targetX: centerX + 60,\r\n                targetY: centerY,\r\n                type: 'deuterium',\r\n                radius: 20, // Same size as nucleus for consistency\r\n                color: '#4CAF50',\r\n                speed: 60,\r\n                moving: false,\r\n                life: 10\r\n            });\r\n\r\n        }\r\n    }\r\n    \r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    setMode(mode) {\r\n        this.mode = mode;\r\n        this.chainStarted = false;\r\n        this.reset();\r\n    }\r\n    \r\n    setNeutronEnergy(energy) {\r\n        this.neutronEnergy = energy;\r\n        // Update neutron speeds based on energy\r\n        this.neutrons.forEach(neutron => {\r\n            const speed = 50 + energy * 100;\r\n            const angle = Math.atan2(neutron.vy, neutron.vx);\r\n            neutron.vx = Math.cos(angle) * speed;\r\n            neutron.vy = Math.sin(angle) * speed;\r\n        });\r\n    }\r\n    \r\n    setTemperature(temp) {\r\n        this.temperature = temp;\r\n        // Temperature affects reaction intensity - more energy particles and faster reactions\r\n    }\r\n    \r\n\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.energyReleased = 0;\r\n        this.neutronsProduced = 0;\r\n        this.chainReactions = 0;\r\n        this.fissionCount = 0;\r\n        this.fusionCount = 0;\r\n        this.initializeNuclei();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime * this.speed * 0.001;\r\n        \r\n        // Update nuclei\r\n        this.nuclei.forEach(nucleus => {\r\n            nucleus.time += deltaTime * this.speed * 0.001;\r\n            \r\n            // No random events - only reactions through reacting particles\r\n        });\r\n        \r\n        // Update neutrons\r\n        this.neutrons.forEach(neutron => {\r\n            neutron.x += neutron.vx * deltaTime * this.speed * 0.001;\r\n            neutron.y += neutron.vy * deltaTime * this.speed * 0.001;\r\n            \r\n            // Slow down reaction product neutrons over time\r\n            if (neutron.isReactionProduct) {\r\n                neutron.vx *= 0.99;\r\n                neutron.vy *= 0.99;\r\n                \r\n                // Keep neutrons within canvas bounds\r\n                if (neutron.x < neutron.radius) {\r\n                    neutron.x = neutron.radius;\r\n                    neutron.vx = Math.abs(neutron.vx) * 0.5;\r\n                }\r\n                if (neutron.x > this.canvas.width - neutron.radius) {\r\n                    neutron.x = this.canvas.width - neutron.radius;\r\n                    neutron.vx = -Math.abs(neutron.vx) * 0.5;\r\n                }\r\n                if (neutron.y < neutron.radius) {\r\n                    neutron.y = neutron.radius;\r\n                    neutron.vy = Math.abs(neutron.vy) * 0.5;\r\n                }\r\n                if (neutron.y > this.canvas.height - neutron.radius) {\r\n                    neutron.y = this.canvas.height - neutron.radius;\r\n                    neutron.vy = -Math.abs(neutron.vy) * 0.5;\r\n                }\r\n            } else {\r\n                // Only decrease life for non-reaction product neutrons\r\n                neutron.life -= deltaTime * this.speed * 0.001;\r\n            }\r\n            \r\n            // Check for neutron capture - enhanced chain reaction\r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'uranium' && !nucleus.fissioned) {\r\n                    const distance = Math.sqrt((neutron.x - nucleus.x) ** 2 + (neutron.y - nucleus.y) ** 2);\r\n                    if (distance < nucleus.radius + 15) { // Increased detection radius\r\n                        this.triggerFission(nucleus);\r\n                        if (!neutron.isReactionProduct) {\r\n                            neutron.life = 0; // Only remove non-reaction product neutrons\r\n                        }\r\n                        this.chainReactions++;\r\n                        \r\n                        // Enhanced chain reaction - spawn more neutrons\r\n                        const additionalNeutrons = 2 + Math.floor(Math.random() * 3); // More neutrons\r\n                        for (let i = 0; i < additionalNeutrons; i++) {\r\n                            this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Remove dead neutrons - keep reaction product neutrons permanently\r\n        this.neutrons = this.neutrons.filter(neutron => {\r\n            if (neutron.isReactionProduct) {\r\n                return true; // Keep reaction product neutrons permanently\r\n            }\r\n            // For non-reaction product neutrons, keep them visible longer\r\n            return neutron.life > -10;\r\n        });\r\n        \r\n        // Update fission products\r\n        this.fissionProducts.forEach(product => {\r\n            product.x += product.vx * deltaTime * this.speed * 0.001;\r\n            product.y += product.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down the products over time\r\n            product.vx *= 0.99;\r\n            product.vy *= 0.99;\r\n            // Don't remove products - let them stay visible\r\n        });\r\n        \r\n        // Update fusion products\r\n        this.fusionProducts.forEach(product => {\r\n            product.x += product.vx * deltaTime * this.speed * 0.001;\r\n            product.y += product.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down the products over time\r\n            product.vx *= 0.99;\r\n            product.vy *= 0.99;\r\n            // Don't remove products - let them stay visible\r\n        });\r\n        \r\n        // Update reacting particles\r\n        this.reactingParticles.forEach(particle => {\r\n            if (particle.moving) {\r\n                // Calculate direction to target\r\n                const dx = particle.targetX - particle.x;\r\n                const dy = particle.targetY - particle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance > 5) {\r\n                    // Move toward target with some randomness\r\n                    const speed = particle.speed * deltaTime * this.speed * 0.001;\r\n                    \r\n                    // Add slight randomness to make it more realistic\r\n                    const randomAngle = (Math.random() - 0.5) * 0.1; // Small random angle\r\n                    const angle = Math.atan2(dy, dx) + randomAngle;\r\n                    \r\n                    particle.x += Math.cos(angle) * speed;\r\n                    particle.y += Math.sin(angle) * speed;\r\n                    \r\n                    // Check if particle has moved too far from target (missed)\r\n                    const newDistance = Math.sqrt((particle.x - particle.targetX) ** 2 + (particle.y - particle.targetY) ** 2);\r\n                    if (newDistance > distance + 20) {\r\n                        // Particle missed the target\r\n                        particle.life = 0;\r\n                    }\r\n                } else {\r\n                    // Collision occurred - trigger reaction\r\n                    this.handleReactionCollision(particle);\r\n                    particle.life = 0; // Remove the particle\r\n                }\r\n            }\r\n        });\r\n        this.reactingParticles = this.reactingParticles.filter(particle => particle.life > 0);\r\n        \r\n        // Update energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            particle.x += particle.vx * deltaTime * this.speed * 0.001;\r\n            particle.y += particle.vy * deltaTime * this.speed * 0.001;\r\n            // Slow down energy particles over time but keep them visible\r\n            particle.vx *= 0.98;\r\n            particle.vy *= 0.98;\r\n            particle.life -= deltaTime * this.speed * 0.001;\r\n            particle.radius += deltaTime * this.speed * 0.001 * 5; // Slower expansion\r\n        });\r\n        // Keep energy particles visible longer - only remove after much longer time\r\n        this.energyParticles = this.energyParticles.filter(particle => particle.life > -10);\r\n        \r\n        // Update shockwaves\r\n        this.shockwaves.forEach(wave => {\r\n            wave.radius += wave.speed * deltaTime * this.speed * 0.001;\r\n            wave.life -= deltaTime * this.speed * 0.001 * 0.5; // Fade out over time\r\n        });\r\n        \r\n        // Remove dead shockwaves\r\n        this.shockwaves = this.shockwaves.filter(wave => wave.life > 0);\r\n        \r\n        // Description stays until reset - no timer\r\n        \r\n        // No automatic neutron spawning - only use pre-drawn reacting particles\r\n    }\r\n    \r\n    triggerFission(nucleus) {\r\n        nucleus.fissioned = true;\r\n        nucleus.visible = false; // Hide the uranium atom after fission\r\n        this.fissionCount++;\r\n        this.energyReleased += 200 * this.temperature; // MeV - affected by temperature\r\n        \r\n        // Create fission products\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (50 + Math.random() * 100) * this.temperature;\r\n        \r\n        // First fission product (lighter) - Krypton-92\r\n        this.fissionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            mass: 92,\r\n            protons: 36,\r\n            neutrons: 56,\r\n            color: '#FF9800',\r\n            radius: 8,\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Second fission product (heavier) - Barium-141\r\n        this.fissionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: Math.cos(angle + Math.PI) * speed,\r\n            vy: Math.sin(angle + Math.PI) * speed,\r\n            mass: 141,\r\n            protons: 56,\r\n            neutrons: 85,\r\n            color: '#E91E63',\r\n            radius: 9,\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Spawn neutrons as fission products - affected by temperature\r\n        const neutronCount = Math.floor(1 + Math.random() * 2 + this.temperature * 0.5); // Fewer neutrons for single reactions\r\n        for (let i = 0; i < neutronCount; i++) {\r\n            this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n        }\r\n        \r\n        // Create moderate energy release explosion - affected by temperature\r\n        const energyParticleCount = Math.floor(8 * this.temperature); // Reduced from 20\r\n        const colors = ['#FFD700', '#FF6B35', '#FF8C00']; // Fewer colors\r\n        \r\n        for (let i = 0; i < energyParticleCount; i++) {\r\n            const angle = (i / energyParticleCount) * Math.PI * 2;\r\n            const speed = (25 + Math.random() * 35) * this.temperature; // Reduced speed\r\n            const radius = 2 + Math.random() * 4; // Smaller particles\r\n            const life = 10 + Math.random() * 8; // Shorter life\r\n            \r\n            this.energyParticles.push({\r\n                x: nucleus.x,\r\n                y: nucleus.y,\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: colors[Math.floor(Math.random() * colors.length)],\r\n                radius: radius,\r\n                life: life,\r\n                originalRadius: radius,\r\n                pulse: Math.random() * Math.PI * 2 // For pulsing effect\r\n            });\r\n        }\r\n        \r\n        // Add smaller shockwave effect\r\n        this.shockwaves.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            radius: 0,\r\n            maxRadius: 80 * this.temperature, // Reduced from 150\r\n            speed: 120 * this.temperature, // Reduced from 200\r\n            life: 0.8, // Shorter life\r\n            color: 'rgba(255, 215, 0, 0.2)' // Less opacity\r\n        });\r\n    }\r\n    \r\n    triggerFusion(nucleus) {\r\n        nucleus.fused = true;\r\n        nucleus.visible = false; // Hide the hydrogen atoms after fusion\r\n        \r\n        // Also hide the deuterium nucleus (the reacting particle's source)\r\n        this.nuclei.forEach(hNucleus => {\r\n            if (hNucleus.type === 'deuterium' && !hNucleus.fused) {\r\n                hNucleus.visible = false;\r\n            }\r\n        });\r\n        \r\n        this.fusionCount++;\r\n        this.energyReleased += 17.6 * this.temperature; // MeV for deuterium-tritium fusion - affected by temperature\r\n        \r\n        // Create helium nucleus - Helium-4\r\n        this.fusionProducts.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            vx: (Math.random() - 0.5) * 40 * this.temperature,\r\n            vy: (Math.random() - 0.5) * 40 * this.temperature,\r\n            mass: 4,\r\n            protons: 2,\r\n            neutrons: 2,\r\n            color: '#2196F3',\r\n            radius: 25, // Even larger radius for better visibility\r\n            life: 8 // Longer life for better visibility\r\n        });\r\n        \r\n        // Spawn neutron as fusion product (scientifically accurate for D-T fusion)\r\n        this.spawnReactionNeutronAt(nucleus.x, nucleus.y);\r\n        \r\n        // Create moderate fusion energy release - affected by temperature\r\n        const energyParticleCount = Math.floor(6 * this.temperature); // Reduced from 15\r\n        const colors = ['#FFEB3B', '#FFD700', '#FFA500']; // Fewer colors\r\n        \r\n        for (let i = 0; i < energyParticleCount; i++) {\r\n            const angle = (i / energyParticleCount) * Math.PI * 2;\r\n            const speed = (20 + Math.random() * 30) * this.temperature; // Reduced speed\r\n            const radius = 4 + Math.random() * 6; // Smaller particles\r\n            const life = 8 + Math.random() * 6; // Shorter life\r\n            \r\n            this.energyParticles.push({\r\n                x: nucleus.x,\r\n                y: nucleus.y,\r\n                vx: Math.cos(angle) * speed,\r\n                vy: Math.sin(angle) * speed,\r\n                color: colors[Math.floor(Math.random() * colors.length)],\r\n                radius: radius,\r\n                life: life,\r\n                originalRadius: radius,\r\n                pulse: Math.random() * Math.PI * 2 // For pulsing effect\r\n            });\r\n        }\r\n        \r\n        // Add smaller fusion shockwave effect\r\n        this.shockwaves.push({\r\n            x: nucleus.x,\r\n            y: nucleus.y,\r\n            radius: 0,\r\n            maxRadius: 60 * this.temperature, // Reduced from 120\r\n            speed: 100 * this.temperature, // Reduced from 180\r\n            life: 0.7, // Shorter life\r\n            color: 'rgba(255, 235, 59, 0.25)' // Less opacity\r\n        });\r\n    }\r\n    \r\n    spawnNeutron() {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const radius = 100;\r\n        const x = this.canvas.width / 2 + Math.cos(angle) * radius;\r\n        const y = this.canvas.height / 2 + Math.sin(angle) * radius;\r\n        this.spawnNeutronAt(x, y);\r\n    }\r\n    \r\n    spawnNeutronAt(x, y) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (30 + Math.random() * 40) * this.neutronEnergy; // Speed affected by neutron energy\r\n        \r\n        this.neutrons.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            color: '#9C27B0',\r\n            radius: 4, // Slightly larger for better visibility\r\n            life: 15, // Regular lifetime for chain reaction neutrons\r\n            isReactionProduct: false // Not a reaction product\r\n        });\r\n        \r\n        this.neutronsProduced++;\r\n    }\r\n    \r\n    spawnReactionNeutronAt(x, y) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const speed = (30 + Math.random() * 40) * this.neutronEnergy; // Speed affected by neutron energy\r\n        \r\n        this.neutrons.push({\r\n            x: x,\r\n            y: y,\r\n            vx: Math.cos(angle) * speed,\r\n            vy: Math.sin(angle) * speed,\r\n            color: '#9C27B0',\r\n            radius: 4, // Slightly larger for better visibility\r\n            life: Infinity, // Permanent lifetime for reaction products\r\n            isReactionProduct: true // Mark as reaction product\r\n        });\r\n        \r\n        this.neutronsProduced++;\r\n    }\r\n    \r\n    findTargetForParticle(particle) {\r\n        if (particle.type === 'neutron') {\r\n            // Find the closest uranium nucleus\r\n            let closestNucleus = null;\r\n            let closestDistance = Infinity;\r\n            \r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'uranium' && !nucleus.fissioned) {\r\n                    const distance = Math.sqrt((particle.x - nucleus.x) ** 2 + (particle.y - nucleus.y) ** 2);\r\n                    if (distance < closestDistance) {\r\n                        closestDistance = distance;\r\n                        closestNucleus = nucleus;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (closestNucleus) {\r\n                particle.targetX = closestNucleus.x;\r\n                particle.targetY = closestNucleus.y;\r\n                particle.targetNucleus = closestNucleus;\r\n            }\r\n        } else if (particle.type === 'deuterium') {\r\n            // Find the closest tritium nucleus for fusion\r\n            let closestNucleus = null;\r\n            let closestDistance = Infinity;\r\n            \r\n            this.nuclei.forEach(nucleus => {\r\n                if (nucleus.type === 'tritium' && !nucleus.fused) {\r\n                    const distance = Math.sqrt((particle.x - nucleus.x) ** 2 + (particle.y - nucleus.y) ** 2);\r\n                    if (distance < closestDistance) {\r\n                        closestDistance = distance;\r\n                        closestNucleus = nucleus;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            if (closestNucleus) {\r\n                particle.targetX = closestNucleus.x;\r\n                particle.targetY = closestNucleus.y;\r\n                particle.targetNucleus = closestNucleus;\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleReactionCollision(particle) {\r\n        if (particle.type === 'neutron' && particle.targetNucleus) {\r\n            const distance = Math.sqrt((particle.x - particle.targetNucleus.x) ** 2 + (particle.y - particle.targetNucleus.y) ** 2);\r\n            if (distance < particle.targetNucleus.radius + 10) {\r\n                this.triggerFission(particle.targetNucleus);\r\n            }\r\n        } else if (particle.type === 'deuterium' && particle.targetNucleus) {\r\n            const distance = Math.sqrt((particle.x - particle.targetNucleus.x) ** 2 + (particle.y - particle.targetNucleus.y) ** 2);\r\n            if (distance < particle.targetNucleus.radius + 10) {\r\n                // Trigger fusion for the target tritium nucleus only\r\n                if (particle.targetNucleus.type === 'tritium' && !particle.targetNucleus.fused) {\r\n                    this.triggerFusion(particle.targetNucleus);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        // Clear canvas\r\n        this.ctx.fillStyle = '#1a1a1a';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Draw background grid\r\n        this.drawGrid();\r\n        \r\n        // Draw shockwaves (behind all particles)\r\n        this.shockwaves.forEach(wave => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = Math.max(0, wave.life);\r\n            this.ctx.strokeStyle = wave.color;\r\n            this.ctx.lineWidth = 8;\r\n            this.ctx.shadowColor = wave.color;\r\n            this.ctx.shadowBlur = 30;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(wave.x, wave.y, wave.radius, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw energy particles\r\n        this.energyParticles.forEach(particle => {\r\n            this.ctx.save();\r\n            // Keep particles visible even when life is negative\r\n            this.ctx.globalAlpha = Math.max(0.3, particle.life / 2);\r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.shadowColor = particle.color;\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw fission products\r\n        this.fissionProducts.forEach(product => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1.0; // Always fully visible\r\n            this.ctx.fillStyle = product.color;\r\n            this.ctx.shadowColor = product.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(product.x, product.y, product.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw fission product label\r\n            this.ctx.globalAlpha = 1.0;\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            \r\n            // Determine element symbol based on protons\r\n            let elementSymbol = '';\r\n            if (product.protons === 36) {\r\n                elementSymbol = 'Kr'; // Krypton-92\r\n            } else if (product.protons === 56) {\r\n                elementSymbol = 'Ba'; // Barium-141\r\n            } else {\r\n                elementSymbol = 'X'; // Unknown fission product\r\n            }\r\n            \r\n            this.ctx.fillText(elementSymbol, product.x, product.y + 2);\r\n            this.ctx.font = '12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`${product.mass}`, product.x, product.y + product.radius + 10);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw fusion products\r\n        this.fusionProducts.forEach(product => {\r\n            this.ctx.save();\r\n            this.ctx.globalAlpha = 1.0; // Always fully visible\r\n            this.ctx.fillStyle = product.color;\r\n            this.ctx.shadowColor = product.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(product.x, product.y, product.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw fusion product label (Helium)\r\n            this.ctx.globalAlpha = 1.0;\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.fillText('He', product.x, product.y + 2);\r\n            this.ctx.font = '12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`${product.mass}`, product.x, product.y + product.radius + 10);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw neutrons\r\n        this.neutrons.forEach(neutron => {\r\n            this.ctx.save();\r\n            // Reaction product neutrons are always fully visible\r\n            if (neutron.isReactionProduct) {\r\n                this.ctx.globalAlpha = 1.0;\r\n            } else {\r\n                // Keep other neutrons visible even when life is negative\r\n                this.ctx.globalAlpha = Math.max(0.4, neutron.life / 5);\r\n            }\r\n            this.ctx.fillStyle = neutron.color;\r\n            this.ctx.shadowColor = neutron.color;\r\n            this.ctx.shadowBlur = 8;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(neutron.x, neutron.y, neutron.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw neutron label\r\n            if (neutron.isReactionProduct) {\r\n                this.ctx.globalAlpha = 1.0;\r\n            } else {\r\n                this.ctx.globalAlpha = Math.max(0.4, neutron.life / 5);\r\n            }\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            this.ctx.fillText('n', neutron.x, neutron.y + 3);\r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw reacting particles\r\n        this.reactingParticles.forEach(particle => {\r\n            this.ctx.save();\r\n            \r\n            // Draw trail if moving\r\n            if (particle.moving) {\r\n                this.ctx.strokeStyle = particle.color;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.globalAlpha = 0.6;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                // Draw a short trail in the direction of movement\r\n                const dx = particle.targetX - particle.x;\r\n                const dy = particle.targetY - particle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                if (distance > 0) {\r\n                    this.ctx.lineTo(particle.x - (dx / distance) * 15, particle.y - (dy / distance) * 15);\r\n                }\r\n                this.ctx.stroke();\r\n                this.ctx.globalAlpha = 1;\r\n            }\r\n            \r\n            this.ctx.fillStyle = particle.color;\r\n            this.ctx.shadowColor = particle.color;\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Draw particle label\r\n            this.ctx.fillStyle = '#FFFFFF';\r\n            this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n            this.ctx.shadowBlur = 2;\r\n            \r\n            if (particle.type === 'neutron') {\r\n                this.ctx.fillText('n', particle.x, particle.y + 3);\r\n            } else if (particle.type === 'deuterium') {\r\n                this.ctx.fillText('²H', particle.x, particle.y + 3);\r\n            }\r\n            \r\n            // No click indicator needed since you can click anywhere\r\n            \r\n            this.ctx.restore();\r\n        });\r\n        \r\n        // Draw nuclei\r\n        this.nuclei.forEach(nucleus => {\r\n            if (nucleus.visible !== false) { // Only draw visible nuclei\r\n                if (this.mode === 'fission' && nucleus.type === 'uranium') {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                } else if (this.mode === 'fusion' && (nucleus.type === 'deuterium' || nucleus.type === 'tritium')) {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                } else if (this.mode === 'chain' && nucleus.type === 'uranium') {\r\n                    this.drawNucleus(nucleus);\r\n                    this.drawClickIndicator(nucleus);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Draw labels\r\n        this.drawNuclearLabels();\r\n        \r\n\r\n    }\r\n    \r\n    drawGrid() {\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        const gridSize = 50;\r\n        for (let x = 0; x < this.canvas.width; x += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, 0);\r\n            this.ctx.lineTo(x, this.canvas.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        for (let y = 0; y < this.canvas.height; y += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, y);\r\n            this.ctx.lineTo(this.canvas.width, y);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    \r\n    drawNucleus(nucleus) {\r\n        // Draw nucleus with enhanced visual representation\r\n        this.ctx.save();\r\n        \r\n        // Outer glow\r\n        this.ctx.shadowColor = nucleus.color;\r\n        this.ctx.shadowBlur = 15;\r\n        this.ctx.fillStyle = nucleus.color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Inner core with gradient effect\r\n        this.ctx.shadowBlur = 0;\r\n        const gradient = this.ctx.createRadialGradient(\r\n            nucleus.x, nucleus.y, 0,\r\n            nucleus.x, nucleus.y, nucleus.radius * 0.6\r\n        );\r\n        gradient.addColorStop(0, '#FFFFFF');\r\n        gradient.addColorStop(1, nucleus.color);\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius * 0.6, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Enhanced nucleon representation\r\n        this.ctx.fillStyle = '#000000';\r\n        const nucleonCount = Math.min(nucleus.protons + nucleus.neutrons, 12);\r\n        for (let i = 0; i < nucleonCount; i++) {\r\n            const angle = (i / nucleonCount) * Math.PI * 2;\r\n            const radius = nucleus.radius * 0.4;\r\n            const x = nucleus.x + Math.cos(angle) * radius;\r\n            const y = nucleus.y + Math.sin(angle) * radius;\r\n            \r\n            // Draw nucleon with small glow\r\n            this.ctx.save();\r\n            this.ctx.shadowColor = '#000000';\r\n            this.ctx.shadowBlur = 1;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, 1.5, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.restore();\r\n        }\r\n        \r\n        this.ctx.restore();\r\n        \r\n        // Draw element symbol and details with enhanced styling\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        // Element symbol with background circle\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(nucleus.x, nucleus.y + 2, 8, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        let elementSymbol = '';\r\n        if (nucleus.type === 'uranium') {\r\n            elementSymbol = 'U';\r\n        } else if (nucleus.type === 'deuterium') {\r\n            elementSymbol = '²H';\r\n        } else if (nucleus.type === 'tritium') {\r\n            elementSymbol = '³H';\r\n        }\r\n        this.ctx.fillText(elementSymbol, nucleus.x, nucleus.y + 5);\r\n        \r\n        // Mass number with background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\r\n        this.ctx.fillRect(nucleus.x - 15, nucleus.y + nucleus.radius + 5, 30, 12);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = 'bold 11px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`${nucleus.mass}`, nucleus.x, nucleus.y + nucleus.radius + 14);\r\n        \r\n        // Proton/neutron count with background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.fillRect(nucleus.x - 25, nucleus.y + nucleus.radius + 15, 50, 10);\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.font = '9px Arial';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillText(`${nucleus.protons}p, ${nucleus.neutrons}n`, nucleus.x, nucleus.y + nucleus.radius + 23);\r\n        \r\n        this.ctx.restore();\r\n    }\r\n    \r\n    drawClickIndicator(nucleus) {\r\n        // Draw pulsing ring to indicate clickability\r\n        if ((this.mode === 'fission' && nucleus.type === 'uranium' && !nucleus.fissioned) ||\r\n            (this.mode === 'fusion' && (nucleus.type === 'deuterium' || nucleus.type === 'tritium') && !nucleus.fused)) {\r\n            \r\n            this.ctx.save();\r\n            const pulse = Math.sin(this.time * 3) * 0.3 + 0.7;\r\n            this.ctx.strokeStyle = `rgba(255, 255, 255, ${pulse * 0.6})`;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.setLineDash([5, 5]);\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(nucleus.x, nucleus.y, nucleus.radius + 8, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            this.ctx.restore();\r\n        }\r\n    }\r\n    \r\n    drawNuclearLabels() {\r\n        this.ctx.save();\r\n        \r\n        // Set up text styling\r\n        this.ctx.font = 'bold 18px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.textAlign = 'center';\r\n        \r\n        // Draw chemical formulas at the top with white text and glow effect\r\n        this.ctx.fillStyle = '#FFFFFF';\r\n        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        if (this.mode === 'fission') {\r\n            this.ctx.fillText(`²³⁵U + ¹n → ⁹²Kr + ¹⁴¹Ba + 3¹n + 200 MeV`, \r\n                              this.ctx.canvas.width / 2, 30);\r\n            this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`Nuclear Fission`, \r\n                              this.ctx.canvas.width / 2, 50);\r\n        } else if (this.mode === 'fusion') {\r\n            this.ctx.fillText(`²H + ³H → ⁴He + ¹n + 17.6 MeV`, \r\n                              this.ctx.canvas.width / 2, 30);\r\n            this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`Nuclear Fusion`, \r\n                              this.ctx.canvas.width / 2, 50);\r\n        } else if (this.mode === 'chain') {\r\n            this.ctx.fillText(`²³⁵U + ¹n → ⁹²Kr + ¹⁴¹Ba + 3¹n + 200 MeV`, \r\n                              this.ctx.canvas.width / 2, 30);\r\n            this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n            this.ctx.fillText(`Chain Reaction`, \r\n                              this.ctx.canvas.width / 2, 50);\r\n        } else {\r\n            this.ctx.fillText(`E = mc²`, \r\n                              this.ctx.canvas.width / 2, 30);\r\n            this.ctx.fillText(`Nuclear Binding Energy`, \r\n                              this.ctx.canvas.width / 2, 50);\r\n        }\r\n        \r\n        // Draw click instructions at the bottom\r\n        this.ctx.font = '14px Inter';\r\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.shadowBlur = 2;\r\n        \r\n        if (this.mode === 'fission') {\r\n            this.ctx.fillText(`Click anywhere to trigger fission`, \r\n                              this.ctx.canvas.width / 2, this.ctx.canvas.height - 20);\r\n        } else if (this.mode === 'fusion') {\r\n            this.ctx.fillText(`Click anywhere to trigger fusion`, \r\n                              this.ctx.canvas.width / 2, this.ctx.canvas.height - 20);\r\n        } else if (this.mode === 'chain') {\r\n            this.ctx.fillText(`Click anywhere to trigger chain reaction`, \r\n                              this.ctx.canvas.width / 2, this.ctx.canvas.height - 20);\r\n        }\r\n        \r\n        // Reset shadow\r\n        this.ctx.shadowBlur = 0;\r\n        this.ctx.restore();\r\n    }\r\n    \r\n\r\n    \r\n    getStats() {\r\n        return {\r\n            mode: this.mode,\r\n            energyReleased: this.energyReleased.toFixed(1),\r\n            neutronsProduced: this.neutronsProduced,\r\n            chainReactions: this.chainReactions,\r\n            fissionCount: this.fissionCount,\r\n            fusionCount: this.fusionCount,\r\n            temperature: this.temperature.toFixed(1),\r\n            time: this.time.toFixed(1)\r\n        };\r\n    }\r\n\r\n}","\r\n// Fluid Flow Simulation\r\nexport class FluidFlow {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.obstacles = [];\r\n        this.flowRate = 1;\r\n        this.viscosity = 1;\r\n        this.reynoldsNumber = 100;\r\n        this.visualizationMode = 'particles';\r\n        this.time = 0;\r\n        this.maxParticles = 100;\r\n        this.flowType = 'Laminar';\r\n        this.mouseX = 0;\r\n        this.mouseY = 0;\r\n        this.mouseInfluence = 40;\r\n        \r\n        this.initializeParticles();\r\n        this.initializeObstacles();\r\n        this.setupMouseInteraction();\r\n    }\r\n    \r\n    setupMouseInteraction() {\r\n        const canvas = this.ctx.canvas;\r\n        canvas.addEventListener('mousemove', (e) => {\r\n            const rect = canvas.getBoundingClientRect();\r\n            this.mouseX = e.clientX - rect.left;\r\n            this.mouseY = e.clientY - rect.top;\r\n        });\r\n        \r\n        canvas.addEventListener('mouseleave', () => {\r\n            this.mouseX = -1000;\r\n            this.mouseY = -1000;\r\n        });\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.maxParticles; i++) {\r\n            this.particles.push({\r\n                x: -50 + Math.random() * 100, // Start from left side\r\n                y: 50 + Math.random() * (this.ctx.canvas.height - 100),\r\n                vx: this.flowRate * (1 + Math.random() * 0.3),\r\n                vy: (Math.random() - 0.5) * 0.3,\r\n                size: 3 + Math.random() * 2,\r\n                color: `hsl(${200 + Math.random() * 60}, 70%, 60%)`,\r\n                life: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    initializeObstacles() {\r\n        this.obstacles = [\r\n            // Porous sponge in the middle top\r\n            { x: 400, y: 80, width: 80, height: 100, type: 'porous' },\r\n            // Solid building in the middle bottom\r\n            { x: 400, y: 420, width: 100, height: 120, type: 'solid' }\r\n        ];\r\n    }\r\n    \r\n    setFlowRate(rate) {\r\n        this.flowRate = rate;\r\n        this.updateReynoldsNumber();\r\n    }\r\n    \r\n    setViscosity(visc) {\r\n        this.viscosity = visc;\r\n        this.updateReynoldsNumber();\r\n    }\r\n    \r\n    setReynoldsNumber(re) {\r\n        this.reynoldsNumber = re;\r\n        this.updateFlowType();\r\n    }\r\n    \r\n    setVisualizationMode(mode) {\r\n        this.visualizationMode = mode;\r\n    }\r\n    \r\n    updateReynoldsNumber() {\r\n        // Simplified Reynolds number calculation\r\n        this.reynoldsNumber = Math.round((this.flowRate * 50) / this.viscosity);\r\n        this.updateFlowType();\r\n    }\r\n    \r\n    updateFlowType() {\r\n        if (this.reynoldsNumber < 2300) {\r\n            this.flowType = 'Laminar';\r\n        } else if (this.reynoldsNumber < 4000) {\r\n            this.flowType = 'Transitional';\r\n        } else {\r\n            this.flowType = 'Turbulent';\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        \r\n        this.particles.forEach((particle, index) => {\r\n            // Apply flow field\r\n            const flowVelocity = this.calculateFlowVelocity(particle.x, particle.y);\r\n            \r\n            // Add turbulence based on Reynolds number\r\n            const turbulence = this.flowType === 'Turbulent' ? \r\n                (Math.random() - 0.5) * 2 * this.flowRate : 0;\r\n            \r\n            // Add enhanced mouse interaction with stronger effect\r\n            const dx = this.mouseX - particle.x;\r\n            const dy = this.mouseY - particle.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            // Start with flow velocity\r\n            particle.vx = flowVelocity.x + turbulence;\r\n            particle.vy = flowVelocity.y + turbulence;\r\n            \r\n            // Apply mouse influence on top of flow velocity\r\n            if (distance < this.mouseInfluence && distance > 0) {\r\n                const force = (this.mouseInfluence - distance) / this.mouseInfluence;\r\n                // Gentler mouse influence\r\n                particle.vx += (dx / distance) * force * 1.2;\r\n                particle.vy += (dy / distance) * force * 1.2;\r\n                \r\n                // Add subtle randomness\r\n                particle.vx += (Math.random() - 0.5) * force * 0.2;\r\n                particle.vy += (Math.random() - 0.5) * force * 0.2;\r\n            }\r\n            \r\n            // Apply viscosity damping\r\n            particle.vx *= (1 - this.viscosity * 0.01);\r\n            particle.vy *= (1 - this.viscosity * 0.01);\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * deltaTime * 0.1;\r\n            particle.y += particle.vy * deltaTime * 0.1;\r\n            particle.life += deltaTime;\r\n            \r\n            // Reset particles that go off screen or get stuck\r\n            if (particle.x > this.ctx.canvas.width + 50 || \r\n                particle.x < -50 || \r\n                particle.y < -50 || \r\n                particle.y > this.ctx.canvas.height + 50 ||\r\n                particle.life > 10000) {\r\n                this.resetParticle(particle);\r\n            }\r\n        });\r\n    }\r\n    \r\n    resetParticle(particle) {\r\n        particle.x = -50 + Math.random() * 100;\r\n        particle.y = 50 + Math.random() * (this.ctx.canvas.height - 100);\r\n        particle.vx = this.flowRate * (1 + Math.random() * 0.3);\r\n        particle.vy = (Math.random() - 0.5) * 0.3;\r\n        particle.life = 0;\r\n    }\r\n    \r\n    calculateFlowVelocity(x, y) {\r\n        let vx = this.flowRate;\r\n        let vy = 0;\r\n        \r\n        // Check for obstacle interactions\r\n        this.obstacles.forEach(obstacle => {\r\n            if (x > obstacle.x && x < obstacle.x + obstacle.width &&\r\n                y > obstacle.y && y < obstacle.y + obstacle.height) {\r\n                \r\n                if (obstacle.type === 'porous') {\r\n                    // Porous material: slow down the flow but allow it to continue\r\n                    vx *= 0.3; // Slow down to 30% of original speed\r\n                    vy *= 0.3;\r\n                    \r\n                    // Add some small random variation to simulate porous flow\r\n                    vx += (Math.random() - 0.5) * this.flowRate * 0.1;\r\n                    vy += (Math.random() - 0.5) * this.flowRate * 0.1;\r\n                } else if (obstacle.type === 'solid') {\r\n                    // Solid material: completely block the flow\r\n                    vx = (Math.random() - 0.5) * this.flowRate * 0.5;\r\n                    vy = (Math.random() - 0.5) * this.flowRate * 0.5;\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Add some vertical variation based on y position\r\n        const centerY = this.ctx.canvas.height / 2;\r\n        const distanceFromCenter = Math.abs(y - centerY);\r\n        const maxVariation = this.flowRate * 0.2;\r\n        vy += (y - centerY) / centerY * maxVariation;\r\n        \r\n        // Add mouse interaction effects to all visualization modes\r\n        if (this.mouseX > 0 && this.mouseY > 0) {\r\n            const dx = this.mouseX - x;\r\n            const dy = this.mouseY - y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance < this.mouseInfluence && distance > 0) {\r\n                const force = (this.mouseInfluence - distance) / this.mouseInfluence;\r\n                // Apply mouse influence to velocity field\r\n                vx += (dx / distance) * force * 1.2;\r\n                vy += (dy / distance) * force * 1.2;\r\n            }\r\n        }\r\n        \r\n        return { x: vx, y: vy };\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw background\r\n        this.drawBackground();\r\n        \r\n        // Draw obstacles\r\n        this.drawObstacles();\r\n        \r\n        // Draw based on visualization mode\r\n        switch (this.visualizationMode) {\r\n            case 'particles':\r\n                this.drawParticles();\r\n                break;\r\n            case 'streamlines':\r\n                this.drawStreamlines();\r\n                break;\r\n            case 'velocity':\r\n                this.drawVelocityField();\r\n                break;\r\n            case 'pressure':\r\n                this.drawPressureField();\r\n                break;\r\n        }\r\n        \r\n        // Draw flow information\r\n        this.drawFlowInfo();\r\n        \r\n        // Add real-world analogy for beginners\r\n        this.drawRealWorldAnalogy();\r\n        \r\n        // Draw mouse interaction indicator\r\n        this.drawMouseIndicator();\r\n    }\r\n    \r\n    drawBackground() {\r\n        this.ctx.fillStyle = 'rgba(240, 248, 255, 0.3)';\r\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n    \r\n    drawObstacles() {\r\n        this.obstacles.forEach(obstacle => {\r\n            switch (obstacle.type) {\r\n                case 'porous':\r\n                    this.drawPorousObject(obstacle);\r\n                    break;\r\n                case 'solid':\r\n                    this.drawSolidObject(obstacle);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawPorousObject(obstacle) {\r\n        // Draw a porous sponge-like object\r\n        this.ctx.fillStyle = 'rgba(255, 182, 193, 0.9)'; // Light pink for sponge\r\n        this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Draw porous holes throughout the object\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        for (let row = 0; row < 4; row++) {\r\n            for (let col = 0; col < 6; col++) {\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(obstacle.x + 10 + col * 12, obstacle.y + 15 + row * 20, 3, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n        \r\n        // Add sponge texture lines\r\n        this.ctx.strokeStyle = 'rgba(255, 150, 150, 0.8)';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < obstacle.height; i += 15) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(obstacle.x, obstacle.y + i);\r\n            this.ctx.lineTo(obstacle.x + obstacle.width, obstacle.y + i);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add outline\r\n        this.ctx.strokeStyle = 'rgba(255, 100, 100, 0.9)';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Add prominent label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🧽 Porous Sponge', obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2 + 6);\r\n    }\r\n    \r\n    drawTree(obstacle) {\r\n        // Draw tree trunk\r\n        this.ctx.fillStyle = 'rgba(139, 69, 19, 0.9)';\r\n        this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Draw tree bark texture\r\n        this.ctx.strokeStyle = 'rgba(101, 67, 33, 0.8)';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < obstacle.height; i += 15) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(obstacle.x, obstacle.y + i);\r\n            this.ctx.lineTo(obstacle.x + obstacle.width, obstacle.y + i);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw tree foliage\r\n        this.ctx.fillStyle = 'rgba(34, 139, 34, 0.8)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(obstacle.x + obstacle.width/2, obstacle.y - 10, 25, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🌳 Tree', obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2 + 4);\r\n    }\r\n    \r\n    drawSolidObject(obstacle) {\r\n        // Draw a solid, dense object (like a concrete block)\r\n        this.ctx.fillStyle = 'rgba(105, 105, 105, 0.95)'; // Solid gray\r\n        this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Add solid texture lines to show density\r\n        this.ctx.strokeStyle = 'rgba(80, 80, 80, 0.9)';\r\n        this.ctx.lineWidth = 2;\r\n        for (let i = 0; i < obstacle.height; i += 20) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(obstacle.x, obstacle.y + i);\r\n            this.ctx.lineTo(obstacle.x + obstacle.width, obstacle.y + i);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add vertical texture lines\r\n        for (let i = 0; i < obstacle.width; i += 25) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(obstacle.x + i, obstacle.y);\r\n            this.ctx.lineTo(obstacle.x + i, obstacle.y + obstacle.height);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add solid outline\r\n        this.ctx.strokeStyle = 'rgba(50, 50, 50, 0.95)';\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.strokeRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Add prominent label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🪨 Solid Block', obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2 + 6);\r\n    }\r\n    \r\n    drawPillar(obstacle) {\r\n        // Draw pillar base\r\n        this.ctx.fillStyle = 'rgba(192, 192, 192, 0.9)';\r\n        this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n        \r\n        // Draw pillar texture (brick pattern)\r\n        this.ctx.strokeStyle = 'rgba(160, 160, 160, 0.8)';\r\n        this.ctx.lineWidth = 1;\r\n        for (let i = 0; i < obstacle.height; i += 12) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(obstacle.x, obstacle.y + i);\r\n            this.ctx.lineTo(obstacle.x + obstacle.width, obstacle.y + i);\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw pillar cap\r\n        this.ctx.fillStyle = 'rgba(220, 220, 220, 0.9)';\r\n        this.ctx.fillRect(obstacle.x - 5, obstacle.y - 5, obstacle.width + 10, 10);\r\n        \r\n        // Add label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🏛️ Pillar', obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2 + 4);\r\n    }\r\n    \r\n    drawBoulder(obstacle) {\r\n        // Draw a large boulder with irregular shape\r\n        this.ctx.fillStyle = 'rgba(128, 128, 128, 0.9)';\r\n        this.ctx.beginPath();\r\n        this.ctx.ellipse(obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2, \r\n                         obstacle.width/2 + 5, obstacle.height/2 + 3, 0.3, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add boulder texture and shading\r\n        this.ctx.strokeStyle = 'rgba(90, 90, 90, 0.8)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(obstacle.x + 15, obstacle.y + 10, 8, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(obstacle.x + 35, obstacle.y + 25, 6, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Add label\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 12px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🪨 Boulder', obstacle.x + obstacle.width/2, obstacle.y + obstacle.height/2 + 4);\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Calculate velocity for color intensity\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const maxVelocity = this.flowRate * 2;\r\n            const intensity = Math.min(velocity / maxVelocity, 1);\r\n            \r\n            // Check if particle is being affected by mouse\r\n            const dx = this.mouseX - particle.x;\r\n            const dy = this.mouseY - particle.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const isMouseAffected = distance < this.mouseInfluence && distance > 0;\r\n            \r\n            // Dynamic color based on velocity and mouse interaction\r\n            let hue, saturation, lightness;\r\n            if (isMouseAffected) {\r\n                // Particles affected by mouse get a purple color\r\n                hue = 270 + Math.random() * 30; // Purple range\r\n                saturation = 80;\r\n                lightness = 60;\r\n            } else {\r\n                // Normal blue to cyan gradient\r\n                hue = 200 + intensity * 60;\r\n                saturation = 70 + intensity * 30;\r\n                lightness = 60 - intensity * 20;\r\n            }\r\n            \r\n            this.ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add enhanced trail for mouse-affected particles\r\n            if (isMouseAffected) {\r\n                this.ctx.strokeStyle = `rgba(147, 112, 219, 0.8)`;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(particle.x - particle.vx * 0.8, particle.y - particle.vy * 0.8);\r\n                this.ctx.stroke();\r\n            } else if (velocity > this.flowRate * 0.5) {\r\n                // Normal velocity trail for other particles\r\n                this.ctx.strokeStyle = `rgba(0, 255, 255, ${intensity * 0.5})`;\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(particle.x - particle.vx * 0.5, particle.y - particle.vy * 0.5);\r\n                this.ctx.stroke();\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawStreamlines() {\r\n        // Enhanced streamline visualization with realistic flow patterns\r\n        const streamlineCount = 15;\r\n        const pointsPerStreamline = 100;\r\n        \r\n        for (let i = 0; i < streamlineCount; i++) {\r\n            // Start streamlines at different heights\r\n            const startY = 50 + (i * (this.ctx.canvas.height - 100)) / (streamlineCount - 1);\r\n            let x = 0;\r\n            let y = startY;\r\n            \r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, y);\r\n            \r\n            // Draw streamline with varying opacity and thickness based on velocity\r\n            for (let j = 0; j < pointsPerStreamline; j++) {\r\n                const velocity = this.calculateFlowVelocity(x, y);\r\n                const speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y);\r\n                \r\n                // Calculate next point with some randomness for realistic flow\r\n                const nextX = x + velocity.x * 8 + (Math.random() - 0.5) * 2;\r\n                const nextY = y + velocity.y * 8 + (Math.random() - 0.5) * 2;\r\n                \r\n                // Check if this point is affected by mouse\r\n                const dx = this.mouseX - x;\r\n                const dy = this.mouseY - y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                const isMouseAffected = distance < this.mouseInfluence && distance > 0;\r\n                \r\n                // Vary line properties based on speed and mouse interaction\r\n                const opacity = Math.min(0.8, 0.3 + speed * 0.5);\r\n                const lineWidth = Math.max(1, speed * 2);\r\n                \r\n                // Use purple color for mouse-affected areas, blue for normal\r\n                if (isMouseAffected) {\r\n                    this.ctx.strokeStyle = `rgba(147, 112, 219, ${opacity})`;\r\n                    this.ctx.lineWidth = lineWidth + 1; // Slightly thicker for mouse-affected areas\r\n                } else {\r\n                    this.ctx.strokeStyle = `rgba(0, 100, 200, ${opacity})`;\r\n                    this.ctx.lineWidth = lineWidth;\r\n                }\r\n                \r\n                this.ctx.lineTo(nextX, nextY);\r\n                \r\n                x = nextX;\r\n                y = nextY;\r\n                \r\n                // Stop if streamline goes off screen\r\n                if (x > this.ctx.canvas.width || x < 0 || y < 0 || y > this.ctx.canvas.height) {\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add flow direction indicators (small arrows)\r\n        for (let x = 100; x < this.ctx.canvas.width - 100; x += 80) {\r\n            for (let y = 100; y < this.ctx.canvas.height - 100; y += 60) {\r\n                const velocity = this.calculateFlowVelocity(x, y);\r\n                const speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y);\r\n                \r\n                if (speed > 0.1) {\r\n                    // Check if this arrow is affected by mouse\r\n                    const dx = this.mouseX - x;\r\n                    const dy = this.mouseY - y;\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    const isMouseAffected = distance < this.mouseInfluence && distance > 0;\r\n                    \r\n                    // Draw arrow\r\n                    const angle = Math.atan2(velocity.y, velocity.x);\r\n                    const arrowLength = Math.min(15, speed * 10);\r\n                    \r\n                    // Use purple for mouse-affected arrows, blue for normal\r\n                    if (isMouseAffected) {\r\n                        this.ctx.strokeStyle = `rgba(147, 112, 219, ${Math.min(0.9, speed + 0.3)})`;\r\n                        this.ctx.lineWidth = 3; // Thicker for mouse-affected arrows\r\n                    } else {\r\n                        this.ctx.strokeStyle = `rgba(0, 150, 255, ${Math.min(0.8, speed)})`;\r\n                        this.ctx.lineWidth = 2;\r\n                    }\r\n                    \r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(x + Math.cos(angle) * arrowLength, y + Math.sin(angle) * arrowLength);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw arrowhead\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + Math.cos(angle) * arrowLength, y + Math.sin(angle) * arrowLength);\r\n                    this.ctx.lineTo(x + Math.cos(angle) * arrowLength - Math.cos(angle - 0.5) * 5, \r\n                                  y + Math.sin(angle) * arrowLength - Math.sin(angle - 0.5) * 5);\r\n                    this.ctx.lineTo(x + Math.cos(angle) * arrowLength - Math.cos(angle + 0.5) * 5, \r\n                                  y + Math.sin(angle) * arrowLength - Math.sin(angle + 0.5) * 5);\r\n                    this.ctx.closePath();\r\n                    \r\n                    if (isMouseAffected) {\r\n                        this.ctx.fillStyle = `rgba(147, 112, 219, ${Math.min(0.9, speed + 0.3)})`;\r\n                    } else {\r\n                        this.ctx.fillStyle = `rgba(0, 150, 255, ${Math.min(0.8, speed)})`;\r\n                    }\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Add streamline labels with enhanced styling\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('🌊 Streamlines', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Add explanation\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Lines show fluid flow direction', this.ctx.canvas.width / 2, 50);\r\n    }\r\n    \r\n    drawVelocityField() {\r\n        // Enhanced velocity field with dynamic arrows and color coding\r\n        for (let x = 60; x < this.ctx.canvas.width - 60; x += 50) {\r\n            for (let y = 60; y < this.ctx.canvas.height - 60; y += 50) {\r\n                const velocity = this.calculateFlowVelocity(x, y);\r\n                const speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y);\r\n                \r\n                if (speed > 0.1) {\r\n                    // Color code based on speed (blue = slow, red = fast)\r\n                    const hue = 240 - Math.min(180, speed * 100); // Blue to red\r\n                    const saturation = 80;\r\n                    const lightness = 60;\r\n                    const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n                    \r\n                    // Arrow length and thickness based on speed\r\n                    const arrowLength = Math.min(25, speed * 15);\r\n                    const lineWidth = Math.max(1, speed * 3);\r\n                    \r\n                    this.ctx.strokeStyle = color;\r\n                    this.ctx.lineWidth = lineWidth;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x, y);\r\n                    this.ctx.lineTo(x + velocity.x * arrowLength, y + velocity.y * arrowLength);\r\n                    this.ctx.stroke();\r\n                    \r\n                    // Draw arrowhead\r\n                    const angle = Math.atan2(velocity.y, velocity.x);\r\n                    this.ctx.beginPath();\r\n                    this.ctx.moveTo(x + velocity.x * arrowLength, y + velocity.y * arrowLength);\r\n                    this.ctx.lineTo(x + velocity.x * arrowLength - Math.cos(angle - 0.5) * 6, \r\n                                  y + velocity.y * arrowLength - Math.sin(angle - 0.5) * 6);\r\n                    this.ctx.lineTo(x + velocity.x * arrowLength - Math.cos(angle + 0.5) * 6, \r\n                                  y + velocity.y * arrowLength - Math.sin(angle + 0.5) * 6);\r\n                    this.ctx.closePath();\r\n                    this.ctx.fillStyle = color;\r\n                    this.ctx.fill();\r\n                    \r\n                    // Add speed indicator dot\r\n                    this.ctx.fillStyle = color;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(x, y, Math.max(2, speed * 3), 0, Math.PI * 2);\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Add velocity field label with enhanced styling\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('⚡ Velocity Field', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Add color legend\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Blue = Slow, Red = Fast', this.ctx.canvas.width / 2, 50);\r\n    }\r\n    \r\n    drawPressureField() {\r\n        // Enhanced pressure field with gradient visualization\r\n        for (let x = 0; x < this.ctx.canvas.width; x += 20) {\r\n            for (let y = 0; y < this.ctx.canvas.height; y += 20) {\r\n                const velocity = this.calculateFlowVelocity(x, y);\r\n                const speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y);\r\n                \r\n                // Calculate pressure (inverse relationship with velocity)\r\n                const pressure = Math.max(0, 1 - speed * 0.3);\r\n                \r\n                // Color code: Blue = high pressure, Red = low pressure (more subtle)\r\n                const blue = Math.floor(200 * pressure);\r\n                const red = Math.floor(100 * (1 - pressure));\r\n                const green = Math.floor(50 * pressure);\r\n                const color = `rgba(${red}, ${green}, ${blue}, ${0.2 + pressure * 0.2})`;\r\n                \r\n                this.ctx.fillStyle = color;\r\n                this.ctx.fillRect(x, y, 20, 20);\r\n            }\r\n        }\r\n        \r\n        // Add pressure contours (lines of equal pressure)\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        for (let pressure = 0.2; pressure <= 0.8; pressure += 0.2) {\r\n            this.ctx.beginPath();\r\n            let firstPoint = true;\r\n            \r\n            for (let x = 0; x < this.ctx.canvas.width; x += 10) {\r\n                for (let y = 0; y < this.ctx.canvas.height; y += 10) {\r\n                    const velocity = this.calculateFlowVelocity(x, y);\r\n                    const speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y);\r\n                    const currentPressure = Math.max(0, 1 - speed * 0.3);\r\n                    \r\n                    if (Math.abs(currentPressure - pressure) < 0.05) {\r\n                        if (firstPoint) {\r\n                            this.ctx.moveTo(x, y);\r\n                            firstPoint = false;\r\n                        } else {\r\n                            this.ctx.lineTo(x, y);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Add pressure field label with enhanced styling\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('💨 Pressure Field', this.ctx.canvas.width / 2, 30);\r\n        \r\n        // Add color legend\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('Blue = High Pressure, Red = Low Pressure', this.ctx.canvas.width / 2, 50);\r\n    }\r\n    \r\n    drawFlowInfo() {\r\n        // Simple info panel for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 250, 80);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('🌊 Fluid Flow', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText(`Speed: ${this.flowRate.toFixed(1)}`, 20, 50);\r\n        \r\n        // Simple flow type indicator\r\n        let flowColor = 'green';\r\n        if (this.flowType === 'Turbulent') {\r\n            flowColor = 'red';\r\n        } else if (this.flowType === 'Transitional') {\r\n            flowColor = 'orange';\r\n        }\r\n        \r\n        this.ctx.fillStyle = flowColor;\r\n        this.ctx.fillText(`Flow: ${this.flowType}`, 20, 70);\r\n    }\r\n    \r\n    drawRealWorldAnalogy() {\r\n        // Simple analogy panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(this.ctx.canvas.width - 280, 10, 270, 80);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('💡 Real Examples:', this.ctx.canvas.width - 270, 30);\r\n        \r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('🧽 Sponge: water flows through', this.ctx.canvas.width - 270, 50);\r\n        this.ctx.fillText('🪨 Rock: water flows around', this.ctx.canvas.width - 270, 70);\r\n    }\r\n    \r\n    drawMouseIndicator() {\r\n        if (this.mouseX > 0 && this.mouseY > 0) {\r\n            // Draw mouse influence circle with purple/blue theme\r\n            this.ctx.strokeStyle = 'rgba(147, 112, 219, 0.8)'; // Medium purple\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw inner ring for stronger visual effect\r\n            this.ctx.strokeStyle = 'rgba(138, 43, 226, 0.6)'; // Blue violet\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence * 0.6, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Draw mouse position with purple dot\r\n            this.ctx.fillStyle = 'rgba(147, 112, 219, 0.9)';\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add white border to make it stand out\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, 4, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Add interaction hint with enhanced visibility\r\n            this.ctx.fillStyle = '#000000';\r\n            this.ctx.font = 'bold 14px Arial';\r\n            this.ctx.textAlign = 'center';\r\n            this.ctx.fillText('Move mouse to interact!', this.mouseX, this.mouseY - 25);\r\n            \r\n            // Add a subtle glow effect\r\n            this.ctx.shadowColor = 'rgba(147, 112, 219, 0.5)';\r\n            this.ctx.shadowBlur = 10;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.mouseX, this.mouseY, this.mouseInfluence * 0.3, 0, Math.PI * 2);\r\n            this.ctx.fillStyle = 'rgba(147, 112, 219, 0.1)';\r\n            this.ctx.fill();\r\n            this.ctx.shadowBlur = 0; // Reset shadow\r\n        }\r\n    }\r\n    \r\n    getStats() {\r\n        const avgVelocity = this.particles.reduce((sum, p) => sum + Math.sqrt(p.vx * p.vx + p.vy * p.vy), 0) / this.particles.length;\r\n        return {\r\n            flowRate: this.flowRate,\r\n            viscosity: this.viscosity,\r\n            reynoldsNumber: this.reynoldsNumber,\r\n            flowType: this.flowType,\r\n            averageVelocity: avgVelocity,\r\n            time: this.time\r\n        };\r\n    }\r\n}\r\n\r\n// Bernoulli's Principle Simulation\r\nexport class Bernoulli {\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.particles = [];\r\n        this.pipeWidth = 50;\r\n        this.fluidDensity = 1;\r\n        this.pressureDifference = 1;\r\n        this.visualizationMode = 'basic';\r\n        this.time = 0;\r\n        this.maxParticles = 80;\r\n        \r\n        this.initializeParticles();\r\n    }\r\n    \r\n    initializeParticles() {\r\n        this.particles = [];\r\n        for (let i = 0; i < this.maxParticles; i++) {\r\n            this.particles.push({\r\n                x: -50 + Math.random() * 50,\r\n                y: 250 + Math.random() * 100,\r\n                vx: this.pressureDifference * (1 + Math.random() * 0.3),\r\n                vy: (Math.random() - 0.5) * 0.3,\r\n                size: 4 + Math.random() * 3,\r\n                color: `hsl(${220 + Math.random() * 40}, 80%, 60%)`,\r\n                life: 0\r\n            });\r\n        }\r\n    }\r\n    \r\n    setPipeWidth(width) {\r\n        this.pipeWidth = width;\r\n    }\r\n    \r\n    setFluidDensity(density) {\r\n        this.fluidDensity = density;\r\n    }\r\n    \r\n    setPressureDifference(pressure) {\r\n        this.pressureDifference = pressure;\r\n    }\r\n    \r\n    setVisualizationMode(mode) {\r\n        this.visualizationMode = mode;\r\n    }\r\n    \r\n    reset() {\r\n        this.time = 0;\r\n        this.initializeParticles();\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        this.time += deltaTime;\r\n        \r\n        this.particles.forEach(particle => {\r\n            // Apply Bernoulli effect in constricted section\r\n            if (particle.x > 300 && particle.x < 500) {\r\n                // Constricted section - higher velocity\r\n                particle.vx *= 1.5;\r\n            }\r\n            \r\n            // Update position\r\n            particle.x += particle.vx * deltaTime * 0.1;\r\n            particle.y += particle.vy * deltaTime * 0.1;\r\n            particle.life += deltaTime;\r\n            \r\n            // Reset particles that go off screen\r\n            if (particle.x > this.ctx.canvas.width + 50 || \r\n                particle.x < -50 || \r\n                particle.y < 150 || \r\n                particle.y > 450 ||\r\n                particle.life > 8000) {\r\n                this.resetParticle(particle);\r\n            }\r\n        });\r\n    }\r\n    \r\n    resetParticle(particle) {\r\n        particle.x = -50 + Math.random() * 50;\r\n        particle.y = 250 + Math.random() * 100;\r\n        particle.vx = this.pressureDifference * (1 + Math.random() * 0.3);\r\n        particle.vy = (Math.random() - 0.5) * 0.3;\r\n        particle.life = 0;\r\n    }\r\n    \r\n    render() {\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        \r\n        // Draw pipe system\r\n        this.drawPipeSystem();\r\n        \r\n        // Draw particles\r\n        this.drawParticles();\r\n        \r\n        // Draw based on visualization mode\r\n        switch (this.visualizationMode) {\r\n            case 'pressure':\r\n                this.drawPressureAnalysis();\r\n                break;\r\n            case 'velocity':\r\n                this.drawVelocityAnalysis();\r\n                break;\r\n            case 'energy':\r\n                this.drawEnergyAnalysis();\r\n                break;\r\n        }\r\n        \r\n        // Draw Bernoulli information\r\n        this.drawBernoulliInfo();\r\n        \r\n        // Add real-world analogy for beginners\r\n        this.drawBernoulliRealWorldAnalogy();\r\n    }\r\n    \r\n    drawPipeSystem() {\r\n        // Enhanced pipe system with better visual design\r\n        this.ctx.strokeStyle = 'rgba(70, 130, 180, 0.9)';\r\n        this.ctx.lineWidth = 25;\r\n        \r\n        // Wide section (left) with gradient fill\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, 200);\r\n        this.ctx.lineTo(300, 200);\r\n        this.ctx.lineTo(300, 400);\r\n        this.ctx.lineTo(0, 400);\r\n        this.ctx.closePath();\r\n        \r\n        // Create gradient for pipe sections\r\n        const leftGradient = this.ctx.createLinearGradient(0, 200, 300, 200);\r\n        leftGradient.addColorStop(0, 'rgba(135, 206, 250, 0.4)');\r\n        leftGradient.addColorStop(1, 'rgba(70, 130, 180, 0.4)');\r\n        this.ctx.fillStyle = leftGradient;\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        \r\n        // Constricted section (middle) with different gradient\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(300, 250);\r\n        this.ctx.lineTo(500, 250);\r\n        this.ctx.lineTo(500, 350);\r\n        this.ctx.lineTo(300, 350);\r\n        this.ctx.closePath();\r\n        \r\n        const middleGradient = this.ctx.createLinearGradient(300, 250, 500, 250);\r\n        middleGradient.addColorStop(0, 'rgba(255, 140, 0, 0.4)');\r\n        middleGradient.addColorStop(1, 'rgba(255, 69, 0, 0.4)');\r\n        this.ctx.fillStyle = middleGradient;\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        \r\n        // Wide section (right) with gradient\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(500, 200);\r\n        this.ctx.lineTo(this.ctx.canvas.width, 200);\r\n        this.ctx.lineTo(this.ctx.canvas.width, 400);\r\n        this.ctx.lineTo(500, 400);\r\n        this.ctx.closePath();\r\n        \r\n        const rightGradient = this.ctx.createLinearGradient(500, 200, this.ctx.canvas.width, 200);\r\n        rightGradient.addColorStop(0, 'rgba(70, 130, 180, 0.4)');\r\n        rightGradient.addColorStop(1, 'rgba(135, 206, 250, 0.4)');\r\n        this.ctx.fillStyle = rightGradient;\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        \r\n        // Add enhanced section labels with better styling\r\n        this.ctx.fillStyle = '#000000';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('Wide Section (Slow)', 150, 180);\r\n        this.ctx.fillText('Narrow Section (Fast)', 400, 180);\r\n        this.ctx.fillText('Wide Section (Slow)', 650, 180);\r\n        \r\n        // Add visual speed indicators with color coding\r\n        this.ctx.fillStyle = '#0066CC';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.fillText('SLOW', 150, 160);\r\n        this.ctx.fillText('SLOW', 650, 160);\r\n        \r\n        this.ctx.fillStyle = '#FF6600';\r\n        this.ctx.fillText('FAST', 400, 160);\r\n        \r\n        // Add flow direction arrows\r\n        this.ctx.strokeStyle = '#0066CC';\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.fillStyle = '#0066CC';\r\n        \r\n        // Left section arrows\r\n        for (let y = 220; y < 380; y += 30) {\r\n            this.drawArrow(50, y, 100, y, '#0066CC');\r\n        }\r\n        \r\n        // Middle section arrows (longer and orange)\r\n        this.ctx.strokeStyle = '#FF6600';\r\n        this.ctx.fillStyle = '#FF6600';\r\n        for (let y = 270; y < 330; y += 20) {\r\n            this.drawArrow(320, y, 480, y, '#FF6600');\r\n        }\r\n        \r\n        // Right section arrows\r\n        this.ctx.strokeStyle = '#0066CC';\r\n        this.ctx.fillStyle = '#0066CC';\r\n        for (let y = 220; y < 380; y += 30) {\r\n            this.drawArrow(700, y, 750, y, '#0066CC');\r\n        }\r\n    }\r\n    \r\n    drawArrow(x1, y1, x2, y2, color) {\r\n        const headLength = 10;\r\n        const angle = Math.atan2(y2 - y1, x2 - x1);\r\n        \r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrowhead\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x2, y2);\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle - Math.PI / 6), y2 - headLength * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.lineTo(x2 - headLength * Math.cos(angle + Math.PI / 6), y2 - headLength * Math.sin(angle + Math.PI / 6));\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    drawParticles() {\r\n        this.particles.forEach(particle => {\r\n            // Calculate velocity for visual effects\r\n            const velocity = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\r\n            const maxVelocity = this.pressureDifference * 2;\r\n            const intensity = Math.min(velocity / maxVelocity, 1);\r\n            \r\n            // Enhanced dynamic color based on velocity and position\r\n            let color, trailColor;\r\n            if (particle.x > 300 && particle.x < 500) {\r\n                // Constricted section - orange/red for fast\r\n                const hue = 20 + intensity * 40; // Orange to red\r\n                color = `hsl(${hue}, 85%, 60%)`;\r\n                trailColor = `rgba(255, 140, 0, ${intensity * 0.8})`;\r\n            } else {\r\n                // Wide sections - blue for slow\r\n                const hue = 220 - intensity * 30;\r\n                color = `hsl(${hue}, 80%, 60%)`;\r\n                trailColor = `rgba(70, 130, 180, ${intensity * 0.6})`;\r\n            }\r\n            \r\n            // Draw particle with glow effect for fast particles\r\n            if (particle.x > 300 && particle.x < 500 && velocity > this.pressureDifference * 0.8) {\r\n                // Add glow effect\r\n                this.ctx.shadowColor = color;\r\n                this.ctx.shadowBlur = 8;\r\n                this.ctx.fillStyle = color;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(particle.x, particle.y, particle.size + 2, 0, Math.PI * 2);\r\n                this.ctx.fill();\r\n                this.ctx.shadowBlur = 0;\r\n            }\r\n            \r\n            // Draw main particle\r\n            this.ctx.fillStyle = color;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Add enhanced speed trails\r\n            if (velocity > this.pressureDifference * 0.5) {\r\n                this.ctx.strokeStyle = trailColor;\r\n                this.ctx.lineWidth = Math.max(2, velocity * 2);\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(particle.x - particle.vx * 0.6, particle.y - particle.vy * 0.6);\r\n                this.ctx.stroke();\r\n            }\r\n            \r\n            // Add velocity indicators for very fast particles\r\n            if (particle.x > 300 && particle.x < 500 && velocity > this.pressureDifference * 1.2) {\r\n                this.ctx.strokeStyle = '#FF6600';\r\n                this.ctx.lineWidth = 2;\r\n                this.ctx.setLineDash([5, 5]);\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(particle.x, particle.y);\r\n                this.ctx.lineTo(particle.x + particle.vx * 0.3, particle.y + particle.vy * 0.3);\r\n                this.ctx.stroke();\r\n                this.ctx.setLineDash([]);\r\n            }\r\n        });\r\n    }\r\n    \r\n    drawPressureAnalysis() {\r\n        // Simple pressure analysis for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('📊 Pressure Analysis', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('High Pressure (Red)', 20, 50);\r\n        this.ctx.fillText('Low Pressure (Green)', 20, 70);\r\n        this.ctx.fillText('💡 Narrow section = lower pressure', 20, 90);\r\n    }\r\n    \r\n    drawVelocityAnalysis() {\r\n        // Simple velocity analysis for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('⚡ Velocity Analysis', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('Slow (Blue arrows)', 20, 50);\r\n        this.ctx.fillText('Fast (Orange arrows)', 20, 70);\r\n        this.ctx.fillText('💡 Narrow section = faster flow', 20, 90);\r\n    }\r\n    \r\n    drawEnergyAnalysis() {\r\n        // Simple energy analysis for beginners\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 10, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('⚡ Energy Analysis', 20, 30);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText('Pressure + Kinetic = Constant', 20, 50);\r\n        this.ctx.fillText('When speed increases, pressure decreases', 20, 70);\r\n        this.ctx.fillText('💡 Total energy is conserved', 20, 90);\r\n    }\r\n    \r\n    drawBernoulliInfo() {\r\n        // Simple Bernoulli info panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(10, 450, 300, 100);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 16px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('⚡ Bernoulli\\'s Principle', 20, 470);\r\n        \r\n        this.ctx.font = '14px Arial';\r\n        this.ctx.fillText(`Speed: ${this.pressureDifference}`, 20, 490);\r\n        this.ctx.fillText(`Width: ${this.pipeWidth}`, 20, 510);\r\n        \r\n        // Simple principle explanation\r\n        this.ctx.fillStyle = '#FFD700';\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('💡 Faster flow = Lower pressure', 20, 530);\r\n        this.ctx.fillText('🔍 Watch particles speed up!', 20, 545);\r\n    }\r\n    \r\n    drawBernoulliRealWorldAnalogy() {\r\n        // Simple analogy panel\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n        this.ctx.fillRect(this.ctx.canvas.width - 280, 10, 270, 80);\r\n        \r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.font = 'bold 14px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText('💡 Real Examples:', this.ctx.canvas.width - 270, 30);\r\n        \r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.fillText('🚿 Garden hose: narrow = faster', this.ctx.canvas.width - 270, 50);\r\n        this.ctx.fillText('✈️ Airplane wings: curved = lift', this.ctx.canvas.width - 270, 70);\r\n    }\r\n    \r\n    getStats() {\r\n        return {\r\n            pipeWidth: this.pipeWidth,\r\n            fluidDensity: this.fluidDensity,\r\n            pressureDifference: this.pressureDifference,\r\n            velocityRatio: 1.5,\r\n            energyConservation: '✓',\r\n            time: this.time\r\n        };\r\n    }\r\n}","// Computer Science Animations\n\n// Neural Network Training Visualization\nexport class NeuralNetwork {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.canvas = ctx.canvas;\n        \n        // Network architecture\n        this.layers = [2, 4, 3, 1]; // Input, hidden, hidden, output\n        this.neurons = [];\n        this.weights = [];\n        this.biases = [];\n        this.activations = [];\n        \n        // Training data for object complexity classification\n        // Input features: [symmetry_score, edge_complexity]\n        // Output: 0 = simple, 1 = complex\n        this.trainingData = [\n            { input: [0.9, 0.1], output: [0], object: 'circle', description: 'Simple: High symmetry, smooth edges' },\n            { input: [0.8, 0.3], output: [0], object: 'square', description: 'Simple: Regular symmetry, straight edges' },\n            { input: [0.6, 0.5], output: [1], object: 'triangle', description: 'Complex: Lower symmetry, angular edges' },\n            { input: [0.3, 0.9], output: [1], object: 'star', description: 'Complex: Low symmetry, many edges' }\n        ];\n        \n        // Animation properties\n        this.currentDataIndex = 0;\n        this.epoch = 0;\n        this.learningRate = 0.1;\n        this.speed = 1.0;\n        this.showWeights = true;\n        this.showGradients = false;\n        this.showLoss = true;\n        this.autoTrain = true;\n        \n        // Visual properties\n        this.neuronRadius = 15;\n        this.layerSpacing = 120;\n        this.layerStartX = 0; // Will be calculated dynamically\n        this.layerStartY = 0; // Will be calculated dynamically\n        \n        // Enhanced animation state\n        this.animationPhase = 'forward'; // 'forward', 'backward', 'update', 'pause'\n        this.forwardStep = 0;\n        this.backwardStep = 0;\n        this.updateStep = 0;\n        this.pauseTime = 0;\n        \n        // Sequential animation state\n        this.forwardAnimationStep = 0;\n        this.currentLayerIndex = 0;\n        this.layerActivationDelay = 0.25; // seconds between layer activations (slightly faster)\n        this.layerProcessingDelay = 0.4; // seconds to wait at each layer before moving to next (slightly faster)\n        this.isProcessingLayer = false; // whether we're in the processing phase at current layer\n        \n        // Data flow animation\n        this.dataFlowParticles = [];\n        this.errorFlowParticles = [];\n        this.weightUpdateParticles = [];\n        \n        // Performance tracking\n        this.lossHistory = [];\n        this.accuracyHistory = [];\n        this.currentLoss = 0;\n        this.currentAccuracy = 0;\n        \n        // Animation timing\n        this.phaseDuration = 3.5; // seconds per phase (slightly faster for better engagement)\n        this.pauseDuration = 0.8; // seconds to pause between phases (slightly faster)\n        \n        // Visual feedback\n        this.activeNeurons = new Set();\n        this.activeConnections = new Set();\n        this.errorIndicators = new Map();\n        this.weightChangeIndicators = new Map();\n        \n        // Object recognition context\n        this.currentObject = null;\n        this.objectDisplayTime = 0;\n        this.showObjectContext = true;\n        \n        // Testing mode\n        this.isTestingMode = false;\n        this.testingPhase = 'select'; // 'select', 'processing', 'result'\n        this.selectedTestObject = null;\n        this.testingStep = 0;\n        this.testingDuration = 2.5; // Slightly faster testing for better UX\n        this.testingParticles = [];\n        this.testResults = []; // Store test results for summary\n        this.lastTestResult = null; // Track current test result\n        \n        // Training indicator\n        this.showTrainingIndicator = false;\n        this.trainingIndicatorTime = 0;\n        this.trainingIndicatorDuration = 4.0; // Reduced for better UX\n        this.trainingIndicatorObjectIndex = 0; // Track which object is being shown\n        this.trainingIndicatorObjectTime = 0; // Time for each object display\n        this.isTrainingComplete = false; // Track if training has finished\n        \n        this.reset();\n        \n        // Always run training on load\n        this.runShortTrainingPhase();\n        \n        // Start the first training cycle immediately\n        this.startFirstTrainingCycle();\n        \n        // Ensure training starts smoothly\n        setTimeout(() => {\n            if (!this.isTrainingComplete) {\n                this.isTrainingComplete = true;\n            }\n        }, 5000); // Mark training as complete after 5 seconds\n    }\n    \n    initializeNetwork() {\n        // Calculate centered positions\n        const canvasWidth = this.ctx.canvas.width;\n        const canvasHeight = this.ctx.canvas.height;\n        \n        // Calculate total network width\n        const totalNetworkWidth = (this.layers.length - 1) * this.layerSpacing;\n        \n        // Center horizontally\n        this.layerStartX = (canvasWidth - totalNetworkWidth) / 2;\n        \n        // Center vertically - use the exact center of the canvas\n        const networkCenterY = canvasHeight / 2;\n        \n        // Initialize neurons positions\n        this.neurons = [];\n        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n            const layerNeurons = [];\n            const layerSize = this.layers[layerIndex];\n            const x = this.layerStartX + layerIndex * this.layerSpacing;\n            \n            for (let neuronIndex = 0; neuronIndex < layerSize; neuronIndex++) {\n                // Calculate Y position relative to the center of the canvas\n                // Center each layer vertically within the canvas\n                const y = networkCenterY + (neuronIndex - (layerSize - 1) / 2) * 60;\n                layerNeurons.push({ \n                    x, \n                    y, \n                    value: 0, \n                    delta: 0,\n                    isActive: false,\n                    pulseIntensity: 0,\n                    errorIntensity: 0,\n                    weightChangeIntensity: 0\n                });\n            }\n            this.neurons.push(layerNeurons);\n        }\n        \n        // Initialize weights and biases with pre-trained values for better object recognition\n        this.weights = [];\n        this.biases = [];\n        \n        // Pre-trained weights optimized for object complexity classification\n        // Using weights that are closer to a working solution for better training\n        const preTrainedWeights = [\n            // Input to hidden layer 1 (2x4)\n            [\n                [1.2, -1.0, 0.8, -0.6],\n                [-1.0, 1.5, 0.6, -1.2]\n            ],\n            // Hidden layer 1 to hidden layer 2 (4x3)\n            [\n                [1.0, -0.8, 0.5],\n                [-0.8, 1.2, -0.6],\n                [0.9, -0.5, 0.8],\n                [-0.6, 0.8, 1.0]\n            ],\n            // Hidden layer 2 to output (3x1)\n            [\n                [1.5],\n                [-1.2],\n                [1.8]\n            ]\n        ];\n        \n        const preTrainedBiases = [\n            // Hidden layer 1 biases (4)\n            [-0.5, 0.6, -0.3, 0.4],\n            // Hidden layer 2 biases (3)\n            [0.3, -0.4, 0.5],\n            // Output layer bias (1)\n            [-0.8]\n        ];\n        \n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayerSize = this.layers[layerIndex];\n            const nextLayerSize = this.layers[layerIndex + 1];\n            \n            // Initialize weights with pre-trained values\n            const layerWeights = [];\n            for (let i = 0; i < currentLayerSize; i++) {\n                const neuronWeights = [];\n                for (let j = 0; j < nextLayerSize; j++) {\n                    neuronWeights.push({\n                        value: preTrainedWeights[layerIndex][i][j],\n                        change: 0,\n                        isActive: false,\n                        pulseIntensity: 0\n                    });\n                }\n                layerWeights.push(neuronWeights);\n            }\n            this.weights.push(layerWeights);\n            \n            // Initialize biases with pre-trained values\n            const layerBiases = [];\n            for (let j = 0; j < nextLayerSize; j++) {\n                layerBiases.push({\n                    value: preTrainedBiases[layerIndex][j],\n                    change: 0,\n                    isActive: false\n                });\n            }\n            this.biases.push(layerBiases);\n        }\n    }\n    \n    setSpeed(speed) {\n        this.speed = speed;\n        this.phaseDuration = 2.0 / speed;\n    }\n    \n    setLearningRate(rate) {\n        this.learningRate = rate;\n    }\n    \n    setShowWeights(show) {\n        this.showWeights = show;\n    }\n    \n    setShowGradients(show) {\n        this.showGradients = show;\n    }\n    \n    setShowLoss(show) {\n        this.showLoss = show;\n    }\n    \n    setAutoTrain(auto) {\n        this.autoTrain = auto;\n    }\n    \n    resize() {\n        // Recalculate positions when canvas is resized\n        this.initializeNetwork();\n    }\n    \n    reset() {\n        // Reinitialize network with pre-trained weights (same as resetWeights)\n        this.initializeNetwork();\n        \n        this.epoch = 0;\n        this.currentDataIndex = 0;\n        this.animationPhase = 'forward';\n        this.forwardStep = 0;\n        this.backwardStep = 0;\n        this.updateStep = 0;\n        this.pauseTime = 0;\n        this.forwardAnimationStep = 0;\n        this.currentLayerIndex = 0;\n        this.isProcessingLayer = false;\n        this.lossHistory = [];\n        this.accuracyHistory = [];\n        this.currentLoss = 0;\n        this.currentAccuracy = 0;\n        this.isTrainingComplete = false; // Reset training completion flag\n        \n        // Reset based on current mode\n        if (this.isTestingMode) {\n            this.testingPhase = 'select';\n            this.selectedTestObject = null;\n            this.testingStep = 0;\n            this.testingParticles = [];\n            this.testResults = [];\n            this.lastTestResult = null;\n        } else {\n            // Don't clear currentObject in reset for training mode\n            // Let startFirstTrainingCycle handle it\n            this.objectDisplayTime = 0;\n        }\n        \n        // Clear animation particles\n        this.dataFlowParticles = [];\n        this.errorFlowParticles = [];\n        this.weightUpdateParticles = [];\n        \n        // Clear visual indicators\n        this.clearVisualIndicators();\n        \n        // Reset object context (but preserve for training mode)\n        if (this.isTestingMode) {\n            this.currentObject = null;\n        }\n        this.objectDisplayTime = 0;\n        \n        // Run training after reset to ensure network is prepared\n        this.runShortTrainingPhase();\n    }\n    \n    startFirstTrainingCycle() {\n        // Start the first training cycle immediately if in training mode\n        if (!this.isTestingMode && this.autoTrain) {\n            const currentData = this.trainingData[this.currentDataIndex];\n            this.forwardPropagate(currentData.input);\n            this.currentObject = currentData;\n            this.objectDisplayTime = 0;\n            \n            // Start sequential animation\n            this.forwardAnimationStep = 0;\n            this.currentLayerIndex = 0;\n            this.isProcessingLayer = false;\n        }\n    }\n    \n    setDemoPerfectWeights() {\n        // These weights/biases guarantee correct classification for the four demo objects\n        const rawWeights = [\n            // Input to hidden layer 1 (2x4)\n            [\n                [5.0, -5.0, 5.0, -5.0],\n                [-5.0, 5.0, 5.0, -5.0]\n            ],\n            // Hidden layer 1 to hidden layer 2 (4x3)\n            [\n                [5.0, -5.0, 0.0],\n                [-5.0, 5.0, 0.0],\n                [0.0, 0.0, 5.0],\n                [0.0, 0.0, -5.0]\n            ],\n            // Hidden layer 2 to output (3x1)\n            [\n                [5.0],\n                [5.0],\n                [-5.0]\n            ]\n        ];\n        const rawBiases = [\n            [-2.5, -2.5, 2.5, 2.5],\n            [-2.5, -2.5, 2.5],\n            [-2.5]\n        ];\n        this.weights = rawWeights.map(layer =>\n            layer.map(neuronWeights =>\n                neuronWeights.map(w => ({ value: w, change: 0, isActive: false, pulseIntensity: 0 }))\n            )\n        );\n        this.biases = rawBiases.map(layer =>\n            layer.map(b => ({ value: b, change: 0, isActive: false }))\n        );\n    }\n    \n    runShortTrainingPhase() {\n        // Show training indicator\n        this.showTrainingIndicator = true;\n        this.trainingIndicatorTime = 0;\n        this.isTrainingComplete = false;\n        \n        // Run more training epochs to ensure the network learns the correct classification\n        const trainingEpochs = 100; // Keep short for animation\n        const originalLearningRate = this.learningRate;\n        this.learningRate = 0.1;\n        \n        for (let epoch = 0; epoch < trainingEpochs; epoch++) {\n            for (let dataIndex = 0; dataIndex < this.trainingData.length; dataIndex++) {\n                const data = this.trainingData[dataIndex];\n                this.forwardPropagate(data.input);\n                this.backwardPropagate(data.output);\n                this.updateWeights();\n            }\n        }\n        this.learningRate = originalLearningRate;\n        this.clearVisualIndicators();\n        // Do NOT set perfect demo weights\n        this.isTrainingComplete = true;\n    }\n    \n    sigmoid(x) {\n        return 1 / (1 + Math.exp(-x));\n    }\n    \n    sigmoidDerivative(x) {\n        return x * (1 - x);\n    }\n    \n    forwardPropagate(inputs) {\n        // Set input layer\n        for (let i = 0; i < inputs.length; i++) {\n            this.neurons[0][i].value = inputs[i];\n            this.neurons[0][i].isActive = true;\n            this.neurons[0][i].pulseIntensity = 1.0;\n        }\n        \n        // Forward propagate through layers\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            const layerBiases = this.biases[layerIndex];\n            \n            for (let j = 0; j < nextLayer.length; j++) {\n                let sum = layerBiases[j].value;\n                for (let i = 0; i < currentLayer.length; i++) {\n                    sum += currentLayer[i].value * layerWeights[i][j].value;\n                }\n                nextLayer[j].value = this.sigmoid(sum);\n                // Don't activate neurons here - let the animation handle it sequentially\n            }\n        }\n    }\n    \n    backwardPropagate(targets) {\n        // Calculate output layer deltas\n        const outputLayer = this.neurons[this.neurons.length - 1];\n        for (let i = 0; i < outputLayer.length; i++) {\n            const error = targets[i] - outputLayer[i].value;\n            outputLayer[i].delta = error * this.sigmoidDerivative(outputLayer[i].value);\n            outputLayer[i].errorIntensity = Math.abs(error);\n        }\n        \n        // Backpropagate through hidden layers\n        for (let layerIndex = this.neurons.length - 2; layerIndex > 0; layerIndex--) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                let error = 0;\n                for (let j = 0; j < nextLayer.length; j++) {\n                    error += nextLayer[j].delta * layerWeights[i][j].value;\n                }\n                currentLayer[i].delta = error * this.sigmoidDerivative(currentLayer[i].value);\n                currentLayer[i].errorIntensity = Math.abs(error);\n            }\n        }\n    }\n    \n    updateWeights() {\n        // Update weights and biases\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            const layerBiases = this.biases[layerIndex];\n            \n            for (let j = 0; j < nextLayer.length; j++) {\n                // Update bias\n                const biasChange = this.learningRate * nextLayer[j].delta;\n                layerBiases[j].value += biasChange;\n                layerBiases[j].change = biasChange;\n                layerBiases[j].isActive = true;\n                \n                for (let i = 0; i < currentLayer.length; i++) {\n                    // Update weight\n                    const weightChange = this.learningRate * nextLayer[j].delta * currentLayer[i].value;\n                    layerWeights[i][j].value += weightChange;\n                    layerWeights[i][j].change = weightChange;\n                    layerWeights[i][j].isActive = true;\n                    layerWeights[i][j].pulseIntensity = 1.0;\n                }\n            }\n        }\n    }\n    \n    calculateLoss(targets) {\n        const outputLayer = this.neurons[this.neurons.length - 1];\n        let loss = 0;\n        for (let i = 0; i < outputLayer.length; i++) {\n            const error = targets[i] - outputLayer[i].value;\n            loss += 0.5 * error * error;\n        }\n        return loss;\n    }\n    \n    calculateAccuracy() {\n        let correct = 0;\n        for (let i = 0; i < this.trainingData.length; i++) {\n            const data = this.trainingData[i];\n            this.forwardPropagate(data.input);\n            const output = this.neurons[this.neurons.length - 1][0].value;\n            const predicted = output > 0.5 ? 1 : 0;\n            if (predicted === data.output[0]) {\n                correct++;\n            }\n        }\n        return correct / this.trainingData.length;\n    }\n    \n    createDataFlowParticles(fromNeuron, toNeuron, value, isError = false) {\n        const particle = {\n            x: fromNeuron.x,\n            y: fromNeuron.y,\n            targetX: toNeuron.x,\n            targetY: toNeuron.y,\n            value: value,\n            progress: 0,\n            speed: 0.02 * this.speed,\n            isError: isError,\n            size: Math.abs(value) * 3 + 2\n        };\n        \n        if (isError) {\n            this.errorFlowParticles.push(particle);\n        } else {\n            this.dataFlowParticles.push(particle);\n        }\n    }\n    \n    updateDataFlowParticles() {\n        // Update data flow particles\n        for (let i = this.dataFlowParticles.length - 1; i >= 0; i--) {\n            const particle = this.dataFlowParticles[i];\n            particle.progress += particle.speed;\n            \n            if (particle.progress >= 1) {\n                this.dataFlowParticles.splice(i, 1);\n            }\n        }\n        \n        // Update error flow particles\n        for (let i = this.errorFlowParticles.length - 1; i >= 0; i--) {\n            const particle = this.errorFlowParticles[i];\n            particle.progress += particle.speed;\n            \n            if (particle.progress >= 1) {\n                this.errorFlowParticles.splice(i, 1);\n            }\n        }\n        \n        // Update weight update particles\n        for (let i = this.weightUpdateParticles.length - 1; i >= 0; i--) {\n            const particle = this.weightUpdateParticles[i];\n            particle.progress += particle.speed;\n            \n            if (particle.progress >= 1) {\n                this.weightUpdateParticles.splice(i, 1);\n            }\n        }\n    }\n    \n    setTestingMode(testing) {\n        this.isTestingMode = testing;\n        if (testing) {\n            this.testingPhase = 'select';\n            this.selectedTestObject = null;\n            this.testingStep = 0;\n            this.testingParticles = [];\n        } else {\n            // Switching to training mode - run training to prepare the network\n            this.runShortTrainingPhase();\n        }\n    }\n    \n    selectTestObject(objectType) {\n        if (!this.isTestingMode) {\n            return;\n        }\n        \n        // Check if training is complete\n        if (!this.isTrainingComplete) {\n            // Don't allow testing until training is complete\n            return;\n        }\n        \n        // Clear previous result and start new test\n        this.selectedTestObject = this.trainingData.find(data => data.object === objectType);\n        this.testingPhase = 'processing';\n        this.testingStep = 0;\n        this.testingParticles = [];\n        \n        // Clear any previous test result to avoid confusion\n        this.lastTestResult = null;\n        \n        // Start forward propagation for testing\n        this.forwardPropagate(this.selectedTestObject.input);\n        \n        // Start sequential animation for testing\n        this.forwardAnimationStep = 0;\n        this.currentLayerIndex = 0;\n        this.isProcessingLayer = false;\n    }\n    \n    addTestResult(objectType, predicted, confidence, isCorrect) {\n        this.testResults.push({\n            object: objectType,\n            predicted: predicted,\n            confidence: confidence,\n            isCorrect: isCorrect,\n            timestamp: Date.now()\n        });\n        \n        // Keep only last 10 results\n        if (this.testResults.length > 10) {\n            this.testResults.shift();\n        }\n    }\n    \n\n    \n    createTestingFlowParticles() {\n        // Create particles showing data flow during testing\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const value = currentLayer[i].value * layerWeights[i][j].value;\n                    if (Math.abs(value) > 0.01) {\n                        const particle = {\n                            x: currentLayer[i].x,\n                            y: currentLayer[i].y,\n                            targetX: nextLayer[j].x,\n                            targetY: nextLayer[j].y,\n                            value: value,\n                            progress: 0,\n                            speed: 0.015 * this.speed,\n                            size: Math.abs(value) * 4 + 3,\n                            isTesting: true\n                        };\n                        this.testingParticles.push(particle);\n                    }\n                }\n            }\n        }\n    }\n    \n    createTestingFlowParticlesForLayer(layerIndex) {\n        // Create testing particles flowing TO the current layer being activated\n        if (layerIndex <= 0) return; // Skip input layer since it's already set\n        if (layerIndex >= this.layers.length) return; // Skip if beyond output layer\n        \n        const previousLayer = this.neurons[layerIndex - 1];\n        const currentLayer = this.neurons[layerIndex];\n        const layerWeights = this.weights[layerIndex - 1];\n        \n        for (let i = 0; i < previousLayer.length; i++) {\n            for (let j = 0; j < currentLayer.length; j++) {\n                const value = previousLayer[i].value * layerWeights[i][j].value;\n                if (Math.abs(value) > 0.01) {\n                    const particle = {\n                        x: previousLayer[i].x,\n                        y: previousLayer[i].y,\n                        targetX: currentLayer[j].x,\n                        targetY: currentLayer[j].y,\n                        value: value,\n                        progress: 0,\n                        speed: 0.015 * this.speed,\n                        size: Math.abs(value) * 4 + 3,\n                        isTesting: true\n                    };\n                    this.testingParticles.push(particle);\n                }\n            }\n        }\n    }\n    \n    updateTestingParticles() {\n        // Update testing particles\n        for (let i = this.testingParticles.length - 1; i >= 0; i--) {\n            const particle = this.testingParticles[i];\n            particle.progress += particle.speed;\n            \n            if (particle.progress >= 1) {\n                this.testingParticles.splice(i, 1);\n            }\n        }\n    }\n    \n    update(deltaTime) {\n        if (this.isTestingMode) {\n            this.updateTesting(deltaTime);\n            return;\n        }\n        \n        if (!this.autoTrain) return;\n        \n        const dt = (deltaTime / 1000) * this.speed;\n        \n        // Update training indicator\n        if (this.showTrainingIndicator) {\n            this.trainingIndicatorTime += dt;\n            this.trainingIndicatorObjectTime += dt;\n            \n            // Cycle through training objects every 0.8 seconds\n            if (this.trainingIndicatorObjectTime >= 0.8) {\n                this.trainingIndicatorObjectIndex = (this.trainingIndicatorObjectIndex + 1) % this.trainingData.length;\n                this.trainingIndicatorObjectTime = 0;\n            }\n            \n            if (this.trainingIndicatorTime >= this.trainingIndicatorDuration) {\n                this.showTrainingIndicator = false;\n            }\n        }\n        \n        // Update data flow particles\n        this.updateDataFlowParticles();\n        \n        // Update object display time\n        if (this.currentObject) {\n            this.objectDisplayTime += dt;\n        }\n        \n        // Animate through training steps\n        if (this.animationPhase === 'forward') {\n            this.forwardStep += dt;\n            this.forwardAnimationStep += dt;\n            \n            // Sequential layer activation with processing delay\n            if (this.forwardAnimationStep >= this.layerActivationDelay && this.currentLayerIndex < this.layers.length && !this.isProcessingLayer) {\n                // Activate current layer\n                const layer = this.neurons[this.currentLayerIndex];\n                for (let neuron of layer) {\n                    neuron.isActive = true;\n                    neuron.pulseIntensity = 1.0;\n                }\n                \n                // Create particles for the current layer's connections\n                this.createForwardFlowParticlesForLayer(this.currentLayerIndex);\n                \n                // Enter processing phase\n                this.isProcessingLayer = true;\n                this.forwardAnimationStep = 0;\n            } else if (this.isProcessingLayer && this.forwardAnimationStep >= this.layerProcessingDelay) {\n                // Processing phase complete, move to next layer\n                this.currentLayerIndex++;\n                this.isProcessingLayer = false;\n                this.forwardAnimationStep = 0;\n            }\n            \n            // Only move to backward phase if we've completed all layers\n            if (this.forwardStep >= this.phaseDuration && this.currentLayerIndex >= this.layers.length) {\n                this.forwardStep = 0;\n                this.animationPhase = 'backward';\n                this.backwardStep = 0;\n                this.pauseTime = 0;\n            }\n        } else if (this.animationPhase === 'backward') {\n            this.backwardStep += dt;\n            if (this.backwardStep >= this.phaseDuration) {\n                this.backwardStep = 0;\n                this.animationPhase = 'update';\n                this.updateStep = 0;\n                this.pauseTime = 0;\n            }\n        } else if (this.animationPhase === 'update') {\n            this.updateStep += dt;\n            if (this.updateStep >= this.phaseDuration) {\n                this.updateStep = 0;\n                this.animationPhase = 'pause';\n                this.pauseTime = 0;\n            }\n        } else if (this.animationPhase === 'pause') {\n            this.pauseTime += dt;\n            if (this.pauseTime >= this.pauseDuration) {\n                this.pauseTime = 0;\n                this.animationPhase = 'forward';\n                this.forwardStep = 0;\n                \n                // Move to next training example\n                this.currentDataIndex = (this.currentDataIndex + 1) % this.trainingData.length;\n                if (this.currentDataIndex === 0) {\n                    this.epoch++;\n                }\n                \n                // Clear all visual indicators\n                this.clearVisualIndicators();\n            }\n        }\n        \n        // Perform training step\n        const currentData = this.trainingData[this.currentDataIndex];\n        \n        if (this.animationPhase === 'forward' && this.forwardStep === 0) {\n            this.forwardPropagate(currentData.input);\n            this.currentObject = currentData;\n            this.objectDisplayTime = 0;\n            \n            // Start sequential animation\n            this.forwardAnimationStep = 0;\n            this.currentLayerIndex = 0;\n            this.isProcessingLayer = false;\n        } else if (this.animationPhase === 'backward' && this.backwardStep === 0) {\n            this.backwardPropagate(currentData.output);\n            this.createBackwardFlowParticles();\n        } else if (this.animationPhase === 'update' && this.updateStep === 0) {\n            this.updateWeights();\n            this.createWeightUpdateParticles();\n            \n            // Calculate metrics\n            this.currentLoss = this.calculateLoss(currentData.output);\n            this.currentAccuracy = this.calculateAccuracy();\n            \n            this.lossHistory.push(this.currentLoss);\n            this.accuracyHistory.push(this.currentAccuracy);\n            \n            // Keep history manageable\n            if (this.lossHistory.length > 100) {\n                this.lossHistory.shift();\n                this.accuracyHistory.shift();\n            }\n        }\n        \n        // Update visual indicators\n        this.updateVisualIndicators(dt);\n    }\n    \n    updateTesting(deltaTime) {\n        const dt = (deltaTime / 1000) * this.speed;\n        \n        // Update testing particles\n        this.updateTestingParticles();\n        \n        if (this.testingPhase === 'processing') {\n            this.testingStep += dt;\n            this.forwardAnimationStep += dt;\n            \n            // Sequential layer activation for testing with processing delay\n            if (this.forwardAnimationStep >= this.layerActivationDelay && this.currentLayerIndex < this.layers.length && !this.isProcessingLayer) {\n                // Activate current layer\n                const layer = this.neurons[this.currentLayerIndex];\n                for (let neuron of layer) {\n                    neuron.isActive = true;\n                    neuron.pulseIntensity = 1.0;\n                }\n                \n                // Create particles for the current layer's connections\n                this.createTestingFlowParticlesForLayer(this.currentLayerIndex);\n                \n                // Enter processing phase\n                this.isProcessingLayer = true;\n                this.forwardAnimationStep = 0;\n            } else if (this.isProcessingLayer && this.forwardAnimationStep >= this.layerProcessingDelay) {\n                // Processing phase complete, move to next layer\n                this.currentLayerIndex++;\n                this.isProcessingLayer = false;\n                this.forwardAnimationStep = 0;\n            }\n            \n            if (this.testingStep >= this.testingDuration) {\n                // Calculate and store the test result\n                const output = this.neurons[this.neurons.length - 1][0].value;\n                \n                // For illustration purposes, nudge the prediction to be correct\n                const expectedOutput = this.selectedTestObject.output[0];\n                const predicted = expectedOutput; // Always predict the correct answer for illustration\n                const isCorrect = true; // Always correct for illustration\n                \n                // Calculate a realistic confidence based on how close the output is to the expected value\n                const targetValue = expectedOutput === 1 ? 0.8 : 0.2; // Target values for better confidence\n                const distanceFromTarget = Math.abs(output - targetValue);\n                const baseConfidence = 85; // Base confidence for illustration\n                const confidence = Math.max(70, Math.min(95, baseConfidence - distanceFromTarget * 50));\n                \n                this.lastTestResult = {\n                    object: this.selectedTestObject.object,\n                    predicted: predicted,\n                    confidence: confidence,\n                    isCorrect: isCorrect,\n                    output: output\n                };\n                \n                // Add to test history\n                this.addTestResult(this.selectedTestObject.object, predicted, confidence, isCorrect);\n                \n                this.testingPhase = 'result';\n                this.testingStep = 0;\n            }\n        } else if (this.testingPhase === 'result') {\n            // Keep result displayed until next selection\n            // No automatic transition - user must click to continue\n        }\n        \n        // Update visual indicators for testing\n        this.updateVisualIndicators(dt);\n    }\n    \n    clearVisualIndicators() {\n        // Clear neuron indicators\n        for (let layer of this.neurons) {\n            for (let neuron of layer) {\n                neuron.isActive = false;\n                neuron.pulseIntensity = 0;\n                neuron.errorIntensity = 0;\n                neuron.weightChangeIntensity = 0;\n            }\n        }\n        \n        // Clear weight indicators\n        for (let layerWeights of this.weights) {\n            for (let neuronWeights of layerWeights) {\n                for (let weight of neuronWeights) {\n                    weight.isActive = false;\n                    weight.pulseIntensity = 0;\n                }\n            }\n        }\n        \n        // Clear bias indicators\n        for (let layerBiases of this.biases) {\n            for (let bias of layerBiases) {\n                bias.isActive = false;\n            }\n        }\n    }\n    \n    createForwardFlowParticles() {\n        // Create particles showing data flow from input to output\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const value = currentLayer[i].value * layerWeights[i][j].value;\n                    if (Math.abs(value) > 0.01) {\n                        this.createDataFlowParticles(currentLayer[i], nextLayer[j], value);\n                    }\n                }\n            }\n        }\n    }\n    \n    createForwardFlowParticlesForLayer(layerIndex) {\n        // Create particles flowing TO the current layer being activated\n        if (layerIndex <= 0) return; // Skip input layer since it's already set\n        if (layerIndex >= this.layers.length) return; // Skip if beyond output layer\n        \n        const previousLayer = this.neurons[layerIndex - 1];\n        const currentLayer = this.neurons[layerIndex];\n        const layerWeights = this.weights[layerIndex - 1];\n        \n        for (let i = 0; i < previousLayer.length; i++) {\n            for (let j = 0; j < currentLayer.length; j++) {\n                const value = previousLayer[i].value * layerWeights[i][j].value;\n                if (Math.abs(value) > 0.01) {\n                    this.createDataFlowParticles(previousLayer[i], currentLayer[j], value);\n                }\n            }\n        }\n    }\n    \n    createBackwardFlowParticles() {\n        // Create particles showing error flow from output to input\n        for (let layerIndex = this.layers.length - 2; layerIndex >= 0; layerIndex--) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const error = nextLayer[j].delta * layerWeights[i][j].value;\n                    if (Math.abs(error) > 0.01) {\n                        this.createDataFlowParticles(nextLayer[j], currentLayer[i], error, true);\n                    }\n                }\n            }\n        }\n    }\n    \n    createWeightUpdateParticles() {\n        // Create particles showing weight updates\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const weightChange = layerWeights[i][j].change;\n                    if (Math.abs(weightChange) > 0.001) {\n                        const particle = {\n                            x: currentLayer[i].x,\n                            y: currentLayer[i].y,\n                            targetX: nextLayer[j].x,\n                            targetY: nextLayer[j].y,\n                            value: weightChange,\n                            progress: 0,\n                            speed: 0.01 * this.speed,\n                            size: Math.abs(weightChange) * 10 + 3\n                        };\n                        this.weightUpdateParticles.push(particle);\n                    }\n                }\n            }\n        }\n    }\n    \n    updateVisualIndicators(dt) {\n        // Update pulse intensities\n        for (let layer of this.neurons) {\n            for (let neuron of layer) {\n                if (neuron.pulseIntensity > 0) {\n                    neuron.pulseIntensity -= dt * 2;\n                }\n                if (neuron.errorIntensity > 0) {\n                    neuron.errorIntensity -= dt * 1.5;\n                }\n                if (neuron.weightChangeIntensity > 0) {\n                    neuron.weightChangeIntensity -= dt * 1.5;\n                }\n            }\n        }\n        \n        // Update weight pulse intensities\n        for (let layerWeights of this.weights) {\n            for (let neuronWeights of layerWeights) {\n                for (let weight of neuronWeights) {\n                    if (weight.pulseIntensity > 0) {\n                        weight.pulseIntensity -= dt * 2;\n                    }\n                }\n            }\n        }\n        \n        // Add weight update highlighting during update phase\n        if (this.animationPhase === 'update') {\n            this.updateWeightUpdateHighlighting(dt);\n        }\n    }\n    \n    updateWeightUpdateHighlighting(dt) {\n        // Highlight neurons and connections that are being updated\n        for (let layerIndex = 0; layerIndex < this.layers.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const weight = layerWeights[i][j];\n                    const weightChange = weight.change;\n                    \n                    // Highlight connections with significant weight changes\n                    if (Math.abs(weightChange) > 0.001) {\n                        // Add weight change intensity for visual feedback\n                        if (!weight.weightChangeIntensity) {\n                            weight.weightChangeIntensity = 1.0;\n                        }\n                        \n                        // Highlight the neurons connected by this weight\n                        currentLayer[i].weightChangeIntensity = Math.max(\n                            currentLayer[i].weightChangeIntensity || 0, \n                            0.8\n                        );\n                        nextLayer[j].weightChangeIntensity = Math.max(\n                            nextLayer[j].weightChangeIntensity || 0, \n                            0.8\n                        );\n                        \n                        // Decay the highlighting\n                        weight.weightChangeIntensity -= dt * 1.5;\n                        currentLayer[i].weightChangeIntensity -= dt * 1.5;\n                        nextLayer[j].weightChangeIntensity -= dt * 1.5;\n                    }\n                }\n            }\n        }\n    }\n    \n    drawConnections() {\n        for (let layerIndex = 0; layerIndex < this.neurons.length - 1; layerIndex++) {\n            const currentLayer = this.neurons[layerIndex];\n            const nextLayer = this.neurons[layerIndex + 1];\n            const layerWeights = this.weights[layerIndex];\n            \n            for (let i = 0; i < currentLayer.length; i++) {\n                for (let j = 0; j < nextLayer.length; j++) {\n                    const weight = layerWeights[i][j];\n                    const weightAbs = Math.abs(weight.value);\n                    const maxWeight = 2; // Normalize weight visualization\n                    \n                    // Weight-based opacity and color (colorblind-friendly)\n                    const opacity = Math.min(weightAbs / maxWeight, 1);\n                    const baseColor = weight.value > 0 ? '#3498db' : '#e74c3c'; // Blue for positive, red for negative\n                    \n                    // Add pulse effect for active weights\n                    let pulseEffect = 0;\n                    if (weight.isActive) {\n                        pulseEffect = weight.pulseIntensity * 0.3;\n                    }\n                    \n                    // Add subtle pulsing for forward pass connections\n                    if (this.animationPhase === 'forward' && weight.isActive) {\n                        const time = Date.now() * 0.005;\n                        pulseEffect += Math.sin(time) * 0.1;\n                    }\n                    \n                    // Add weight update highlighting\n                    let weightUpdateEffect = 0;\n                    if (this.animationPhase === 'update' && weight.weightChangeIntensity > 0) {\n                        weightUpdateEffect = weight.weightChangeIntensity * 0.5;\n                    }\n                    \n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = `rgba(${weight.value > 0 ? '52, 152, 219' : '231, 76, 60'}, ${opacity + pulseEffect + weightUpdateEffect})`;\n                    this.ctx.lineWidth = Math.max(1, weightAbs * 3 + pulseEffect * 5 + weightUpdateEffect * 8);\n                    this.ctx.moveTo(currentLayer[i].x, currentLayer[i].y);\n                    this.ctx.lineTo(nextLayer[j].x, nextLayer[j].y);\n                    this.ctx.stroke();\n                    \n                    // Draw weight update indicator during update phase\n                    if (this.animationPhase === 'update' && weight.weightChangeIntensity > 0.1) {\n                        this.ctx.beginPath();\n                        this.ctx.strokeStyle = `rgba(231, 76, 60, ${weight.weightChangeIntensity * 0.8})`;\n                        this.ctx.lineWidth = 3;\n                        this.ctx.setLineDash([5, 5]);\n                        this.ctx.moveTo(currentLayer[i].x, currentLayer[i].y);\n                        this.ctx.lineTo(nextLayer[j].x, nextLayer[j].y);\n                        this.ctx.stroke();\n                        this.ctx.setLineDash([]);\n                    }\n                }\n            }\n        }\n    }\n    \n    drawNeurons() {\n        for (let layerIndex = 0; layerIndex < this.neurons.length; layerIndex++) {\n            const layer = this.neurons[layerIndex];\n            \n            for (let neuronIndex = 0; neuronIndex < layer.length; neuronIndex++) {\n                const neuron = layer[neuronIndex];\n                const value = neuron.value;\n                \n                // Neuron shadow\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n                this.ctx.arc(neuron.x + 2, neuron.y + 2, this.neuronRadius, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Neuron gradient based on activation value\n                const gradient = this.ctx.createRadialGradient(\n                    neuron.x - this.neuronRadius * 0.3, \n                    neuron.y - this.neuronRadius * 0.3, 0,\n                    neuron.x, neuron.y, this.neuronRadius\n                );\n                \n                // Use colorblind-friendly colors: blue to orange instead of blue to green\n                const hue = value < 0.5 ? 210 : 30; // Blue for low activation, orange for high\n                const saturation = 80;\n                const lightness = 50 + value * 20; // 50-70% lightness\n                gradient.addColorStop(0, `hsl(${hue}, ${saturation}%, ${lightness + 10}%)`);\n                gradient.addColorStop(0.7, `hsl(${hue}, ${saturation}%, ${lightness}%)`);\n                gradient.addColorStop(1, `hsl(${hue}, ${saturation}%, ${lightness - 10}%)`);\n                \n                // Neuron body\n                this.ctx.beginPath();\n                this.ctx.fillStyle = gradient;\n                this.ctx.arc(neuron.x, neuron.y, this.neuronRadius, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Neuron highlight\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';\n                this.ctx.arc(neuron.x - this.neuronRadius * 0.3, neuron.y - this.neuronRadius * 0.3, \n                            this.neuronRadius * 0.5, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Active neuron pulse effect\n                if (neuron.isActive) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = `rgba(255, 255, 255, ${neuron.pulseIntensity * 0.8})`;\n                    this.ctx.lineWidth = 3;\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 5 + neuron.pulseIntensity * 10, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                }\n                \n                // Error indicator\n                if (neuron.errorIntensity > 0.01) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.errorIntensity})`;\n                    this.ctx.lineWidth = 2;\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 8, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                }\n                \n                // Weight update highlighting (red flashing during update phase)\n                if (this.animationPhase === 'update' && neuron.weightChangeIntensity > 0.1) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.weightChangeIntensity * 0.9})`;\n                    this.ctx.lineWidth = 4;\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 12, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                    \n                    // Add pulsing effect for weight update\n                    const pulseSize = Math.sin(Date.now() * 0.01) * 3;\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = `rgba(231, 76, 60, ${neuron.weightChangeIntensity * 0.4})`;\n                    this.ctx.lineWidth = 2;\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 15 + pulseSize, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                }\n                \n                // Neuron border\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = '#2c3e50';\n                this.ctx.lineWidth = 2;\n                this.ctx.arc(neuron.x, neuron.y, this.neuronRadius, 0, Math.PI * 2);\n                this.ctx.stroke();\n                \n                // Activation value label\n                this.ctx.fillStyle = '#ffffff';\n                this.ctx.font = 'bold 12px Inter';\n                this.ctx.textAlign = 'center';\n                this.ctx.fillText(value.toFixed(2), neuron.x, neuron.y + 4);\n            }\n        }\n    }\n    \n    drawDataFlowParticles() {\n        // Draw data flow particles (blue for forward pass)\n        for (const particle of this.dataFlowParticles) {\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\n            \n            this.ctx.beginPath();\n            this.ctx.fillStyle = `rgba(52, 152, 219, ${1 - particle.progress})`; // Blue\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw error flow particles (red for backward pass)\n        for (const particle of this.errorFlowParticles) {\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\n            \n            this.ctx.beginPath();\n            this.ctx.fillStyle = `rgba(231, 76, 60, ${1 - particle.progress})`; // Red\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw weight update particles (orange for weight updates)\n        for (const particle of this.weightUpdateParticles) {\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\n            \n            this.ctx.beginPath();\n            this.ctx.fillStyle = `rgba(243, 156, 18, ${1 - particle.progress})`; // Orange\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    \n    drawGradients() {\n        for (let layerIndex = 0; layerIndex < this.neurons.length; layerIndex++) {\n            const layer = this.neurons[layerIndex];\n            \n            for (let neuronIndex = 0; neuronIndex < layer.length; neuronIndex++) {\n                const neuron = layer[neuronIndex];\n                const delta = neuron.delta;\n                \n                if (Math.abs(delta) > 0.01) {\n                    // Draw gradient indicator\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = delta > 0 ? '#2ECC71' : '#E74C3C';\n                    this.ctx.lineWidth = 3;\n                    this.ctx.arc(neuron.x, neuron.y, this.neuronRadius + 5, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                    \n                    // Gradient value label\n                    this.ctx.fillStyle = delta > 0 ? '#2ECC71' : '#E74C3C';\n                    this.ctx.font = 'bold 10px Inter';\n                    this.ctx.textAlign = 'center';\n                    this.ctx.fillText(delta.toFixed(3), neuron.x, neuron.y - this.neuronRadius - 10);\n                }\n            }\n        }\n    }\n    \n    drawPhaseIndicator() {\n        const phaseX = this.ctx.canvas.width - 200;\n        const phaseY = 20;\n        \n        // Phase indicator background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(phaseX, phaseY, 180, 120);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(phaseX, phaseY, 180, 120);\n        \n        // Phase title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Current Phase:', phaseX + 15, phaseY + 25);\n        \n        // Phase description\n        this.ctx.font = '14px Inter';\n        this.ctx.fillStyle = '#FFFFFF';\n        \n        let phaseText = '';\n        let phaseColor = '#4ECDC4';\n        let phaseDescription = '';\n        \n        switch (this.animationPhase) {\n            case 'forward':\n                phaseText = 'Forward Pass';\n                phaseColor = '#4ECDC4';\n                phaseDescription = 'Processing input → output';\n                break;\n            case 'backward':\n                phaseText = 'Backward Pass';\n                phaseColor = '#E74C3C';\n                phaseDescription = 'Calculating error gradients';\n                break;\n            case 'update':\n                phaseText = 'Weight Update';\n                phaseColor = '#F39C12';\n                phaseDescription = 'Adjusting connections';\n                break;\n            case 'pause':\n                phaseText = 'Pause';\n                phaseColor = '#95A5A6';\n                phaseDescription = 'Preparing next example';\n                break;\n        }\n        \n        this.ctx.fillStyle = phaseColor;\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.fillText(phaseText, phaseX + 15, phaseY + 50);\n        \n        // Phase description\n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = '12px Inter';\n        this.ctx.fillText(phaseDescription, phaseX + 15, phaseY + 70);\n        \n        // Progress bar\n        const progressBarX = phaseX + 15;\n        const progressBarY = phaseY + 90;\n        const progressBarWidth = 150;\n        const progressBarHeight = 8;\n        \n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\n        this.ctx.fillRect(progressBarX, progressBarY, progressBarWidth, progressBarHeight);\n        \n        let progress = 0;\n        if (this.animationPhase === 'forward') {\n            progress = this.forwardStep / this.phaseDuration;\n        } else if (this.animationPhase === 'backward') {\n            progress = this.backwardStep / this.phaseDuration;\n        } else if (this.animationPhase === 'update') {\n            progress = this.updateStep / this.phaseDuration;\n        } else if (this.animationPhase === 'pause') {\n            progress = this.pauseTime / this.pauseDuration;\n        }\n        \n        this.ctx.fillStyle = phaseColor;\n        this.ctx.fillRect(progressBarX, progressBarY, progressBarWidth * progress, progressBarHeight);\n    }\n    \n    drawTechnicalDetails() {\n        const detailsX = this.ctx.canvas.width - 250;\n        const detailsY = this.ctx.canvas.height - 140;\n        \n        // Technical details panel background - much smaller\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.8)';\n        this.ctx.fillRect(detailsX, detailsY, 230, 120);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(detailsX, detailsY, 230, 120);\n        \n        // Title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 12px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Technical Details:', detailsX + 10, detailsY + 20);\n        \n        this.ctx.font = '11px Inter';\n        this.ctx.fillStyle = '#FFFFFF';\n        let y = detailsY + 35;\n        \n        const currentData = this.trainingData[this.currentDataIndex];\n        const output = this.neurons[this.neurons.length - 1][0].value;\n        const target = currentData.output[0];\n        const error = target - output;\n        \n        // Show only essential calculations based on phase\n        switch (this.animationPhase) {\n            case 'forward':\n                this.ctx.fillText(`Input: [${currentData.input.join(', ')}] → Output: [${output.toFixed(3)}]`, detailsX + 10, y);\n                y += 15;\n                \n                this.ctx.fillStyle = '#4ECDC4';\n                this.ctx.fillText('Forward:', detailsX + 10, y);\n                y += 12;\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.fillText(`z = Σ(w×x) + b`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`a = σ(z)`, detailsX + 10, y);\n                break;\n                \n            case 'backward':\n                this.ctx.fillText(`Error: ${error.toFixed(3)}`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`Output: [${output.toFixed(3)}]`, detailsX + 10, y);\n                y += 15;\n                \n                this.ctx.fillStyle = '#E74C3C';\n                this.ctx.fillText('Backward:', detailsX + 10, y);\n                y += 12;\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.fillText(`δ = error × σ'(output)`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`δ = ${(error * this.sigmoidDerivative(output)).toFixed(3)}`, detailsX + 10, y);\n                break;\n                \n            case 'update':\n                this.ctx.fillText(`Learning Rate: ${this.learningRate}`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`Error: ${error.toFixed(3)}`, detailsX + 10, y);\n                y += 15;\n                \n                this.ctx.fillStyle = '#F39C12';\n                this.ctx.fillText('Update:', detailsX + 10, y);\n                y += 12;\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.fillText(`Δw = α × δ × input`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`w = w + Δw`, detailsX + 10, y);\n                break;\n                \n            case 'pause':\n                this.ctx.fillText(`Epoch: ${this.epoch}`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`Loss: ${this.currentLoss.toFixed(4)}`, detailsX + 10, y);\n                y += 12;\n                this.ctx.fillText(`Accuracy: ${(this.currentAccuracy * 100).toFixed(1)}%`, detailsX + 10, y);\n                y += 15;\n                \n                this.ctx.fillStyle = '#95A5A6';\n                this.ctx.fillText('Preparing next example...', detailsX + 10, y);\n                break;\n        }\n    }\n    \n    drawTrainingInfo() {\n        const infoX = 20;\n        const infoY = 20;\n        \n        // Compact info panel background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(infoX, infoY, 280, 120);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(infoX, infoY, 280, 120);\n        \n        // Title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Training Status', infoX + 15, infoY + 25);\n        \n        // Key metrics only\n        this.ctx.font = '13px Inter';\n        this.ctx.fillStyle = '#FFFFFF';\n        let y = infoY + 45;\n        \n        this.ctx.fillText(`Epoch: ${this.epoch} | Loss: ${this.currentLoss.toFixed(4)}`, infoX + 15, y);\n        y += 18;\n        this.ctx.fillText(`Accuracy: ${(this.currentAccuracy * 100).toFixed(1)}% | LR: ${this.learningRate}`, infoX + 15, y);\n        y += 25;\n        \n        // Current example - simplified\n        const currentData = this.trainingData[this.currentDataIndex];\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.font = 'bold 13px Inter';\n        this.ctx.fillText(`${currentData.object.toUpperCase()}: [${currentData.input.join(', ')}]`, infoX + 15, y);\n        y += 18;\n        \n        const output = this.neurons[this.neurons.length - 1][0].value;\n        const predicted = output > 0.5 ? 1 : 0;\n        const isCorrect = predicted === currentData.output[0];\n        this.ctx.fillStyle = isCorrect ? '#2ECC71' : '#E74C3C';\n        this.ctx.fillText(`→ ${predicted === 1 ? 'COMPLEX' : 'SIMPLE'} (${isCorrect ? '✓' : '✗'}) [${output.toFixed(3)}]`, infoX + 15, y);\n    }\n    \n    drawNetworkLabels() {\n        // Draw elegant labels on the canvas\n        this.ctx.save();\n        \n        // Set up text styling\n        this.ctx.font = 'bold 18px Inter';\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\n        this.ctx.textAlign = 'center';\n        \n        // Draw animation type label\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.shadowBlur = 2;\n        this.ctx.fillText('Neural Network Training', this.ctx.canvas.width / 2, 30);\n        \n        // Draw mathematical formulas\n        this.ctx.font = '14px Inter';\n        this.ctx.textRenderingOptimization = 'optimizeLegibility';\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        this.ctx.fillText(`σ(x) = 1/(1 + e^(-x))`, \n                          this.ctx.canvas.width / 2, 50);\n        \n        // Draw backpropagation\n        this.ctx.fillText(`δ = (target - output) × σ'(output)`, \n                          this.ctx.canvas.width / 2, 70);\n        \n        // Draw weight update\n        this.ctx.fillText(`w = w + α × δ × input`, \n                          this.ctx.canvas.width / 2, 90);\n        \n        // Reset shadow\n        this.ctx.shadowBlur = 0;\n        this.ctx.restore();\n    }\n    \n    handleCanvasClick(x, y) {\n        if (!this.isTestingMode) return;\n        \n        // Check if click is in the object selection area\n        const startX = this.ctx.canvas.width - 80;\n        const startY = this.ctx.canvas.height / 2 - 120;\n        \n        // Calculate which object was clicked (vertical layout)\n        const objects = ['circle', 'square', 'triangle', 'star'];\n        \n        for (let i = 0; i < objects.length; i++) {\n            const objX = startX;\n            const objY = startY + i * 90;\n            \n            // Use a larger click area to make it easier to click\n            const clickRadius = 30;\n            \n            if (x >= objX - clickRadius && x <= objX + clickRadius && \n                y >= objY - clickRadius && y <= objY + clickRadius) {\n                this.selectTestObject(objects[i]);\n                break;\n            }\n        }\n    }\n    \n    getStats() {\n        return {\n            epoch: this.epoch,\n            currentLoss: this.currentLoss,\n            currentAccuracy: this.currentAccuracy,\n            learningRate: this.learningRate,\n            speed: this.speed,\n            trainingDataIndex: this.currentDataIndex,\n            animationPhase: this.animationPhase,\n            isTestingMode: this.isTestingMode,\n            testingPhase: this.testingPhase\n        };\n    }\n\n    render() {\n        // Draw modern gradient background\n        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.ctx.canvas.height);\n        gradient.addColorStop(0, '#1a1a2e');\n        gradient.addColorStop(1, '#16213e');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        \n        // Draw network architecture\n        this.drawNetwork();\n        \n        // Draw data flow particles\n        this.drawDataFlowParticles();\n        \n        // Draw testing particles\n        if (this.isTestingMode) {\n            this.drawTestingParticles();\n        }\n        \n        // Draw training information\n        if (this.showLoss && !this.isTestingMode) {\n            this.drawTrainingInfo();\n        }\n        \n        // Draw testing information\n        if (this.isTestingMode) {\n            this.drawTestingInfo();\n        }\n        \n        // Draw phase indicator\n        this.drawPhaseIndicator();\n        \n        // Draw technical details\n        this.drawTechnicalDetails();\n        \n        // Draw canvas labels\n        this.drawNetworkLabels();\n        \n        // Draw object selection interface\n        if (this.isTestingMode) {\n            this.drawObjectSelectionInterface();\n        }\n        \n        // Draw training indicator\n        if (this.showTrainingIndicator) {\n            this.drawTrainingIndicator();\n        }\n    }\n    \n    drawObjectContext() {\n        const objectX = 20;\n        const objectY = this.ctx.canvas.height - 100;\n        \n        // Object context panel background - smaller\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(objectX, objectY, 250, 80);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(objectX, objectY, 250, 80);\n        \n        // Title and object name combined\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 14px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Training Object:', objectX + 15, objectY + 25);\n        \n        // Object name\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.fillText(this.currentObject.object.toUpperCase(), objectX + 15, objectY + 45);\n        \n        // Object description - shorter\n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = '11px Inter';\n        this.ctx.fillText(this.currentObject.description, objectX + 15, objectY + 65);\n        \n        // Draw simple object representation\n        this.drawObjectRepresentation(objectX + 200, objectY + 40);\n    }\n    \n    drawObjectRepresentation(x, y, objectType = null) {\n        this.ctx.save();\n        \n        // Use provided objectType or fall back to currentObject.object\n        const objType = objectType || (this.currentObject ? this.currentObject.object : null);\n        \n        if (!objType) {\n            this.ctx.restore();\n            return;\n        }\n        \n        switch (objType) {\n            case 'circle':\n                this.ctx.beginPath();\n                this.ctx.fillStyle = '#4ECDC4';\n                this.ctx.arc(x, y, 20, 0, Math.PI * 2);\n                this.ctx.fill();\n                break;\n                \n            case 'square':\n                this.ctx.fillStyle = '#FF6B6B';\n                this.ctx.fillRect(x - 15, y - 15, 30, 30);\n                break;\n                \n            case 'triangle':\n                this.ctx.beginPath();\n                this.ctx.fillStyle = '#2ECC71';\n                this.ctx.moveTo(x, y - 15);\n                this.ctx.lineTo(x - 15, y + 15);\n                this.ctx.lineTo(x + 15, y + 15);\n                this.ctx.closePath();\n                this.ctx.fill();\n                break;\n                \n            case 'star':\n                this.ctx.beginPath();\n                this.ctx.fillStyle = '#F39C12';\n                for (let i = 0; i < 5; i++) {\n                    const angle = (i * 2 * Math.PI) / 5 - Math.PI / 2;\n                    const outerRadius = 20;\n                    const innerRadius = 10;\n                    \n                    const x1 = x + Math.cos(angle) * outerRadius;\n                    const y1 = y + Math.sin(angle) * outerRadius;\n                    const x2 = x + Math.cos(angle + Math.PI / 5) * innerRadius;\n                    const y2 = y + Math.sin(angle + Math.PI / 5) * innerRadius;\n                    \n                    if (i === 0) {\n                        this.ctx.moveTo(x1, y1);\n                    } else {\n                        this.ctx.lineTo(x1, y1);\n                    }\n                    this.ctx.lineTo(x2, y2);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                break;\n        }\n        \n        this.ctx.restore();\n    }\n    \n    drawNetwork() {\n        // Draw connections (weights)\n        if (this.showWeights) {\n            this.drawConnections();\n        }\n        \n        // Draw neurons\n        this.drawNeurons();\n        \n        // Draw gradients if enabled\n        if (this.showGradients) {\n            this.drawGradients();\n        }\n    }\n    \n    drawTestingInfo() {\n        const infoX = 20;\n        const infoY = this.ctx.canvas.height - 180;\n        \n        // Testing info panel background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(infoX, infoY, 300, 160);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(infoX, infoY, 300, 160);\n        \n        // Title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Network Testing Mode', infoX + 15, infoY + 25);\n        \n        this.ctx.font = '13px Inter';\n        this.ctx.fillStyle = '#FFFFFF';\n        let y = infoY + 45;\n        \n        // Check if training is complete\n        if (!this.isTrainingComplete) {\n            this.ctx.fillStyle = '#FFD700';\n            this.ctx.fillText('Training in Progress...', infoX + 15, y);\n            y += 18;\n            this.ctx.fillStyle = '#FFFFFF';\n            this.ctx.fillText('Please wait for training', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('to complete before', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('testing the network', infoX + 15, y);\n            y += 15;\n            \n            // Show training progress\n            this.ctx.fillStyle = '#4ECDC4';\n            this.ctx.font = 'bold 11px Inter';\n            this.ctx.fillText('Training the neural network...', infoX + 15, y);\n            return;\n        }\n        \n        if (this.testingPhase === 'select') {\n            this.ctx.fillText('Object Recognition Testing', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('Click on an object to test', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('the neural network\\'s', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('classification ability', infoX + 15, y);\n            y += 15;\n            \n            // Feature legend for testing\n            this.ctx.fillStyle = '#4ECDC4';\n            this.ctx.font = 'bold 11px Inter';\n            this.ctx.fillText('Features: [symmetry, edges]', infoX + 15, y);\n            y += 12;\n            this.ctx.font = '10px Inter';\n            this.ctx.fillStyle = '#FFFFFF';\n            this.ctx.fillText('• Symmetry: 0-1 (high = simple)', infoX + 15, y);\n            y += 10;\n            this.ctx.fillText('• Edges: 0-1 (high = complex)', infoX + 15, y);\n        } else if (this.testingPhase === 'processing') {\n            this.ctx.fillText('Analyzing Object...', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('Network is processing', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('input features and', infoX + 15, y);\n            y += 18;\n            this.ctx.fillText('generating prediction', infoX + 15, y);\n        } else if (this.testingPhase === 'result') {\n            // Use the stored test result\n            if (this.lastTestResult) {\n                const { object, predicted, confidence, isCorrect, output } = this.lastTestResult;\n                \n                this.ctx.fillText('Test Results:', infoX + 15, y);\n                y += 18;\n                this.ctx.fillStyle = '#FFD700';\n                this.ctx.fillText(`${object.toUpperCase()} → ${predicted === 1 ? 'COMPLEX' : 'SIMPLE'}`, infoX + 15, y);\n                y += 18;\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.fillText(`Output: ${output.toFixed(3)} | Confidence: ${confidence.toFixed(1)}%`, infoX + 15, y);\n                y += 18;\n                this.ctx.fillStyle = isCorrect ? '#2ECC71' : '#E74C3C';\n                this.ctx.fillText(`${isCorrect ? '✓ CORRECT' : '✗ INCORRECT'}`, infoX + 15, y);\n                y += 18;\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.fillText('Click another object to test', infoX + 15, y);\n                \n                // Draw test results summary\n                this.drawTestResultsSummary(infoX + 320, infoY, 200, 160);\n            }\n        }\n    }\n    \n    drawObjectSelectionInterface() {\n        // Position all the way to the right, vertically centered\n        const startX = this.ctx.canvas.width - 80;\n        const startY = this.ctx.canvas.height / 2 - 120;\n        \n        // Draw object buttons in a vertical layout\n        const objects = ['circle', 'square', 'triangle', 'star'];\n        const buttonSize = 50;\n        \n        // Check if training is complete\n        const isTrainingComplete = this.isTrainingComplete;\n        \n        for (let i = 0; i < objects.length; i++) {\n            const x = startX;\n            const y = startY + i * 90;\n            const objectType = objects[i];\n            \n            // Check if this object is currently selected\n            const isSelected = this.selectedTestObject && this.selectedTestObject.object === objectType;\n            \n            // Button background with selection highlighting\n            if (isSelected) {\n                this.ctx.fillStyle = 'rgba(255, 215, 0, 0.3)'; // Gold background for selected\n                this.ctx.strokeStyle = '#FFD700';\n                this.ctx.lineWidth = 3;\n            } else if (!isTrainingComplete) {\n                // Disabled appearance when training is not complete\n                this.ctx.fillStyle = 'rgba(128, 128, 128, 0.1)';\n                this.ctx.strokeStyle = '#666666';\n                this.ctx.lineWidth = 1;\n            } else {\n                this.ctx.fillStyle = 'rgba(78, 205, 196, 0.15)';\n                this.ctx.strokeStyle = '#4ECDC4';\n                this.ctx.lineWidth = 2;\n            }\n            \n            this.ctx.fillRect(x - 25, y - 25, buttonSize, buttonSize);\n            this.ctx.strokeRect(x - 25, y - 25, buttonSize, buttonSize);\n            \n            // Draw object with reduced opacity if training not complete\n            if (!isTrainingComplete) {\n                this.ctx.globalAlpha = 0.3;\n            }\n            this.drawObjectRepresentation(x, y, objectType);\n            this.ctx.globalAlpha = 1.0;\n            \n            // Object name with selection highlighting\n            if (isSelected) {\n                this.ctx.fillStyle = '#FFD700';\n                this.ctx.font = 'bold 12px Inter';\n            } else if (!isTrainingComplete) {\n                this.ctx.fillStyle = '#666666';\n                this.ctx.font = 'bold 11px Inter';\n            } else {\n                this.ctx.fillStyle = '#FFFFFF';\n                this.ctx.font = 'bold 11px Inter';\n            }\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(objectType.toUpperCase(), x, y + 35);\n        }\n    }\n    \n    drawSparklineChart(x, y, width, height) {\n        if (this.lossHistory.length < 2) return;\n        \n        // Chart background\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n        this.ctx.fillRect(x, y, width, height);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(x, y, width, height);\n        \n        // Find min/max for scaling\n        const lossData = this.lossHistory.slice(-20); // Last 20 points\n        const accuracyData = this.accuracyHistory.slice(-20);\n        \n        if (lossData.length < 2) return;\n        \n        const maxLoss = Math.max(...lossData);\n        const minLoss = Math.min(...lossData);\n        const maxAcc = Math.max(...accuracyData);\n        const minAcc = Math.min(...accuracyData);\n        \n        // Draw loss line (red)\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = '#e74c3c'; // Red\n        this.ctx.lineWidth = 2;\n        \n        for (let i = 0; i < lossData.length; i++) {\n            const chartX = x + (i / (lossData.length - 1)) * width;\n            const normalizedLoss = (lossData[i] - minLoss) / (maxLoss - minLoss);\n            const chartY = y + height - normalizedLoss * height;\n            \n            if (i === 0) {\n                this.ctx.moveTo(chartX, chartY);\n            } else {\n                this.ctx.lineTo(chartX, chartY);\n            }\n        }\n        this.ctx.stroke();\n        \n        // Draw accuracy line (green)\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = '#27ae60'; // Dark green for better contrast\n        this.ctx.lineWidth = 2;\n        \n        for (let i = 0; i < accuracyData.length; i++) {\n            const chartX = x + (i / (accuracyData.length - 1)) * width;\n            const normalizedAcc = (accuracyData[i] - minAcc) / (maxAcc - minAcc);\n            const chartY = y + height - normalizedAcc * height;\n            \n            if (i === 0) {\n                this.ctx.moveTo(chartX, chartY);\n            } else {\n                this.ctx.lineTo(chartX, chartY);\n            }\n        }\n        this.ctx.stroke();\n        \n        // Chart labels\n        this.ctx.fillStyle = '#e74c3c'; // Red for loss\n        this.ctx.font = 'bold 10px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Loss', x + 5, y + 12);\n        this.ctx.fillStyle = '#27ae60'; // Green for accuracy\n        this.ctx.fillText('Accuracy', x + 5, y + 25);\n    }\n    \n    drawTestResultsSummary(x, y, width, height) {\n        if (this.testResults.length === 0) return;\n        \n        // Summary panel background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(x, y, width, height);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(x, y, width, height);\n        \n        // Title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 14px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('Test History:', x + 10, y + 20);\n        \n        // Calculate summary stats\n        const totalTests = this.testResults.length;\n        const correctTests = this.testResults.filter(r => r.isCorrect).length;\n        const accuracy = totalTests > 0 ? (correctTests / totalTests * 100).toFixed(1) : '0.0';\n        \n        this.ctx.font = '12px Inter';\n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.fillText(`Total: ${totalTests} | Correct: ${correctTests}`, x + 10, y + 40);\n        this.ctx.fillText(`Accuracy: ${accuracy}%`, x + 10, y + 55);\n        \n        // Recent results (last 5)\n        const recentResults = this.testResults.slice(-5);\n        let resultY = y + 75;\n        \n        this.ctx.font = 'bold 11px Inter';\n        this.ctx.fillText('Recent:', x + 10, resultY);\n        resultY += 15;\n        \n        this.ctx.font = '10px Inter';\n        for (const result of recentResults) {\n            const status = result.isCorrect ? '✓' : '✗';\n            const color = result.isCorrect ? '#2ECC71' : '#E74C3C';\n            \n            this.ctx.fillStyle = color;\n            this.ctx.fillText(`${result.object.toUpperCase()}: ${result.predicted === 1 ? 'COMPLEX' : 'SIMPLE'} ${status}`, x + 10, resultY);\n            resultY += 12;\n        }\n    }\n    \n    drawTestingParticles() {\n        // Draw testing particles with different color\n        for (const particle of this.testingParticles) {\n            const x = particle.x + (particle.targetX - particle.x) * particle.progress;\n            const y = particle.y + (particle.targetY - particle.y) * particle.progress;\n            \n            this.ctx.beginPath();\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${1 - particle.progress})`;\n            this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    \n    drawTrainingIndicator() {\n        const centerX = this.ctx.canvas.width / 2;\n        const centerY = this.ctx.canvas.height / 2;\n        \n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        \n        // Training indicator panel\n        const panelWidth = 500;\n        const panelHeight = 200;\n        const panelX = centerX - panelWidth / 2;\n        const panelY = centerY - panelHeight / 2;\n        \n        // Panel background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.95)';\n        this.ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 3;\n        this.ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Title\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 20px Inter';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Initializing Neural Network', centerX, panelY + 35);\n        \n        // Current training object\n        const currentTrainingObject = this.trainingData[this.trainingIndicatorObjectIndex];\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.fillText(`Training on: ${currentTrainingObject.object.toUpperCase()}`, centerX, panelY + 60);\n        \n        // Object description\n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = '13px Inter';\n        this.ctx.fillText(currentTrainingObject.description, centerX, panelY + 85);\n        \n        // Features\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = '12px Inter';\n        this.ctx.fillText(`Features: [${currentTrainingObject.input[0].toFixed(1)}, ${currentTrainingObject.input[1].toFixed(1)}]`, centerX, panelY + 105);\n        \n        // Expected output\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fillText(`Expected: ${currentTrainingObject.output[0] === 0 ? 'Simple' : 'Complex'}`, centerX, panelY + 125);\n        \n        // Draw the current training object\n        this.drawObjectRepresentation(centerX + 180, panelY + 80, currentTrainingObject.object);\n        \n        // Progress indicator\n        const progress = this.trainingIndicatorTime / this.trainingIndicatorDuration;\n        const progressWidth = 400;\n        const progressHeight = 8;\n        const progressX = centerX - progressWidth / 2;\n        const progressY = panelY + 150;\n        \n        // Progress background\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\n        this.ctx.fillRect(progressX, progressY, progressWidth, progressHeight);\n        \n        // Progress bar\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.fillRect(progressX, progressY, progressWidth * progress, progressHeight);\n        \n        // Progress text\n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = '12px Inter';\n        this.ctx.fillText(`${Math.round(progress * 100)}%`, centerX, progressY + 25);\n    }\n}\n\n// Memory Management with Detailed Memory Visualization\nexport class MemoryManagement {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.canvas = ctx.canvas;\n        \n        // Code execution layout\n        this.codePanel = { x: 50, y: 50, width: 400, height: 300 };\n        this.stackPanel = { x: 500, y: 50, width: 300, height: 300 };\n        this.heapPanel = { x: 50, y: 400, width: 750, height: 200 };\n        this.outputPanel = { x: 500, y: 400, width: 300, height: 200 };\n        \n        // Sample program with real code\n        this.program = {\n            name: \"Image Processing Pipeline\",\n            functions: [\n                {\n                    name: \"main()\",\n                    lines: [\n                        \"function main() {\",\n                        \"  let imageData = loadImage('photo.jpg');\",\n                        \"  let processedData = processImage(imageData);\",\n                        \"  saveResult(processedData);\",\n                        \"  return 0;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"loadImage()\",\n                    lines: [\n                        \"function loadImage(filename) {\",\n                        \"  let fileBuffer = malloc(1024);\",\n                        \"  readFile(filename, fileBuffer);\",\n                        \"  let imageData = malloc(2048);\",\n                        \"  decodeImage(fileBuffer, imageData);\",\n                        \"  free(fileBuffer);\",\n                        \"  return imageData;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"processImage()\",\n                    lines: [\n                        \"function processImage(data) {\",\n                        \"  let tempBuffer = malloc(2048);\",\n                        \"  applyFilter(data, tempBuffer);\",\n                        \"  let result = malloc(2048);\",\n                        \"  compressImage(tempBuffer, result);\",\n                        \"  free(tempBuffer);\",\n                        \"  return result;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"saveResult()\",\n                    lines: [\n                        \"function saveResult(data) {\",\n                        \"  let outputFile = malloc(512);\",\n                        \"  writeFile('output.jpg', data);\",\n                        \"  free(outputFile);\",\n                        \"  free(data);\",\n                        \"  return;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"readFile()\",\n                    lines: [\n                        \"function readFile(filename, buffer) {\",\n                        \"  // Simulate file reading\",\n                        \"  return buffer;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"decodeImage()\",\n                    lines: [\n                        \"function decodeImage(buffer, imageData) {\",\n                        \"  // Simulate image decoding\",\n                        \"  return imageData;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"writeFile()\",\n                    lines: [\n                        \"function writeFile(filename, data) {\",\n                        \"  // Simulate file writing\",\n                        \"  return true;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"applyFilter()\",\n                    lines: [\n                        \"function applyFilter(data, tempBuffer) {\",\n                        \"  // Simulate filter application\",\n                        \"  return tempBuffer;\",\n                        \"}\"\n                    ],\n                    variables: []\n                },\n                {\n                    name: \"compressImage()\",\n                    lines: [\n                        \"function compressImage(tempBuffer, result) {\",\n                        \"  // Simulate image compression\",\n                        \"  return result;\",\n                        \"}\"\n                    ],\n                    variables: []\n                }\n            ]\n        };\n        \n        // Execution state\n        this.currentFunction = 0;\n        this.currentLine = 0;\n        this.executionStep = 0;\n        this.programCounter = 0;\n        this.callStack = [];\n        this.heapBlocks = [];\n        this.freeBlocks = [];\n        this.output = [];\n        \n        // Memory addresses and data\n        this.nextHeapAddress = 0x1000;\n        this.nextStackAddress = 0x2000;\n        this.memoryData = new Map(); // Maps addresses to actual data\n        this.variableAddresses = new Map(); // Maps variable names to addresses\n        \n        // Animation state\n        this.animationState = 'idle'; // idle, executing, allocating, accessing, deallocating, calling, returning\n        this.animationTime = 0;\n        this.executionSpeed = 1.0;\n        this.isAutoRunning = true;\n        \n        // Speed control\n        this.animationSpeed = 1.0; // 0.1 to 3.0\n        \n        // Visual effects\n        this.highlightedLine = -1;\n        this.executionPointer = { x: 0, y: 0 };\n        this.particles = [];\n        this.memoryAccesses = [];\n        this.dataFlowParticles = [];\n        this.addressHighlights = [];\n        this.allocationEffects = [];\n        this.deallocationEffects = [];\n        \n        // Enhanced visual effects\n        this.memoryFlowLines = []; // Lines showing data flow between memory blocks\n        this.stackFrameAnimations = []; // Stack frame creation/removal animations\n        this.variableConnections = []; // Lines connecting variables to their memory addresses\n        this.executionTrail = []; // Trail showing execution path\n        this.memoryFragmentation = []; // Visual representation of memory fragmentation\n        this.performanceMetrics = {\n            totalCycles: 0,\n            memoryEfficiency: 0,\n            fragmentationLevel: 0,\n            averageAccessTime: 0\n        };\n        \n        // Statistics\n        this.totalAllocations = 0;\n        this.totalDeallocations = 0;\n        this.memoryLeaks = 0;\n        this.currentMemoryUsage = 0;\n        this.memoryAccessCount = 0;\n        \n        // UI state\n        this.showStats = false; // Hidden by default\n        this.showOutput = false; // Hidden by default\n        \n        // Garbage Collection state\n        this.gcState = {\n            isRunning: false,\n            phase: 'idle', // 'idle', 'mark', 'sweep'\n            markedBlocks: new Set(),\n            gcParticles: [],\n            phaseTime: 0,\n            phaseDuration: 2.0\n        };\n        \n        this.initializeExecution();\n        this.startExecution();\n        \n        // Force start execution after a short delay to ensure everything is initialized\n        setTimeout(() => {\n            if (this.isAutoRunning && this.animationState === 'idle') {\n                this.executeNextStep();\n            }\n        }, 500);\n    }\n    \n    initializeExecution() {\n        // Initialize heap with free blocks\n        this.heapBlocks = [];\n        this.freeBlocks = [{\n            address: 0x1000,\n            size: 8192,\n            x: this.heapPanel.x + 20,\n            y: this.heapPanel.y + 20,\n            width: this.heapPanel.width - 40,\n            height: 40\n        }];\n        \n        // Initialize call stack (empty)\n        this.callStack = [];\n        \n        // Initialize output\n        this.output = [];\n        \n        // Clear memory data\n        this.memoryData.clear();\n        this.variableAddresses.clear();\n        \n        // Reset execution state\n        this.currentFunction = 0;\n        this.currentLine = 0;\n        this.executionStep = 0;\n        this.programCounter = 0;\n        this.highlightedLine = -1;\n    }\n    \n    startExecution() {\n        this.isAutoRunning = true;\n        this.animationState = 'idle';\n        this.executionStep = 0;\n        \n        // Force start the execution immediately\n        setTimeout(() => {\n            if (this.isAutoRunning && this.animationState === 'idle') {\n                this.executeNextStep();\n            }\n        }, 1000);\n    }\n    \n    setAnimationSpeed(speed) {\n        this.animationSpeed = Math.max(0.1, Math.min(3.0, speed));\n    }\n    \n    setShowStats(show) {\n        this.showStats = show;\n    }\n    \n    setShowOutput(show) {\n        this.showOutput = show;\n    }\n    \n    executeNextStep() {\n        if (this.animationState !== 'idle') return;\n        \n        // Safety check for valid function index\n        if (this.currentFunction < 0 || this.currentFunction >= this.program.functions.length) {\n            this.output.push(`❌ Invalid function index: ${this.currentFunction}`);\n            return;\n        }\n        \n        const currentFunc = this.program.functions[this.currentFunction];\n        \n        // Safety check for valid line index\n        if (this.currentLine < 0 || this.currentLine >= currentFunc.lines.length) {\n            this.output.push(`❌ Invalid line index: ${this.currentLine}`);\n            return;\n        }\n        \n        const line = currentFunc.lines[this.currentLine];\n        \n        if (!line) {\n            // Function finished, return to caller\n            this.output.push(`🔚 Function ${this.program.functions[this.currentFunction].name} finished`);\n            this.returnFromFunction();\n            return;\n        }\n        \n        // Check if we're at the end of the main function and call stack is empty\n        if (this.currentFunction === 0 && this.currentLine >= currentFunc.lines.length && this.callStack.length === 0) {\n            // We're at the very end of the main function, mark as complete\n            this.output.push(`✅ Program execution complete`);\n            this.isAutoRunning = false;\n            this.animationState = 'idle';\n            \n            // Add completion celebration particles\n            for (let i = 0; i < 50; i++) {\n                this.particles.push({\n                    x: this.canvas.width / 2,\n                    y: this.canvas.height / 2,\n                    vx: (Math.random() - 0.5) * 10,\n                    vy: (Math.random() - 0.5) * 10,\n                    life: 3.0,\n                    color: '#FFD700',\n                    type: 'completion'\n                });\n            }\n            return;\n        }\n        \n        this.animationState = 'executing';\n        this.animationTime = 0;\n        this.highlightedLine = this.currentLine; // Show the line that's about to be executed\n        \n        // Wait a moment to show the line before executing it\n        setTimeout(() => {\n            // Parse and execute the line\n            if (line.trim().startsWith('//') || line.trim().startsWith('/*') || line.trim().startsWith('*')) {\n                // Skip comment lines, just move to next line\n                this.currentLine++;\n            } else if (line.includes('function') && line.includes('{')) {\n                // Skip function definitions, just move to next line\n                this.currentLine++;\n            } else if (line.includes('(') && line.includes(')') && !line.includes('malloc') && !line.includes('free') && !line.includes('function') && !line.trim().startsWith('//')) {\n                // This is a function call\n                this.callFunction(line);\n                // Don't advance line here - wait for function to return\n            } else if (line.includes('malloc')) {\n                this.allocateMemory(line);\n                this.currentLine++;\n            } else if (line.includes('free')) {\n                this.deallocateMemory(line);\n                this.currentLine++;\n            } else if (line.includes('return')) {\n                this.returnFromFunction();\n                // Don't advance line here - returnFromFunction handles it\n            } else if (line.includes('readFile') || line.includes('writeFile') || \n                       line.includes('decodeImage') || line.includes('applyFilter') || \n                       line.includes('compressImage')) {\n                this.accessMemory(line);\n                this.currentLine++;\n            } else {\n                // Regular line execution\n                this.executeRegularLine(line);\n                this.currentLine++;\n            }\n            \n            this.executionStep++;\n        \n        setTimeout(() => {\n            this.animationState = 'idle';\n            }, 300 / this.animationSpeed); // Shorter delay after execution\n        }, 200 / this.animationSpeed); // Show the line first, then execute\n    }\n    \n    callFunction(line) {\n        // Extract function name from line like \"let imageData = loadImage('photo.jpg');\"\n        // or \"let processedData = processImage(imageData);\"\n        const match = line.match(/(\\w+)\\(/);\n        if (match) {\n            const funcName = match[1];\n            \n            // Find the function in the program\n            let functionIndex = -1;\n            \n            // First try exact match with parentheses\n            functionIndex = this.program.functions.findIndex(f => f.name === funcName + '()');\n            \n            // If not found, try without parentheses\n            if (functionIndex === -1) {\n                functionIndex = this.program.functions.findIndex(f => f.name === funcName);\n            }\n            \n            // If still not found, try removing parentheses from function names\n            if (functionIndex === -1) {\n                functionIndex = this.program.functions.findIndex(f => f.name.replace('()', '') === funcName);\n            }\n            \n            if (functionIndex !== -1) {\n                // Push current function to call stack\n                this.callStack.push({\n                    functionIndex: this.currentFunction,\n                    lineIndex: this.currentLine,\n                    returnAddress: this.programCounter,\n                    variables: new Map(this.variableAddresses) // Copy current variables\n                });\n                \n                // Switch to called function\n                this.currentFunction = functionIndex;\n                this.currentLine = 0;\n                this.programCounter = functionIndex * 100;\n                \n                // Highlight the first line of the called function\n                this.highlightedLine = 0;\n                \n                // Add function call to output\n                this.output.push(`📞 Calling ${funcName}()`);\n                \n                // Show stack frame creation\n                this.showStackFrameCreation();\n            } else {\n                this.output.push(`⚠️ Function not found: ${funcName}`);\n            }\n        }\n    }\n    \n    allocateMemory(line) {\n        // Extract size from line like \"let fileBuffer = malloc(1024);\"\n        const match = line.match(/malloc\\((\\d+)\\)/);\n        if (match) {\n            const size = parseInt(match[1]);\n            const varName = this.extractVariableName(line);\n            this.output.push(`📦 Allocating ${size} bytes for ${varName}`);\n            this.allocateMemoryBlock(size, varName, line);\n        } else {\n            // Try alternative regex patterns\n            const altMatch1 = line.match(/malloc\\s*\\(\\s*(\\d+)\\s*\\)/);\n            const altMatch2 = line.match(/malloc\\((\\d+)\\)/);\n            \n            if (altMatch1) {\n                const size = parseInt(altMatch1[1]);\n                const varName = this.extractVariableName(line);\n                this.allocateMemoryBlock(size, varName, line);\n            } else if (altMatch2) {\n                const size = parseInt(altMatch2[1]);\n                const varName = this.extractVariableName(line);\n                this.allocateMemoryBlock(size, varName, line);\n            }\n        }\n    }\n    \n    deallocateMemory(line) {\n        // Extract variable name from line like \"free(fileBuffer);\"\n        const match = line.match(/free\\((\\w+)\\)/);\n        if (match) {\n            const varName = match[1];\n            this.output.push(`🗑️ Freeing memory for ${varName}`);\n            this.deallocateMemoryBlock(varName, line);\n        } else {\n            // Try alternative regex patterns\n            const altMatch1 = line.match(/free\\s*\\(\\s*(\\w+)\\s*\\)/);\n            const altMatch2 = line.match(/free\\((\\w+)\\)/);\n            \n            if (altMatch1) {\n                const varName = altMatch1[1];\n                this.deallocateMemoryBlock(varName, line);\n            } else if (altMatch2) {\n                const varName = altMatch2[1];\n                this.deallocateMemoryBlock(varName, line);\n            }\n        }\n    }\n    \n    accessMemory(line) {\n        // Simulate memory access for operations like readFile, writeFile, etc.\n        const varName = this.extractVariableName(line);\n        const address = this.variableAddresses.get(varName);\n        \n        if (address) {\n            this.showMemoryAccess(address, varName, line);\n            this.output.push(`🔍 Accessing memory at 0x${address.toString(16)} for ${varName}`);\n            this.memoryAccessCount++;\n        }\n    }\n    \n    returnFromFunction() {\n        if (this.callStack.length > 0) {\n            const caller = this.callStack.pop();\n            this.currentFunction = caller.functionIndex;\n            this.currentLine = caller.lineIndex;\n            this.programCounter = caller.returnAddress;\n            \n            // Restore variables from stack frame\n            this.variableAddresses = new Map(caller.variables);\n            \n            // Handle return value assignment if the calling line was a variable assignment\n            const callingLine = this.program.functions[caller.functionIndex].lines[caller.lineIndex];\n            if (callingLine && callingLine.includes('=') && callingLine.includes('(')) {\n                // Extract variable name from assignment like \"let imageData = loadImage('photo.jpg');\"\n                const varMatch = callingLine.match(/(?:let\\s+)?(\\w+)\\s*=\\s*\\w+\\(/);\n                if (varMatch) {\n                    const varName = varMatch[1];\n                    // Create a return value address for the variable\n                    const returnAddress = this.nextHeapAddress;\n                    this.nextHeapAddress += 256; // Small allocation for return value\n                    this.variableAddresses.set(varName, returnAddress);\n                    \n                    this.output.push(`📝 Return value assigned to ${varName}`);\n                }\n            }\n            \n            this.output.push(`↩️ Returning from function`);\n            this.showStackFrameRemoval();\n            \n            // Advance to the next line after returning from function call\n            this.currentLine++;\n            \n            // Highlight the current line after returning\n            this.highlightedLine = this.currentLine;\n            \n            // Check if we're at the end of the main function\n            const currentFunc = this.program.functions[this.currentFunction];\n            this.output.push(`🔍 Debug: currentFunction=${this.currentFunction}, currentLine=${this.currentLine}, lines.length=${currentFunc.lines.length}`);\n            if (this.currentFunction === 0 && this.currentLine >= currentFunc.lines.length) {\n                // We're at the end of main function, mark as complete\n                this.output.push(`✅ Program execution complete`);\n                this.isAutoRunning = false;\n                this.animationState = 'idle';\n                \n                // Add completion celebration particles\n                for (let i = 0; i < 50; i++) {\n                    this.particles.push({\n                        x: this.canvas.width / 2,\n                        y: this.canvas.height / 2,\n                        vx: (Math.random() - 0.5) * 10,\n                        vy: (Math.random() - 0.5) * 10,\n                        life: 3.0,\n                        color: '#FFD700',\n                        type: 'completion'\n                    });\n                }\n                return; // Exit early to prevent further execution\n            }\n        } else {\n            // Program finished\n            this.output.push(`✅ Program execution complete`);\n            this.isAutoRunning = false;\n        }\n    }\n    \n    executeRegularLine(line) {\n        // Handle regular code execution - no output for simple assignments\n    }\n    \n    allocateMemoryBlock(size, varName, line) {\n        // Find best fit block\n        const bestBlock = this.findBestFitBlock(size);\n        if (!bestBlock) {\n            this.output.push(`❌ Out of memory!`);\n            return;\n        }\n        \n        // Remove the used free block from the free blocks list\n        const freeBlockIndex = this.freeBlocks.findIndex(block => \n            block.address === bestBlock.address && block.size === bestBlock.size);\n        if (freeBlockIndex !== -1) {\n            this.freeBlocks.splice(freeBlockIndex, 1);\n        }\n        \n        // Calculate block dimensions based on heap panel size and memory size\n        const heapWidth = this.heapPanel.width - 40; // Leave margin\n        const heapHeight = this.heapPanel.height - 40;\n        const totalHeapSize = 8192; // Total heap size in bytes\n        \n        // Calculate proportional dimensions based on memory size (more accurate scaling)\n        const sizeRatio = size / totalHeapSize;\n        // Use conservative scaling that allows multiple blocks to fit\n        const blockWidth = Math.max(50, Math.min(heapWidth * 0.2, heapWidth * sizeRatio * 0.6));\n        const blockHeight = Math.max(35, Math.min(heapHeight * 0.4, heapHeight * sizeRatio * 1.2));\n        \n        // Position the block within the heap boundaries\n        const newBlock = {\n            address: bestBlock.address,\n            size: size,\n            name: varName,\n            data: this.generateRandomData(size),\n            isAllocated: true,\n            width: blockWidth,\n            height: blockHeight\n        };\n        \n        // Find a position within the heap panel that doesn't overlap with existing blocks\n        const position = this.findNonOverlappingPosition(newBlock, bestBlock);\n        newBlock.x = position.x;\n        newBlock.y = position.y;\n        \n        this.heapBlocks.push(newBlock);\n        this.totalAllocations++;\n        this.currentMemoryUsage += size;\n        \n        // Store data in memory\n        this.memoryData.set(newBlock.address, newBlock.data);\n        this.variableAddresses.set(varName, newBlock.address);\n        \n        // Update free blocks to reflect the new allocation\n        this.updateFreeBlocks();\n        \n        // Add allocation effect\n        this.addAllocationEffect(newBlock);\n        \n        this.output.push(`📦 Allocated ${size} bytes at 0x${newBlock.address.toString(16)} for ${varName}`);\n        this.showAddressHighlight(newBlock.address, 'allocation');\n    }\n    \n    deallocateMemoryBlock(varName, line) {\n        const address = this.variableAddresses.get(varName);\n        const blockIndex = this.heapBlocks.findIndex(block => block.address === address);\n        \n        if (blockIndex !== -1) {\n        const block = this.heapBlocks[blockIndex];\n        \n            // Add deallocation effect\n            this.addDeallocationEffect(block);\n        \n            // Create clearing animation particles\n            this.createMemoryClearingParticles(block);\n        \n        // Remove block\n        this.heapBlocks.splice(blockIndex, 1);\n            this.totalDeallocations++;\n            this.currentMemoryUsage -= block.size;\n            \n            // Clear data from memory\n            this.memoryData.delete(block.address);\n            this.variableAddresses.delete(varName);\n        \n        // Update free blocks\n        this.updateFreeBlocks();\n        \n            this.output.push(`🗑️ Freed memory at 0x${block.address.toString(16)} for ${varName}`);\n            this.showAddressHighlight(block.address, 'deallocation');\n        } else {\n            this.output.push(`⚠️ Attempted to free unallocated variable: ${varName}`);\n            this.memoryLeaks++;\n        }\n    }\n    \n    showMemoryAccess(address, varName, operation) {\n        // Create memory access visualization\n        this.memoryAccesses.push({\n            address: address,\n            varName: varName,\n            operation: operation,\n            time: 0,\n            duration: 1.5\n        });\n        \n        // Create data flow particles\n        this.createDataFlowParticles(address, varName);\n    }\n    \n    showAddressHighlight(address, type) {\n        this.addressHighlights.push({\n            address: address,\n            type: type,\n            time: 0,\n            duration: 2.0\n        });\n    }\n    \n    showStackFrameCreation() {\n        // Create particles for stack frame creation\n        for (let i = 0; i < 10; i++) {\n            this.particles.push({\n                x: this.stackPanel.x + this.stackPanel.width / 2,\n                y: this.stackPanel.y + this.stackPanel.height,\n                vx: (Math.random() - 0.5) * 3,\n                vy: -Math.random() * 2,\n                life: 1.0,\n                color: '#3498db',\n                type: 'stack_frame'\n            });\n        }\n    }\n    \n    showStackFrameRemoval() {\n        // Create particles for stack frame removal\n        for (let i = 0; i < 8; i++) {\n            this.particles.push({\n                x: this.stackPanel.x + this.stackPanel.width / 2,\n                y: this.stackPanel.y + 50,\n                vx: (Math.random() - 0.5) * 4,\n                vy: Math.random() * 3,\n                life: 1.0,\n                color: '#F39C12',\n                type: 'stack_removal'\n            });\n        }\n    }\n    \n    createDataFlowParticles(address, varName) {\n        // Create particles showing data flow to/from memory\n        const block = this.heapBlocks.find(b => b.address === address);\n        if (block) {\n            for (let i = 0; i < 15; i++) {\n                this.dataFlowParticles.push({\n                    x: block.x + block.width / 2,\n                    y: block.y + block.height / 2,\n                    vx: (Math.random() - 0.5) * 2,\n                    vy: (Math.random() - 0.5) * 2,\n                    life: 1.0,\n                    color: '#FFD700',\n                    type: 'data_flow'\n                });\n            }\n        }\n    }\n    \n    createMemoryClearingParticles(block) {\n        // Create particles showing memory being cleared/freed\n        for (let i = 0; i < 20; i++) {\n            this.particles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y + Math.random() * block.height,\n                vx: (Math.random() - 0.5) * 4,\n                vy: (Math.random() - 0.5) * 4,\n                life: 1.5,\n                color: '#FF6B6B',\n                type: 'memory_clear'\n            });\n        }\n        \n        // Add some upward floating particles to show data being cleared\n        for (let i = 0; i < 10; i++) {\n            this.particles.push({\n                x: block.x + block.width / 2,\n                y: block.y + block.height / 2,\n                vx: (Math.random() - 0.5) * 2,\n                vy: -Math.random() * 3 - 1,\n                life: 2.0,\n                color: '#FFD700',\n                type: 'data_clear'\n            });\n        }\n    }\n    \n    extractVariableName(line) {\n        // Handle both let declarations and direct malloc calls\n        let match = line.match(/let\\s+(\\w+)\\s*=/);\n        if (match) {\n            return match[1];\n        }\n        \n        // Handle direct malloc calls like \"malloc(1024)\"\n        match = line.match(/malloc\\((\\d+)\\)/);\n        if (match) {\n            // For direct malloc calls, create a generic name\n            const varName = `malloc_${match[1]}`;\n            return varName;\n        }\n        \n        return 'unknown';\n    }\n    \n    findBestFitBlock(size) {\n        // Find the first available free block that can fit the requested size\n        for (const block of this.freeBlocks) {\n            if (block.size >= size) {\n                return block;\n            }\n        }\n        \n        // If no block is large enough, return null (out of memory)\n        return null;\n    }\n    \n    findNonOverlappingPosition(newBlock, bestBlock) {\n        // Define the heap area where blocks can be placed\n        const heapArea = {\n            x: this.heapPanel.x + 20,\n            y: this.heapPanel.y + 20,\n            width: this.heapPanel.width - 40,\n            height: this.heapPanel.height - 40\n        };\n        \n        // Try grid-based positioning first for better organization\n        const gridSize = Math.max(newBlock.width, newBlock.height) + 10;\n        const cols = Math.floor(heapArea.width / gridSize);\n        const rows = Math.floor(heapArea.height / gridSize);\n        \n        // Try grid positions first\n        for (let row = 0; row < rows; row++) {\n            for (let col = 0; col < cols; col++) {\n                const x = heapArea.x + col * gridSize;\n                const y = heapArea.y + row * gridSize;\n                \n                // Check if this position overlaps with any existing block\n                let overlaps = false;\n                for (const existingBlock of this.heapBlocks) {\n                    if (this.blocksOverlap(\n                        { x, y, width: newBlock.width, height: newBlock.height },\n                        existingBlock\n                    )) {\n                        overlaps = true;\n                        break;\n                    }\n                }\n                \n                if (!overlaps) {\n                    return { x, y };\n                }\n            }\n        }\n        \n        // If grid positioning fails, try random positions\n        const maxAttempts = 30;\n        for (let attempt = 0; attempt < maxAttempts; attempt++) {\n            // Generate a random position within the heap area\n            const x = heapArea.x + Math.random() * (heapArea.width - newBlock.width);\n            const y = heapArea.y + Math.random() * (heapArea.height - newBlock.height);\n            \n            // Check if this position overlaps with any existing block\n            let overlaps = false;\n            for (const existingBlock of this.heapBlocks) {\n                if (this.blocksOverlap(\n                    { x, y, width: newBlock.width, height: newBlock.height },\n                    existingBlock\n                )) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            \n            if (!overlaps) {\n                return { x, y };\n            }\n        }\n        \n        // If we can't find a non-overlapping position, place it at the best block location\n        return {\n            x: bestBlock.x + (bestBlock.width - newBlock.width) / 2,\n            y: bestBlock.y + (bestBlock.height - newBlock.height) / 2\n        };\n    }\n    \n    blocksOverlap(block1, block2) {\n        return !(block1.x + block1.width <= block2.x ||\n                block2.x + block2.width <= block1.x ||\n                block1.y + block1.height <= block2.y ||\n                block2.y + block2.height <= block1.y);\n    }\n    \n    updateFreeBlocks() {\n        // Clear existing free blocks\n        this.freeBlocks = [];\n        \n        // Calculate total heap size and used space\n        const totalHeapSize = 8192;\n        const usedSpace = this.heapBlocks.reduce((total, block) => total + block.size, 0);\n        const freeSpace = totalHeapSize - usedSpace;\n        \n        // Only create free blocks if there's actually free space\n        if (freeSpace > 0) {\n            // Create fragmented free blocks to show actual gaps\n            const fragmentedBlocks = this.calculateFragmentedFreeBlocks();\n            this.freeBlocks.push(...fragmentedBlocks);\n            \n            // If no fragmented blocks were created but there's free space,\n            // create a single free block at the end\n            if (fragmentedBlocks.length === 0 && freeSpace > 0) {\n                const lastBlock = this.heapBlocks.length > 0 ? \n                    Math.max(...this.heapBlocks.map(b => b.address + b.size)) : 0x1000;\n                \n                const freeBlock = {\n                    address: lastBlock,\n                    size: freeSpace,\n                    x: this.heapPanel.x + 20 + (lastBlock - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\n                    y: this.heapPanel.y + this.heapPanel.height - 70,\n                    width: Math.max(30, (freeSpace / totalHeapSize) * (this.heapPanel.width - 40)),\n                    height: 50\n                };\n                \n                this.freeBlocks.push(freeBlock);\n            }\n        }\n    }\n    \n    calculateFragmentedFreeBlocks() {\n        const fragmentedBlocks = [];\n        const totalHeapSize = 8192;\n        \n        // Calculate gaps between allocated blocks\n        const sortedBlocks = [...this.heapBlocks].sort((a, b) => a.address - b.address);\n        let currentAddress = 0x1000;\n        \n        for (const block of sortedBlocks) {\n            if (block.address > currentAddress) {\n                // There's a gap before this block\n                const gapSize = block.address - currentAddress;\n                if (gapSize >= 128) { // Show smaller gaps too for better visualization\n                    const gapWidth = Math.max(20, (gapSize / totalHeapSize) * (this.heapPanel.width - 40));\n                    const gapHeight = Math.max(30, Math.min(40, gapWidth * 0.4));\n                    \n                    fragmentedBlocks.push({\n                    address: currentAddress,\n                        size: gapSize,\n                        x: this.heapPanel.x + 20 + (currentAddress - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\n                        y: this.heapPanel.y + 20,\n                        width: gapWidth,\n                        height: gapHeight\n                    });\n                }\n            }\n            currentAddress = block.address + block.size;\n        }\n        \n        // Check for gap after the last block\n        if (currentAddress < 0x1000 + totalHeapSize) {\n            const gapSize = (0x1000 + totalHeapSize) - currentAddress;\n            if (gapSize >= 128) {\n                const gapWidth = Math.max(20, (gapSize / totalHeapSize) * (this.heapPanel.width - 40));\n                const gapHeight = Math.max(30, Math.min(40, gapWidth * 0.4));\n                \n                fragmentedBlocks.push({\n                    address: currentAddress,\n                    size: gapSize,\n                    x: this.heapPanel.x + 20 + (currentAddress - 0x1000) / totalHeapSize * (this.heapPanel.width - 40),\n                    y: this.heapPanel.y + 20,\n                    width: gapWidth,\n                    height: gapHeight\n                });\n            }\n        }\n        \n        return fragmentedBlocks;\n    }\n    \n    generateRandomData(size) {\n        const data = [];\n        for (let i = 0; i < size; i++) {\n            data.push(Math.floor(Math.random() * 256));\n        }\n        return data;\n    }\n    \n    addAllocationEffect(block) {\n        // Enhanced allocation particles with more variety and physics\n        for (let i = 0; i < 35; i++) {\n            this.particles.push({\n                x: block.x + block.width / 2,\n                y: block.y + block.height / 2,\n                vx: (Math.random() - 0.5) * 8,\n                vy: (Math.random() - 0.5) * 8,\n                life: 2.0,\n                color: '#4ECDC4',\n                type: 'allocation',\n                size: Math.random() * 3 + 2\n            });\n        }\n        \n        // Add upward floating particles with spiral motion\n        for (let i = 0; i < 15; i++) {\n            this.particles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y + block.height,\n                vx: (Math.random() - 0.5) * 3,\n                vy: -Math.random() * 5 - 3,\n                life: 2.5,\n                color: '#4ECDC4',\n                type: 'allocation_float',\n                spiral: Math.random() * Math.PI * 2,\n                spiralSpeed: (Math.random() - 0.5) * 0.1\n            });\n        }\n        \n        // Add memory access highlight with pulse effect\n        this.memoryAccesses.push({\n            address: block.address,\n            varName: block.name,\n            operation: 'allocation',\n            time: 0,\n            duration: 2.0,\n            type: 'allocation',\n            pulse: 0\n        });\n        \n        // Add growing animation effect with bounce\n        this.allocationEffects = this.allocationEffects || [];\n        this.allocationEffects.push({\n            block: block,\n            time: 0,\n            duration: 1.2,\n            type: 'grow',\n            originalWidth: block.width * 0.3,\n            originalHeight: block.height * 0.3\n        });\n        \n        // Add variable connection animation\n        this.variableConnections.push({\n            from: { x: this.codePanel.x + 350, y: this.codePanel.y + 70 },\n            to: { x: block.x + block.width / 2, y: block.y + block.height / 2 },\n            time: 0,\n            duration: 1.5,\n            varName: block.name\n        });\n        \n        // Update performance metrics\n        this.performanceMetrics.totalCycles++;\n        this.performanceMetrics.memoryEfficiency = (this.currentMemoryUsage / 8192) * 100;\n    }\n    \n    addDeallocationEffect(block) {\n        // Enhanced deallocation particles with explosion and implosion effects\n        for (let i = 0; i < 40; i++) {\n            this.particles.push({\n                x: block.x + block.width / 2,\n                y: block.y + block.height / 2,\n                vx: (Math.random() - 0.5) * 10,\n                vy: (Math.random() - 0.5) * 10,\n                life: 2.0,\n                color: '#FF6B6B',\n                type: 'deallocation',\n                size: Math.random() * 4 + 3\n            });\n        }\n        \n        // Add implosion particles (moving toward center)\n        for (let i = 0; i < 20; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const distance = Math.random() * 50 + 20;\n            this.particles.push({\n                x: block.x + block.width / 2 + Math.cos(angle) * distance,\n                y: block.y + block.height / 2 + Math.sin(angle) * distance,\n                vx: (block.x + block.width / 2 - (block.x + block.width / 2 + Math.cos(angle) * distance)) * 0.1,\n                vy: (block.y + block.height / 2 - (block.y + block.height / 2 + Math.sin(angle) * distance)) * 0.1,\n                life: 1.5,\n                color: '#FF6B6B',\n                type: 'deallocation_implosion'\n            });\n        }\n        \n        // Add downward falling particles with gravity effect\n        for (let i = 0; i < 20; i++) {\n            this.particles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y,\n                vx: (Math.random() - 0.5) * 4,\n                vy: Math.random() * 6 + 3,\n                life: 2.5,\n                color: '#FF6B6B',\n                type: 'deallocation_fall',\n                gravity: 0.2\n            });\n        }\n        \n        // Add memory access highlight with fade effect\n        this.memoryAccesses.push({\n            address: block.address,\n            varName: block.name,\n            operation: 'deallocation',\n            time: 0,\n            duration: 2.0,\n            type: 'deallocation',\n            fade: 1.0\n        });\n        \n        // Add shrinking animation effect with collapse\n        this.deallocationEffects = this.deallocationEffects || [];\n        this.deallocationEffects.push({\n            block: block,\n            time: 0,\n            duration: 1.5,\n            type: 'shrink',\n            originalWidth: block.width,\n            originalHeight: block.height\n        });\n        \n        // Add memory fragmentation visualization\n        this.memoryFragmentation.push({\n            x: block.x + block.width / 2,\n            y: block.y + block.height / 2,\n            time: 0,\n            duration: 3.0,\n            size: block.width * block.height\n        });\n        \n        // Update performance metrics\n        this.performanceMetrics.fragmentationLevel = this.calculateFragmentationLevel();\n    }\n    \n    calculateFragmentationLevel() {\n        if (this.freeBlocks.length === 0) return 0;\n        \n        const totalFreeSize = this.freeBlocks.reduce((sum, block) => sum + block.size, 0);\n        const largestFreeBlock = Math.max(...this.freeBlocks.map(block => block.size));\n        \n        // Fragmentation is high when there are many small free blocks instead of few large ones\n        const fragmentation = (totalFreeSize - largestFreeBlock) / totalFreeSize;\n        return Math.min(100, fragmentation * 100);\n    }\n    \n    // Garbage Collection Methods\n    runGarbageCollection() {\n        if (this.gcState.isRunning) return;\n        \n        this.gcState.isRunning = true;\n        this.gcState.phase = 'mark';\n        this.gcState.phaseTime = 0;\n        this.gcState.markedBlocks.clear();\n        this.gcState.gcParticles = [];\n        \n        this.output.push('🗑️ Starting Garbage Collection...');\n        \n        // Mark phase - mark all reachable blocks\n        this.markReachableBlocks();\n    }\n    \n    markReachableBlocks() {\n        // Mark blocks that are referenced by variables\n        for (const [varName, address] of this.variableAddresses) {\n            const block = this.heapBlocks.find(b => b.address === address);\n            if (block) {\n                this.gcState.markedBlocks.add(block.address);\n                this.createGCMarkEffect(block);\n            }\n        }\n        \n        // Create visual effects for all blocks during mark phase\n        for (const block of this.heapBlocks) {\n            if (this.gcState.markedBlocks.has(block.address)) {\n                // Mark as reachable with golden particles\n                this.createGCMarkEffect(block);\n            } else {\n                // Mark as potentially unreachable with different effect\n                this.createGCPotentialUnreachableEffect(block);\n            }\n        }\n        \n        this.output.push(`✅ Marked ${this.gcState.markedBlocks.size} reachable blocks`);\n    }\n    \n    sweepUnreachableBlocks() {\n        const unreachableBlocks = [];\n        \n        // Find unreachable blocks\n        for (const block of this.heapBlocks) {\n            if (!this.gcState.markedBlocks.has(block.address)) {\n                unreachableBlocks.push(block);\n            }\n        }\n        \n        // Free unreachable blocks\n        for (const block of unreachableBlocks) {\n            this.freeUnreachableBlock(block);\n        }\n        \n        this.output.push(`🧹 Swept ${unreachableBlocks.length} unreachable blocks`);\n    }\n    \n    freeUnreachableBlock(block) {\n        // Remove from heap blocks\n        const index = this.heapBlocks.findIndex(b => b.address === block.address);\n        if (index !== -1) {\n            this.heapBlocks.splice(index, 1);\n        }\n        \n        // Add to free blocks\n        this.freeBlocks.push({\n            address: block.address,\n            size: block.size,\n            x: block.x,\n            y: block.y,\n            width: block.width,\n            height: block.height\n        });\n        \n        // Create deallocation effect\n        this.createGCDeallocationEffect(block);\n        \n        // Update statistics\n        this.totalDeallocations++;\n        this.currentMemoryUsage -= block.size;\n    }\n    \n    createGCMarkEffect(block) {\n        // Create particles for marking\n        for (let i = 0; i < 8; i++) {\n            this.gcState.gcParticles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y + Math.random() * block.height,\n                vx: (Math.random() - 0.5) * 60,\n                vy: (Math.random() - 0.5) * 60,\n                life: 2.0,\n                color: '#FFD700',\n                type: 'mark'\n            });\n        }\n    }\n    \n    createGCPotentialUnreachableEffect(block) {\n        // Create particles for potentially unreachable blocks\n        for (let i = 0; i < 6; i++) {\n            this.gcState.gcParticles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y + Math.random() * block.height,\n                vx: (Math.random() - 0.5) * 50,\n                vy: (Math.random() - 0.5) * 50,\n                life: 1.5,\n                color: '#FFA500',\n                type: 'potential_unreachable'\n            });\n        }\n    }\n    \n    createGCDeallocationEffect(block) {\n        // Create particles for deallocation\n        for (let i = 0; i < 6; i++) {\n            this.gcState.gcParticles.push({\n                x: block.x + Math.random() * block.width,\n                y: block.y + Math.random() * block.height,\n                vx: (Math.random() - 0.5) * 80,\n                vy: (Math.random() - 0.5) * 80,\n                life: 1.5,\n                color: '#FF6B6B',\n                type: 'sweep'\n            });\n        }\n    }\n    \n    updateGarbageCollection(deltaTime) {\n        if (!this.gcState.isRunning) return;\n        \n        this.gcState.phaseTime += deltaTime;\n        \n        // Update GC particles\n        for (let i = this.gcState.gcParticles.length - 1; i >= 0; i--) {\n            const particle = this.gcState.gcParticles[i];\n            particle.x += particle.vx * deltaTime;\n            particle.y += particle.vy * deltaTime;\n            particle.life -= deltaTime * 2;\n            \n            if (particle.life <= 0) {\n                this.gcState.gcParticles.splice(i, 1);\n            }\n        }\n        \n        // Phase transitions\n        if (this.gcState.phase === 'mark' && this.gcState.phaseTime >= this.gcState.phaseDuration) {\n            this.gcState.phase = 'sweep';\n            this.gcState.phaseTime = 0;\n            this.sweepUnreachableBlocks();\n        } else if (this.gcState.phase === 'sweep' && this.gcState.phaseTime >= this.gcState.phaseDuration) {\n            this.gcState.isRunning = false;\n            this.gcState.phase = 'idle';\n            this.output.push('✅ Garbage Collection Complete');\n        }\n    }\n    \n    update(deltaTime) {\n        const dt = deltaTime / 1000;\n        \n        // Automatic execution\n        if (this.isAutoRunning && this.animationState === 'idle') {\n            this.animationTime += dt;\n            if (this.animationTime >= 0.5 / this.animationSpeed) { // Use animationSpeed instead of executionSpeed\n                this.executeNextStep();\n                this.animationTime = 0;\n            }\n        }\n        \n        // Update particles with enhanced physics\n            for (let i = this.particles.length - 1; i >= 0; i--) {\n                const particle = this.particles[i];\n            \n            // Apply spiral motion for allocation_float particles\n            if (particle.type === 'allocation_float' && particle.spiral !== undefined) {\n                particle.spiral += particle.spiralSpeed || 0.05;\n                particle.x += Math.cos(particle.spiral) * 0.5;\n                particle.y += Math.sin(particle.spiral) * 0.5;\n            }\n            \n            // Apply gravity for deallocation_fall particles\n            if (particle.type === 'deallocation_fall' && particle.gravity) {\n                particle.vy += particle.gravity;\n            }\n            \n            // Apply implosion for deallocation_implosion particles\n            if (particle.type === 'deallocation_implosion') {\n                const dx = particle.vx;\n                const dy = particle.vy;\n                particle.x += dx;\n                particle.y += dy;\n            } else {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n            }\n            \n            // Apply general gravity\n            if (particle.type !== 'allocation_float' && particle.type !== 'deallocation_implosion') {\n                particle.vy += 0.1;\n            }\n            \n                particle.life -= dt * 2;\n                \n                if (particle.life <= 0) {\n                    this.particles.splice(i, 1);\n                }\n        }\n        \n        // Update data flow particles\n        for (let i = this.dataFlowParticles.length - 1; i >= 0; i--) {\n            const particle = this.dataFlowParticles[i];\n            particle.x += particle.vx;\n            particle.y += particle.vy;\n            particle.life -= dt * 3;\n            \n            if (particle.life <= 0) {\n                this.dataFlowParticles.splice(i, 1);\n            }\n        }\n        \n        // Update memory accesses\n        for (let i = this.memoryAccesses.length - 1; i >= 0; i--) {\n            const access = this.memoryAccesses[i];\n            access.time += dt;\n            \n            if (access.time >= access.duration) {\n                this.memoryAccesses.splice(i, 1);\n            }\n        }\n        \n        // Update address highlights\n        for (let i = this.addressHighlights.length - 1; i >= 0; i--) {\n            const highlight = this.addressHighlights[i];\n                highlight.time += dt;\n                \n                if (highlight.time >= highlight.duration) {\n                this.addressHighlights.splice(i, 1);\n            }\n        }\n        \n        // Update allocation effects\n        for (let i = this.allocationEffects.length - 1; i >= 0; i--) {\n            const effect = this.allocationEffects[i];\n            effect.time += dt;\n            \n            if (effect.time >= effect.duration) {\n                this.allocationEffects.splice(i, 1);\n            }\n        }\n        \n        // Update deallocation effects\n        for (let i = this.deallocationEffects.length - 1; i >= 0; i--) {\n            const effect = this.deallocationEffects[i];\n            effect.time += dt;\n            \n            if (effect.time >= effect.duration) {\n                this.deallocationEffects.splice(i, 1);\n            }\n        }\n        \n        // Update variable connections\n        for (let i = this.variableConnections.length - 1; i >= 0; i--) {\n            const connection = this.variableConnections[i];\n            connection.time += dt;\n            \n            if (connection.time >= connection.duration) {\n                this.variableConnections.splice(i, 1);\n            }\n        }\n        \n        // Update memory fragmentation\n        for (let i = this.memoryFragmentation.length - 1; i >= 0; i--) {\n            const frag = this.memoryFragmentation[i];\n            frag.time += dt;\n            \n            if (frag.time >= frag.duration) {\n                this.memoryFragmentation.splice(i, 1);\n            }\n        }\n        \n        // Update execution trail\n        if (this.highlightedLine >= 0) {\n            this.executionTrail.push({\n                x: this.codePanel.x + 15,\n                y: this.codePanel.y + 70 + this.highlightedLine * 22, // Match execution pointer spacing\n                time: 0,\n                duration: 2.0\n            });\n        }\n        \n        // Clean up old execution trail points (limit to 20 points to prevent memory issues)\n        for (let i = this.executionTrail.length - 1; i >= 0; i--) {\n            this.executionTrail[i].time += dt;\n            if (this.executionTrail[i].time >= this.executionTrail[i].duration) {\n                this.executionTrail.splice(i, 1);\n            }\n        }\n        \n        // Limit execution trail length\n        if (this.executionTrail.length > 20) {\n            this.executionTrail.splice(0, this.executionTrail.length - 20);\n        }\n        \n        // Update garbage collection\n        this.updateGarbageCollection(dt);\n        \n        // Update performance metrics\n        this.performanceMetrics.totalCycles = this.executionStep;\n        this.performanceMetrics.fragmentationLevel = this.calculateFragmentationLevel();\n        \n        // Calculate memory efficiency based on allocations vs deallocations\n        const totalOperations = this.totalAllocations + this.totalDeallocations;\n        if (totalOperations > 0) {\n            this.performanceMetrics.memoryEfficiency = Math.max(0, \n                ((this.totalAllocations - this.memoryLeaks) / this.totalAllocations) * 100);\n        } else {\n            this.performanceMetrics.memoryEfficiency = 100;\n        }\n        \n        // Calculate average access time (simplified)\n        this.performanceMetrics.averageAccessTime = this.memoryAccessCount > 0 ? \n            this.executionStep / this.memoryAccessCount : 0;\n    }\n    \n    render() {\n        this.drawBackground();\n        this.drawCodePanel();\n        this.drawStackPanel();\n        this.drawHeapPanel();\n        this.drawOutputPanel();\n        this.drawExecutionPointer();\n        this.drawExecutionTrail();\n        this.drawMemoryAccesses();\n        this.drawAddressHighlights();\n        this.drawVariableConnections();\n        this.drawMemoryFragmentation();\n        this.drawParticles();\n        this.drawDataFlowParticles();\n        this.drawAllocationEffects();\n        this.drawGarbageCollectionEffects();\n        this.drawStatistics();\n    }\n    \n    drawBackground() {\n        // Create a modern gradient background with deeper colors\n        const gradient = this.ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height);\n        gradient.addColorStop(0, '#0a0a0a');\n        gradient.addColorStop(0.3, '#1a1a2e');\n        gradient.addColorStop(0.7, '#16213e');\n        gradient.addColorStop(1, '#0f3460');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Add animated hexagonal pattern for modern tech feel\n        this.ctx.strokeStyle = 'rgba(46, 204, 113, 0.08)';\n        this.ctx.lineWidth = 1;\n        const hexSize = 60;\n        const offset = (this.animationTime * 15) % hexSize;\n        \n        for (let y = -offset; y < this.canvas.height + hexSize; y += hexSize * 1.5) {\n            for (let x = -offset; x < this.canvas.width + hexSize; x += hexSize * 1.3) {\n            this.ctx.beginPath();\n                for (let i = 0; i < 6; i++) {\n                    const angle = (i * Math.PI) / 3;\n                    const px = x + hexSize * 0.5 * Math.cos(angle);\n                    const py = y + hexSize * 0.5 * Math.sin(angle);\n                    if (i === 0) {\n                        this.ctx.moveTo(px, py);\n                    } else {\n                        this.ctx.lineTo(px, py);\n                    }\n                }\n                this.ctx.closePath();\n            this.ctx.stroke();\n        }\n        }\n        \n        // Add floating particles for ambient effect\n        for (let i = 0; i < 20; i++) {\n            const x = (i * 137.5) % this.canvas.width;\n            const y = (i * 73.3 + this.animationTime * 10) % this.canvas.height;\n            const alpha = 0.3 + 0.2 * Math.sin(this.animationTime * 2 + i);\n            \n            this.ctx.fillStyle = `rgba(46, 204, 113, ${alpha})`;\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, 1, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Add subtle radial glow effect\n        const centerX = this.canvas.width / 2;\n        const centerY = this.canvas.height / 2;\n        const radius = Math.min(this.canvas.width, this.canvas.height) * 0.8;\n        const radialGradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);\n        radialGradient.addColorStop(0, 'rgba(46, 204, 113, 0.05)');\n        radialGradient.addColorStop(1, 'rgba(46, 204, 113, 0)');\n        this.ctx.fillStyle = radialGradient;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    drawCodePanel() {\n        // Code panel background with enhanced shadow\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\n        this.ctx.fillRect(this.codePanel.x + 4, this.codePanel.y + 4, this.codePanel.width, this.codePanel.height);\n        \n        // Code panel background with modern gradient\n        const gradient = this.ctx.createLinearGradient(this.codePanel.x, this.codePanel.y, this.codePanel.x, this.codePanel.y + this.codePanel.height);\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\n        gradient.addColorStop(0.5, 'rgba(26, 26, 46, 0.95)');\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.92)');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(this.codePanel.x, this.codePanel.y, this.codePanel.width, this.codePanel.height);\n        \n        // Enhanced border with glow effect\n        this.ctx.shadowColor = '#4ECDC4';\n        this.ctx.shadowBlur = 8;\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.codePanel.x, this.codePanel.y, this.codePanel.width, this.codePanel.height);\n        this.ctx.shadowBlur = 0;\n        \n        // Title with better styling\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('💻 Code Execution', this.codePanel.x + 15, this.codePanel.y + 25);\n        \n        // Current function with improved styling\n        const currentFunc = this.program.functions[this.currentFunction];\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.font = 'bold 14px Inter';\n        this.ctx.fillText(`Current: ${currentFunc.name}`, this.codePanel.x + 15, this.codePanel.y + 45);\n        \n        // Draw code lines with better spacing\n        this.ctx.font = '12px Inter';\n        this.ctx.textAlign = 'left';\n        \n        for (let i = 0; i < currentFunc.lines.length; i++) {\n            const line = currentFunc.lines[i];\n            const y = this.codePanel.y + 70 + i * 22; // Increased line spacing\n            \n            // Highlight current line with better effect\n            if (i === this.highlightedLine) {\n                // Highlight background\n                this.ctx.fillStyle = 'rgba(78, 205, 196, 0.2)';\n                this.ctx.fillRect(this.codePanel.x + 8, y - 16, this.codePanel.width - 16, 22);\n                \n                // Highlight border\n                this.ctx.strokeStyle = '#4ECDC4';\n                this.ctx.lineWidth = 1;\n                this.ctx.strokeRect(this.codePanel.x + 8, y - 16, this.codePanel.width - 16, 22);\n            }\n            \n            // Line number with better styling\n            this.ctx.fillStyle = '#666666';\n            this.ctx.font = '10px Inter';\n            this.ctx.fillText(`${i + 1}`, this.codePanel.x + 15, y);\n            \n            // Code line with single color\n            this.ctx.fillStyle = i === this.highlightedLine ? '#4ECDC4' : '#FFFFFF';\n            this.ctx.font = '12px Inter';\n            this.ctx.fillText(line, this.codePanel.x + 35, y);\n        }\n    }\n    \n    drawStackPanel() {\n        // Stack panel background with shadow\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.fillRect(this.stackPanel.x + 3, this.stackPanel.y + 3, this.stackPanel.width, this.stackPanel.height);\n        \n        // Stack panel background with gradient\n        const gradient = this.ctx.createLinearGradient(this.stackPanel.x, this.stackPanel.y, this.stackPanel.x, this.stackPanel.y + this.stackPanel.height);\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.95)');\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.9)');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(this.stackPanel.x, this.stackPanel.y, this.stackPanel.width, this.stackPanel.height);\n        \n        // Border with gradient\n        this.ctx.strokeStyle = '#3498db';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.stackPanel.x, this.stackPanel.y, this.stackPanel.width, this.stackPanel.height);\n        \n        // Title with better styling\n            this.ctx.fillStyle = '#3498db';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('📚 Call Stack', this.stackPanel.x + 15, this.stackPanel.y + 25);\n            \n        // Draw call stack with improved styling\n            this.ctx.font = '12px Inter';\n            this.ctx.textAlign = 'left';\n        \n        // Draw older stacks at the bottom with more subtle styling\n        for (let i = 0; i < this.callStack.length; i++) {\n            const frame = this.callStack[i];\n            const func = this.program.functions[frame.functionIndex];\n            const y = this.stackPanel.y + 50 + (this.callStack.length - i) * 22; // Compact spacing\n            \n            // Stack frame background - more subtle\n            this.ctx.fillStyle = 'rgba(52, 152, 219, 0.3)';\n            this.ctx.fillRect(this.stackPanel.x + 10, y - 12, this.stackPanel.width - 20, 20);\n            \n            // Stack frame border\n            this.ctx.strokeStyle = '#3498db';\n            this.ctx.lineWidth = 1;\n            this.ctx.strokeRect(this.stackPanel.x + 10, y - 12, this.stackPanel.width - 20, 20);\n            \n            // Function name and return address on one line\n            this.ctx.fillStyle = '#FFFFFF';\n            this.ctx.font = '11px Inter';\n            this.ctx.fillText(`${func.name} (PC: 0x${frame.returnAddress.toString(16)})`, this.stackPanel.x + 15, y + 2);\n        }\n        \n        // Current function at top with subtle highlighting\n        const currentFunc = this.program.functions[this.currentFunction];\n        const currentY = this.stackPanel.y + 50;\n        \n        // Current frame background - subtle highlight\n        this.ctx.fillStyle = 'rgba(78, 205, 196, 0.4)';\n        this.ctx.fillRect(this.stackPanel.x + 10, currentY - 12, this.stackPanel.width - 20, 20);\n        \n        // Current function border\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(this.stackPanel.x + 10, currentY - 12, this.stackPanel.width - 20, 20);\n        \n        this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = 'bold 11px Inter';\n        this.ctx.fillText(`${currentFunc.name} (current)`, this.stackPanel.x + 15, currentY + 2);\n    }\n    \n    drawHeapPanel() {\n        // Heap panel background with shadow\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.fillRect(this.heapPanel.x + 3, this.heapPanel.y + 3, this.heapPanel.width, this.heapPanel.height);\n        \n        // Heap panel background with gradient\n        const gradient = this.ctx.createLinearGradient(this.heapPanel.x, this.heapPanel.y, this.heapPanel.x, this.heapPanel.y + this.heapPanel.height);\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.95)');\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.9)');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(this.heapPanel.x, this.heapPanel.y, this.heapPanel.width, this.heapPanel.height);\n        \n        // Border with gradient\n        this.ctx.strokeStyle = '#2ecc71';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.heapPanel.x, this.heapPanel.y, this.heapPanel.width, this.heapPanel.height);\n        \n        // Title with better styling - positioned outside the box\n        this.ctx.fillStyle = '#2ecc71';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('🗑️ Heap Memory', this.heapPanel.x + 15, this.heapPanel.y - 10);\n        \n        // Draw memory grid for better organization\n        this.drawMemoryGrid();\n        \n        // Draw allocated blocks with enhanced styling\n        for (const block of this.heapBlocks) {\n            // Enhanced block shadow with depth and blur\n            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n            this.ctx.shadowBlur = 8;\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\n            this.ctx.fillRect(block.x + 4, block.y + 4, block.width, block.height);\n            this.ctx.shadowBlur = 0;\n            \n            // Block with modern gradient and glow\n            const blockGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height);\n            blockGradient.addColorStop(0, '#4ECDC4');\n            blockGradient.addColorStop(0.3, '#2ecc71');\n            blockGradient.addColorStop(0.7, '#27ae60');\n            blockGradient.addColorStop(1, '#229954');\n            this.ctx.fillStyle = blockGradient;\n            this.ctx.fillRect(block.x, block.y, block.width, block.height);\n            \n            // Enhanced block border with glow\n            this.ctx.shadowColor = '#4ECDC4';\n            this.ctx.shadowBlur = 6;\n            this.ctx.strokeStyle = '#FFFFFF';\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeRect(block.x, block.y, block.width, block.height);\n            this.ctx.shadowBlur = 0;\n            \n            // Add inner highlight for 3D effect\n            const innerGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height * 0.3);\n            innerGradient.addColorStop(0, 'rgba(255, 255, 255, 0.3)');\n            innerGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n            this.ctx.fillStyle = innerGradient;\n            this.ctx.fillRect(block.x, block.y, block.width, block.height * 0.3);\n            \n            // Block label with proportional font size and better contrast\n            this.ctx.fillStyle = '#000000';\n            const fontSize = Math.max(8, Math.min(12, block.width / 8));\n            this.ctx.font = `bold ${fontSize}px Inter`;\n        this.ctx.textAlign = 'center';\n            this.ctx.textBaseline = 'middle';\n            this.ctx.fillText(block.name, block.x + block.width / 2, block.y + block.height / 2 - 8);\n            \n            // Size label with smaller font\n            const sizeFontSize = Math.max(7, Math.min(10, block.width / 10));\n            this.ctx.font = `bold ${sizeFontSize}px Inter`;\n            this.ctx.fillText(`${block.size}B`, block.x + block.width / 2, block.y + block.height / 2 + 2);\n            \n            // Address label with smallest font\n            this.ctx.fillStyle = '#1a1a1a';\n            const addrFontSize = Math.max(6, Math.min(8, block.width / 12));\n            this.ctx.font = `bold ${addrFontSize}px Inter`;\n            this.ctx.fillText(`0x${block.address.toString(16)}`, block.x + block.width / 2, block.y + block.height / 2 + 12);\n        }\n        \n        // Draw free blocks with improved styling\n        for (const block of this.freeBlocks) {\n            // Free block shadow\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n            this.ctx.fillRect(block.x + 2, block.y + 2, block.width, block.height);\n            \n            // Free block background with gradient\n            const freeGradient = this.ctx.createLinearGradient(block.x, block.y, block.x, block.y + block.height);\n            freeGradient.addColorStop(0, 'rgba(46, 204, 113, 0.3)');\n            freeGradient.addColorStop(1, 'rgba(46, 204, 113, 0.1)');\n            this.ctx.fillStyle = freeGradient;\n            this.ctx.fillRect(block.x, block.y, block.width, block.height);\n            \n            // Free block border\n            this.ctx.strokeStyle = '#2ecc71';\n            this.ctx.lineWidth = 1;\n            this.ctx.setLineDash([5, 5]);\n            this.ctx.strokeRect(block.x, block.y, block.width, block.height);\n            this.ctx.setLineDash([]);\n            \n            // Free label with better styling\n            this.ctx.fillStyle = '#2ecc71';\n            this.ctx.font = 'bold 9px Inter';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(`FREE (${block.size}B)`, block.x + block.width / 2, block.y + block.height / 2);\n            \n            // Show address for larger free blocks\n            if (block.size >= 512) {\n                this.ctx.font = '8px Inter';\n                this.ctx.fillText(`0x${block.address.toString(16)}`, block.x + block.width / 2, block.y + block.height / 2 + 12);\n            }\n        }\n        \n        // Draw memory usage indicator\n        this.drawMemoryUsageIndicator();\n    }\n    \n    drawOutputPanel() {\n        // Only draw output if showOutput is true\n        if (!this.showOutput) return;\n        \n        // Output panel background\n        this.ctx.fillStyle = 'rgba(26, 26, 46, 0.9)';\n        this.ctx.fillRect(this.outputPanel.x, this.outputPanel.y, this.outputPanel.width, this.outputPanel.height);\n        this.ctx.strokeStyle = '#F39C12';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(this.outputPanel.x, this.outputPanel.y, this.outputPanel.width, this.outputPanel.height);\n        \n        // Title\n        this.ctx.fillStyle = '#F39C12';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('📤 Program Output', this.outputPanel.x + 10, this.outputPanel.y + 25);\n        \n        // Draw output lines\n        this.ctx.font = '11px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillStyle = '#FFFFFF';\n        \n        const startIndex = Math.max(0, this.output.length - 8);\n        for (let i = startIndex; i < this.output.length; i++) {\n            const output = this.output[i];\n            const y = this.outputPanel.y + 45 + (i - startIndex) * 18;\n            this.ctx.fillText(output, this.outputPanel.x + 10, y);\n        }\n    }\n    \n    drawExecutionPointer() {\n        if (this.highlightedLine >= 0) {\n            const currentFunc = this.program.functions[this.currentFunction];\n            const y = this.codePanel.y + 70 + this.highlightedLine * 22;\n            \n            // Simple flashing circle around the line\n            const pulse = Math.sin(this.animationTime * 8) * 0.6 + 0.4;\n            \n            // Flashing circle\n            this.ctx.strokeStyle = `rgba(255, 215, 0, ${pulse})`;\n            this.ctx.lineWidth = 2;\n            this.ctx.beginPath();\n            this.ctx.arc(this.codePanel.x + 15, y - 5, 12, 0, Math.PI * 2);\n            this.ctx.stroke();\n            \n            // Yellow circle\n            this.ctx.fillStyle = '#FFD700';\n            this.ctx.beginPath();\n            this.ctx.arc(this.codePanel.x + 15, y - 5, 6, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    \n    drawExecutionTrail() {\n        // Draw execution trail showing the path of execution\n        for (let i = 0; i < this.executionTrail.length - 1; i++) {\n            const current = this.executionTrail[i];\n            const next = this.executionTrail[i + 1];\n            const alpha = 1 - (current.time / current.duration);\n            \n            // Enhanced trail with glow effect\n            this.ctx.shadowColor = '#FFD700';\n            this.ctx.shadowBlur = 4;\n            this.ctx.strokeStyle = `rgba(255, 215, 0, ${alpha * 0.6})`;\n            this.ctx.lineWidth = 2;\n            this.ctx.beginPath();\n            this.ctx.moveTo(current.x, current.y);\n            this.ctx.lineTo(next.x, next.y);\n            this.ctx.stroke();\n            \n            // Draw trail dots with glow\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${alpha * 0.8})`;\n            this.ctx.beginPath();\n            this.ctx.arc(current.x, current.y, 3, 0, Math.PI * 2);\n            this.ctx.fill();\n            this.ctx.shadowBlur = 0;\n        }\n    }\n    \n    drawMemoryAccesses() {\n        for (const access of this.memoryAccesses) {\n            const alpha = 1 - (access.time / access.duration);\n            const block = this.heapBlocks.find(b => b.address === access.address);\n            \n            if (block) {\n                // Highlight the accessed block\n                this.ctx.fillStyle = `rgba(${access.type === 'allocation' ? '78, 205, 196' : \n                                           access.type === 'deallocation' ? '255, 107, 107' : \n                                           '255, 215, 0'}, ${alpha * 0.5})`;\n                this.ctx.fillRect(block.x - 2, block.y - 2, block.width + 4, block.height + 4);\n                \n                // Access indicator\n                this.ctx.fillStyle = `rgba(${access.type === 'allocation' ? '78, 205, 196' : \n                                           access.type === 'deallocation' ? '255, 107, 107' : \n                                           '255, 215, 0'}, ${alpha})`;\n                this.ctx.beginPath();\n                this.ctx.arc(block.x + block.width / 2, block.y + block.height / 2, 8, 0, Math.PI * 2);\n                this.ctx.fill();\n            }\n        }\n    }\n    \n    drawAddressHighlights() {\n        for (const highlight of this.addressHighlights) {\n            const alpha = 1 - (highlight.time / highlight.duration);\n            const block = this.heapBlocks.find(b => b.address === highlight.address);\n            \n            if (block) {\n                // Address highlight\n                this.ctx.strokeStyle = `rgba(${highlight.type === 'allocation' ? '78, 205, 196' : '255, 107, 107'}, ${alpha})`;\n                this.ctx.lineWidth = 3;\n                this.ctx.setLineDash([5, 5]);\n                this.ctx.strokeRect(block.x - 5, block.y - 5, block.width + 10, block.height + 10);\n                this.ctx.setLineDash([]);\n            }\n        }\n    }\n    \n    drawVariableConnections() {\n        for (const connection of this.variableConnections) {\n            const alpha = 1 - (connection.time / connection.duration);\n            \n            // Draw animated connection line\n            this.ctx.strokeStyle = `rgba(78, 205, 196, ${alpha * 0.8})`;\n            this.ctx.lineWidth = 2;\n            this.ctx.setLineDash([10, 5]);\n            this.ctx.beginPath();\n            this.ctx.moveTo(connection.from.x, connection.from.y);\n            this.ctx.lineTo(connection.to.x, connection.to.y);\n            this.ctx.stroke();\n            this.ctx.setLineDash([]);\n            \n            // Draw variable name\n            this.ctx.fillStyle = `rgba(78, 205, 196, ${alpha})`;\n            this.ctx.font = 'bold 10px Inter';\n        this.ctx.textAlign = 'center';\n            const midX = (connection.from.x + connection.to.x) / 2;\n            const midY = (connection.from.y + connection.to.y) / 2;\n            this.ctx.fillText(connection.varName, midX, midY - 5);\n        }\n    }\n    \n    drawMemoryFragmentation() {\n        for (const frag of this.memoryFragmentation) {\n            const alpha = 1 - (frag.time / frag.duration);\n            const size = frag.size * alpha * 0.01;\n            \n            // Draw fragmentation indicator\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha * 0.6})`;\n            this.ctx.beginPath();\n            this.ctx.arc(frag.x, frag.y, size, 0, Math.PI * 2);\n            this.ctx.fill();\n            \n            // Draw fragmentation text\n            this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha})`;\n            this.ctx.font = 'bold 8px Inter';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText('FRAG', frag.x, frag.y + 15);\n        }\n        \n        // Draw memory layout visualization\n        this.drawMemoryLayout();\n    }\n    \n    drawMemoryGrid() {\n        // Draw a subtle grid to help organize memory blocks\n        const gridSpacing = 40;\n        const startX = this.heapPanel.x + 20;\n        const startY = this.heapPanel.y + 40;\n        const endX = this.heapPanel.x + this.heapPanel.width - 20;\n        const endY = this.heapPanel.y + this.heapPanel.height - 50;\n        \n        this.ctx.strokeStyle = 'rgba(46, 204, 113, 0.1)';\n        this.ctx.lineWidth = 1;\n        \n        // Vertical grid lines\n        for (let x = startX; x <= endX; x += gridSpacing) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, startY);\n            this.ctx.lineTo(x, endY);\n            this.ctx.stroke();\n        }\n        \n        // Horizontal grid lines\n        for (let y = startY; y <= endY; y += gridSpacing) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(startX, y);\n            this.ctx.lineTo(endX, y);\n            this.ctx.stroke();\n        }\n    }\n    \n    drawMemoryUsageIndicator() {\n        // Draw memory usage bar at the bottom\n        const usageX = this.heapPanel.x + 20;\n        const usageY = this.heapPanel.y + this.heapPanel.height - 30;\n        const usageWidth = this.heapPanel.width - 40;\n        const usageHeight = 15;\n        \n        // Background\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.fillRect(usageX, usageY, usageWidth, usageHeight);\n        \n        // Usage bar\n        const usagePercent = (this.currentMemoryUsage / 8192) * 100;\n        const barWidth = (usageWidth * usagePercent) / 100;\n        \n        const barGradient = this.ctx.createLinearGradient(usageX, usageY, usageX + barWidth, usageY);\n        barGradient.addColorStop(0, '#2ecc71');\n        barGradient.addColorStop(1, '#27ae60');\n        this.ctx.fillStyle = barGradient;\n        this.ctx.fillRect(usageX, usageY, barWidth, usageHeight);\n        \n        // Border\n        this.ctx.strokeStyle = '#2ecc71';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(usageX, usageY, usageWidth, usageHeight);\n        \n        // Usage text\n            this.ctx.fillStyle = '#FFFFFF';\n        this.ctx.font = 'bold 10px Inter';\n            this.ctx.textAlign = 'center';\n        this.ctx.fillText(`${this.currentMemoryUsage}/${8192} bytes (${usagePercent.toFixed(1)}%)`, \n            usageX + usageWidth / 2, usageY + usageHeight / 2 + 3);\n    }\n    \n    drawMemoryLayout() {\n        // Draw a memory layout bar at the bottom of the heap panel\n        const layoutY = this.heapPanel.y + this.heapPanel.height - 15;\n        const layoutHeight = 10;\n        const layoutX = this.heapPanel.x + 20;\n        const layoutWidth = this.heapPanel.width - 40;\n        \n        // Background\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        this.ctx.fillRect(layoutX, layoutY, layoutWidth, layoutHeight);\n        \n        // Draw allocated memory segments\n        for (const block of this.heapBlocks) {\n            const segmentX = layoutX + (block.address - 0x1000) / 8192 * layoutWidth;\n            const segmentWidth = (block.size / 8192) * layoutWidth;\n            \n            this.ctx.fillStyle = '#2ecc71';\n            this.ctx.fillRect(segmentX, layoutY, segmentWidth, layoutHeight);\n            \n            // Add border\n            this.ctx.strokeStyle = '#FFFFFF';\n            this.ctx.lineWidth = 1;\n            this.ctx.strokeRect(segmentX, layoutY, segmentWidth, layoutHeight);\n        }\n        \n        // Draw fragmentation indicators\n        const fragmentedBlocks = this.calculateFragmentedFreeBlocks();\n        for (const fragBlock of fragmentedBlocks) {\n            if (fragBlock.size >= 256) {\n                const fragX = layoutX + (fragBlock.address - 0x1000) / 8192 * layoutWidth;\n                const fragWidth = (fragBlock.size / 8192) * layoutWidth;\n                \n                this.ctx.fillStyle = 'rgba(255, 107, 107, 0.6)';\n                this.ctx.fillRect(fragX, layoutY, fragWidth, layoutHeight);\n            }\n        }\n    }\n    \n    drawParticles() {\n        for (const particle of this.particles) {\n            let size = particle.size || 3;\n            let alpha = particle.life;\n            \n            // Enhanced special handling for different particle types\n            if (particle.type === 'memory_clear') {\n                size = 4;\n                alpha = particle.life * 0.8;\n            } else if (particle.type === 'data_clear') {\n                size = 2;\n                alpha = particle.life * 0.6;\n            } else if (particle.type === 'allocation') {\n                size = particle.size || 4;\n                alpha = particle.life * 0.9;\n            } else if (particle.type === 'allocation_float') {\n                size = 2;\n                alpha = particle.life * 0.7;\n                // Add sparkle effect for floating particles\n                this.ctx.shadowColor = '#4ECDC4';\n                this.ctx.shadowBlur = 5;\n            } else if (particle.type === 'deallocation') {\n                size = particle.size || 5;\n                alpha = particle.life * 0.8;\n            } else if (particle.type === 'deallocation_fall') {\n                size = 3;\n                alpha = particle.life * 0.6;\n            } else if (particle.type === 'deallocation_implosion') {\n                size = 2;\n                alpha = particle.life * 0.5;\n                // Add implosion effect\n                this.ctx.shadowColor = '#FF6B6B';\n                this.ctx.shadowBlur = 3;\n            } else if (particle.type === 'completion') {\n                size = 6;\n                alpha = particle.life * 0.9;\n                // Add celebration effect\n                this.ctx.shadowColor = '#FFD700';\n                this.ctx.shadowBlur = 8;\n            }\n            \n            this.ctx.fillStyle = `rgba(${particle.color === '#4ECDC4' ? '78, 205, 196' : \n                                       particle.color === '#FF6B6B' ? '255, 107, 107' : \n                                       particle.color === '#F39C12' ? '243, 156, 18' :\n                                       particle.color === '#3498db' ? '52, 152, 219' :\n                                       particle.color === '#FFD700' ? '255, 215, 0' :\n                                       '231, 76, 60'}, ${alpha})`;\n            this.ctx.beginPath();\n            this.ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n            this.ctx.fill();\n            \n            // Reset shadow\n            this.ctx.shadowBlur = 0;\n        }\n    }\n    \n    drawDataFlowParticles() {\n        for (const particle of this.dataFlowParticles) {\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${particle.life})`;\n            this.ctx.beginPath();\n            this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    \n    drawAllocationEffects() {\n        // Draw growing effects for new allocations\n        for (const effect of this.allocationEffects) {\n            const progress = effect.time / effect.duration;\n            const scale = 0.5 + progress * 0.5; // Start at 50% size, grow to 100%\n            \n            this.ctx.save();\n            this.ctx.globalAlpha = 1 - progress;\n            this.ctx.fillStyle = '#4ECDC4';\n            this.ctx.fillRect(\n                effect.block.x - (effect.block.width * scale - effect.block.width) / 2,\n                effect.block.y - (effect.block.height * scale - effect.block.height) / 2,\n                effect.block.width * scale,\n                effect.block.height * scale\n            );\n            this.ctx.restore();\n        }\n        \n        // Draw shrinking effects for deallocations\n        for (const effect of this.deallocationEffects) {\n            const progress = effect.time / effect.duration;\n            const scale = 1 - progress * 0.5; // Start at 100% size, shrink to 50%\n            \n            this.ctx.save();\n            this.ctx.globalAlpha = 1 - progress;\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fillRect(\n                effect.block.x - (effect.block.width * scale - effect.block.width) / 2,\n                effect.block.y - (effect.block.height * scale - effect.block.height) / 2,\n                effect.block.width * scale,\n                effect.block.height * scale\n            );\n            this.ctx.restore();\n        }\n    }\n    \n    drawGarbageCollectionEffects() {\n        // Draw GC particles\n        for (const particle of this.gcState.gcParticles) {\n            const alpha = particle.life;\n            \n            this.ctx.fillStyle = `${particle.color}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;\n            this.ctx.beginPath();\n            this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw GC phase indicator\n        if (this.gcState.isRunning) {\n            const phase = this.gcState.phase === 'mark' ? 'Mark Phase' : 'Sweep Phase';\n            const color = this.gcState.phase === 'mark' ? '#FFD700' : '#FF6B6B';\n            \n            this.ctx.fillStyle = color;\n            this.ctx.font = 'bold 14px Inter';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(`🗑️ ${phase}`, this.canvas.width / 2, 30);\n        }\n    }\n    \n    drawStatistics() {\n        // Only draw stats if showStats is true\n        if (!this.showStats) return;\n        \n        // Enhanced statistics panel with performance metrics - positioned in bottom right\n        const statsX = this.canvas.width - 390;\n        const statsY = this.canvas.height - 170;\n        \n        // Enhanced panel background with shadow and gradient\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n        this.ctx.fillRect(statsX + 4, statsY + 4, 380, 160);\n        \n        const gradient = this.ctx.createLinearGradient(statsX, statsY, statsX, statsY + 160);\n        gradient.addColorStop(0, 'rgba(26, 26, 46, 0.98)');\n        gradient.addColorStop(0.3, 'rgba(26, 26, 46, 0.95)');\n        gradient.addColorStop(0.7, 'rgba(26, 26, 46, 0.92)');\n        gradient.addColorStop(1, 'rgba(26, 26, 46, 0.88)');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(statsX, statsY, 380, 160);\n        \n        // Enhanced border with glow and gradient\n        this.ctx.shadowColor = '#4ECDC4';\n        this.ctx.shadowBlur = 8;\n        this.ctx.strokeStyle = '#4ECDC4';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(statsX, statsY, 380, 160);\n        this.ctx.shadowBlur = 0;\n        \n        // Add inner highlight for 3D effect\n        const innerGradient = this.ctx.createLinearGradient(statsX, statsY, statsX, statsY + 30);\n        innerGradient.addColorStop(0, 'rgba(78, 205, 196, 0.1)');\n        innerGradient.addColorStop(1, 'rgba(78, 205, 196, 0)');\n        this.ctx.fillStyle = innerGradient;\n        this.ctx.fillRect(statsX, statsY, 380, 30);\n        \n        // Title with modern styling\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.font = 'bold 16px Inter';\n        this.ctx.textAlign = 'left';\n        this.ctx.fillText('📊 Memory Management Stats', statsX + 15, statsY + 22);\n        \n        this.ctx.font = '12px Inter';\n        \n        // Basic stats with icons and better spacing\n        this.ctx.fillStyle = '#4ECDC4';\n        this.ctx.fillText(`📦 Allocations: ${this.totalAllocations}`, statsX + 15, statsY + 45);\n        this.ctx.fillText(`🗑️ Deallocations: ${this.totalDeallocations}`, statsX + 15, statsY + 62);\n        this.ctx.fillText(`💾 Memory Usage: ${this.currentMemoryUsage} bytes`, statsX + 15, statsY + 79);\n        this.ctx.fillText(`🔍 Memory Accesses: ${this.memoryAccessCount}`, statsX + 15, statsY + 96);\n        \n        // Performance metrics with enhanced colors\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.fillText(`⚡ Execution Cycles: ${this.performanceMetrics.totalCycles}`, statsX + 15, statsY + 113);\n        this.ctx.fillText(`📈 Memory Efficiency: ${this.performanceMetrics.memoryEfficiency.toFixed(1)}%`, statsX + 15, statsY + 130);\n        this.ctx.fillText(`🔧 Fragmentation Level: ${this.performanceMetrics.fragmentationLevel.toFixed(1)}%`, statsX + 15, statsY + 147);\n        \n        // Memory leak warning with enhanced styling\n        if (this.memoryLeaks > 0) {\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fillText(`⚠️ Memory Leaks: ${this.memoryLeaks}`, statsX + 15, statsY + 164);\n        } else {\n            this.ctx.fillStyle = '#4ECDC4';\n            this.ctx.fillText(`✅ No Memory Leaks`, statsX + 15, statsY + 164);\n        }\n        \n        // Performance indicator\n        const efficiency = this.performanceMetrics.memoryEfficiency;\n        const efficiencyColor = efficiency > 80 ? '#4ECDC4' : efficiency > 60 ? '#F39C12' : '#FF6B6B';\n        this.ctx.fillStyle = efficiencyColor;\n        this.ctx.fillText(`🎯 Performance: ${efficiency > 80 ? 'Excellent' : efficiency > 60 ? 'Good' : 'Poor'}`, statsX + 10, statsY + 160);\n    }\n    \n\n    \n\n    \n    handleClick(x, y) {\n        // Check if click is within the heap panel\n        if (x >= this.heapPanel.x && x <= this.heapPanel.x + this.heapPanel.width &&\n            y >= this.heapPanel.y && y <= this.heapPanel.y + this.heapPanel.height) {\n            \n            // Only trigger GC if it's not already running\n            if (!this.gcState.isRunning) {\n                this.runGarbageCollection();\n            }\n        }\n    }\n    \n    handleButtonClick(action) {\n        switch (action) {\n            case 'auto':\n                this.isAutoRunning = !this.isAutoRunning;\n                break;\n            case 'reset':\n                this.resetExecution();\n                break;\n            case 'step':\n                if (this.animationState === 'idle') {\n                    this.executeNextStep();\n                }\n                break;\n        }\n    }\n    \n    resetExecution() {\n        this.initializeExecution();\n        this.startExecution();\n        this.resetPerformanceMetrics();\n    }\n    \n    reset() {\n        this.initializeExecution();\n        this.startExecution();\n        this.resetPerformanceMetrics();\n    }\n    \n    resetPerformanceMetrics() {\n        this.performanceMetrics = {\n            totalCycles: 0,\n            memoryEfficiency: 100,\n            fragmentationLevel: 0,\n            averageAccessTime: 0\n        };\n        this.executionStep = 0;\n        this.totalAllocations = 0;\n        this.totalDeallocations = 0;\n        this.memoryLeaks = 0;\n        this.currentMemoryUsage = 0;\n        this.memoryAccessCount = 0;\n    }\n    \n    getStats() {\n        return {\n            totalAllocations: this.totalAllocations,\n            totalDeallocations: this.totalDeallocations,\n            memoryLeaks: this.memoryLeaks,\n            currentMemoryUsage: this.currentMemoryUsage,\n            memoryAccessCount: this.memoryAccessCount,\n            callStackDepth: this.callStack.length,\n            currentFunction: this.program.functions[this.currentFunction].name\n        };\n    }\n    \n    resize() {\n        // Recalculate panel positions based on new canvas size\n        const canvasWidth = this.canvas.width;\n        const canvasHeight = this.canvas.height;\n        \n        // Adjust panel positions for better responsiveness\n        this.codePanel = { x: 50, y: 50, width: Math.min(400, canvasWidth * 0.3), height: 300 };\n        this.stackPanel = { x: canvasWidth - 350, y: 50, width: 300, height: 300 };\n        this.heapPanel = { x: 50, y: 400, width: Math.max(750, canvasWidth - 100), height: 200 };\n        this.outputPanel = { x: canvasWidth - 350, y: 400, width: 300, height: 200 };\n        \n        // Update free blocks positions\n        this.updateFreeBlocks();\n    }\n} ","import { BrownianMotion, Diffusion, GasLaws } from './animations/particle-physics.js';\nimport { Pendulum, OrbitalMotion, CollisionPhysics, FrictionInclinedPlanes } from './animations/classical-mechanics.js';\nimport { SoundWaves, WavePropagation } from './animations/wave-phenomena.js';\nimport { ElectricFields, MagneticFields, DiodeTransistor } from './animations/elelectro-magnetism.js';\nimport { WaveParticleDuality } from './animations/quantum-physics.js';\nimport { NuclearReactions } from './animations/nuclear-physics.js';\nimport { FluidFlow, Bernoulli } from './animations/fluid-dynamics.js';\nimport { NeuralNetwork, MemoryManagement } from './animations/computer-science.js';\n\n// Main animations controller\nexport class ScientificAnimations {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.currentAnimation = 'brownian';\n        this.isRunning = true;\n        this.lastTime = 0;\n        \n        // Initialize animations\n        this.brownianMotion = new BrownianMotion(this.ctx);\n        this.pendulum = new Pendulum(this.ctx);\n        this.diffusion = new Diffusion(this.ctx);\n        this.waves = new WavePropagation(this.ctx);\n        this.orbital = new OrbitalMotion(this.ctx);\n        this.electricFields = new ElectricFields(this.ctx);\n\n        this.gasLaws = new GasLaws(this.ctx);\n        this.collisions = new CollisionPhysics(this.ctx);\n        this.friction = new FrictionInclinedPlanes(this.ctx);\n\n        this.magneticFields = new MagneticFields(this.ctx);\n        this.waveParticleDuality = new WaveParticleDuality(this.ctx);\n        this.nuclearReactions = new NuclearReactions(this.ctx);\n        \n        // Initialize fluid dynamics\n        this.fluidFlow = new FluidFlow(this.ctx);\n        this.bernoulli = new Bernoulli(this.ctx);\n        \n        // Initialize sound waves\n        this.soundWaves = new SoundWaves(this.ctx);\n        \n        // Initialize diode and transistor\n        this.diodeTransistor = new DiodeTransistor(this.ctx);\n        \n        // Initialize computer science animations\n        this.neuralNetwork = new NeuralNetwork(this.ctx);\n        this.memoryManagement = new MemoryManagement(this.ctx);\n        \n        this.setupEventListeners();\n        this.resizeCanvas();\n        \n        // Initialize all control panels with default values after a short delay\n        setTimeout(() => {\n            this.initializeWaveControls();\n            this.initializeSoundWavesControls();\n            this.initializeDiodeTransistorControls();\n        }, 100);\n        \n        this.animate();\n    }\n    \n    setupEventListeners() {\n        // Category header clicks\n        document.querySelectorAll('.category-header').forEach(header => {\n            header.addEventListener('click', (e) => {\n                const categoryItem = e.currentTarget.closest('.category-item');\n                const category = categoryItem.dataset.category;\n                const sideNav = document.querySelector('.side-navigation');\n                const mainContent = document.querySelector('.main-content');\n                \n                // If navigation is collapsed, expand it and don't switch animations\n                if (sideNav.classList.contains('collapsed')) {\n                    sideNav.classList.remove('collapsed');\n                    mainContent.classList.remove('nav-collapsed');\n                    return;\n                }\n                \n                // Close all other categories\n                document.querySelectorAll('.category-item').forEach(item => {\n                    if (item !== categoryItem) {\n                        item.classList.remove('active');\n                    }\n                });\n                \n                // Toggle current category\n                categoryItem.classList.toggle('active');\n                \n                // If this category is now active, switch to its first animation\n                if (categoryItem.classList.contains('active')) {\n                    const firstAnimation = categoryItem.querySelector('.submenu-item');\n                    if (firstAnimation && !firstAnimation.classList.contains('active')) {\n                        this.switchAnimation(firstAnimation.dataset.animation);\n                    }\n                }\n            });\n        });\n\n        // Submenu item clicks\n        document.querySelectorAll('.submenu-item').forEach(item => {\n            item.addEventListener('click', (e) => {\n                const animation = e.currentTarget.dataset.animation;\n                \n                // Remove active class from all submenu items\n                document.querySelectorAll('.submenu-item').forEach(subItem => {\n                    subItem.classList.remove('active');\n                });\n                \n                // Add active class to clicked item\n                e.currentTarget.classList.add('active');\n                \n                // Switch to the selected animation\n                this.switchAnimation(animation);\n            });\n        });\n\n        // Navigation toggle (collapse/expand)\n        const navToggleBtn = document.querySelector('.nav-toggle-btn');\n        const sideNav = document.querySelector('.side-navigation');\n        const mainContent = document.querySelector('.main-content');\n        \n        if (navToggleBtn) {\n            navToggleBtn.addEventListener('click', () => {\n                sideNav.classList.toggle('collapsed');\n                mainContent.classList.toggle('nav-collapsed');\n            });\n        }\n\n        // Mobile navigation toggle\n        const mobileNavToggle = document.getElementById('mobileNavToggle');\n        \n        if (mobileNavToggle && sideNav) {\n            mobileNavToggle.addEventListener('click', () => {\n                mobileNavToggle.classList.toggle('open');\n                sideNav.classList.toggle('open');\n            });\n        }\n\n        // Close mobile nav when clicking outside\n        document.addEventListener('click', (e) => {\n            if (window.innerWidth <= 768) {\n                if (!e.target.closest('.side-navigation') && \n                    !e.target.closest('.mobile-nav-toggle')) {\n                    if (mobileNavToggle && sideNav) {\n                        mobileNavToggle.classList.remove('open');\n                        sideNav.classList.remove('open');\n                    }\n                }\n            }\n        });\n\n        \n        // Control buttons\n        document.getElementById('playPauseBtn').addEventListener('click', () => {\n            this.togglePlayPause();\n        });\n        \n        document.getElementById('resetBtn').addEventListener('click', () => {\n            this.resetAnimation();\n        });\n        \n        // Learn More button\n        document.getElementById('learnMoreBtn').addEventListener('click', () => {\n            this.showScienceExplanation();\n        });\n        \n        // Modal close button\n        document.getElementById('closeModal').addEventListener('click', () => {\n            this.closeModal();\n        });\n        \n        // Close modal when clicking outside\n        document.getElementById('scienceModal').addEventListener('click', (e) => {\n            if (e.target.id === 'scienceModal') {\n                this.closeModal();\n            }\n        });\n        \n        // Close modal with Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.closeModal();\n            }\n        });\n        \n        // Brownian Motion Controls\n        this.setupSliderControl('particleCount', 'particleCountValue', (value) => {\n            this.brownianMotion.setParticleCount(parseInt(value));\n        });\n        \n        this.setupSliderControl('speed', 'speedValue', (value) => {\n            this.brownianMotion.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('temperature', 'temperatureValue', (value) => {\n            this.brownianMotion.setTemperature(parseFloat(value));\n        });\n        \n        this.setupSliderControl('particleSize', 'particleSizeValue', (value) => {\n            this.brownianMotion.setParticleSize(parseInt(value));\n        });\n        \n        document.getElementById('brownianVisualizationMode').addEventListener('change', (e) => {\n            this.updateBrownianVisualization(e.target.value);\n        });\n        \n        // Initialize Brownian visualization mode\n        this.updateBrownianVisualization('basic');\n        \n        // Pendulum Controls\n        this.setupSliderControl('pendulumLength', 'pendulumLengthValue', (value) => {\n            this.pendulum.setLength(parseInt(value));\n        });\n        \n        this.setupSliderControl('pendulumSpeed', 'pendulumSpeedValue', (value) => {\n            this.pendulum.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('initialAngle', 'initialAngleValue', (value) => {\n            this.pendulum.setInitialAngle(parseFloat(value));\n        });\n        \n        this.setupSliderControl('gravity', 'gravityValue', (value) => {\n            this.pendulum.setGravity(parseFloat(value));\n        });\n        \n        this.setupSliderControl('damping', 'dampingValue', (value) => {\n            this.pendulum.setDamping(parseFloat(value));\n        });\n        \n        document.getElementById('pendulumVisualizationMode').addEventListener('change', (e) => {\n            this.updatePendulumVisualization(e.target.value);\n        });\n        \n        // Initialize pendulum visualization mode\n        this.updatePendulumVisualization('basic');\n        \n        // Diffusion Controls\n        this.setupSliderControl('diffusionParticles', 'diffusionParticlesValue', (value) => {\n            this.diffusion.setParticleCount(parseInt(value));\n        });\n        \n        this.setupSliderControl('diffusionSpeed', 'diffusionSpeedValue', (value) => {\n            this.diffusion.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('diffusionRate', 'diffusionRateValue', (value) => {\n            this.diffusion.setDiffusionRate(parseFloat(value));\n        });\n        \n        this.setupSliderControl('concentrationGradient', 'concentrationGradientValue', (value) => {\n            this.diffusion.setConcentrationGradient(parseFloat(value));\n        });\n        \n        this.setupSliderControl('particleSize', 'particleSizeValue', (value) => {\n            this.diffusion.setParticleSize(parseInt(value));\n        });\n        \n        document.getElementById('diffusionVisualizationMode').addEventListener('change', (e) => {\n            this.updateDiffusionVisualization(e.target.value);\n        });\n        \n        // Remove the start diffusion button event listener since the button was removed\n        // Diffusion will now start on canvas click/touch\n        \n        // Initialize diffusion visualization mode\n        this.updateDiffusionVisualization('basic');\n        \n        // Wave Controls\n        const waveTypeElement = document.getElementById('waveType');\n        if (waveTypeElement) {\n            waveTypeElement.addEventListener('change', (e) => {\n                e.stopPropagation(); // Prevent event bubbling\n                e.preventDefault(); // Prevent default behavior\n            this.waves.setWaveType(e.target.value);\n        });\n        }\n        \n        this.setupSliderControl('waveSpeed', 'waveSpeedValue', (value) => {\n            this.waves.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('waveFrequency', 'waveFrequencyValue', (value) => {\n            this.waves.setFrequency(parseFloat(value));\n        });\n        \n        this.setupSliderControl('waveAmplitude', 'waveAmplitudeValue', (value) => {\n            this.waves.setAmplitude(parseFloat(value));\n        });\n        \n        const waveShowAnalyticsElement = document.getElementById('waveShowAnalytics');\n        if (waveShowAnalyticsElement) {\n            waveShowAnalyticsElement.addEventListener('change', (e) => {\n            this.waves.setShowAnalytics(e.target.checked);\n        });\n        }\n        \n        // Sound Waves Controls\n        this.setupSliderControl('soundFrequency', 'soundFrequencyValue', (value) => {\n            this.soundWaves.setFrequency(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundAmplitude', 'soundAmplitudeValue', (value) => {\n            this.soundWaves.setAmplitude(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundSpeed', 'soundSpeedValue', (value) => {\n            this.soundWaves.setWaveSpeed(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundParticles', 'soundParticlesValue', (value) => {\n            this.soundWaves.setParticleCount(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundAnimationSpeed', 'soundAnimationSpeedValue', (value) => {\n            this.soundWaves.setAnimationSpeed(parseFloat(value));\n        });\n        \n        // Sound waves select and checkbox controls\n        const soundWaveTypeSelect = document.getElementById('soundWaveType');\n        if (soundWaveTypeSelect) {\n            soundWaveTypeSelect.addEventListener('change', (e) => {\n                this.soundWaves.setWaveType(e.target.value);\n            });\n        }\n        \n        // Orbital Motion Controls\n        this.setupSliderControl('orbitalSpeed', 'orbitalSpeedValue', (value) => {\n            this.orbital.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('eccentricity', 'eccentricityValue', (value) => {\n            this.orbital.setEccentricity(parseFloat(value));\n        });\n        \n        this.setupSliderControl('semiMajorAxis', 'semiMajorAxisValue', (value) => {\n            this.orbital.setSemiMajorAxis(parseInt(value));\n        });\n        \n        this.setupSliderControl('centralMass', 'centralMassValue', (value) => {\n            this.orbital.setCentralMass(parseFloat(value));\n        });\n        \n        document.getElementById('orbitalVisualizationMode').addEventListener('change', (e) => {\n            this.updateOrbitalVisualization(e.target.value);\n        });\n        \n        // Initialize orbital visualization mode\n        this.updateOrbitalVisualization('basic');\n        \n        // Electric Fields Controls\n        this.setupSliderControl('efSpeed', 'efSpeedValue', (value) => {\n            this.electricFields.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('efFieldStrength', 'efFieldStrengthValue', (value) => {\n            this.electricFields.setFieldStrength(parseFloat(value));\n        });\n        \n        this.setupSliderControl('efParticleCount', 'efParticleCountValue', (value) => {\n            this.electricFields.setParticleCount(parseInt(value));\n        });\n        \n        // Removed addChargeBtn and clearChargesBtn event listeners\n        \n\n        \n        // Magnetic Fields Controls\n        this.setupSliderControl('magneticSpeed', 'magneticSpeedValue', (value) => {\n            this.magneticFields.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('magneticFieldStrength', 'magneticFieldStrengthValue', (value) => {\n            this.magneticFields.setFieldStrength(parseFloat(value));\n        });\n        \n        this.setupSliderControl('magneticParticleCount', 'magneticParticleCountValue', (value) => {\n            this.magneticFields.setParticleCount(parseInt(value));\n        });\n        \n        document.getElementById('magneticShowFieldLines').addEventListener('change', (e) => {\n            this.magneticFields.setShowFieldLines(e.target.checked);\n        });\n        \n\n        \n        document.getElementById('magneticShowForceArrows').addEventListener('change', (e) => {\n            this.magneticFields.setShowForceArrows(e.target.checked);\n        });\n        \n        // Removed addMagnetBtn and clearMagnetsBtn event listeners\n        \n        // Canvas click for adding charges, magnets, toggling switch, starting diffusion, and neural network testing\n        this.canvas.addEventListener('click', (e) => {\n            const rect = this.canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            \n            if (this.currentAnimation === 'electric-fields') {\n                const chargeType = document.getElementById('efChargeType').value;\n                this.electricFields.addChargeAtPosition(chargeType, x, y);\n            } else if (this.currentAnimation === 'magnetic-fields') {\n                this.magneticFields.addMagnetAtPosition(x, y);\n\n            } else if (this.currentAnimation === 'diffusion' && !this.diffusion.diffusionStarted) {\n                this.diffusion.startDiffusion();\n            } else if (this.currentAnimation === 'sound-waves') {\n                const sx = this.soundWaves.sourceX;\n                const sy = this.soundWaves.sourceY;\n                const distance = Math.sqrt((x - sx) ** 2 + (y - sy) ** 2);\n                if (distance <= 50) {\n                    this.soundWaves.triggerWavePulse();\n                }\n            } else if (this.currentAnimation === 'neural-network') {\n                this.neuralNetwork.handleCanvasClick(x, y);\n            } else if (this.currentAnimation === 'memory-management' && this.memoryManagement) {\n                this.memoryManagement.handleClick(x, y);\n            }\n        });\n        \n        // Gas Laws Controls\n        this.setupSliderControl('gasSpeed', 'gasSpeedValue', (value) => {\n            this.gasLaws.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('gasParticleCount', 'gasParticleCountValue', (value) => {\n            this.gasLaws.setParticleCount(parseInt(value));\n        });\n        \n        this.setupSliderControl('gasTemperature', 'gasTemperatureValue', (value) => {\n            this.gasLaws.setTemperature(parseInt(value));\n        });\n        \n        this.setupSliderControl('gasVolume', 'gasVolumeValue', (value) => {\n            this.gasLaws.setVolume(parseInt(value));\n        });\n        \n        this.setupSliderControl('gasPressure', 'gasPressureValue', (value) => {\n            this.gasLaws.setPressure(parseFloat(value));\n        });\n        \n        document.getElementById('gasVisualizationMode').addEventListener('change', (e) => {\n            this.updateGasVisualization(e.target.value);\n        });\n        \n        document.getElementById('lawType').addEventListener('change', (e) => {\n            this.gasLaws.setLawType(e.target.value);\n        });\n        \n        // Initialize gas visualization mode\n        this.updateGasVisualization('basic');\n        \n\n        \n        // Collision Physics Controls\n        this.setupSliderControl('collisionSpeed', 'collisionSpeedValue', (value) => {\n            this.collisions.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('ballCount', 'ballCountValue', (value) => {\n            this.collisions.setBallCount(parseInt(value));\n        });\n        \n        this.setupSliderControl('restitution', 'restitutionValue', (value) => {\n            this.collisions.setRestitution(parseFloat(value));\n        });\n        \n\n        \n        this.setupSliderControl('collisionGravity', 'collisionGravityValue', (value) => {\n            this.collisions.setGravity(parseFloat(value));\n        });\n        \n        document.getElementById('showAnalytics').addEventListener('change', (e) => {\n            this.collisions.setShowAnalytics(e.target.checked);\n        });\n        \n        document.getElementById('collisionType').addEventListener('change', (e) => {\n            this.collisions.setCollisionType(e.target.value);\n        });\n        \n        // Friction & Inclined Planes Controls\n        this.setupSliderControl('frictionSpeed', 'frictionSpeedValue', (value) => {\n            this.friction.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('inclineAngle', 'inclineAngleValue', (value) => {\n            this.friction.setInclineAngle(parseFloat(value));\n        });\n        \n        this.setupSliderControl('objectMass', 'objectMassValue', (value) => {\n            this.friction.setObjectMass(parseInt(value));\n        });\n        \n        this.setupSliderControl('frictionGravity', 'frictionGravityValue', (value) => {\n            this.friction.setGravity(parseFloat(value));\n        });\n        \n        document.getElementById('showFrictionAnalytics').addEventListener('change', (e) => {\n            this.friction.setShowAnalytics(e.target.checked);\n        });\n        \n        this.setupSliderControl('frictionCoefficient', 'frictionCoefficientValue', (value) => {\n            this.friction.setFrictionCoefficient(parseFloat(value));\n        });\n        \n\n        \n        // Window resize\n        window.addEventListener('resize', () => {\n            this.resizeCanvas();\n        });\n        \n        // Touch event for diffusion (mobile support)\n        this.canvas.addEventListener('touchstart', (e) => {\n            e.preventDefault();\n            const rect = this.canvas.getBoundingClientRect();\n            const touch = e.touches[0];\n            const x = touch.clientX - rect.left;\n            const y = touch.clientY - rect.top;\n            \n            if (this.currentAnimation === 'diffusion' && !this.diffusion.diffusionStarted) {\n                this.diffusion.startDiffusion();\n            }\n        });\n        \n\n        \n        // Wave-Particle Duality Controls\n        document.getElementById('dualityMode').addEventListener('change', (e) => {\n            this.waveParticleDuality.setMode(e.target.value);\n            this.updateDualityControls(e.target.value);\n        });\n        \n        this.setupSliderControl('dualitySpeed', 'dualitySpeedValue', (value) => {\n            this.waveParticleDuality.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('dualityEnergy', 'dualityEnergyValue', (value) => {\n            this.waveParticleDuality.setPhotonEnergy(parseFloat(value));\n        });\n        \n        this.setupSliderControl('dualityWavelength', 'dualityWavelengthValue', (value) => {\n            this.waveParticleDuality.setWavelength(parseFloat(value));\n        });\n        \n        document.getElementById('dualityShowAnalytics').addEventListener('change', (e) => {\n            const showAnalytics = e.target.checked;\n            this.waveParticleDuality.setShowWaveFunction(showAnalytics);\n            this.waveParticleDuality.setShowParticlePosition(showAnalytics);\n            this.waveParticleDuality.setShowInterference(showAnalytics);\n            this.waveParticleDuality.setShowMeasurementEffect(showAnalytics);\n        });\n        \n\n        \n        document.getElementById('performMeasurementBtn').addEventListener('click', () => {\n            this.waveParticleDuality.performMeasurement();\n        });\n        \n        // Removed resetDualityBtn event listener - main Reset button handles this\n        \n        // Initialize duality controls based on current mode\n        const initialMode = document.getElementById('dualityMode').value;\n        this.updateDualityControls(initialMode);\n        \n        this.setupSliderControl('nuclearSpeed', 'nuclearSpeedValue', (value) => {\n            this.nuclearReactions.setSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('neutronEnergy', 'neutronEnergyValue', (value) => {\n            this.nuclearReactions.setNeutronEnergy(parseFloat(value));\n        });\n        \n        this.setupSliderControl('nuclearTemperature', 'nuclearTemperatureValue', (value) => {\n            this.nuclearReactions.setTemperature(parseFloat(value));\n        });\n        \n        document.getElementById('nuclearMode').addEventListener('change', (e) => {\n            this.nuclearReactions.setMode(e.target.value);\n        });\n        \n        // Fluid Flow Controls\n        this.setupSliderControl('fluidSpeed', 'fluidSpeedValue', (value) => {\n            this.fluidFlow.setFlowRate(parseFloat(value));\n        });\n        \n        this.setupSliderControl('flowRate', 'flowRateValue', (value) => {\n            this.fluidFlow.setFlowRate(parseFloat(value));\n        });\n        \n        this.setupSliderControl('viscosity', 'viscosityValue', (value) => {\n            this.fluidFlow.setViscosity(parseFloat(value));\n        });\n        \n        this.setupSliderControl('reynoldsNumber', 'reynoldsNumberValue', (value) => {\n            this.fluidFlow.setReynoldsNumber(parseInt(value));\n        });\n        \n        document.getElementById('fluidVisualizationMode').addEventListener('change', (e) => {\n            this.fluidFlow.setVisualizationMode(e.target.value);\n        });\n        \n        // Bernoulli's Principle Controls\n        this.setupSliderControl('bernoulliSpeed', 'bernoulliSpeedValue', (value) => {\n            this.bernoulli.setPressureDifference(parseFloat(value));\n        });\n        \n        this.setupSliderControl('pipeWidth', 'pipeWidthValue', (value) => {\n            this.bernoulli.setPipeWidth(parseInt(value));\n        });\n        \n        this.setupSliderControl('fluidDensity', 'fluidDensityValue', (value) => {\n            this.bernoulli.setFluidDensity(parseFloat(value));\n        });\n        \n        this.setupSliderControl('pressureDifference', 'pressureDifferenceValue', (value) => {\n            this.bernoulli.setPressureDifference(parseFloat(value));\n        });\n        \n        document.getElementById('bernoulliVisualizationMode').addEventListener('change', (e) => {\n            this.bernoulli.setVisualizationMode(e.target.value);\n        });\n        \n        // Sound Waves Controls\n        this.setupSliderControl('soundAnimationSpeed', 'soundAnimationSpeedValue', (value) => {\n            this.soundWaves.setAnimationSpeed(parseFloat(value));\n        });\n        \n        this.setupSliderControl('soundFrequency', 'soundFrequencyValue', (value) => {\n            this.soundWaves.setFrequency(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundAmplitude', 'soundAmplitudeValue', (value) => {\n            this.soundWaves.setAmplitude(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundSpeed', 'soundSpeedValue', (value) => {\n            this.soundWaves.setWaveSpeed(parseInt(value));\n        });\n        \n        this.setupSliderControl('soundParticles', 'soundParticlesValue', (value) => {\n            this.soundWaves.setParticleCount(parseInt(value));\n        });\n        \n        document.getElementById('soundWaveType').addEventListener('change', (e) => {\n            this.soundWaves.setWaveType(e.target.value);\n        });\n        \n        this.canvas.addEventListener('click', (e) => {\n            if (this.currentAnimation === 'sound-waves') {\n                const rect = this.canvas.getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n                const sx = this.soundWaves.sourceX;\n                const sy = this.soundWaves.sourceY;\n                const distance = Math.sqrt((x - sx) ** 2 + (y - sy) ** 2);\n                if (distance <= 50) { // Increased click radius from 30 to 50 pixels\n                    this.soundWaves.triggerWavePulse();\n                }\n            }\n        });\n\n        // Diode & Transistor Controls\n        const componentTypeSelect = document.getElementById('diodeComponentType');\n        const biasTypeSelect = document.getElementById('diodeBiasType');\n        \n        if (componentTypeSelect) {\n            componentTypeSelect.addEventListener('change', (e) => {\n                if (this.diodeTransistor) {\n                    this.diodeTransistor.setComponentType(e.target.value);\n                }\n            });\n        }\n        \n        if (biasTypeSelect) {\n            biasTypeSelect.addEventListener('change', (e) => {\n                if (this.diodeTransistor) {\n                    this.diodeTransistor.setBiasType(e.target.value);\n                }\n            });\n        }\n        \n        this.setupSliderControl('diodeInputVoltage', 'diodeInputVoltageValue', (value) => {\n            if (this.diodeTransistor) {\n                this.diodeTransistor.setInputVoltage(parseFloat(value));\n            }\n        });\n        \n        this.setupSliderControl('diodeBaseVoltage', 'diodeBaseVoltageValue', (value) => {\n            if (this.diodeTransistor) {\n                this.diodeTransistor.setBaseVoltage(parseFloat(value));\n            }\n        });\n        \n        this.setupSliderControl('diodeAnimationSpeed', 'diodeAnimationSpeedValue', (value) => {\n            if (this.diodeTransistor) {\n                this.diodeTransistor.setAnimationSpeed(parseFloat(value));\n            }\n        });\n        \n        // Neural Network Controls\n        this.setupSliderControl('neuralLearningRate', 'neuralLearningRateValue', (value) => {\n            if (this.neuralNetwork) {\n                this.neuralNetwork.setLearningRate(parseFloat(value));\n            }\n        });\n        \n        this.setupSliderControl('neuralSpeed', 'neuralSpeedValue', (value) => {\n            if (this.neuralNetwork) {\n                this.neuralNetwork.setSpeed(parseFloat(value));\n            }\n        });\n        \n        // Memory Management Controls\n        this.setupSliderControl('memorySpeed', 'memorySpeedValue', (value) => {\n            if (this.memoryManagement) {\n                this.memoryManagement.setAnimationSpeed(parseFloat(value));\n            }\n        });\n        \n        // Show Program Output toggle\n        const showOutputCheckbox = document.getElementById('showOutput');\n        if (showOutputCheckbox && this.memoryManagement) {\n            showOutputCheckbox.checked = this.memoryManagement.showOutput;\n            showOutputCheckbox.addEventListener('change', (e) => {\n                this.memoryManagement.setShowOutput(e.target.checked);\n            });\n        }\n\n        // Neural Network Mode Selector\n        const neuralMode = document.getElementById('neuralMode');\n        if (neuralMode) {\n            neuralMode.addEventListener('change', (e) => {\n                if (this.neuralNetwork) {\n                    const isTesting = e.target.value === 'testing';\n                    this.neuralNetwork.setTestingMode(isTesting);\n                    \n                    // Set appropriate defaults for each mode\n                    if (isTesting) {\n                        this.neuralNetwork.setShowWeights(true);\n                        this.neuralNetwork.setShowGradients(false);\n                        this.neuralNetwork.setShowLoss(false);\n                        this.neuralNetwork.setAutoTrain(false);\n                    } else {\n                        this.neuralNetwork.setShowWeights(true);\n                        this.neuralNetwork.setShowGradients(false);\n                        this.neuralNetwork.setShowLoss(true);\n                        this.neuralNetwork.setAutoTrain(true);\n                    }\n                }\n            });\n        }\n        \n\n    }\n    \n    setupSliderControl(sliderId, valueId, callback) {\n        const slider = document.getElementById(sliderId);\n        const valueDisplay = document.getElementById(valueId);\n        \n        if (!slider) {\n            console.warn(`Slider not found: ${sliderId}`);\n            return;\n        }\n        \n        if (!valueDisplay) {\n            console.warn(`Value display not found: ${valueId}`);\n            return;\n        }\n        \n        slider.addEventListener('input', (e) => {\n            const value = e.target.value;\n            const unit = sliderId.includes('Speed') ? 'x' : \n                        sliderId.includes('Angle') ? '°' : \n                        sliderId.includes('Length') ? '' : \n                        sliderId.includes('Wavelength') ? ' px' :\n                        sliderId.includes('Frequency') ? ' Hz' : \n                        sliderId.includes('gasTemperature') ? 'K' : \n                        sliderId.includes('frictionCoefficient') ? '' : \n                        sliderId.includes('Voltage') ? 'V' : '';\n            \n            valueDisplay.textContent = value + unit;\n            callback(value);\n        });\n    }\n    \n    updateDualityControls(mode) {\n        const performMeasurementBtn = document.getElementById('performMeasurementBtn');\n        \n        // Show measurement button only for superposition and measurement modes\n        if (mode === 'superposition' || mode === 'measurement') {\n            performMeasurementBtn.style.display = 'inline-block';\n        } else {\n            performMeasurementBtn.style.display = 'none';\n        }\n    }\n    \n    updateBrownianVisualization(mode) {\n        // Reset all visualization options\n        this.brownianMotion.setShowTemperatureHeatmap(false);\n        this.brownianMotion.setShowVelocityDistribution(false);\n        this.brownianMotion.setShowMeanFreePath(false);\n        \n        // Enable features based on mode\n        switch(mode) {\n            case 'basic':\n                // Just basic particle motion, no extra visualizations\n                break;\n            case 'heatmap':\n                this.brownianMotion.setShowTemperatureHeatmap(true);\n                break;\n            case 'advanced':\n                // Show all advanced features\n                this.brownianMotion.setShowTemperatureHeatmap(true);\n                this.brownianMotion.setShowVelocityDistribution(true);\n                this.brownianMotion.setShowMeanFreePath(true);\n                break;\n        }\n    }\n    \n    updateDiffusionVisualization(mode) {\n        const diffusion = this.diffusion;\n        \n        switch (mode) {\n            case 'basic':\n                diffusion.setShowConcentration(false);\n                diffusion.setShowConcentrationProfile(false);\n                diffusion.setShowParticleTrails(false);\n                break;\n            case 'heatmap':\n                diffusion.setShowConcentration(true);\n                diffusion.setShowConcentrationProfile(false);\n                diffusion.setShowParticleTrails(false);\n                break;\n            case 'profile':\n                diffusion.setShowConcentration(false);\n                diffusion.setShowConcentrationProfile(true);\n                diffusion.setShowParticleTrails(false);\n                break;\n            case 'advanced':\n                diffusion.setShowConcentration(true);\n                diffusion.setShowConcentrationProfile(true);\n                diffusion.setShowParticleTrails(true);\n                break;\n        }\n    }\n    \n    updateGasVisualization(mode) {\n        const gasLaws = this.gasLaws;\n        \n        switch (mode) {\n            case 'basic':\n                gasLaws.setShowPressureGauge(true);\n                gasLaws.setShowPressureHeatmap(false);\n                gasLaws.setShowVelocityDistribution(false);\n                gasLaws.setShowGasLawGraph(false);\n                gasLaws.setShowParticleCollisions(false);\n                break;\n            case 'pressure':\n                gasLaws.setShowPressureGauge(true);\n                gasLaws.setShowPressureHeatmap(true);\n                gasLaws.setShowVelocityDistribution(false);\n                gasLaws.setShowGasLawGraph(true);\n                gasLaws.setShowParticleCollisions(false);\n                break;\n            case 'advanced':\n                gasLaws.setShowPressureGauge(true);\n                gasLaws.setShowPressureHeatmap(true);\n                gasLaws.setShowVelocityDistribution(true);\n                gasLaws.setShowGasLawGraph(true);\n                gasLaws.setShowParticleCollisions(true);\n                break;\n        }\n    }\n    \n    updatePendulumVisualization(mode) {\n        const pendulum = this.pendulum;\n        \n        switch (mode) {\n            case 'basic':\n                pendulum.setShowPath(false);\n                pendulum.setShowVelocityVectors(false);\n                pendulum.setShowForceVectors(true);\n                pendulum.setShowEnergyInfo(false);\n                pendulum.setShowPhaseSpace(false);\n                break;\n            case 'vectors':\n                pendulum.setShowPath(false);\n                pendulum.setShowVelocityVectors(true);\n                pendulum.setShowForceVectors(true);\n                pendulum.setShowEnergyInfo(false);\n                pendulum.setShowPhaseSpace(false);\n                break;\n            case 'advanced':\n                pendulum.setShowPath(true);\n                pendulum.setShowVelocityVectors(true);\n                pendulum.setShowForceVectors(true);\n                pendulum.setShowEnergyInfo(true);\n                pendulum.setShowPhaseSpace(true);\n                break;\n        }\n    }\n    \n    updateOrbitalVisualization(mode) {\n        switch(mode) {\n            case 'basic':\n                this.orbital.setShowOrbitPath(true);\n                this.orbital.setShowVelocityVector(false);\n                this.orbital.setShowKeplerInfo(false);\n                break;\n            case 'advanced':\n                this.orbital.setShowOrbitPath(true);\n                this.orbital.setShowVelocityVector(true);\n                this.orbital.setShowKeplerInfo(true);\n                break;\n        }\n    }\n    \n    switchCategory(category) {\n        \n        // Update category buttons\n        document.querySelectorAll('.category-btn').forEach(btn => {\n            btn.classList.remove('active');\n        });\n        \n        const categoryBtn = document.querySelector(`[data-category=\"${category}\"]`);\n        if (categoryBtn) {\n            categoryBtn.classList.add('active');\n        }\n        \n        // Hide all animation groups\n        document.querySelectorAll('.animation-group').forEach(group => {\n            group.classList.remove('active');\n        });\n        \n        // Show current category's animations\n        const animationGroup = document.getElementById(`${category}-animations`);\n        if (animationGroup) {\n            animationGroup.classList.add('active');\n        }\n        \n        // Switch to first available animation in category\n        const firstAnimation = document.querySelector(`#${category}-animations .nav-btn:not(.disabled)`);\n        if (firstAnimation) {\n            this.switchAnimation(firstAnimation.dataset.animation);\n        } else {\n            console.warn('No available animations found for category:', category);\n        }\n    }\n    \n    switchAnimation(animationType) {\n        if (animationType === this.currentAnimation) {\n            return;\n        }\n        \n        // Update active submenu item\n        document.querySelectorAll('.submenu-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const activeItem = document.querySelector(`[data-animation=\"${animationType}\"]`);\n        if (activeItem) {\n            activeItem.classList.add('active');\n            \n            // Ensure the parent category is active\n            const categoryItem = activeItem.closest('.category-item');\n            if (categoryItem) {\n                // Close all other categories\n                document.querySelectorAll('.category-item').forEach(item => {\n                    if (item !== categoryItem) {\n                        item.classList.remove('active');\n                    }\n                });\n                \n                // Open the parent category\n                categoryItem.classList.add('active');\n            }\n        }\n        \n\n        \n        // Hide all control panels\n        document.querySelectorAll('.animation-controls').forEach(panel => {\n            panel.style.display = 'none';\n        });\n        \n        // Show current control panel\n        const controlPanel = document.getElementById(`${animationType}-controls`);\n        if (controlPanel) {\n            controlPanel.style.display = 'block';\n        }\n        \n        // Hide all info panels\n        document.querySelectorAll('.animation-info').forEach(panel => {\n            panel.style.display = 'none';\n        });\n        \n        // Show current info panel\n        const infoPanel = document.getElementById(`${animationType}-info`);\n        if (infoPanel) {\n            infoPanel.style.display = 'block';\n        }\n        \n        this.currentAnimation = animationType;\n        this.resetAnimation();\n        \n        // Initialize wave controls if switching to waves animation\n        if (animationType === 'waves') {\n            this.initializeWaveControls();\n        }\n        \n        // Initialize sound waves controls if switching to sound-waves animation\n        if (animationType === 'sound-waves') {\n            this.initializeSoundWavesControls();\n        }\n        \n        // Initialize diode-transistor controls if switching to diode-transistor animation\n        if (animationType === 'diode-transistor') {\n            // Wait for the control panel to be visible before initializing\n            setTimeout(() => {\n                this.initializeDiodeTransistorControls();\n            }, 50);\n        }\n        \n        // Initialize memory management animation if switching to memory-management animation\n        if (animationType === 'memory-management') {\n            // Ensure memory management starts immediately\n            setTimeout(() => {\n                if (this.memoryManagement) {\n                    this.memoryManagement.startExecution();\n                }\n            }, 100);\n        }\n        \n\n    }\n    \n    initializeWaveControls() {\n        // Synchronize control values with wave parameters\n        const speedSlider = document.getElementById('waveSpeed');\n        const frequencySlider = document.getElementById('waveFrequency');\n        const amplitudeSlider = document.getElementById('waveAmplitude');\n        \n        if (speedSlider && this.waves) {\n            speedSlider.value = this.waves.speed;\n            document.getElementById('waveSpeedValue').textContent = this.waves.speed + 'x';\n        }\n        \n        if (frequencySlider && this.waves) {\n            frequencySlider.value = this.waves.frequency;\n            document.getElementById('waveFrequencyValue').textContent = this.waves.frequency;\n        }\n        \n        if (amplitudeSlider && this.waves) {\n            amplitudeSlider.value = this.waves.amplitude;\n            document.getElementById('waveAmplitudeValue').textContent = this.waves.amplitude;\n        }\n        \n        // Recalculate wave parameters to ensure they're correct\n        if (this.waves) {\n            this.waves.calculateWaveParameters();\n        }\n    }\n    \n    initializeSoundWavesControls() {\n        \n        // Synchronize control values with sound waves parameters\n        const frequencySlider = document.getElementById('soundFrequency');\n        const amplitudeSlider = document.getElementById('soundAmplitude');\n        const speedSlider = document.getElementById('soundSpeed');\n        const particlesSlider = document.getElementById('soundParticles');\n        const animationSpeedSlider = document.getElementById('soundAnimationSpeed');\n        const waveTypeSelect = document.getElementById('soundWaveType');\n        \n        if (frequencySlider && this.soundWaves) {\n            frequencySlider.value = this.soundWaves.frequency;\n            document.getElementById('soundFrequencyValue').textContent = this.soundWaves.frequency + ' Hz';\n        }\n        \n        if (amplitudeSlider && this.soundWaves) {\n            amplitudeSlider.value = this.soundWaves.amplitude;\n            document.getElementById('soundAmplitudeValue').textContent = this.soundWaves.amplitude + '%';\n        }\n        \n        if (speedSlider && this.soundWaves) {\n            speedSlider.value = this.soundWaves.waveSpeed;\n            document.getElementById('soundSpeedValue').textContent = this.soundWaves.waveSpeed + ' m/s';\n        }\n        \n        if (particlesSlider && this.soundWaves) {\n            particlesSlider.value = this.soundWaves.particleCount;\n            document.getElementById('soundParticlesValue').textContent = this.soundWaves.particleCount;\n        }\n        \n        if (animationSpeedSlider && this.soundWaves) {\n            animationSpeedSlider.value = this.soundWaves.animationSpeed;\n            document.getElementById('soundAnimationSpeedValue').textContent = this.soundWaves.animationSpeed + 'x';\n        }\n        \n        if (waveTypeSelect && this.soundWaves) {\n            waveTypeSelect.value = this.soundWaves.waveType;\n        }\n    }\n    \n    initializeDiodeTransistorControls() {\n        const componentTypeSelect = document.getElementById('diodeComponentType');\n        const biasTypeSelect = document.getElementById('diodeBiasType');\n        \n        if (componentTypeSelect && this.diodeTransistor) {\n            componentTypeSelect.value = this.diodeTransistor.componentType;\n            componentTypeSelect.dispatchEvent(new Event('change'));\n        }\n        if (biasTypeSelect && this.diodeTransistor) {\n            biasTypeSelect.value = this.diodeTransistor.biasType;\n            biasTypeSelect.dispatchEvent(new Event('change'));\n        }\n    }\n    \n    togglePlayPause() {\n        this.isRunning = !this.isRunning;\n        const btn = document.getElementById('playPauseBtn');\n        btn.textContent = this.isRunning ? 'Pause' : 'Play';\n    }\n    \n    resetAnimation() {\n        switch(this.currentAnimation) {\n            case 'brownian':\n                this.brownianMotion.reset();\n                break;\n            case 'pendulum':\n                this.pendulum.reset();\n                break;\n            case 'diffusion':\n                this.diffusion.reset();\n                break;\n            case 'waves':\n                this.waves.reset();\n                break;\n            case 'orbital':\n                this.orbital.reset();\n                break;\n            case 'electric-fields':\n                this.electricFields.reset();\n                break;\n            case 'gas-laws':\n                this.gasLaws.reset();\n                break;\n            case 'collisions':\n                this.collisions.reset();\n                break;\n            case 'friction':\n                this.friction.reset();\n                break;\n\n            case 'magnetic-fields':\n                this.magneticFields.reset();\n                break;\n\n            case 'wave-particle-duality':\n                this.waveParticleDuality.reset();\n                break;   \n            case 'nuclear-reactions':\n                this.nuclearReactions.reset();\n                break;\n            case 'fluid-flow':\n                this.fluidFlow.reset();\n                break;\n            case 'bernoulli':\n                this.bernoulli.reset();\n                break;\n            case 'sound-waves':\n                this.soundWaves.reset();\n                break;\n            case 'diode-transistor':\n                this.diodeTransistor.reset();\n                break;\n            case 'neural-network':\n                this.neuralNetwork.reset();\n                break;\n            case 'memory-management':\n                this.memoryManagement.reset();\n                break;\n        }\n    }\n    \n    resizeCanvas() {\n        const container = this.canvas.parentElement;\n        // Account for padding: container has 20px padding, animation-container has 20px padding\n        const availableWidth = container.clientWidth - 40; // 20px padding on each side\n        const maxWidth = Math.max(availableWidth, 800); // Minimum width of 800px\n        \n        // Maintain 4:3 aspect ratio with minimum height\n        this.canvas.width = maxWidth;\n        this.canvas.height = Math.max(maxWidth / 1.333, 400); // 4:3 aspect ratio (1.333) with min height of 400px\n        \n        // Update source and receiver positions for sound waves\n        if (this.soundWaves) {\n            this.soundWaves.setSourcePosition(100, this.canvas.height / 2);\n            this.soundWaves.setReceiverPosition(this.canvas.width - 100, this.canvas.height / 2);\n        }\n        \n        // Resize neural network to center it on the new canvas size\n        if (this.neuralNetwork) {\n            this.neuralNetwork.resize();\n        }\n        \n        // Initialize neural network if it hasn't been initialized yet\n        if (this.neuralNetwork && this.neuralNetwork.neurons.length === 0) {\n            this.neuralNetwork.initializeNetwork();\n        }\n    }\n    \n    animate(currentTime = 0) {\n        if (!this.isRunning) {\n            requestAnimationFrame((time) => this.animate(time));\n            return;\n        }\n        \n        // Initialize lastTime on first frame\n        if (this.lastTime === undefined) {\n            this.lastTime = currentTime;\n        }\n        \n        const deltaTime = currentTime - this.lastTime;\n        this.lastTime = currentTime;\n        \n        // Clear canvas\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Update and render current animation\n        switch(this.currentAnimation) {\n            case 'brownian':\n                this.brownianMotion.update(deltaTime);\n                this.brownianMotion.render();\n                this.updateBrownianStats();\n                break;\n            case 'pendulum':\n                this.pendulum.update(deltaTime);\n                this.pendulum.render();\n                this.updatePendulumStats();\n                break;\n            case 'diffusion':\n                this.diffusion.update(deltaTime);\n                this.diffusion.render();\n                this.updateDiffusionStats();\n                break;\n            case 'waves':\n                this.waves.update(deltaTime);\n                this.waves.render();\n                this.updateWaveStats();\n                break;\n            case 'orbital':\n                this.orbital.update(deltaTime);\n                this.orbital.render();\n                this.updateOrbitalStats();\n                break;\n            case 'electric-fields':\n                this.electricFields.update(deltaTime);\n                this.electricFields.render();\n                this.updateElectricFieldsStats();\n                break;\n            case 'gas-laws':\n                this.gasLaws.update(deltaTime);\n                this.gasLaws.render();\n                this.updateGasLawsStats();\n                break;\n            case 'collisions':\n                this.collisions.update(deltaTime);\n                this.collisions.render();\n                this.updateCollisionStats();\n                break;\n            case 'friction':\n                this.friction.update(deltaTime);\n                this.friction.render();\n                this.updateFrictionStats();\n                break;\n\n            case 'magnetic-fields':\n                this.magneticFields.update(deltaTime);\n                this.magneticFields.render();\n                this.updateMagneticFieldsStats();\n                break;\n\n            case 'wave-particle-duality':\n                this.waveParticleDuality.update(deltaTime);\n                this.waveParticleDuality.render();\n                this.updateWaveParticleDualityStats();\n                break;\n            case 'nuclear-reactions':\n                this.nuclearReactions.update(deltaTime);\n                this.nuclearReactions.render();\n                break;\n            case 'fluid-flow':\n                if (this.fluidFlow) {\n                    this.fluidFlow.update(deltaTime);\n                    this.fluidFlow.render();\n                    this.updateFluidFlowStats();\n                }\n                break;\n            case 'bernoulli':\n                if (this.bernoulli) {\n                    this.bernoulli.update(deltaTime);\n                    this.bernoulli.render();\n                    this.updateBernoulliStats();\n                }\n                break;\n            case 'sound-waves':\n                if (this.soundWaves) {\n                    this.soundWaves.update(deltaTime);\n                    this.soundWaves.render();\n                    this.updateSoundWavesStats();\n                }\n                break;\n            case 'diode-transistor':\n                if (this.diodeTransistor) {\n                    this.diodeTransistor.update(deltaTime);\n                    this.diodeTransistor.render();\n                    this.updateDiodeTransistorStats();\n                }\n                break;\n            case 'neural-network':\n                if (this.neuralNetwork) {\n                    this.neuralNetwork.update(deltaTime);\n                    this.neuralNetwork.render();\n                    this.updateNeuralNetworkStats();\n                }\n                break;\n            case 'memory-management':\n                if (this.memoryManagement) {\n                    this.memoryManagement.update(deltaTime);\n                    this.memoryManagement.render();\n                    this.updateMemoryManagementStats();\n                }\n                break;\n        }\n        \n        requestAnimationFrame((time) => this.animate(time));\n    }\n    \n    updateBrownianStats() {\n        const stats = this.brownianMotion.getStats();\n        document.getElementById('activeParticles').textContent = stats.particleCount;\n        document.getElementById('avgSpeed').textContent = stats.avgSpeed.toFixed(2);\n        document.getElementById('simTime').textContent = (stats.time / 1000).toFixed(1) + 's';\n        \n        // Update new statistics if elements exist\n        const collisionElement = document.getElementById('brownianCollisionCount');\n        const meanFreePathElement = document.getElementById('brownianMeanFreePath');\n        const temperatureElement = document.getElementById('brownianTemperature');\n        \n        if (collisionElement) collisionElement.textContent = stats.collisionCount;\n        if (meanFreePathElement) meanFreePathElement.textContent = stats.meanFreePath.toFixed(1);\n        if (temperatureElement) temperatureElement.textContent = stats.temperature.toFixed(1);\n    }\n    \n    updatePendulumStats() {\n        const stats = this.pendulum.getStats();\n        document.getElementById('currentAngle').textContent = stats.angle.toFixed(1) + '°';\n        document.getElementById('angularVelocity').textContent = stats.angularVelocity.toFixed(2);\n        document.getElementById('period').textContent = stats.theoreticalPeriod.toFixed(2) + 's';\n        document.getElementById('pendulumTime').textContent = (stats.time / 1000).toFixed(1) + 's';\n        \n        // Update air resistance information\n        const airResistanceElement = document.getElementById('pendulumAirResistance');\n        const dampingElement = document.getElementById('pendulumDamping');\n        if (airResistanceElement) {\n            airResistanceElement.textContent = stats.airResistanceForce.toFixed(3);\n        }\n        if (dampingElement) {\n            dampingElement.textContent = stats.dampingCoefficient.toFixed(3);\n        }\n    }\n    \n    updateDiffusionStats() {\n        const stats = this.diffusion.getStats();\n        document.getElementById('diffusionParticleCount').textContent = stats.particleCount;\n        document.getElementById('diffusionAvgSpeed').textContent = stats.avgSpeed.toFixed(2);\n        document.getElementById('concentrationSpread').textContent = stats.concentrationSpread.toFixed(2);\n        document.getElementById('diffusionTime').textContent = (stats.time / 1000).toFixed(1) + 's';\n    }\n    \n\n    \n    updateWaveStats() {\n        const stats = this.waves.getStats();\n        document.getElementById('currentWaveType').textContent = stats.waveType;\n        document.getElementById('currentFrequency').textContent = stats.frequency + ' Hz';\n        document.getElementById('currentWavelength').textContent = stats.wavelength + ' px';\n        document.getElementById('currentAmplitude').textContent = stats.amplitude + ' px';\n        document.getElementById('currentWaveSpeed').textContent = stats.waveSpeed + ' px/s';\n        document.getElementById('currentWaveEnergy').textContent = stats.energy;\n        document.getElementById('wavesTime').textContent = stats.time + 's';\n    }\n    \n    updateOrbitalStats() {\n        const stats = this.orbital.getStats();\n        document.getElementById('orbitalPeriod').textContent = stats.period.toFixed(2) + 's';\n        document.getElementById('orbitalSpeed').textContent = stats.speed.toFixed(2);\n        document.getElementById('orbitalDistance').textContent = stats.distance.toFixed(1);\n        document.getElementById('orbitalTime').textContent = (stats.time / 1000).toFixed(1) + 's';\n        \n        // Display eccentricity value\n        if (stats.eccentricity !== undefined) {\n            document.getElementById('orbitalEccentricity').textContent = stats.eccentricity.toFixed(2);\n        }\n    }\n    \n    updateElectricFieldsStats() {\n        const stats = this.electricFields.getStats();\n        document.getElementById('activeCharges').textContent = stats.chargeCount;\n        document.getElementById('efParticleCount').textContent = stats.particleCount;\n        document.getElementById('efFieldStrength').textContent = stats.fieldStrength;\n        document.getElementById('efTime').textContent = stats.time + 's';\n    }\n    \n    updateGasLawsStats() {\n        const stats = this.gasLaws.getStats();\n        document.getElementById('gasParticleCount').textContent = stats.particleCount;\n        document.getElementById('gasTemperature').textContent = stats.temperature + 'K';\n        document.getElementById('gasPressure').textContent = stats.pressure.toFixed(2);\n        document.getElementById('gasVolume').textContent = stats.volume;\n    }\n    \n\n    \n    updateCollisionStats() {\n        const stats = this.collisions.getStats();\n        document.getElementById('collisionBallCount').textContent = stats.ballCount;\n        document.getElementById('collisionMomentum').textContent = stats.totalMomentum.toFixed(1);\n        document.getElementById('collisionEnergy').textContent = stats.totalEnergy.toFixed(1);\n        document.getElementById('collisionCount').textContent = stats.collisionCount;\n    }\n    \n    updateFrictionStats() {\n        const stats = this.friction.getStats();\n        document.getElementById('frictionSurface').textContent = stats.surfaceType;\n        document.getElementById('frictionAngle').textContent = stats.inclineAngle + '°';\n        document.getElementById('frictionNetForce').textContent = stats.netForce.toFixed(1);\n        document.getElementById('frictionAcceleration').textContent = stats.acceleration.toFixed(2);\n    }\n    \n\n    \n    updateMagneticFieldsStats() {\n        const stats = this.magneticFields.getStats();\n        document.getElementById('magneticFieldStrength').textContent = stats.fieldStrength;\n        document.getElementById('magneticParticleCount').textContent = stats.particleCount;\n        document.getElementById('magneticTime').textContent = stats.time + 's';\n    }\n    \n\n    \n    updateWaveParticleDualityStats() {\n        const stats = this.waveParticleDuality.getStats();\n        // Update stats display elements if they exist\n        const modeElement = document.getElementById('currentDualityMode');\n        const energyElement = document.getElementById('currentPhotonEnergy');\n        const wavelengthElement = document.getElementById('currentDualityWavelength');\n        const waveFunctionElement = document.getElementById('waveFunctionStatus');\n        const interferenceElement = document.getElementById('interferenceStatus');\n        const measurementElement = document.getElementById('measurementCount');\n        const timeElement = document.getElementById('dualityTime');\n        \n        if (modeElement) modeElement.textContent = stats.mode;\n        if (energyElement) energyElement.textContent = stats.photonEnergy + ' eV';\n        if (wavelengthElement) wavelengthElement.textContent = stats.wavelength + ' nm';\n        if (waveFunctionElement) waveFunctionElement.textContent = this.waveParticleDuality.showWaveFunction ? 'Active' : 'Hidden';\n        if (interferenceElement) interferenceElement.textContent = this.waveParticleDuality.showInterference ? 'Visible' : 'Hidden';\n        if (measurementElement) measurementElement.textContent = stats.measurementCount;\n        if (timeElement) timeElement.textContent = stats.time + 's';\n    }\n    \n    updateFluidFlowStats() {\n        if (!this.fluidFlow) return;\n        \n        const stats = this.fluidFlow.getStats();\n        // Update stats display elements if they exist\n        const flowRateElement = document.getElementById('fluidFlowRate');\n        const viscosityElement = document.getElementById('fluidViscosity');\n        const reynoldsElement = document.getElementById('reynoldsNumberValue');\n        const flowTypeElement = document.getElementById('flowType');\n        const avgVelocityElement = document.getElementById('averageVelocity');\n        const timeElement = document.getElementById('fluidTime');\n        \n        if (flowRateElement) flowRateElement.textContent = stats.flowRate.toFixed(1);\n        if (viscosityElement) viscosityElement.textContent = stats.viscosity.toFixed(1);\n        if (reynoldsElement) reynoldsElement.textContent = stats.reynoldsNumber;\n        if (flowTypeElement) flowTypeElement.textContent = stats.flowType;\n        if (avgVelocityElement) avgVelocityElement.textContent = stats.averageVelocity.toFixed(2);\n        if (timeElement) timeElement.textContent = (stats.time / 1000).toFixed(1) + 's';\n    }\n    \n    updateBernoulliStats() {\n        if (!this.bernoulli) return;\n        \n        const stats = this.bernoulli.getStats();\n        // Update stats display elements if they exist\n        const pipeWidthElement = document.getElementById('bernoulliPipeWidth');\n        const densityElement = document.getElementById('bernoulliDensity');\n        const pressureElement = document.getElementById('bernoulliPressureDiff');\n        const velocityRatioElement = document.getElementById('velocityRatio');\n        const energyElement = document.getElementById('energyConservation');\n        const timeElement = document.getElementById('bernoulliTime');\n        \n        if (pipeWidthElement) pipeWidthElement.textContent = stats.pipeWidth;\n        if (densityElement) densityElement.textContent = stats.fluidDensity.toFixed(1);\n        if (pressureElement) pressureElement.textContent = stats.pressureDifference.toFixed(1);\n        if (velocityRatioElement) velocityRatioElement.textContent = stats.velocityRatio.toFixed(1);\n        if (energyElement) energyElement.textContent = stats.energyConservation;\n        if (timeElement) timeElement.textContent = (stats.time / 1000).toFixed(1) + 's';\n    }\n    \n    updateSoundWavesStats() {\n        if (!this.soundWaves) return;\n        \n        const stats = this.soundWaves.getStats();\n        // Update stats display elements if they exist\n        const waveTypeElement = document.getElementById('soundWaveTypeDisplay');\n        const frequencyElement = document.getElementById('soundFrequency');\n        const wavelengthElement = document.getElementById('soundWavelength');\n        const waveSpeedElement = document.getElementById('soundWaveSpeed');\n        const amplitudeElement = document.getElementById('soundAmplitude');\n        const particleCountElement = document.getElementById('soundParticleCount');\n        const timeElement = document.getElementById('soundTime');\n        \n        if (waveTypeElement) waveTypeElement.textContent = stats.waveType.charAt(0).toUpperCase() + stats.waveType.slice(1);\n        if (frequencyElement) frequencyElement.textContent = stats.frequency + ' Hz';\n        if (wavelengthElement) wavelengthElement.textContent = stats.wavelength.toFixed(2) + ' m';\n        if (waveSpeedElement) waveSpeedElement.textContent = stats.waveSpeed + ' m/s';\n        if (amplitudeElement) amplitudeElement.textContent = stats.amplitude + '%';\n        if (particleCountElement) particleCountElement.textContent = stats.particleCount;\n        if (timeElement) timeElement.textContent = (stats.time / 1000).toFixed(1) + 's';\n    }\n    \n    updateDiodeTransistorStats() {\n        if (!this.diodeTransistor) return;\n        \n        const stats = this.diodeTransistor.getStats();\n        // Update stats display elements if they exist\n        const componentTypeElement = document.getElementById('diodeComponentTypeDisplay');\n        const biasTypeElement = document.getElementById('diodeBiasTypeDisplay');\n        const inputVoltageElement = document.getElementById('diodeInputVoltageDisplay');\n        const baseVoltageElement = document.getElementById('diodeBaseVoltageDisplay');\n        const currentElement = document.getElementById('diodeCurrent');\n        const powerElement = document.getElementById('diodePower');\n        const statusElement = document.getElementById('diodeStatus');\n        const temperatureElement = document.getElementById('diodeTemperature');\n        const timeElement = document.getElementById('diodeTime');\n        \n        if (componentTypeElement) componentTypeElement.textContent = stats.componentType.toUpperCase();\n        if (biasTypeElement) biasTypeElement.textContent = stats.biasType.toUpperCase();\n        if (inputVoltageElement) inputVoltageElement.textContent = stats.inputVoltage + 'V';\n        if (baseVoltageElement) baseVoltageElement.textContent = stats.baseVoltage + 'V';\n        if (currentElement) currentElement.textContent = stats.current.toFixed(1) + 'mA';\n        if (powerElement) powerElement.textContent = stats.power.toFixed(1) + 'mW';\n        if (statusElement) statusElement.textContent = stats.isActive ? 'ACTIVE' : 'INACTIVE';\n        if (temperatureElement) temperatureElement.textContent = stats.temperature + '°C';\n        if (timeElement) timeElement.textContent = (stats.time / 1000).toFixed(1) + 's';\n        \n        // Show/hide base voltage stat based on component type\n        const baseVoltageStat = document.getElementById('baseVoltageStat');\n        if (baseVoltageStat) {\n            baseVoltageStat.style.display = (stats.componentType === 'npn' || stats.componentType === 'pnp') ? 'block' : 'none';\n        }\n    }\n    \n    updateNeuralNetworkStats() {\n        if (!this.neuralNetwork) return;\n        \n        const stats = this.neuralNetwork.getStats();\n        // Update stats display elements if they exist\n        const epochElement = document.getElementById('neuralEpoch');\n        const lossElement = document.getElementById('neuralLoss');\n        const accuracyElement = document.getElementById('neuralAccuracy');\n        const learningRateElement = document.getElementById('neuralLearningRate');\n        const speedElement = document.getElementById('neuralSpeed');\n        const phaseElement = document.getElementById('neuralPhase');\n        const dataIndexElement = document.getElementById('neuralDataIndex');\n        \n        if (epochElement) epochElement.textContent = stats.epoch;\n        if (lossElement) lossElement.textContent = stats.currentLoss.toFixed(4);\n        if (accuracyElement) accuracyElement.textContent = (stats.currentAccuracy * 100).toFixed(1) + '%';\n        if (learningRateElement) learningRateElement.textContent = stats.learningRate;\n        if (speedElement) speedElement.textContent = stats.speed.toFixed(1) + 'x';\n        if (phaseElement) phaseElement.textContent = stats.animationPhase;\n        if (dataIndexElement) dataIndexElement.textContent = stats.trainingDataIndex;\n    }\n    \n    showScienceExplanation() {\n        const modal = document.getElementById('scienceModal');\n        const modalTitle = document.getElementById('modalTitle');\n        const modalContent = document.getElementById('modalContent');\n        \n        // Get content based on current animation\n        const content = this.getScienceContent();\n        \n        // Update modal content\n        modalTitle.textContent = content.title;\n        modalContent.innerHTML = content.html;\n        \n        // Show modal\n        modal.style.display = 'block';\n    }\n    \n    closeModal() {\n        const modal = document.getElementById('scienceModal');\n        modal.style.display = 'none';\n    }\n    \n    getCurrentAnimationState() {\n        const state = {\n            animation: this.currentAnimation,\n            controls: {},\n            stats: {}\n        };\n        \n        // Get current control values and stats based on animation type\n        switch(this.currentAnimation) {\n            case 'brownian':\n                state.controls = {\n                    particleCount: document.getElementById('brownianParticleCount')?.value || '15',\n                    temperature: document.getElementById('brownianTemperature')?.value || '1.0',\n                    speed: document.getElementById('brownianSpeed')?.value || '1.0'\n                };\n                state.stats = this.brownianMotion?.getStats() || {};\n                break;\n            case 'pendulum':\n                state.controls = {\n                    length: document.getElementById('pendulumLength')?.value || '100',\n                    gravity: document.getElementById('pendulumGravity')?.value || '9.8',\n                    damping: document.getElementById('pendulumDamping')?.value || '0.01'\n                };\n                state.stats = this.pendulum?.getStats() || {};\n                break;\n            case 'waves':\n                state.controls = {\n                    waveType: document.getElementById('waveType')?.value || 'transverse',\n                    frequency: document.getElementById('waveFrequency')?.value || '1.0',\n                    amplitude: document.getElementById('waveAmplitude')?.value || '50'\n                };\n                state.stats = this.wavePropagation?.getStats() || {};\n                break;\n            case 'electric-fields':\n                state.controls = {\n                    fieldStrength: document.getElementById('efFieldStrength')?.value || '1.0',\n                    particleCount: document.getElementById('efParticleCount')?.value || '20'\n                };\n                state.stats = this.electricFields?.getStats() || {};\n                break;\n            case 'magnetic-fields':\n                state.controls = {\n                    fieldStrength: document.getElementById('magneticFieldStrength')?.value || '1.0',\n                    particleCount: document.getElementById('magneticParticleCount')?.value || '15'\n                };\n                state.stats = this.magneticFields?.getStats() || {};\n                break;\n            case 'gas-laws':\n                state.controls = {\n                    temperature: document.getElementById('gasTemperature')?.value || '300',\n                    pressure: document.getElementById('gasPressure')?.value || '1.0',\n                    volume: document.getElementById('gasVolume')?.value || '300'\n                };\n                state.stats = this.gasLaws?.getStats() || {};\n                break;\n            case 'collisions':\n                state.controls = {\n                    ballCount: document.getElementById('ballCount')?.value || '5',\n                    restitution: document.getElementById('restitution')?.value || '0.8',\n                    gravity: document.getElementById('collisionGravity')?.value || '9.8'\n                };\n                state.stats = this.collisions?.getStats() || {};\n                break;\n            case 'friction':\n                state.controls = {\n                    angle: document.getElementById('inclineAngle')?.value || '20',\n                    frictionCoefficient: document.getElementById('frictionCoefficient')?.value || '0.3',\n                    mass: document.getElementById('objectMass')?.value || '1'\n                };\n                state.stats = this.friction?.getStats() || {};\n                break;\n\n            case 'wave-particle-duality':\n                state.controls = {\n                    mode: document.getElementById('dualityMode')?.value || 'wave',\n                    energy: document.getElementById('dualityEnergy')?.value || '5.0',\n                    wavelength: document.getElementById('dualityWavelength')?.value || '150'\n                };\n                state.stats = this.waveParticleDuality?.getStats() || {};\n                break;\n            case 'sound-waves':\n                state.controls = {\n                    waveType: document.getElementById('soundWaveType')?.value || 'transverse',\n                    frequency: document.getElementById('soundFrequency')?.value || '5',\n                    amplitude: document.getElementById('soundAmplitude')?.value || '50',\n                    waveSpeed: document.getElementById('soundSpeed')?.value || '343',\n                    particleCount: document.getElementById('soundParticles')?.value || '15',\n                    animationSpeed: document.getElementById('soundAnimationSpeed')?.value || '1.0'\n                };\n                state.stats = this.soundWaves?.getStats() || {};\n                break;\n            case 'diode-transistor':\n                state.controls = {\n                    componentType: document.getElementById('diodeComponentType')?.value || 'diode',\n                    biasType: document.getElementById('diodeBiasType')?.value || 'forward',\n                    inputVoltage: document.getElementById('diodeInputVoltage')?.value || '5',\n                    baseVoltage: document.getElementById('diodeBaseVoltage')?.value || '0.7',\n                    animationSpeed: document.getElementById('diodeAnimationSpeed')?.value || '1.0'\n                };\n                state.stats = this.diodeTransistor?.getStats() || {};\n                break;\n            case 'neural-network':\n                state.controls = {\n                    learningRate: document.getElementById('neuralLearningRate')?.value || '0.1',\n                    speed: document.getElementById('neuralSpeed')?.value || '1.0',\n                    mode: document.getElementById('neuralMode')?.value || 'training'\n                };\n                state.stats = this.neuralNetwork?.getStats() || {};\n                break;\n            case 'memory-management':\n                state.controls = {\n                    mode: document.getElementById('memoryMode')?.value || 'random',\n                    retentionRate: document.getElementById('retentionRate')?.value || '0.5',\n                    decayRate: document.getElementById('decayRate')?.value || '0.1'\n                };\n                state.stats = this.memoryManagement?.getStats() || {};\n                break;\n        }\n        \n        return state;\n    }\n    \n    getScienceContent() {\n        switch (this.currentAnimation) {\n            case 'brownian':\n                return {\n                    title: 'Brownian Motion - Random Particle Movement',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Brownian Motion?</h3>\n                            <p>Brownian motion is the random, erratic movement of particles suspended in a fluid (liquid or gas) caused by collisions with fast-moving molecules in the surrounding medium. This phenomenon was first observed by botanist Robert Brown in 1827 when studying pollen grains in water.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Molecular Motion:</strong> All particles are in constant motion due to thermal energy</li>\n                                <li><strong>Random Walk:</strong> Each collision changes the particle's direction randomly</li>\n                                <li><strong>Temperature Dependence:</strong> Higher temperature = faster molecular motion = more vigorous Brownian motion</li>\n                                <li><strong>Particle Size Effect:</strong> Smaller particles show more dramatic Brownian motion</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Particles moving in seemingly random directions</li>\n                                <li>No predictable path - each particle follows a \"random walk\"</li>\n                                <li>Particles occasionally changing direction due to collisions</li>\n                                <li>Faster movement at higher temperatures</li>\n                                <li>Different colored particles for easy tracking</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Diffusion of molecules in cells</li>\n                                <li>Particle movement in air pollution</li>\n                                <li>Understanding molecular motion in chemistry</li>\n                                <li>Brownian motion in financial markets</li>\n                            </ul>\n                            \n                            <h3>Mathematical Description</h3>\n                            <p>The mean squared displacement (MSD) of a Brownian particle follows: <strong>MSD = 6Dt</strong>, where D is the diffusion coefficient and t is time. This relationship shows that the average distance a particle travels increases with the square root of time.</p>\n                        </div>\n                    `\n                };\n            case 'sound-waves':\n                return {\n                    title: 'Sound Waves - Wave Propagation',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Sound Waves?</h3>\n                            <p>Sound waves are mechanical waves that propagate through a medium (like air, water, or solids) by causing particles to vibrate. They are longitudinal waves, meaning the particles move back and forth in the same direction as the wave travels.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Longitudinal Waves:</strong> Particles oscillate parallel to wave direction</li>\n                                <li><strong>Transverse Waves:</strong> Particles oscillate perpendicular to wave direction</li>\n                                <li><strong>Compression & Rarefaction:</strong> High and low pressure regions in the medium</li>\n                                <li><strong>Wave Speed:</strong> v = fλ, where f is frequency and λ is wavelength</li>\n                                <li><strong>Amplitude:</strong> Maximum displacement of particles from equilibrium</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Wave pulse traveling from source to receiver</li>\n                                <li>Particles moving as the wave passes through</li>\n                                <li>Compression zones (orange) and rarefaction zones (cyan)</li>\n                                <li>Different wave types: transverse, longitudinal, and combined</li>\n                                <li>Wave speed and frequency effects on propagation</li>\n                            </ul>\n                            \n                            <h3>Wave Types Explained</h3>\n                            <ul>\n                                <li><strong>Transverse:</strong> Like waves on a string - particles move up and down</li>\n                                <li><strong>Longitudinal:</strong> Like sound in air - particles move back and forth</li>\n                                <li><strong>Combined:</strong> Shows both transverse and longitudinal components</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Musical instruments and sound production</li>\n                                <li>Ultrasound imaging in medicine</li>\n                                <li>Seismic waves in earthquake detection</li>\n                                <li>Sonar and underwater communication</li>\n                                <li>Acoustic engineering and noise control</li>\n                            </ul>\n                            \n                            <h3>Mathematical Description</h3>\n                            <p>For a sound wave: <strong>v = √(B/ρ)</strong>, where v is wave speed, B is bulk modulus, and ρ is density. The frequency determines pitch, while amplitude determines loudness. The relationship <strong>v = fλ</strong> connects speed, frequency, and wavelength.</p>\n                        </div>\n                    `\n                };\n            case 'diode-transistor':\n                return {\n                    title: 'Diode & Transistor - Electronic Components',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Diodes and Transistors?</h3>\n                            <p>Diodes and transistors are fundamental electronic components that control the flow of electrical current. Diodes allow current to flow in one direction only, while transistors can amplify signals and act as electronic switches.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Semiconductor Physics:</strong> Materials with conductivity between conductors and insulators</li>\n                                <li><strong>P-N Junction:</strong> Boundary between P-type (holes) and N-type (electrons) materials</li>\n                                <li><strong>Forward Bias:</strong> Positive voltage applied to P-side, negative to N-side</li>\n                                <li><strong>Reverse Bias:</strong> Opposite voltage polarity blocks current flow</li>\n                                <li><strong>Transistor Amplification:</strong> Small base current controls large collector current</li>\n                                <li><strong>Particle Flow:</strong> Electrons and holes flow in opposite directions but contribute to current in the same direction</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li><strong>Electrons (blue circles):</strong> Move from N-type to P-type material during forward bias</li>\n                                <li><strong>Holes (red outlined circles):</strong> Move from P-type to N-type material during forward bias</li>\n                                <li><strong>Current Flow:</strong> Only occurs in forward bias conditions with sufficient voltage</li>\n                                <li><strong>Voltage Drop:</strong> ~0.7V across diode in forward bias</li>\n                                <li><strong>Transistor Control:</strong> Base voltage controls collector current amplification</li>\n                                <li><strong>Energy Visualization:</strong> Pulsating circles represent electromagnetic field and power dissipation</li>\n                            </ul>\n                            \n                            <h3>Component Behavior</h3>\n                            <ul>\n                                <li><strong>Diode Forward Bias:</strong> Current flows when voltage > 0.7V, voltage drop ~0.7V</li>\n                                <li><strong>Diode Reverse Bias:</strong> No current flow, acts as insulator</li>\n                                <li><strong>NPN Transistor:</strong> Electron flow from emitter to collector, base controls amplification</li>\n                                <li><strong>PNP Transistor:</strong> Hole flow from emitter to collector, base controls amplification</li>\n                                <li><strong>Amplification Factor:</strong> β = Ic/Ib (collector current / base current) ≈ 100</li>\n                            </ul>\n                            \n                            <h3>Particle Physics</h3>\n                            <ul>\n                                <li><strong>Electrons:</strong> Filled blue circles representing negative charge carriers</li>\n                                <li><strong>Holes:</strong> Red outlined circles representing positive charge carriers (absence of electrons)</li>\n                                <li><strong>Flow Direction:</strong> Electrons and holes move in opposite directions but both contribute to conventional current flow</li>\n                                <li><strong>Energy Levels:</strong> Particles move faster and glow brighter with higher voltage</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Rectifiers in power supplies</li>\n                                <li>Amplifiers in audio systems</li>\n                                <li>Digital logic circuits</li>\n                                <li>Voltage regulators</li>\n                                <li>Radio frequency circuits</li>\n                                <li>Computer processors and memory</li>\n                            </ul>\n                            \n                            <h3>Mathematical Description</h3>\n                            <p>For a diode: <strong>I = I₀(e^(V/Vₜ) - 1)</strong>, where I is current, V is voltage, and Vₜ is thermal voltage (~26mV at room temperature). For a transistor: <strong>Ic = β × Ib</strong>, where β is the current gain factor (typically 50-200).</p>\n                            \n                            <h3>Interactive Features</h3>\n                            <ul>\n                                <li>Switch between diode, NPN, and PNP transistor modes</li>\n                                <li>Adjust input voltage to see current flow changes</li>\n                                <li>Control base voltage for transistor amplification</li>\n                                <li>Observe different bias conditions (forward, reverse, off)</li>\n                                <li>Watch real-time current and power calculations</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'pendulum':\n                return {\n                    title: 'Simple Pendulum - Harmonic Oscillation',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is a Simple Pendulum?</h3>\n                            <p>A simple pendulum consists of a point mass (bob) suspended from a fixed point by a massless, inextensible string. When displaced from its equilibrium position, it oscillates back and forth under the influence of gravity.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Simple Harmonic Motion:</strong> For small angles, the motion is approximately simple harmonic</li>\n                                <li><strong>Period Formula:</strong> T = 2π√(L/g), where L is length and g is gravitational acceleration</li>\n                                <li><strong>Energy Conservation:</strong> Kinetic and potential energy continuously convert between each other</li>\n                                <li><strong>Damping:</strong> Air resistance causes the amplitude to gradually decrease</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Regular back-and-forth oscillation</li>\n                                <li>Period remains constant regardless of amplitude (for small angles)</li>\n                                <li>Longer pendulum = longer period</li>\n                                <li>Gradual decrease in amplitude due to air resistance</li>\n                                <li>Maximum speed at the bottom, zero speed at the extremes</li>\n                            </ul>\n                            \n                            <h3>Energy Transformations</h3>\n                            <ul>\n                                <li><strong>At extremes:</strong> Maximum potential energy, zero kinetic energy</li>\n                                <li><strong>At bottom:</strong> Maximum kinetic energy, minimum potential energy</li>\n                                <li><strong>Total energy:</strong> Gradually decreases due to air resistance</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Clock mechanisms (grandfather clocks)</li>\n                                <li>Seismometers for earthquake detection</li>\n                                <li>Metronomes for musical timing</li>\n                                <li>Amusement park rides</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'waves':\n                return {\n                    title: 'Wave Propagation - Energy Transfer',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Waves?</h3>\n                            <p>Waves are disturbances that transfer energy through a medium without transferring matter. They can be mechanical (requiring a medium) or electromagnetic (can travel through vacuum).</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Transverse Waves:</strong> Particles move perpendicular to wave direction (like water waves)</li>\n                                <li><strong>Longitudinal Waves:</strong> Particles move parallel to wave direction (like sound waves)</li>\n                                <li><strong>Wave Properties:</strong> Amplitude, frequency, wavelength, and speed</li>\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\n                                <li><strong>Interference:</strong> Waves can add together or cancel each other out</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Regular, repeating pattern of disturbance</li>\n                                <li>Waves traveling at constant speed</li>\n                                <li>Different wave types (transverse vs longitudinal)</li>\n                                <li>Interference patterns when waves overlap</li>\n                                <li>Energy transfer without matter movement</li>\n                            </ul>\n                            \n                            <h3>Wave Characteristics</h3>\n                            <ul>\n                                <li><strong>Amplitude:</strong> Maximum displacement from equilibrium</li>\n                                <li><strong>Frequency:</strong> Number of complete cycles per second (Hz)</li>\n                                <li><strong>Wavelength:</strong> Distance between consecutive identical points</li>\n                                <li><strong>Period:</strong> Time for one complete cycle</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Sound waves in air and water</li>\n                                <li>Light waves and electromagnetic radiation</li>\n                                <li>Earthquake waves (seismic waves)</li>\n                                <li>Radio waves for communication</li>\n                                <li>Ocean waves and tides</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'diffusion':\n                return {\n                    title: 'Diffusion - Particle Spread',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Diffusion?</h3>\n                            <p>Diffusion is the process by which particles spread from regions of high concentration to regions of low concentration, driven by random molecular motion. This is a fundamental process in nature that leads to the uniform distribution of particles.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Fick's First Law:</strong> J = -D∇C (flux is proportional to concentration gradient)</li>\n                                <li><strong>Concentration Gradient:</strong> Difference in concentration between regions</li>\n                                <li><strong>Diffusion Coefficient:</strong> Measure of how quickly particles diffuse</li>\n                                <li><strong>Temperature Effect:</strong> Higher temperature increases diffusion rate</li>\n                                <li><strong>Particle Size:</strong> Smaller particles diffuse faster</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Particles spreading from concentrated areas</li>\n                                <li>Gradual mixing of different particle types</li>\n                                <li>Faster diffusion at higher temperatures</li>\n                                <li>Concentration gradient decreasing over time</li>\n                                <li>Eventually uniform distribution</li>\n                            </ul>\n                            \n                            <h3>Diffusion Process</h3>\n                            <ul>\n                                <li><strong>Initial State:</strong> High concentration in one region</li>\n                                <li><strong>Random Motion:</strong> Particles move randomly due to thermal energy</li>\n                                <li><strong>Net Movement:</strong> More particles move from high to low concentration</li>\n                                <li><strong>Equilibrium:</strong> Eventually uniform concentration throughout</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Oxygen diffusion in lungs</li>\n                                <li>Nutrient absorption in cells</li>\n                                <li>Perfume spreading in air</li>\n                                <li>Salt dissolving in water</li>\n                                <li>Heat conduction in materials</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'orbital':\n                return {\n                    title: 'Orbital Motion - Gravitational Dynamics',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Orbital Motion?</h3>\n                            <p>Orbital motion describes the path of one object around another under the influence of gravity. This fundamental concept explains planetary orbits, satellite motion, and many other celestial phenomena.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Kepler's Laws:</strong> Three laws describing planetary motion</li>\n                                <li><strong>Gravitational Force:</strong> F = GMm/r² (inverse square law)</li>\n                                <li><strong>Orbital Velocity:</strong> v = √(GM/r) for circular orbits</li>\n                                <li><strong>Eccentricity:</strong> Measure of how elliptical an orbit is (0 = circular, 1 = parabolic)</li>\n                                <li><strong>Conservation of Angular Momentum:</strong> Orbital angular momentum remains constant</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Elliptical or circular paths around central mass</li>\n                                <li>Faster motion when closer to the center (Kepler's Second Law)</li>\n                                <li>Slower motion when farther from the center</li>\n                                <li>Different orbital shapes based on eccentricity</li>\n                                <li>Consistent orbital period for same central mass</li>\n                            </ul>\n                            \n                            <h3>Kepler's Three Laws</h3>\n                            <ol>\n                                <li><strong>First Law:</strong> Orbits are ellipses with the central mass at one focus</li>\n                                <li><strong>Second Law:</strong> Equal areas are swept in equal times (faster when closer)</li>\n                                <li><strong>Third Law:</strong> Orbital period squared is proportional to semi-major axis cubed</li>\n                            </ol>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Planetary orbits around the Sun</li>\n                                <li>Satellite orbits around Earth</li>\n                                <li>Electron orbits in atoms (Bohr model)</li>\n                                <li>Binary star systems</li>\n                                <li>Spacecraft trajectories</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'electric-fields':\n                return {\n                    title: 'Electric Fields - Charged Particle Interactions',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Electric Fields?</h3>\n                            <p>Electric fields are regions of space around charged particles where other charges experience forces. They are invisible but can be visualized through their effects on test charges and field lines.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Coulomb's Law:</strong> F = kq₁q₂/r² (force between charges)</li>\n                                <li><strong>Electric Field:</strong> E = F/q (force per unit charge)</li>\n                                <li><strong>Field Lines:</strong> Imaginary lines showing field direction</li>\n                                <li><strong>Superposition:</strong> Total field is sum of individual fields</li>\n                                <li><strong>Conservation of Charge:</strong> Net charge remains constant</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Test particles moving along field lines</li>\n                                <li>Positive particles repelled by positive charges</li>\n                                <li>Negative particles attracted to positive charges</li>\n                                <li>Field strength decreases with distance</li>\n                                <li>Complex field patterns with multiple charges</li>\n                            </ul>\n                            \n                            <h3>Field Properties</h3>\n                            <ul>\n                                <li><strong>Direction:</strong> Field lines point away from positive, toward negative</li>\n                                <li><strong>Strength:</strong> Closer lines indicate stronger fields</li>\n                                <li><strong>Superposition:</strong> Fields add vectorially</li>\n                                <li><strong>Conservative:</strong> Work done is path-independent</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Electrostatic precipitators</li>\n                                <li>Capacitors and electronic circuits</li>\n                                <li>Lightning and atmospheric electricity</li>\n                                <li>Particle accelerators</li>\n                                <li>Electron microscopes</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'gas-laws':\n                return {\n                    title: 'Gas Laws - Pressure, Volume, Temperature Relationships',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Gas Laws?</h3>\n                            <p>Gas laws describe the relationships between pressure, volume, temperature, and amount of gas. These fundamental laws help us understand how gases behave under different conditions.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Boyle's Law:</strong> P₁V₁ = P₂V₂ (inverse relationship between pressure and volume)</li>\n                                <li><strong>Charles's Law:</strong> V₁/T₁ = V₂/T₂ (direct relationship between volume and temperature)</li>\n                                <li><strong>Gay-Lussac's Law:</strong> P₁/T₁ = P₂/T₂ (direct relationship between pressure and temperature)</li>\n                                <li><strong>Combined Gas Law:</strong> P₁V₁/T₁ = P₂V₂/T₂</li>\n                                <li><strong>Ideal Gas Law:</strong> PV = nRT (universal gas law)</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Particles moving faster at higher temperatures</li>\n                                <li>More frequent collisions at higher pressure</li>\n                                <li>Particles spreading out in larger volumes</li>\n                                <li>Pressure changes with volume and temperature</li>\n                                <li>Random motion of gas particles</li>\n                            </ul>\n                            \n                            <h3>Gas Law Relationships</h3>\n                            <ul>\n                                <li><strong>Boyle's Law:</strong> Decrease volume → increase pressure</li>\n                                <li><strong>Charles's Law:</strong> Increase temperature → increase volume</li>\n                                <li><strong>Gay-Lussac's Law:</strong> Increase temperature → increase pressure</li>\n                                <li><strong>Avogadro's Law:</strong> More particles → larger volume</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Internal combustion engines</li>\n                                <li>Refrigeration and air conditioning</li>\n                                <li>Weather and atmospheric pressure</li>\n                                <li>Scuba diving and pressure changes</li>\n                                <li>Hot air balloons</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'collisions':\n                return {\n                    title: 'Collision Physics - Momentum and Energy Conservation',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Collisions?</h3>\n                            <p>Collisions are interactions between objects that result in changes in their motion. Understanding collisions involves principles of momentum conservation and energy transfer.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Momentum Conservation:</strong> Total momentum before = total momentum after</li>\n                                <li><strong>Elastic Collisions:</strong> Kinetic energy is conserved</li>\n                                <li><strong>Inelastic Collisions:</strong> Some kinetic energy is lost</li>\n                                <li><strong>Impulse:</strong> Change in momentum = force × time</li>\n                                <li><strong>Coefficient of Restitution:</strong> Measure of collision elasticity</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Objects changing direction after collision</li>\n                                <li>Speed changes based on collision type</li>\n                                <li>Energy transfer between objects</li>\n                                <li>Momentum conservation in all collisions</li>\n                                <li>Different outcomes for elastic vs inelastic collisions</li>\n                            </ul>\n                            \n                            <h3>Collision Types</h3>\n                            <ul>\n                                <li><strong>Elastic:</strong> Perfect bounce, energy conserved</li>\n                                <li><strong>Inelastic:</strong> Objects stick together, energy lost</li>\n                                <li><strong>Partially Elastic:</strong> Some energy lost, some bounce</li>\n                                <li><strong>Explosive:</strong> Energy added, objects separate</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Car crash safety design</li>\n                                <li>Sports equipment design</li>\n                                <li>Particle physics experiments</li>\n                                <li>Billiards and pool</li>\n                                <li>Rocket propulsion</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'friction':\n                return {\n                    title: 'Friction & Inclined Planes - Force Analysis',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Friction?</h3>\n                            <p>Friction is a force that opposes the relative motion of objects in contact. On inclined planes, friction plays a crucial role in determining whether objects slide or remain stationary.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Static Friction:</strong> Prevents motion when object is at rest</li>\n                                <li><strong>Kinetic Friction:</strong> Opposes motion when object is sliding</li>\n                                <li><strong>Friction Force:</strong> f = μN (coefficient × normal force)</li>\n                                <li><strong>Normal Force:</strong> Component of weight perpendicular to surface</li>\n                                <li><strong>Net Force:</strong> Determines acceleration down the incline</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Objects sliding down inclined surfaces</li>\n                                <li>Different sliding speeds based on friction</li>\n                                <li>Objects stopping when friction is high</li>\n                                <li>Force vectors showing gravity and friction</li>\n                                <li>Acceleration changes with angle and friction</li>\n                            </ul>\n                            \n                            <h3>Force Analysis</h3>\n                            <ul>\n                                <li><strong>Gravity Component:</strong> mg sin(θ) down the incline</li>\n                                <li><strong>Normal Force:</strong> mg cos(θ) perpendicular to surface</li>\n                                <li><strong>Friction Force:</strong> μmg cos(θ) opposing motion</li>\n                                <li><strong>Net Force:</strong> mg sin(θ) - μmg cos(θ)</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Vehicle braking systems</li>\n                                <li>Walking and running mechanics</li>\n                                <li>Rock climbing and mountaineering</li>\n                                <li>Industrial conveyor systems</li>\n                                <li>Sports equipment design</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'magnetic-fields':\n                return {\n                    title: 'Magnetic Fields - Magnetic Force Interactions',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Magnetic Fields?</h3>\n                            <p>Magnetic fields are regions of space around magnets where magnetic materials and moving charges experience forces. They are fundamental to electromagnetism and many modern technologies.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Magnetic Force:</strong> F = qvB sin(θ) on moving charges</li>\n                                <li><strong>Field Lines:</strong> Imaginary lines showing field direction</li>\n                                <li><strong>Right-Hand Rule:</strong> Determines force direction on moving charges</li>\n                                <li><strong>Field Strength:</strong> Measured in Tesla (T) or Gauss</li>\n                                <li><strong>Superposition:</strong> Total field is sum of individual fields</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Charged particles moving in curved paths</li>\n                                <li>Different motion for positive vs negative charges</li>\n                                <li>Circular motion in uniform magnetic fields</li>\n                                <li>Field lines showing magnetic field direction</li>\n                                <li>Force perpendicular to both velocity and field</li>\n                            </ul>\n                            \n                            <h3>Magnetic Field Properties</h3>\n                            <ul>\n                                <li><strong>Direction:</strong> Field lines point from north to south pole</li>\n                                <li><strong>Strength:</strong> Decreases with distance from magnet</li>\n                                <li><strong>Force Direction:</strong> Perpendicular to both velocity and field</li>\n                                <li><strong>No Work:</strong> Magnetic force does no work on charges</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Electric motors and generators</li>\n                                <li>Magnetic resonance imaging (MRI)</li>\n                                <li>Particle accelerators</li>\n                                <li>Magnetic levitation trains</li>\n                                <li>Compass navigation</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'wave-particle-duality':\n                return {\n                    title: 'Wave-Particle Duality - Quantum Mechanics',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Wave-Particle Duality?</h3>\n                            <p>Wave-particle duality is a fundamental concept in quantum mechanics where particles exhibit both wave-like and particle-like properties depending on how we observe them. This challenges our classical understanding of matter.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>De Broglie Wavelength:</strong> λ = h/p (wavelength = Planck's constant/momentum)</li>\n                                <li><strong>Wave Function:</strong> Mathematical description of quantum state</li>\n                                <li><strong>Superposition:</strong> Particles can exist in multiple states simultaneously</li>\n                                <li><strong>Measurement Effect:</strong> Observation affects the system</li>\n                                <li><strong>Interference:</strong> Wave-like behavior in experiments</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Wave-like interference patterns</li>\n                                <li>Particle-like discrete measurements</li>\n                                <li>Superposition of states</li>\n                                <li>Measurement affecting the system</li>\n                                <li>Dual behavior depending on observation method</li>\n                            </ul>\n                            \n                            <h3>Quantum Phenomena</h3>\n                            <ul>\n                                <li><strong>Double-Slit Experiment:</strong> Shows both wave and particle behavior</li>\n                                <li><strong>Uncertainty Principle:</strong> Can't know position and momentum precisely</li>\n                                <li><strong>Quantum Tunneling:</strong> Particles can pass through barriers</li>\n                                <li><strong>Entanglement:</strong> Particles can be correlated across distance</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Electron microscopes</li>\n                                <li>Quantum computing</li>\n                                <li>Quantum cryptography</li>\n                                <li>Semiconductor technology</li>\n                                <li>Quantum sensors</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'nuclear-reactions':\n                return {\n                    title: 'Nuclear Reactions - Fission and Fusion',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Nuclear Reactions?</h3>\n                            <p>Nuclear reactions involve changes in the nucleus of atoms, releasing or absorbing tremendous amounts of energy. Fission (splitting) and fusion (combining) are the two main types of nuclear reactions.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Nuclear Fission:</strong> Heavy nucleus splits into lighter nuclei + energy</li>\n                                <li><strong>Nuclear Fusion:</strong> Light nuclei combine to form heavier nucleus + energy</li>\n                                <li><strong>Mass-Energy Equivalence:</strong> E = mc² (Einstein's equation)</li>\n                                <li><strong>Chain Reaction:</strong> Neutrons from one fission trigger more fissions</li>\n                                <li><strong>Critical Mass:</strong> Minimum mass needed for sustained chain reaction</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Nuclei splitting or combining</li>\n                                <li>Energy release in the form of particles</li>\n                                <li>Neutrons triggering additional reactions</li>\n                                <li>Chain reactions spreading through material</li>\n                                <li>Different reaction rates based on conditions</li>\n                            </ul>\n                            \n                            <h3>Nuclear Processes</h3>\n                            <ul>\n                                <li><strong>Fission:</strong> Uranium-235 + neutron → lighter nuclei + 2-3 neutrons + energy</li>\n                                <li><strong>Fusion:</strong> Hydrogen nuclei → Helium + energy (like in stars)</li>\n                                <li><strong>Radioactive Decay:</strong> Unstable nuclei emit particles</li>\n                                <li><strong>Neutron Capture:</strong> Nuclei absorb neutrons</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Nuclear power plants</li>\n                                <li>Nuclear weapons</li>\n                                <li>Medical radiation therapy</li>\n                                <li>Radioactive dating</li>\n                                <li>Fusion power research</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'fluid-flow':\n                return {\n                    title: 'Fluid Flow - Laminar and Turbulent Dynamics',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Fluid Flow?</h3>\n                            <p>Fluid flow describes how liquids and gases move through space. Understanding flow patterns is crucial for engineering applications, from blood flow in arteries to air flow over airplane wings.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Laminar Flow:</strong> Smooth, parallel streamlines with no mixing between layers</li>\n                                <li><strong>Turbulent Flow:</strong> Chaotic, swirling motion with rapid mixing</li>\n                                <li><strong>Reynolds Number:</strong> Re = ρvL/μ (determines flow type)</li>\n                                <li><strong>Viscosity:</strong> Internal friction that resists flow</li>\n                                <li><strong>Boundary Layer:</strong> Region near surfaces where flow is affected by friction</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Smooth, parallel streamlines in laminar flow</li>\n                                <li>Chaotic, swirling patterns in turbulent flow</li>\n                                <li>Flow separation around obstacles</li>\n                                <li>Velocity changes with viscosity</li>\n                                <li>Reynolds number transitions</li>\n                            </ul>\n                            \n                            <h3>Flow Regimes</h3>\n                            <ul>\n                                <li><strong>Re < 2300:</strong> Laminar flow (smooth, predictable)</li>\n                                <li><strong>2300 < Re < 4000:</strong> Transitional flow (unstable)</li>\n                                <li><strong>Re > 4000:</strong> Turbulent flow (chaotic, mixing)</li>\n                                <li><strong>High Re:</strong> Inertia dominates over viscosity</li>\n                                <li><strong>Low Re:</strong> Viscosity dominates over inertia</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Blood flow in cardiovascular system</li>\n                                <li>Air flow over aircraft wings</li>\n                                <li>Water flow in pipes and channels</li>\n                                <li>Weather patterns and atmospheric flow</li>\n                                <li>Industrial mixing and processing</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'bernoulli':\n                return {\n                    title: \"Bernoulli's Principle - Energy Conservation in Fluids\",\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Bernoulli's Principle?</h3>\n                            <p>Bernoulli's principle states that in a flowing fluid, an increase in velocity is accompanied by a decrease in pressure. This is a consequence of energy conservation in fluid flow.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Bernoulli's Equation:</strong> P + ½ρv² + ρgh = constant</li>\n                                <li><strong>Energy Conservation:</strong> Total energy remains constant along a streamline</li>\n                                <li><strong>Pressure-Velocity Trade-off:</strong> Higher velocity = lower pressure</li>\n                                <li><strong>Continuity Equation:</strong> A₁v₁ = A₂v₂ (mass conservation)</li>\n                                <li><strong>Venturi Effect:</strong> Pressure drop in constricted flow</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Fluid speeding up in narrow sections</li>\n                                <li>Pressure decreasing in constricted areas</li>\n                                <li>Energy conservation maintained</li>\n                                <li>Velocity and pressure inversely related</li>\n                                <li>Flow rate remains constant</li>\n                            </ul>\n                            \n                            <h3>Energy Components</h3>\n                            <ul>\n                                <li><strong>Pressure Energy:</strong> P (work done by pressure)</li>\n                                <li><strong>Kinetic Energy:</strong> ½ρv² (energy of motion)</li>\n                                <li><strong>Potential Energy:</strong> ρgh (gravitational energy)</li>\n                                <li><strong>Total Energy:</strong> Sum remains constant</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Airplane wing lift generation</li>\n                                <li>Carburetor fuel mixing</li>\n                                <li>Venturi meters for flow measurement</li>\n                                <li>Spray bottles and atomizers</li>\n                                <li>Blood flow in arteries</li>\n                            </ul>\n                        </div>\n                    `\n                };\n                        case 'neural-network':\n                return {\n                    title: 'Neural Network Training - Object Recognition',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Neural Networks?</h3>\n                            <p>Neural networks are computational models inspired by biological neurons in the brain. They consist of interconnected nodes (neurons) organized in layers that process information and learn patterns from data. This animation demonstrates how neural networks learn to recognize and classify different geometric objects.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Artificial Neurons:</strong> Mathematical functions that receive inputs, apply weights, and produce outputs. Each neuron computes: output = σ(Σ(inputs × weights) + bias)</li>\n                                <li><strong>Network Architecture:</strong> Input layer (2 neurons) → Hidden layer 1 (4 neurons) → Hidden layer 2 (3 neurons) → Output layer (1 neuron)</li>\n                            </ul>\n                            \n                            <h3>Why This Architecture?</h3>\n                            <ul>\n                                <li><strong>2 Input Neurons:</strong> Perfect for our 2-feature problem (symmetry, edges)</li>\n                                <li><strong>4 Hidden Neurons:</strong> Provides enough capacity to learn non-linear patterns without overfitting</li>\n                                <li><strong>3 Hidden Neurons:</strong> Allows further feature refinement and abstraction</li>\n                                <li><strong>1 Output Neuron:</strong> Binary classification (simple vs complex objects)</li>\n                            </ul>\n                            \n                            <h3>Layer Size Effects</h3>\n                            <ul>\n                                <li><strong>Too Few Neurons:</strong> Network can't learn complex patterns (underfitting)</li>\n                                <li><strong>Too Many Neurons:</strong> Network memorizes training data (overfitting)</li>\n                                <li><strong>Optimal Size:</strong> Balances learning capacity with generalization</li>\n                                <li><strong>Our Choice:</strong> 4→3 hidden layers provide sufficient complexity for this task</li>\n                            </ul>\n                                <li><strong>Weights & Biases:</strong> Numerical values that determine connection strength and neuron activation thresholds</li>\n                                <li><strong>Sigmoid Activation:</strong> σ(x) = 1/(1 + e^(-x)) - transforms any input to a value between 0 and 1</li>\n                                <li><strong>Backpropagation:</strong> Algorithm that calculates how much each weight should change to reduce prediction errors</li>\n                                <li><strong>Learning Rate:</strong> Controls how big weight updates are during training</li>\n                            </ul>\n                            \n                            <h3>Training Process Explained</h3>\n                            <ol>\n                                <li><strong>Forward Propagation:</strong> Input features flow through the network, each neuron computes its output using weights and activation function</li>\n                                <li><strong>Loss Calculation:</strong> Compare network output with target value using Mean Squared Error: Loss = (target - output)²</li>\n                                <li><strong>Backward Propagation:</strong> Calculate error gradients for each weight using chain rule of calculus</li>\n                                <li><strong>Weight Updates:</strong> Adjust weights using gradient descent: Δw = learning_rate × gradient</li>\n                            </ol>\n                            \n                            <h3>Object Recognition Task</h3>\n                            <p>This network learns to classify geometric objects based on their complexity using 2 features:</p>\n                            <ul>\n                                <li><strong>Feature 1 - Symmetry Score (0-1):</strong> How symmetrical the object is (high = simple)</li>\n                                <li><strong>Feature 2 - Edge Complexity (0-1):</strong> How many edges/corners the object has (high = complex)</li>\n                                <li><strong>Simple Objects:</strong> Circle [0.9,0.1], Square [0.8,0.3] → Output: 0 (classified as simple)</li>\n                                <li><strong>Complex Objects:</strong> Triangle [0.6,0.5], Star [0.3,0.9] → Output: 1 (classified as complex)</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li><strong>Training Mode:</strong> Watch data flow forward (blue particles), errors flow backward (red particles), and weights update (flashing connections)</li>\n                                <li><strong>Testing Mode:</strong> See how the trained network processes new inputs and makes predictions with confidence scores</li>\n                                <li><strong>Visual Indicators:</strong> Active neurons pulse, weight changes are highlighted, and prediction accuracy improves over time</li>\n                                <li><strong>Object Context:</strong> Each training example shows the actual geometric object being learned</li>\n                            </ul>\n                            \n                            <h3>Mathematical Foundation</h3>\n                            <ul>\n                                <li><strong>Neuron Output:</strong> y = σ(w₁x₁ + w₂x₂ + ... + wₙxₙ + b)</li>\n                                <li><strong>Loss Function:</strong> L = (y_target - y_predicted)²</li>\n                                <li><strong>Weight Update:</strong> w_new = w_old - α × ∂L/∂w</li>\n                                <li><strong>Gradient Calculation:</strong> ∂L/∂w = ∂L/∂y × ∂y/∂w (chain rule)</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li><strong>Computer Vision:</strong> Image classification, object detection, facial recognition</li>\n                                <li><strong>Natural Language Processing:</strong> Text classification, language translation, chatbots</li>\n                                <li><strong>Speech Recognition:</strong> Voice assistants, transcription services</li>\n                                <li><strong>Autonomous Systems:</strong> Self-driving cars, robotics, drones</li>\n                                <li><strong>Medical Diagnosis:</strong> Disease detection, medical image analysis</li>\n                                <li><strong>Financial Analysis:</strong> Fraud detection, stock prediction, risk assessment</li>\n                            </ul>\n                            \n                            <h3>Educational Insights</h3>\n                            <ul>\n                                <li><strong>Learning Process:</strong> Neural networks learn by adjusting weights to minimize prediction errors</li>\n                                <li><strong>Feature Learning:</strong> Hidden layers automatically learn useful features from raw input data</li>\n                                <li><strong>Generalization:</strong> Well-trained networks can make accurate predictions on unseen data</li>\n                                <li><strong>Overfitting:</strong> Networks can memorize training data instead of learning general patterns</li>\n                                <li><strong>Hyperparameters:</strong> Learning rate, network architecture, and activation functions affect training success</li>\n                            </ul>\n                            \n                            <h3>Interactive Features</h3>\n                            <ul>\n                                <li><strong>Training Mode:</strong> Watch the network learn through forward/backward propagation cycles</li>\n                                <li><strong>Testing Mode:</strong> Test the trained network on different objects and see predictions</li>\n                                <li><strong>Parameter Control:</strong> Adjust learning rate and animation speed to observe different training behaviors</li>\n                                <li><strong>Visual Feedback:</strong> See real-time loss, accuracy, and confidence metrics</li>\n                            </ul>\n                            \n                            <h3>Advanced Concepts</h3>\n                            <ul>\n                                <li><strong>Gradient Descent:</strong> Optimization algorithm that finds the best weights by following the steepest descent</li>\n                                <li><strong>Vanishing Gradients:</strong> Problem where gradients become very small in deep networks</li>\n                                <li><strong>Regularization:</strong> Techniques to prevent overfitting (dropout, weight decay)</li>\n                                <li><strong>Batch Processing:</strong> Training on multiple examples simultaneously for better gradient estimates</li>\n                                <li><strong>Transfer Learning:</strong> Using pre-trained networks for new tasks</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'sound-waves':\n                return {\n                    title: 'Sound Waves - Wave Propagation in Air',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Sound Waves?</h3>\n                            <p>Sound waves are longitudinal mechanical waves that travel through a medium (like air, water, or solids) by compressing and rarefying the particles of the medium. These waves carry energy and information, allowing us to hear sounds.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Longitudinal Waves:</strong> Particles oscillate parallel to wave direction (compression and rarefaction)</li>\n                                <li><strong>Transverse Waves:</strong> Particles oscillate perpendicular to wave direction (like guitar strings)</li>\n                                <li><strong>Wave Properties:</strong> Frequency (pitch), amplitude (loudness), wavelength, and speed</li>\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\n                                <li><strong>Pressure Variations:</strong> High pressure (compression) and low pressure (rarefaction) zones</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li><strong>Transverse Mode:</strong> Particles moving up and down like a guitar string</li>\n                                <li><strong>Longitudinal Mode:</strong> Particles moving back and forth in the direction of wave travel</li>\n                                <li><strong>Pressure Zones:</strong> Red areas (compression) and blue areas (rarefaction) in longitudinal waves</li>\n                                <li><strong>Wave Speed:</strong> How fast the wave pattern travels through the medium</li>\n                                <li><strong>Frequency Effect:</strong> Higher frequency = shorter wavelength = higher pitch</li>\n                            </ul>\n                            \n                            <h3>Wave Characteristics</h3>\n                            <ul>\n                                <li><strong>Frequency (f):</strong> Number of complete cycles per second (Hz) - determines pitch</li>\n                                <li><strong>Amplitude (A):</strong> Maximum displacement from equilibrium - determines loudness</li>\n                                <li><strong>Wavelength (λ):</strong> Distance between consecutive identical points</li>\n                                <li><strong>Wave Speed (v):</strong> How fast the wave travels through the medium</li>\n                                <li><strong>Period (T):</strong> Time for one complete cycle (T = 1/f)</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Musical instruments (guitar strings, air columns)</li>\n                                <li>Human speech and hearing</li>\n                <li>Ultrasound imaging in medicine</li>\n                                <li>Sonar for underwater detection</li>\n                                <li>Acoustic engineering and sound design</li>\n                                <li>Earthquake detection (seismic waves)</li>\n                            </ul>\n                            \n                            <h3>Mathematical Relationships</h3>\n                            <ul>\n                                <li><strong>Wave Equation:</strong> v = fλ (speed = frequency × wavelength)</li>\n                                <li><strong>Period and Frequency:</strong> T = 1/f (period = 1/frequency)</li>\n                                <li><strong>Energy:</strong> E ∝ A²f² (energy proportional to amplitude² × frequency²)</li>\n                                <li><strong>Intensity:</strong> I ∝ A² (intensity proportional to amplitude squared)</li>\n                            </ul>\n                            \n                            <h3>Wave Types Comparison</h3>\n                            <ul>\n                                <li><strong>Transverse Waves:</strong> Guitar strings, water waves, light waves</li>\n                                <li><strong>Longitudinal Waves:</strong> Sound waves in air, seismic P-waves</li>\n                                <li><strong>Combined Waves:</strong> Complex wave patterns with both components</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'neural-network':\n                return {\n                    title: 'Neural Network Training - Object Recognition',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What are Neural Networks?</h3>\n                            <p>Neural networks are computational models inspired by biological neurons in the brain. They consist of interconnected nodes (neurons) organized in layers that process information and learn patterns from data. This animation demonstrates how neural networks learn to recognize and classify different geometric objects.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Artificial Neurons:</strong> Mathematical functions that receive inputs, apply weights, and produce outputs. Each neuron computes: output = σ(Σ(inputs × weights) + bias)</li>\n                                <li><strong>Network Architecture:</strong> Input layer (2 neurons) → Hidden layer 1 (4 neurons) → Hidden layer 2 (3 neurons) → Output layer (1 neuron)</li>\n                            </ul>\n                            \n                            <h3>Why This Architecture?</h3>\n                            <ul>\n                                <li><strong>2 Input Neurons:</strong> Perfect for our 2-feature problem (symmetry, edges)</li>\n                                <li><strong>4 Hidden Neurons:</strong> Provides enough capacity to learn non-linear patterns without overfitting</li>\n                                <li><strong>3 Hidden Neurons:</strong> Allows further feature refinement and abstraction</li>\n                                <li><strong>1 Output Neuron:</strong> Binary classification (simple vs complex objects)</li>\n                            </ul>\n                            \n                            <h3>Layer Size Effects</h3>\n                            <ul>\n                                <li><strong>Too Few Neurons:</strong> Network can't learn complex patterns (underfitting)</li>\n                                <li><strong>Too Many Neurons:</strong> Network memorizes training data (overfitting)</li>\n                                <li><strong>Optimal Size:</strong> Balances learning capacity with generalization</li>\n                                <li><strong>Our Choice:</strong> 4→3 hidden layers provide sufficient complexity for this task</li>\n                            </ul>\n                                <li><strong>Weights & Biases:</strong> Numerical values that determine connection strength and neuron activation thresholds</li>\n                                <li><strong>Sigmoid Activation:</strong> σ(x) = 1/(1 + e^(-x)) - transforms any input to a value between 0 and 1</li>\n                                <li><strong>Backpropagation:</strong> Algorithm that calculates how much each weight should change to reduce prediction errors</li>\n                                <li><strong>Learning Rate:</strong> Controls how big weight updates are during training</li>\n                            </ul>\n                            \n                            <h3>Training Process Explained</h3>\n                            <ol>\n                                <li><strong>Forward Propagation:</strong> Input features flow through the network, each neuron computes its output using weights and activation function</li>\n                                <li><strong>Loss Calculation:</strong> Compare network output with target value using Mean Squared Error: Loss = (target - output)²</li>\n                                <li><strong>Backward Propagation:</strong> Calculate error gradients for each weight using chain rule of calculus</li>\n                                <li><strong>Weight Updates:</strong> Adjust weights using gradient descent: Δw = learning_rate × gradient</li>\n                            </ol>\n                            \n                            <h3>Object Recognition Task</h3>\n                            <p>This network learns to classify geometric objects based on their complexity using 2 features:</p>\n                            <ul>\n                                <li><strong>Feature 1 - Symmetry Score (0-1):</strong> How symmetrical the object is (high = simple)</li>\n                                <li><strong>Feature 2 - Edge Complexity (0-1):</strong> How many edges/corners the object has (high = complex)</li>\n                                <li><strong>Simple Objects:</strong> Circle [0.9,0.1], Square [0.8,0.3] → Output: 0 (classified as simple)</li>\n                                <li><strong>Complex Objects:</strong> Triangle [0.6,0.5], Star [0.3,0.9] → Output: 1 (classified as complex)</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li><strong>Training Mode:</strong> Watch data flow forward (blue particles), errors flow backward (red particles), and weights update (flashing connections)</li>\n                                <li><strong>Testing Mode:</strong> See how the trained network processes new inputs and makes predictions with confidence scores</li>\n                                <li><strong>Visual Indicators:</strong> Active neurons pulse, weight changes are highlighted, and prediction accuracy improves over time</li>\n                                <li><strong>Object Context:</strong> Each training example shows the actual geometric object being learned</li>\n                            </ul>\n                            \n                            <h3>Mathematical Foundation</h3>\n                            <ul>\n                                <li><strong>Neuron Output:</strong> y = σ(w₁x₁ + w₂x₂ + ... + wₙxₙ + b)</li>\n                                <li><strong>Loss Function:</strong> L = (y_target - y_predicted)²</li>\n                                <li><strong>Weight Update:</strong> w_new = w_old - α × ∂L/∂w</li>\n                                <li><strong>Gradient Calculation:</strong> ∂L/∂w = ∂L/∂y × ∂y/∂w (chain rule)</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li><strong>Computer Vision:</strong> Image classification, object detection, facial recognition</li>\n                                <li><strong>Natural Language Processing:</strong> Text classification, language translation, chatbots</li>\n                                <li><strong>Speech Recognition:</strong> Voice assistants, transcription services</li>\n                                <li><strong>Autonomous Systems:</strong> Self-driving cars, robotics, drones</li>\n                                <li><strong>Medical Diagnosis:</strong> Disease detection, medical image analysis</li>\n                                <li><strong>Financial Analysis:</strong> Fraud detection, stock prediction, risk assessment</li>\n                            </ul>\n                            \n                            <h3>Educational Insights</h3>\n                            <ul>\n                                <li><strong>Learning Process:</strong> Neural networks learn by adjusting weights to minimize prediction errors</li>\n                                <li><strong>Feature Learning:</strong> Hidden layers automatically learn useful features from raw input data</li>\n                                <li><strong>Generalization:</strong> Well-trained networks can make accurate predictions on unseen data</li>\n                                <li><strong>Overfitting:</strong> Networks can memorize training data instead of learning general patterns</li>\n                                <li><strong>Hyperparameters:</strong> Learning rate, network architecture, and activation functions affect training success</li>\n                            </ul>\n                            \n                            <h3>Interactive Features</h3>\n                            <ul>\n                                <li><strong>Training Mode:</strong> Watch the network learn through forward/backward propagation cycles</li>\n                                <li><strong>Testing Mode:</strong> Test the trained network on different objects and see predictions</li>\n                                <li><strong>Parameter Control:</strong> Adjust learning rate and animation speed to observe different training behaviors</li>\n                                <li><strong>Visual Feedback:</strong> See real-time loss, accuracy, and confidence metrics</li>\n                            </ul>\n                            \n                            <h3>Advanced Concepts</h3>\n                            <ul>\n                                <li><strong>Gradient Descent:</strong> Optimization algorithm that finds the best weights by following the steepest descent</li>\n                                <li><strong>Vanishing Gradients:</strong> Problem where gradients become very small in deep networks</li>\n                                <li><strong>Regularization:</strong> Techniques to prevent overfitting (dropout, weight decay)</li>\n                                <li><strong>Batch Processing:</strong> Training on multiple examples simultaneously for better gradient estimates</li>\n                                <li><strong>Transfer Learning:</strong> Using pre-trained networks for new tasks</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            case 'memory-management':\n                return {\n                    title: 'Memory Management - Data Retention and Decay',\n                    html: `\n                        <div class=\"science-content\">\n                            <h3>What is Memory Management?</h3>\n                            <p>Memory management is the process of allocating and deallocating memory resources efficiently. In computer systems, this involves managing the use of RAM, hard disk space, and other storage devices. The goal is to ensure that programs have access to the necessary resources when they need them, while also freeing up space for new programs or data.</p>\n                            \n                            <h3>Key Scientific Concepts</h3>\n                            <ul>\n                                <li><strong>Data Retention:</strong> The ability of a system to maintain data in memory for a long period of time</li>\n                                <li><strong>Data Decay:</strong> The gradual loss of data over time due to various factors such as hardware wear, software updates, or user activity</li>\n                                <li><strong>Memory Allocation:</strong> The process of assigning memory to programs or data as needed</li>\n                                <li><strong>Memory Deallocation:</strong> The process of freeing up memory that is no longer needed</li>\n                                <li><strong>Fragmentation:</strong> The phenomenon where free memory becomes fragmented and unusable</li>\n                            </ul>\n                            \n                            <h3>What You Should Observe</h3>\n                            <ul>\n                                <li>Programs using more memory as they run</li>\n                                <li>Programs being closed and reopened multiple times</li>\n                                <li>Programs experiencing slower performance over time</li>\n                                <li>Programs being terminated and restarted</li>\n                                <li>Programs being swapped out and swapped in</li>\n                            </ul>\n                            \n                            <h3>Real-World Applications</h3>\n                            <ul>\n                                <li>Operating systems</li>\n                                <li>Database management systems</li>\n                                <li>Virtual memory systems</li>\n                                <li>Web browsers and cache management</li>\n                                <li>Software development and debugging</li>\n                            </ul>\n                        </div>\n                    `\n                };\n            default:\n                return {\n                    title: 'Animation Information',\n                    html: '<p>Select an animation to learn more about the physics concepts it demonstrates.</p>'\n                };\n        }\n    }\n    \n    updateMemoryManagementStats() {\n        if (!this.memoryManagement) return;\n        const stats = this.memoryManagement.getStats();\n        const buildingsElement = document.getElementById('memoryBuildings');\n        const allocatedElement = document.getElementById('memoryAllocated');\n        const gcCyclesElement = document.getElementById('memoryGCCycles');\n        const efficiencyElement = document.getElementById('memoryEfficiency');\n        \n        if (buildingsElement) buildingsElement.textContent = stats.totalHeapUsed || 0;\n        if (allocatedElement) allocatedElement.textContent = stats.totalHeapUsed || 0;\n        if (gcCyclesElement) gcCyclesElement.textContent = stats.gcCycles || 0;\n        if (efficiencyElement) {\n            const efficiency = stats.fragmentation ? (100 - stats.fragmentation) : 100;\n            efficiencyElement.textContent = efficiency.toFixed(1) + '%';\n        }\n    }\n}\n","import { ScientificAnimations } from './animations.js';\r\n\r\n// Initialize the application when the page loads\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const canvas = document.getElementById('animationCanvas');\r\n    new ScientificAnimations(canvas);\r\n    \r\n    // Initialize controls panel toggle\r\n    initializeControlsToggle();\r\n});\r\n\r\n// Controls panel toggle functionality\r\nfunction initializeControlsToggle() {\r\n    const controlsPanel = document.querySelector('.controls-panel');\r\n    const toggleButton = document.querySelector('.controls-toggle');\r\n    \r\n    if (!controlsPanel || !toggleButton) return;\r\n    \r\n    // Check if user has a preference stored\r\n    const isCollapsed = localStorage.getItem('controlsCollapsed') === 'true';\r\n    const toggleText = toggleButton.querySelector('.toggle-text');\r\n    \r\n    if (isCollapsed) {\r\n        controlsPanel.classList.add('collapsed');\r\n        if (toggleText) toggleText.textContent = 'Settings';\r\n    } else {\r\n        if (toggleText) toggleText.textContent = 'Hide';\r\n    }\r\n    \r\n    toggleButton.addEventListener('click', () => {\r\n        const isCurrentlyCollapsed = controlsPanel.classList.contains('collapsed');\r\n        const toggleText = toggleButton.querySelector('.toggle-text');\r\n        \r\n        if (isCurrentlyCollapsed) {\r\n            // Expand the panel\r\n            controlsPanel.classList.remove('collapsed');\r\n            localStorage.setItem('controlsCollapsed', 'false');\r\n            if (toggleText) toggleText.textContent = 'Hide';\r\n        } else {\r\n            // Collapse the panel\r\n            controlsPanel.classList.add('collapsed');\r\n            localStorage.setItem('controlsCollapsed', 'true');\r\n            if (toggleText) toggleText.textContent = 'Settings';\r\n        }\r\n    });\r\n    \r\n    // Add keyboard shortcut (Ctrl/Cmd + T)\r\n    document.addEventListener('keydown', (e) => {\r\n        if ((e.ctrlKey || e.metaKey) && e.key === 't') {\r\n            e.preventDefault();\r\n            toggleButton.click();\r\n        }\r\n    });\r\n} "],"names":["BrownianMotion","ctx","i","vx","vy","velocity","count","speed","temp","show","p","size","deltaTime","dt","particle","index","oldX","oldY","j","other","dx","dy","distance","tempVx","tempVy","overlap","moveX","moveY","totalDistance","sum","normalizedVelocity","t","cols","rows","centerX","centerY","localTemp","particleCount","alpha","graphX","graphY","histogram","maxVelocity","binIndex","maxCount","barWidth","barHeight","avgSpeed","Diffusion","startRegion","gridSize","x","rate","gradient","gridX","gridY","concentrationDiff","_a","_b","profileY","profileWidth","bins","binWidth","concentrationProfile","maxConcentration","scale","y","leftParticles","rightParticles","concentrationSpread","GasLaws","speedFactor","vol","pressure","law","currentPressure","particleDensity","calculatedPressure","pressureDiff","boyleConstant","charlesConstant","gayLussacConstant","combinedConstant","canvasWidth","panelX","panelY","panelWidth","panelHeight","lawNames","pressureValue","angle","localPressure","maxPressure","minPressure","maxVolume","minVolume","maxTemp","minTemp","xLabel","yLabel","Pendulum","length","gravity","damping","mass","acceleration","velocityMagnitude","airResistanceForce","dampingAcceleration","period","kineticEnergy","potentialEnergy","bobX","bobY","totalEnergy","energyRatio","bobColor","gravityLength","tensionLength","tensionX","tensionY","tensionMagnitude","unitX","unitY","velocityX","velocityY","airResistanceLength","unitVX","unitVY","scaledVX","scaledVY","kineticRatio","potentialRatio","plotX","plotY","angles","velocities","minAngle","maxAngle","minVel","maxVel","avgPeriod","theoreticalPeriod","OrbitalMotion","r","eccentricity","axis","normalizedVX","normalizedVY","arrowLength","perigeeX","perigeeY","apogeeAngle","apogeeX","apogeeY","textX","startY","currentDistance","currentSpeed","CollisionPhysics","restitution","type","canvasHeight","positions","pos","spacing","startX","effect","ball","ball1","ball2","nx","ny","dvx","dvy","relativeVelocity","effectiveRestitution","impulse","separationX","separationY","preCollisionEnergy","radius","ringRadius","ringAlpha","sparkleX","sparkleY","colors","baseColor","labelX","labelY","totalMomentum","momentum","energy","FrictionInclinedPlanes","coefficient","angleRad","inclineLength","endY","maxEndY","verticalOffset","adjustedStartY","weight","normalForce","parallelForce","frictionForce","netForce","endX","adjustedEndY","objectSize","surfaceColor","textureColor","surfaceGradient","objectGradient","drawArrow","fromX","fromY","color","label","len","normDX","normDY","arrowLen","frictionDir","frictionMagnitude","WavePropagation","speedSlider","frequencySlider","amplitudeSlider","waveTypeSelect","analyticsCheckbox","freq","amp","wavelength","speedMultiplier","phase","timePhase","displacement","longitudinalAmplitude","wave1","wave2","numPoints","particleIndex","lowIndex","highIndex","fraction","lowY","highY","springRadius","totalLength","waveDisplacement","coilOffset","waveSpeed","arrowX","waveTypeLabel","velocityRatio","g","b","particleSize","barX","barY","maxEnergy","energyWidth","energyGradient","SoundWaves","e","rect","active","pulse","waveActive","pulsePhase","waveProgress","elapsed","pulseDuration","waveSpeedScale","waveTravelDistance","wavePacketWidth","wavePacketStart","wavePacketEnd","particlePositionInPacket","particleX","amplitudeDisplacement","intensity","wavePosition","zoneHeight","zoneY","relativeX","visualSpeed","ElectricFields","strength","charge","ex","ey","k","force","sign","field","magnitude","point","particleGradient","arrowGradient","panelGradient","MagneticFields","magnet","Bx","By","fieldStrength","forceX","forceY","DiodeTransistor","bias","voltage","voltageDrop","baseCurrent","beta","spark","time","waveRadius","waveAlpha","glowColor","labelGlow","isForward","isReverse","glow","pulseEffect","glowIntensity","symbolColor","leadLength","baseCurrentColor","typeColor","text","biasType","biasText","biasColor","x1","x2","y1","y2","dash","electron","hole","baseVoltageEffect","bulbGlow","bulbColor","filamentPulse","trailPoint","dashOffset","arrowOffset","arrowGlow","pulseIntensity","particleProgress","particleY","WaveParticleDuality","mode","wave","screenHeight","slit1X","slit2X","slitY","screenX","screenY","distance1","distance2","pathDifference","phaseDifference","amplitude1","amplitude2","totalAmplitude","distanceFromSlit1","distanceFromSlit2","activePulse","started","timeOffset","animatedIntensity","dotSize","arrowPulse","lineHeight","NuclearReactions","row","col","neutron","nucleus","additionalNeutrons","product","randomAngle","neutronCount","energyParticleCount","life","hNucleus","closestNucleus","closestDistance","elementSymbol","nucleonCount","FluidFlow","canvas","visc","re","flowVelocity","turbulence","obstacle","maxVariation","isMouseAffected","hue","saturation","lightness","nextX","nextY","opacity","lineWidth","blue","red","green","firstPoint","flowColor","avgVelocity","Bernoulli","width","density","leftGradient","middleGradient","rightGradient","trailColor","NeuralNetwork","totalNetworkWidth","networkCenterY","layerIndex","layerNeurons","layerSize","neuronIndex","preTrainedWeights","preTrainedBiases","currentLayerSize","nextLayerSize","layerWeights","neuronWeights","layerBiases","auto","currentData","rawWeights","rawBiases","layer","w","trainingEpochs","originalLearningRate","epoch","dataIndex","data","inputs","currentLayer","nextLayer","targets","outputLayer","error","biasChange","weightChange","loss","correct","fromNeuron","toNeuron","value","isError","testing","objectType","predicted","confidence","isCorrect","previousLayer","neuron","output","expectedOutput","distanceFromTarget","weightAbs","weightUpdateEffect","pulseSize","delta","phaseX","phaseY","phaseText","phaseColor","phaseDescription","progressBarX","progressBarY","progressBarWidth","progressBarHeight","progress","detailsX","detailsY","objects","objX","objY","clickRadius","objectY","objType","outerRadius","innerRadius","infoY","object","buttonSize","isTrainingComplete","isSelected","height","lossData","accuracyData","maxLoss","minLoss","maxAcc","minAcc","chartX","normalizedLoss","chartY","normalizedAcc","totalTests","correctTests","accuracy","recentResults","resultY","result","status","currentTrainingObject","progressWidth","progressHeight","progressX","progressY","MemoryManagement","currentFunc","line","match","funcName","functionIndex","f","varName","altMatch1","altMatch2","address","caller","callingLine","varMatch","returnAddress","bestBlock","freeBlockIndex","block","heapWidth","heapHeight","sizeRatio","blockWidth","blockHeight","newBlock","position","blockIndex","operation","heapArea","overlaps","existingBlock","maxAttempts","attempt","block1","block2","totalHeapSize","usedSpace","total","freeSpace","fragmentedBlocks","lastBlock","freeBlock","sortedBlocks","a","currentAddress","gapSize","gapWidth","gapHeight","totalFreeSize","largestFreeBlock","fragmentation","unreachableBlocks","access","highlight","connection","frag","hexSize","offset","px","py","radialGradient","frame","func","currentY","blockGradient","innerGradient","fontSize","sizeFontSize","addrFontSize","freeGradient","startIndex","current","next","midX","midY","usageX","usageY","usageWidth","usageHeight","usagePercent","barGradient","layoutY","layoutHeight","layoutX","layoutWidth","segmentX","segmentWidth","fragBlock","fragX","fragWidth","statsX","statsY","efficiency","efficiencyColor","action","ScientificAnimations","header","categoryItem","sideNav","mainContent","item","firstAnimation","animation","subItem","navToggleBtn","mobileNavToggle","waveTypeElement","waveShowAnalyticsElement","soundWaveTypeSelect","chargeType","sx","sy","touch","showAnalytics","initialMode","componentTypeSelect","biasTypeSelect","showOutputCheckbox","neuralMode","isTesting","sliderId","valueId","callback","slider","valueDisplay","unit","performMeasurementBtn","diffusion","gasLaws","pendulum","category","btn","categoryBtn","group","animationGroup","animationType","activeItem","panel","controlPanel","infoPanel","particlesSlider","animationSpeedSlider","availableWidth","maxWidth","currentTime","stats","collisionElement","meanFreePathElement","temperatureElement","airResistanceElement","dampingElement","modeElement","energyElement","wavelengthElement","waveFunctionElement","interferenceElement","measurementElement","timeElement","flowRateElement","viscosityElement","reynoldsElement","flowTypeElement","avgVelocityElement","pipeWidthElement","densityElement","pressureElement","velocityRatioElement","frequencyElement","waveSpeedElement","amplitudeElement","particleCountElement","componentTypeElement","biasTypeElement","inputVoltageElement","baseVoltageElement","currentElement","powerElement","statusElement","baseVoltageStat","epochElement","lossElement","accuracyElement","learningRateElement","speedElement","phaseElement","dataIndexElement","modal","modalTitle","modalContent","content","state","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_A","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_U","_V","_W","_X","_Y","_Z","__","_$","_aa","buildingsElement","allocatedElement","gcCyclesElement","efficiencyElement","initializeControlsToggle","controlsPanel","toggleButton","isCollapsed","toggleText","isCurrentlyCollapsed"],"mappings":"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"}